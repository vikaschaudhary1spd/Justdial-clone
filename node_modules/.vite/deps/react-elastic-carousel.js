import {
  styled_components_browser_esm_default
} from "./chunk-L4BWY2QW.js";
import {
  require_prop_types
} from "./chunk-KTGNQW3F.js";
import "./chunk-L6OZ5BAR.js";
import {
  require_react
} from "./chunk-SBR4UJAD.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/classnames/index.js
var require_classnames = __commonJS({
  "node_modules/classnames/index.js"(exports, module) {
    (function() {
      "use strict";
      var hasOwn = {}.hasOwnProperty;
      function classNames() {
        var classes = [];
        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;
          var argType = typeof arg;
          if (argType === "string" || argType === "number") {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === "object") {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }
        return classes.join(" ");
      }
      if (typeof module !== "undefined" && module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
        define("classnames", [], function() {
          return classNames;
        });
      } else {
        window.classNames = classNames;
      }
    })();
  }
});

// node_modules/react-elastic-carousel/dist/index.es.js
var import_prop_types3 = __toESM(require_prop_types());
var import_react3 = __toESM(require_react());

// node_modules/react-elastic-carousel/node_modules/react-swipeable/es/index.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
var defaultProps = {
  preventDefaultTouchmoveEvent: false,
  delta: 10,
  rotationAngle: 0,
  trackMouse: false,
  trackTouch: true
};
var initialState = {
  xy: [0, 0],
  swiping: false,
  eventData: void 0,
  start: void 0
};
var LEFT = "Left";
var RIGHT = "Right";
var UP = "Up";
var DOWN = "Down";
var touchStart = "touchstart";
var touchMove = "touchmove";
var touchEnd = "touchend";
var mouseMove = "mousemove";
var mouseUp = "mouseup";
function getDirection(absX, absY, deltaX, deltaY) {
  if (absX > absY) {
    if (deltaX > 0) {
      return LEFT;
    }
    return RIGHT;
  } else if (deltaY > 0) {
    return UP;
  }
  return DOWN;
}
function rotateXYByAngle(pos, angle) {
  if (angle === 0) return pos;
  var angleInRadians = Math.PI / 180 * angle;
  var x = pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);
  var y = pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);
  return [x, y];
}
function getHandlers(set, handlerProps) {
  var onStart = function onStart2(event) {
    if (event.touches && event.touches.length > 1) return;
    set(function(state, props) {
      if (props.trackMouse) {
        document.addEventListener(mouseMove, onMove);
        document.addEventListener(mouseUp, onUp);
      }
      var _ref = event.touches ? event.touches[0] : event, clientX = _ref.clientX, clientY = _ref.clientY;
      var xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);
      return _extends({}, state, initialState, {
        eventData: {
          initial: [].concat(xy),
          first: true
        },
        xy,
        start: event.timeStamp || 0
      });
    });
  };
  var onMove = function onMove2(event) {
    set(function(state, props) {
      if (!state.xy[0] || !state.xy[1] || event.touches && event.touches.length > 1) {
        return state;
      }
      var _ref2 = event.touches ? event.touches[0] : event, clientX = _ref2.clientX, clientY = _ref2.clientY;
      var _rotateXYByAngle = rotateXYByAngle([clientX, clientY], props.rotationAngle), x = _rotateXYByAngle[0], y = _rotateXYByAngle[1];
      var deltaX = state.xy[0] - x;
      var deltaY = state.xy[1] - y;
      var absX = Math.abs(deltaX);
      var absY = Math.abs(deltaY);
      var time = (event.timeStamp || 0) - state.start;
      var velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);
      if (absX < props.delta && absY < props.delta && !state.swiping) return state;
      var dir = getDirection(absX, absY, deltaX, deltaY);
      var eventData = _extends({}, state.eventData, {
        event,
        absX,
        absY,
        deltaX,
        deltaY,
        velocity,
        dir
      });
      props.onSwiping && props.onSwiping(eventData);
      var cancelablePageSwipe = false;
      if (props.onSwiping || props.onSwiped || props["onSwiped" + dir]) {
        cancelablePageSwipe = true;
      }
      if (cancelablePageSwipe && props.preventDefaultTouchmoveEvent && props.trackTouch && event.cancelable) event.preventDefault();
      return _extends({}, state, {
        eventData: _extends({}, eventData, {
          first: false
        }),
        swiping: true
      });
    });
  };
  var onEnd = function onEnd2(event) {
    set(function(state, props) {
      var eventData;
      if (state.swiping) {
        eventData = _extends({}, state.eventData, {
          event
        });
        props.onSwiped && props.onSwiped(eventData);
        props["onSwiped" + eventData.dir] && props["onSwiped" + eventData.dir](eventData);
      }
      return _extends({}, state, initialState, {
        eventData
      });
    });
  };
  var cleanUpMouse = function cleanUpMouse2() {
    document.removeEventListener(mouseMove, onMove);
    document.removeEventListener(mouseUp, onUp);
  };
  var onUp = function onUp2(e) {
    cleanUpMouse();
    onEnd(e);
  };
  var attachTouch = function attachTouch2(el) {
    if (el && el.addEventListener) {
      var tls = [[touchStart, onStart], [touchMove, onMove], [touchEnd, onEnd]];
      tls.forEach(function(_ref3) {
        var e = _ref3[0], h = _ref3[1];
        return el.addEventListener(e, h);
      });
      return function() {
        return tls.forEach(function(_ref4) {
          var e = _ref4[0], h = _ref4[1];
          return el.removeEventListener(e, h);
        });
      };
    }
  };
  var onRef = function onRef2(el) {
    if (el === null) return;
    set(function(state, props) {
      if (state.el === el) return state;
      var addState = {};
      if (state.el && state.el !== el && state.cleanUpTouch) {
        state.cleanUpTouch();
        addState.cleanUpTouch = null;
      }
      if (props.trackTouch && el) {
        addState.cleanUpTouch = attachTouch(el);
      }
      return _extends({}, state, {
        el
      }, addState);
    });
  };
  var output = {
    ref: onRef
    // if track mouse attach mouse down listener
  };
  if (handlerProps.trackMouse) {
    output.onMouseDown = onStart;
  }
  return [output, attachTouch];
}
function updateTransientState(state, props, attachTouch) {
  var addState = {};
  if (!props.trackTouch && state.cleanUpTouch) {
    state.cleanUpTouch();
    addState.cleanUpTouch = null;
  } else if (props.trackTouch && !state.cleanUpTouch) {
    if (state.el) {
      addState.cleanUpTouch = attachTouch(state.el);
    }
  }
  return _extends({}, state, addState);
}
var Swipeable = function(_React$PureComponent) {
  _inheritsLoose(Swipeable2, _React$PureComponent);
  function Swipeable2(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this._set = function(cb) {
      _this.transientState = cb(_this.transientState, _this.props);
    };
    _this.transientState = _extends({}, initialState, {
      type: "class"
    });
    return _this;
  }
  var _proto = Swipeable2.prototype;
  _proto.render = function render() {
    var _this$props = this.props, className = _this$props.className, style = _this$props.style, _this$props$nodeName = _this$props.nodeName, nodeName = _this$props$nodeName === void 0 ? "div" : _this$props$nodeName, innerRef = _this$props.innerRef, children = _this$props.children, trackMouse = _this$props.trackMouse;
    var _getHandlers = getHandlers(this._set, {
      trackMouse
    }), handlers = _getHandlers[0], attachTouch = _getHandlers[1];
    this.transientState = updateTransientState(this.transientState, this.props, attachTouch);
    var ref = innerRef ? function(el) {
      return innerRef(el), handlers.ref(el);
    } : handlers.ref;
    return import_react.default.createElement(nodeName, _extends({}, handlers, {
      className,
      style,
      ref
    }), children);
  };
  return Swipeable2;
}(import_react.default.PureComponent);
Swipeable.propTypes = {
  onSwiped: import_prop_types.default.func,
  onSwiping: import_prop_types.default.func,
  onSwipedUp: import_prop_types.default.func,
  onSwipedRight: import_prop_types.default.func,
  onSwipedDown: import_prop_types.default.func,
  onSwipedLeft: import_prop_types.default.func,
  delta: import_prop_types.default.number,
  preventDefaultTouchmoveEvent: import_prop_types.default.bool,
  nodeName: import_prop_types.default.string,
  trackMouse: import_prop_types.default.bool,
  trackTouch: import_prop_types.default.bool,
  innerRef: import_prop_types.default.func,
  rotationAngle: import_prop_types.default.number
};
Swipeable.defaultProps = defaultProps;

// node_modules/react-elastic-carousel/dist/index.es.js
var import_classnames = __toESM(require_classnames());

// node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js
var MapShim = function() {
  if (typeof Map !== "undefined") {
    return Map;
  }
  function getIndex(arr, key) {
    var result = -1;
    arr.some(function(entry, index2) {
      if (entry[0] === key) {
        result = index2;
        return true;
      }
      return false;
    });
    return result;
  }
  return function() {
    function anonymous() {
      this.__entries__ = [];
    }
    var prototypeAccessors = { size: { configurable: true } };
    prototypeAccessors.size.get = function() {
      return this.__entries__.length;
    };
    anonymous.prototype.get = function(key) {
      var index2 = getIndex(this.__entries__, key);
      var entry = this.__entries__[index2];
      return entry && entry[1];
    };
    anonymous.prototype.set = function(key, value) {
      var index2 = getIndex(this.__entries__, key);
      if (~index2) {
        this.__entries__[index2][1] = value;
      } else {
        this.__entries__.push([key, value]);
      }
    };
    anonymous.prototype.delete = function(key) {
      var entries = this.__entries__;
      var index2 = getIndex(entries, key);
      if (~index2) {
        entries.splice(index2, 1);
      }
    };
    anonymous.prototype.has = function(key) {
      return !!~getIndex(this.__entries__, key);
    };
    anonymous.prototype.clear = function() {
      this.__entries__.splice(0);
    };
    anonymous.prototype.forEach = function(callback, ctx) {
      var this$1 = this;
      if (ctx === void 0) ctx = null;
      for (var i = 0, list = this$1.__entries__; i < list.length; i += 1) {
        var entry = list[i];
        callback.call(ctx, entry[1], entry[0]);
      }
    };
    Object.defineProperties(anonymous.prototype, prototypeAccessors);
    return anonymous;
  }();
}();
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
var global$1 = function() {
  if (typeof global !== "undefined" && global.Math === Math) {
    return global;
  }
  if (typeof self !== "undefined" && self.Math === Math) {
    return self;
  }
  if (typeof window !== "undefined" && window.Math === Math) {
    return window;
  }
  return Function("return this")();
}();
var requestAnimationFrame$1 = function() {
  if (typeof requestAnimationFrame === "function") {
    return requestAnimationFrame.bind(global$1);
  }
  return function(callback) {
    return setTimeout(function() {
      return callback(Date.now());
    }, 1e3 / 60);
  };
}();
var trailingTimeout = 2;
var throttle = function(callback, delay) {
  var leadingCall = false, trailingCall = false, lastCallTime = 0;
  function resolvePending() {
    if (leadingCall) {
      leadingCall = false;
      callback();
    }
    if (trailingCall) {
      proxy();
    }
  }
  function timeoutCallback() {
    requestAnimationFrame$1(resolvePending);
  }
  function proxy() {
    var timeStamp = Date.now();
    if (leadingCall) {
      if (timeStamp - lastCallTime < trailingTimeout) {
        return;
      }
      trailingCall = true;
    } else {
      leadingCall = true;
      trailingCall = false;
      setTimeout(timeoutCallback, delay);
    }
    lastCallTime = timeStamp;
  }
  return proxy;
};
var REFRESH_DELAY = 20;
var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
var mutationObserverSupported = typeof MutationObserver !== "undefined";
var ResizeObserverController = function() {
  this.connected_ = false;
  this.mutationEventsAdded_ = false;
  this.mutationsObserver_ = null;
  this.observers_ = [];
  this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
  this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
};
ResizeObserverController.prototype.addObserver = function(observer) {
  if (!~this.observers_.indexOf(observer)) {
    this.observers_.push(observer);
  }
  if (!this.connected_) {
    this.connect_();
  }
};
ResizeObserverController.prototype.removeObserver = function(observer) {
  var observers2 = this.observers_;
  var index2 = observers2.indexOf(observer);
  if (~index2) {
    observers2.splice(index2, 1);
  }
  if (!observers2.length && this.connected_) {
    this.disconnect_();
  }
};
ResizeObserverController.prototype.refresh = function() {
  var changesDetected = this.updateObservers_();
  if (changesDetected) {
    this.refresh();
  }
};
ResizeObserverController.prototype.updateObservers_ = function() {
  var activeObservers = this.observers_.filter(function(observer) {
    return observer.gatherActive(), observer.hasActive();
  });
  activeObservers.forEach(function(observer) {
    return observer.broadcastActive();
  });
  return activeObservers.length > 0;
};
ResizeObserverController.prototype.connect_ = function() {
  if (!isBrowser || this.connected_) {
    return;
  }
  document.addEventListener("transitionend", this.onTransitionEnd_);
  window.addEventListener("resize", this.refresh);
  if (mutationObserverSupported) {
    this.mutationsObserver_ = new MutationObserver(this.refresh);
    this.mutationsObserver_.observe(document, {
      attributes: true,
      childList: true,
      characterData: true,
      subtree: true
    });
  } else {
    document.addEventListener("DOMSubtreeModified", this.refresh);
    this.mutationEventsAdded_ = true;
  }
  this.connected_ = true;
};
ResizeObserverController.prototype.disconnect_ = function() {
  if (!isBrowser || !this.connected_) {
    return;
  }
  document.removeEventListener("transitionend", this.onTransitionEnd_);
  window.removeEventListener("resize", this.refresh);
  if (this.mutationsObserver_) {
    this.mutationsObserver_.disconnect();
  }
  if (this.mutationEventsAdded_) {
    document.removeEventListener("DOMSubtreeModified", this.refresh);
  }
  this.mutationsObserver_ = null;
  this.mutationEventsAdded_ = false;
  this.connected_ = false;
};
ResizeObserverController.prototype.onTransitionEnd_ = function(ref) {
  var propertyName = ref.propertyName;
  if (propertyName === void 0) propertyName = "";
  var isReflowProperty = transitionKeys.some(function(key) {
    return !!~propertyName.indexOf(key);
  });
  if (isReflowProperty) {
    this.refresh();
  }
};
ResizeObserverController.getInstance = function() {
  if (!this.instance_) {
    this.instance_ = new ResizeObserverController();
  }
  return this.instance_;
};
ResizeObserverController.instance_ = null;
var defineConfigurable = function(target, props) {
  for (var i = 0, list = Object.keys(props); i < list.length; i += 1) {
    var key = list[i];
    Object.defineProperty(target, key, {
      value: props[key],
      enumerable: false,
      writable: false,
      configurable: true
    });
  }
  return target;
};
var getWindowOf = function(target) {
  var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
  return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
  return parseFloat(value) || 0;
}
function getBordersSize(styles) {
  var positions = [], len = arguments.length - 1;
  while (len-- > 0) positions[len] = arguments[len + 1];
  return positions.reduce(function(size, position) {
    var value = styles["border-" + position + "-width"];
    return size + toFloat(value);
  }, 0);
}
function getPaddings(styles) {
  var positions = ["top", "right", "bottom", "left"];
  var paddings = {};
  for (var i = 0, list = positions; i < list.length; i += 1) {
    var position = list[i];
    var value = styles["padding-" + position];
    paddings[position] = toFloat(value);
  }
  return paddings;
}
function getSVGContentRect(target) {
  var bbox = target.getBBox();
  return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
  var clientWidth = target.clientWidth;
  var clientHeight = target.clientHeight;
  if (!clientWidth && !clientHeight) {
    return emptyRect;
  }
  var styles = getWindowOf(target).getComputedStyle(target);
  var paddings = getPaddings(styles);
  var horizPad = paddings.left + paddings.right;
  var vertPad = paddings.top + paddings.bottom;
  var width = toFloat(styles.width), height = toFloat(styles.height);
  if (styles.boxSizing === "border-box") {
    if (Math.round(width + horizPad) !== clientWidth) {
      width -= getBordersSize(styles, "left", "right") + horizPad;
    }
    if (Math.round(height + vertPad) !== clientHeight) {
      height -= getBordersSize(styles, "top", "bottom") + vertPad;
    }
  }
  if (!isDocumentElement(target)) {
    var vertScrollbar = Math.round(width + horizPad) - clientWidth;
    var horizScrollbar = Math.round(height + vertPad) - clientHeight;
    if (Math.abs(vertScrollbar) !== 1) {
      width -= vertScrollbar;
    }
    if (Math.abs(horizScrollbar) !== 1) {
      height -= horizScrollbar;
    }
  }
  return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
  if (typeof SVGGraphicsElement !== "undefined") {
    return function(target) {
      return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
  }
  return function(target) {
    return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
  };
}();
function isDocumentElement(target) {
  return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
  if (!isBrowser) {
    return emptyRect;
  }
  if (isSVGGraphicsElement(target)) {
    return getSVGContentRect(target);
  }
  return getHTMLElementContentRect(target);
}
function createReadOnlyRect(ref) {
  var x = ref.x;
  var y = ref.y;
  var width = ref.width;
  var height = ref.height;
  var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
  var rect = Object.create(Constr.prototype);
  defineConfigurable(rect, {
    x,
    y,
    width,
    height,
    top: y,
    right: x + width,
    bottom: height + y,
    left: x
  });
  return rect;
}
function createRectInit(x, y, width, height) {
  return { x, y, width, height };
}
var ResizeObservation = function(target) {
  this.broadcastWidth = 0;
  this.broadcastHeight = 0;
  this.contentRect_ = createRectInit(0, 0, 0, 0);
  this.target = target;
};
ResizeObservation.prototype.isActive = function() {
  var rect = getContentRect(this.target);
  this.contentRect_ = rect;
  return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
};
ResizeObservation.prototype.broadcastRect = function() {
  var rect = this.contentRect_;
  this.broadcastWidth = rect.width;
  this.broadcastHeight = rect.height;
  return rect;
};
var ResizeObserverEntry = function(target, rectInit) {
  var contentRect = createReadOnlyRect(rectInit);
  defineConfigurable(this, { target, contentRect });
};
var ResizeObserverSPI = function(callback, controller, callbackCtx) {
  this.activeObservations_ = [];
  this.observations_ = new MapShim();
  if (typeof callback !== "function") {
    throw new TypeError("The callback provided as parameter 1 is not a function.");
  }
  this.callback_ = callback;
  this.controller_ = controller;
  this.callbackCtx_ = callbackCtx;
};
ResizeObserverSPI.prototype.observe = function(target) {
  if (!arguments.length) {
    throw new TypeError("1 argument required, but only 0 present.");
  }
  if (typeof Element === "undefined" || !(Element instanceof Object)) {
    return;
  }
  if (!(target instanceof getWindowOf(target).Element)) {
    throw new TypeError('parameter 1 is not of type "Element".');
  }
  var observations = this.observations_;
  if (observations.has(target)) {
    return;
  }
  observations.set(target, new ResizeObservation(target));
  this.controller_.addObserver(this);
  this.controller_.refresh();
};
ResizeObserverSPI.prototype.unobserve = function(target) {
  if (!arguments.length) {
    throw new TypeError("1 argument required, but only 0 present.");
  }
  if (typeof Element === "undefined" || !(Element instanceof Object)) {
    return;
  }
  if (!(target instanceof getWindowOf(target).Element)) {
    throw new TypeError('parameter 1 is not of type "Element".');
  }
  var observations = this.observations_;
  if (!observations.has(target)) {
    return;
  }
  observations.delete(target);
  if (!observations.size) {
    this.controller_.removeObserver(this);
  }
};
ResizeObserverSPI.prototype.disconnect = function() {
  this.clearActive();
  this.observations_.clear();
  this.controller_.removeObserver(this);
};
ResizeObserverSPI.prototype.gatherActive = function() {
  var this$1 = this;
  this.clearActive();
  this.observations_.forEach(function(observation) {
    if (observation.isActive()) {
      this$1.activeObservations_.push(observation);
    }
  });
};
ResizeObserverSPI.prototype.broadcastActive = function() {
  if (!this.hasActive()) {
    return;
  }
  var ctx = this.callbackCtx_;
  var entries = this.activeObservations_.map(function(observation) {
    return new ResizeObserverEntry(observation.target, observation.broadcastRect());
  });
  this.callback_.call(ctx, entries, ctx);
  this.clearActive();
};
ResizeObserverSPI.prototype.clearActive = function() {
  this.activeObservations_.splice(0);
};
ResizeObserverSPI.prototype.hasActive = function() {
  return this.activeObservations_.length > 0;
};
var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
var ResizeObserver = function(callback) {
  if (!(this instanceof ResizeObserver)) {
    throw new TypeError("Cannot call a class as a function.");
  }
  if (!arguments.length) {
    throw new TypeError("1 argument required, but only 0 present.");
  }
  var controller = ResizeObserverController.getInstance();
  var observer = new ResizeObserverSPI(callback, controller, this);
  observers.set(this, observer);
};
["observe", "unobserve", "disconnect"].forEach(function(method) {
  ResizeObserver.prototype[method] = function() {
    return (ref = observers.get(this))[method].apply(ref, arguments);
    var ref;
  };
});
var index = function() {
  if (typeof global$1.ResizeObserver !== "undefined") {
    return global$1.ResizeObserver;
  }
  return ResizeObserver;
}();
var ResizeObserver_es_default = index;

// node_modules/react-elastic-carousel/node_modules/react-only-when/dist/index.es.js
var import_react2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var classCallCheck = function(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
var createClass = /* @__PURE__ */ function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var _extends2 = Object.assign || function(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};
var inherits = function(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};
var objectWithoutProperties = function(obj, keys) {
  var target = {};
  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }
  return target;
};
var possibleConstructorReturn = function(self2, call) {
  if (!self2) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self2;
};
var Only = function(_Component) {
  inherits(Only2, _Component);
  function Only2() {
    classCallCheck(this, Only2);
    return possibleConstructorReturn(this, (Only2.__proto__ || Object.getPrototypeOf(Only2)).apply(this, arguments));
  }
  createClass(Only2, [{
    key: "render",
    value: function render() {
      var _props = this.props, children = _props.children, when = _props.when, hiddenMode = _props.hiddenMode, className = _props.className;
      var singleChild = import_react2.default.Children.only(children);
      var _singleChild$props = singleChild.props, style = _singleChild$props.style, restOfChildProps = objectWithoutProperties(_singleChild$props, ["style"]);
      var extendedProps = _extends2({}, restOfChildProps);
      var keepNode = hiddenMode && hiddenMode !== "withNull";
      if (keepNode) {
        if (hiddenMode === "withCss") {
          extendedProps.className = extendedProps.className + " " + className;
        } else {
          extendedProps.style = _extends2({}, style, hiddenMode === "withDisplay" && { display: "none" }, hiddenMode === "withVisibility" && { visibility: "hidden" });
        }
      }
      var cloned = import_react2.default.cloneElement(singleChild, extendedProps);
      var toHide = keepNode ? cloned : null;
      return when ? singleChild : toHide;
    }
  }]);
  return Only2;
}(import_react2.Component);
Only.defaultProps = {
  hiddenMode: "withNull",
  className: "r-o_hidden"
};
Only.propTypes = {
  /** A single child element */
  children: import_prop_types2.default.element.isRequired,
  /** When true, children will rendered as is  */
  when: import_prop_types2.default.bool.isRequired,
  /** Determines how "react-only-when" should hide the child element 
   * "withNull": Will not render the child
   * "withDisplay": Will render the child with display:none  
   * "withVisibility": Will render the child with visibility:hidden
   * "withCss": Will render the child with a CSS class (you can pass it a custom className prop)
  */
  hiddenMode: import_prop_types2.default.oneOf(["withNull", "withDisplay", "withVisibility", "withCss"]),
  /** This is working in combination with hiddenMode={"withCss"}   */
  className: import_prop_types2.default.string
};
var index_es_default = Only;

// node_modules/react-elastic-carousel/dist/index.es.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }
  return _assertThisInitialized(self2);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;
  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = o[Symbol.iterator]();
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
var noop = function noop2() {
};
var numberToArray = function numberToArray2(n) {
  return _toConsumableArray(Array(n).keys());
};
var cssPrefix = function cssPrefix2() {
  var prefix = "rec";
  var space = " ";
  var result = "".concat(prefix);
  for (var _len = arguments.length, classNames = new Array(_len), _key = 0; _key < _len; _key++) {
    classNames[_key] = arguments[_key];
  }
  var chainedClasses = classNames.reduce(function(acc, current) {
    if (current) {
      acc += "".concat(space).concat(prefix, "-").concat(current);
    }
    return acc;
  }, "");
  result += chainedClasses;
  return result;
};
var pipe = function pipe2() {
  for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    fns[_key2] = arguments[_key2];
  }
  return function(x) {
    return fns.reduce(function(v, f) {
      return f(v);
    }, x);
  };
};
function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  transition: all 0.3s ease;\n  font-size: 1.6em;\n  background-color: rgba(103, 58, 183, 0.1);\n  color: ", ";\n  box-shadow: 0 0 2px 0px #333;\n  border-radius: 50%;\n  border: none;\n  padding: 0;\n  width: 50px;\n  height: 50px;\n  min-width: 50px;\n  line-height: 50px;\n  align-self: center;\n  cursor: pointer;\n  outline: none;\n  &:hover:enabled,\n  &:focus:enabled {\n    color: #fff;\n    background-color: rgba(103, 58, 183, 1);\n    box-shadow: 0 0 2px 0 #333;\n  }\n  &:disabled {\n    cursor: not-allowed;\n  }\n"]);
  _templateObject = function _templateObject2() {
    return data;
  };
  return data;
}
var Button = styled_components_browser_esm_default.button.attrs(function(_ref) {
  var _ref$type = _ref.type, type = _ref$type === void 0 ? "button" : _ref$type;
  return {
    type
  };
})(_templateObject(), function(props) {
  return props.disabled ? "#999" : "#333";
});
var consts = {
  PREV: "PREV",
  NEXT: "NEXT",
  START: "flex-start",
  CENTER: "center",
  END: "flex-end"
};
function _templateObject$1() {
  var data = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  display: flex;\n  overflow: hidden;\n  user-select: none;\n  justify-content: ", ";\n"]);
  _templateObject$1 = function _templateObject2() {
    return data;
  };
  return data;
}
var ItemWrapper = styled_components_browser_esm_default.div.attrs(function(_ref) {
  var style = _ref.style;
  return {
    style,
    className: cssPrefix("item-wrapper")
  };
})(_templateObject$1(), function(_ref2) {
  var itemPosition = _ref2.itemPosition;
  return itemPosition;
});
ItemWrapper.defaultProps = {
  style: {},
  itemPosition: consts.CENTER
};
ItemWrapper.propTypes = {
  children: import_prop_types3.default.element.isRequired,
  style: import_prop_types3.default.object,
  itemPosition: import_prop_types3.default.oneOf([consts.START, consts.CENTER, consts.END])
};
function _templateObject$2() {
  var data = _taggedTemplateLiteral(["\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n  margin: 0 10px;\n"]);
  _templateObject$2 = function _templateObject2() {
    return data;
  };
  return data;
}
var SliderContainer = styled_components_browser_esm_default.div(_templateObject$2());
function _templateObject$3() {
  var data = _taggedTemplateLiteral(["\n  position: absolute;\n  display: flex;\n  flex-direction: ", ";\n  ", ";\n  ", ";\n"]);
  _templateObject$3 = function _templateObject2() {
    return data;
  };
  return data;
}
var calcLeft = function calcLeft2(_ref) {
  var isRTL = _ref.isRTL, verticalMode = _ref.verticalMode, isSwiping = _ref.isSwiping, swipedSliderPosition = _ref.swipedSliderPosition, sliderPosition = _ref.sliderPosition;
  if (verticalMode || isRTL) {
    return "auto";
  } else {
    return "".concat(isSwiping ? swipedSliderPosition : sliderPosition, "px");
  }
};
var calcRight = function calcRight2(_ref2) {
  var isRTL = _ref2.isRTL, verticalMode = _ref2.verticalMode, isSwiping = _ref2.isSwiping, swipedSliderPosition = _ref2.swipedSliderPosition, sliderPosition = _ref2.sliderPosition;
  if (!verticalMode && isRTL) {
    return "".concat(isSwiping ? swipedSliderPosition : sliderPosition, "px");
  } else {
    return "auto";
  }
};
var calcTop = function calcTop2(_ref3) {
  var verticalMode = _ref3.verticalMode, isSwiping = _ref3.isSwiping, swipedSliderPosition = _ref3.swipedSliderPosition, sliderPosition = _ref3.sliderPosition;
  if (!verticalMode) {
    return "auto";
  } else {
    return "".concat(isSwiping ? swipedSliderPosition : sliderPosition, "px");
  }
};
var calcTransition = function calcTransition2(_ref4) {
  var isSwiping = _ref4.isSwiping, transitionMs = _ref4.transitionMs, easing = _ref4.easing, tiltEasing = _ref4.tiltEasing;
  var duration = isSwiping ? 0 : transitionMs;
  var effectiveEasing = isSwiping ? tiltEasing : easing;
  return "all ".concat(duration, "ms ").concat(effectiveEasing);
};
var Slider = styled_components_browser_esm_default.div.attrs(function(props) {
  return {
    style: {
      transition: calcTransition(props),
      left: calcLeft(props),
      right: calcRight(props),
      top: calcTop(props)
    }
  };
})(_templateObject$3(), function(_ref5) {
  var verticalMode = _ref5.verticalMode;
  return verticalMode ? "column" : "row";
}, function(_ref6) {
  var verticalMode = _ref6.verticalMode;
  return verticalMode ? "min-height: 100%;" : "";
}, function(_ref7) {
  var verticalMode = _ref7.verticalMode, outerSpacing = _ref7.outerSpacing;
  return verticalMode ? "" : "margin: 0 ".concat(outerSpacing, "px;");
});
function _templateObject$4() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n"]);
  _templateObject$4 = function _templateObject2() {
    return data;
  };
  return data;
}
var StyledCarousel = styled_components_browser_esm_default.div.attrs(function(props) {
  return {
    style: {
      height: props.size.height
    }
  };
})(_templateObject$4());
function _templateObject$5() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  direction: ", ";\n"]);
  _templateObject$5 = function _templateObject2() {
    return data;
  };
  return data;
}
var CarouselWrapper = styled_components_browser_esm_default.div(_templateObject$5(), function(_ref) {
  var isRTL = _ref.isRTL;
  return isRTL ? "rtl" : "ltr";
});
var ItemWrapperContainer = function(_React$Component) {
  _inherits(ItemWrapperContainer2, _React$Component);
  var _super = _createSuper(ItemWrapperContainer2);
  function ItemWrapperContainer2() {
    var _this;
    _classCallCheck(this, ItemWrapperContainer2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "onClick", function() {
      var _this$props = _this.props, onClick = _this$props.onClick, id = _this$props.id;
      onClick(id);
    });
    return _this;
  }
  _createClass(ItemWrapperContainer2, [{
    key: "render",
    value: function render() {
      return import_react3.default.createElement(ItemWrapper, _extends3({}, this.props, {
        onClick: this.onClick
      }));
    }
  }]);
  return ItemWrapperContainer2;
}(import_react3.default.Component);
ItemWrapperContainer.defaultProps = {
  onClick: noop
};
ItemWrapperContainer.propTypes = {
  id: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.number]),
  onClick: import_prop_types3.default.func
};
var Track = function Track2(_ref) {
  var children = _ref.children, childWidth = _ref.childWidth, autoTabIndexVisibleItems = _ref.autoTabIndexVisibleItems, enableSwipe = _ref.enableSwipe, enableMouseSwipe = _ref.enableMouseSwipe, preventDefaultTouchmoveEvent = _ref.preventDefaultTouchmoveEvent, itemsToShow = _ref.itemsToShow, itemsToScroll = _ref.itemsToScroll, currentItem = _ref.currentItem, itemPosition = _ref.itemPosition, itemPadding = _ref.itemPadding, onSwiped = _ref.onSwiped, onSwiping = _ref.onSwiping, verticalMode = _ref.verticalMode, onItemClick = _ref.onItemClick;
  var width = "".concat(childWidth, "px");
  var paddingStyle = "".concat(itemPadding.join("px "), "px");
  var minVisibleItem = currentItem;
  var maxVisibleItem = currentItem + itemsToShow;
  var prevItem = minVisibleItem - itemsToScroll;
  var nextItem = maxVisibleItem + itemsToScroll;
  var originalChildren = import_react3.default.Children.map(children, function(child, idx) {
    var isVisible = idx >= minVisibleItem && idx < maxVisibleItem;
    var isPrevItem = !isVisible && idx >= prevItem && idx < currentItem;
    var isNextItem = !isVisible && idx < nextItem && idx > currentItem;
    var itemClass = "carousel-item";
    var childToRender = autoTabIndexVisibleItems ? import_react3.default.cloneElement(child, {
      tabIndex: isVisible ? 0 : -1
    }) : child;
    return import_react3.default.createElement("div", {
      className: cssPrefix(itemClass, "".concat(itemClass, "-").concat(idx), "".concat(itemClass, "-").concat(isVisible ? "visible" : "hidden"), isPrevItem && "".concat(itemClass, "-prev"), isNextItem && "".concat(itemClass, "-next"))
    }, import_react3.default.createElement(ItemWrapperContainer, {
      id: idx,
      itemPosition,
      style: {
        width,
        padding: paddingStyle
      },
      key: idx,
      onClick: onItemClick
    }, childToRender));
  });
  var toRender = enableSwipe ? import_react3.default.createElement(Swipeable, {
    style: {
      display: "flex",
      flexDirection: verticalMode ? "column" : "row"
    },
    stopPropagation: true,
    preventDefaultTouchmoveEvent,
    trackMouse: enableMouseSwipe,
    onSwiped,
    onSwiping,
    className: cssPrefix("swipable")
  }, originalChildren) : originalChildren;
  return toRender;
};
Track.propTypes = {
  children: import_prop_types3.default.array.isRequired,
  itemsToShow: import_prop_types3.default.number.isRequired,
  noAutoTabbedItems: import_prop_types3.default.bool,
  currentItem: import_prop_types3.default.number.isRequired,
  itemPosition: import_prop_types3.default.string,
  itemPadding: import_prop_types3.default.array,
  childWidth: import_prop_types3.default.number,
  verticalMode: import_prop_types3.default.bool,
  enableSwipe: import_prop_types3.default.bool,
  enableMouseSwipe: import_prop_types3.default.bool,
  preventDefaultTouchmoveEvent: import_prop_types3.default.bool,
  onSwiped: import_prop_types3.default.func,
  onSwiping: import_prop_types3.default.func,
  onItemClick: import_prop_types3.default.func
};
var directionIcons = {
  left: "❮",
  right: "❯",
  up: "❮",
  down: "❯"
};
var arrowClassname = cssPrefix("arrow");
var rotateStyle = function rotateStyle2(direction) {
  var rotate = {};
  if (direction === Arrow.up || direction === Arrow.down) {
    rotate.transform = "rotate(90deg)";
  }
  return rotate;
};
var Arrow = function Arrow2(_ref) {
  var direction = _ref.direction, onClick = _ref.onClick, icons = _ref.icons, style = _ref.style, rest = _objectWithoutProperties(_ref, ["direction", "onClick", "icons", "style"]);
  var arrows = _objectSpread2(_objectSpread2({}, directionIcons), icons);
  var styleObj = _objectSpread2(_objectSpread2({}, rotateStyle(direction)), style);
  return import_react3.default.createElement(Button, _extends3({
    tabIndex: 0,
    onClick,
    className: (0, import_classnames.default)(arrowClassname, "".concat(arrowClassname, "-").concat(direction)),
    style: styleObj
  }, rest), arrows[direction]);
};
Arrow.left = "left";
Arrow.right = "right";
Arrow.up = "up";
Arrow.down = "down";
Arrow.propTypes = {
  direction: import_prop_types3.default.oneOf(["left", "right", "up", "down"]).isRequired,
  icons: import_prop_types3.default.object,
  style: import_prop_types3.default.object,
  onClick: import_prop_types3.default.func
};
var NEXT_ITEM = "NEXT_ITEM";
var PREV_ITEM = "PREV_ITEM";
var activeIndexReducer = function activeIndexReducer2(state, action) {
  var limit = action.limit, itemsToScroll = action.itemsToScroll, type = action.type;
  switch (type) {
    case NEXT_ITEM: {
      var optimisticNextItem = state + itemsToScroll;
      var nextItem = limit >= optimisticNextItem ? optimisticNextItem : limit;
      return nextItem;
    }
    case PREV_ITEM: {
      var optimisticPrevItem = state - itemsToScroll;
      var prevItem = optimisticPrevItem >= limit ? optimisticPrevItem : limit;
      return prevItem;
    }
    default:
      return state;
  }
};
var nextItemAction = function nextItemAction2(limit, itemsToScroll) {
  return {
    type: NEXT_ITEM,
    limit,
    itemsToScroll
  };
};
var prevItemAction = function prevItemAction2(limit, itemsToScroll) {
  return {
    type: PREV_ITEM,
    limit,
    itemsToScroll
  };
};
function _templateObject$6() {
  var data = _taggedTemplateLiteral(["\n  box-sizing: border-box;\n  padding: 0;\n  transition: all 250ms ease;\n  border: none;\n  margin: 5px;\n  background-color: ", ';\n  font-size: 1.3em;\n  content: "";\n  height: 10px;\n  width: 10px;\n  box-shadow: ', ";\n  border-radius: 50%;\n  outline: none;\n  &:hover,\n  &:focus {\n    cursor: pointer;\n    box-shadow: ", ";\n  }\n"]);
  _templateObject$6 = function _templateObject2() {
    return data;
  };
  return data;
}
var boxShadow = "0 0 1px 2px rgba(0, 0, 0, 0.5)";
var activeBoxShadow = "0 0 1px 3px rgba(103,58,183,1)";
var hoveredBoxShadow = "0 0 1px 3px rgba(103,58,183,.5)";
var Dot = styled_components_browser_esm_default.button.attrs(function(_ref) {
  var _ref$type = _ref.type, type = _ref$type === void 0 ? "button" : _ref$type;
  return {
    type
  };
})(_templateObject$6(), function(_ref2) {
  var active = _ref2.active;
  return active ? "rgba(103,58,183,.5)" : "transparent";
}, function(_ref3) {
  var active = _ref3.active;
  return active ? activeBoxShadow : boxShadow;
}, function(_ref4) {
  var active = _ref4.active;
  return active ? activeBoxShadow : hoveredBoxShadow;
});
var DotContainer = function(_React$Component) {
  _inherits(DotContainer2, _React$Component);
  var _super = _createSuper(DotContainer2);
  function DotContainer2() {
    var _this;
    _classCallCheck(this, DotContainer2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "onClick", function() {
      var _this$props = _this.props, onClick = _this$props.onClick, id = _this$props.id;
      onClick(id);
    });
    return _this;
  }
  _createClass(DotContainer2, [{
    key: "render",
    value: function render() {
      var active = this.props.active;
      return import_react3.default.createElement(Dot, {
        tabIndex: active ? -1 : 0,
        onClick: this.onClick,
        active,
        className: "".concat(cssPrefix("dot"), " ").concat(active ? cssPrefix("dot_active") : "")
      });
    }
  }]);
  return DotContainer2;
}(import_react3.default.Component);
DotContainer.propTypes = {
  id: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.number]),
  active: import_prop_types3.default.bool,
  onClick: import_prop_types3.default.func
};
function _templateObject$7() {
  var data = _taggedTemplateLiteral(["\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: 15px;\n"]);
  _templateObject$7 = function _templateObject2() {
    return data;
  };
  return data;
}
var Indicators = styled_components_browser_esm_default.div(_templateObject$7());
var Pagination = function(_React$Component) {
  _inherits(Pagination2, _React$Component);
  var _super = _createSuper(Pagination2);
  function Pagination2() {
    _classCallCheck(this, Pagination2);
    return _super.apply(this, arguments);
  }
  _createClass(Pagination2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, numOfPages = _this$props.numOfPages, activePage = _this$props.activePage, onClick = _this$props.onClick;
      var pages = numberToArray(numOfPages);
      return import_react3.default.createElement(Indicators, {
        className: cssPrefix("pagination")
      }, pages.map(function(item, i) {
        return import_react3.default.createElement(DotContainer, {
          key: i,
          id: i,
          active: i === activePage,
          onClick
        });
      }));
    }
  }]);
  return Pagination2;
}(import_react3.default.Component);
Pagination.defaultProps = {
  onClick: noop
};
Pagination.propTypes = {
  numOfPages: import_prop_types3.default.number.isRequired,
  activePage: import_prop_types3.default.number.isRequired,
  onClick: import_prop_types3.default.func
};
var Carousel = function(_React$Component) {
  _inherits(Carousel2, _React$Component);
  var _super = _createSuper(Carousel2);
  function Carousel2() {
    var _this;
    _classCallCheck(this, Carousel2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "isComponentMounted", false);
    _defineProperty(_assertThisInitialized(_this), "state", {
      rootHeight: 0,
      childHeight: 0,
      sliderPosition: 0,
      swipedSliderPosition: 0,
      isSwiping: false,
      transitioning: false,
      transitionMs: _this.props.transitionMs,
      activeIndex: _this.props.initialActiveIndex || _this.props.initialFirstItem,
      // support deprecated  initialFirstItem
      pages: [],
      activePage: 0,
      sliderContainerWidth: 0
    });
    _defineProperty(_assertThisInitialized(_this), "setRef", function(name) {
      return function(ref) {
        return _this[name] = ref;
      };
    });
    _defineProperty(_assertThisInitialized(_this), "initResizeObserver", function() {
      _this.ro = new ResizeObserver_es_default(function(entries, observer) {
        var _iterator = _createForOfIteratorHelper(entries), _step;
        try {
          var _loop = function _loop2() {
            var entry = _step.value;
            if (entry.target === _this.sliderContainer) {
              window.requestAnimationFrame(function() {
                _this.onContainerResize(entry);
              });
            }
            if (entry.target === _this.slider) {
              window.requestAnimationFrame(function() {
                _this.onSliderResize(entry);
              });
            }
          };
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      });
      _this.ro.observe(_this.sliderContainer);
      _this.ro.observe(_this.slider);
    });
    _defineProperty(_assertThisInitialized(_this), "unSubscribeObserver", function() {
      return _this.ro.disconnect();
    });
    _defineProperty(_assertThisInitialized(_this), "setAutoPlay", function() {
      var _this$getDerivedProps = _this.getDerivedPropsFromBreakPoint(), autoPlaySpeed = _this$getDerivedProps.autoPlaySpeed;
      _this.autoPlayIntervalId = setInterval(function() {
        if (_this.isComponentMounted) {
          var transitioning = _this.state.transitioning;
          if (!transitioning) {
            _this.slideNext();
          }
        }
      }, autoPlaySpeed);
    });
    _defineProperty(_assertThisInitialized(_this), "removeAutoPlay", function() {
      if (_this.autoPlayIntervalId) {
        clearInterval(_this.autoPlayIntervalId);
        _this.autoPlayIntervalId = null;
      }
    });
    _defineProperty(_assertThisInitialized(_this), "setPages", function() {
      var numOfPages = _this.getNumOfPages();
      var pages = numberToArray(numOfPages);
      _this.setState({
        pages
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onSliderTransitionEnd", function(fn) {
      _this.slider.addEventListener("transitionend", fn);
    });
    _defineProperty(_assertThisInitialized(_this), "removeSliderTransitionHook", function(fn) {
      _this.slider.removeEventListener("transitionend", fn);
    });
    _defineProperty(_assertThisInitialized(_this), "getDerivedPropsFromBreakPoint", function() {
      var _this$props = _this.props, breakPoints = _this$props.breakPoints, restOfProps = _objectWithoutProperties(_this$props, ["breakPoints"]);
      var sliderContainerWidth = _this.state.sliderContainerWidth;
      var currentBreakPoint;
      if (breakPoints && breakPoints.length > 0) {
        currentBreakPoint = breakPoints.slice().reverse().find(function(bp) {
          return bp.width <= sliderContainerWidth;
        });
        if (!currentBreakPoint) {
          currentBreakPoint = breakPoints[0];
        }
      }
      return _objectSpread2(_objectSpread2({}, restOfProps), currentBreakPoint);
    });
    _defineProperty(_assertThisInitialized(_this), "updateSliderPosition", function() {
      _this.setState(function(state) {
        var _this$getDerivedProps2 = _this.getDerivedPropsFromBreakPoint(), children = _this$getDerivedProps2.children, verticalMode = _this$getDerivedProps2.verticalMode, itemsToShow = _this$getDerivedProps2.itemsToShow, transitionMs = _this$getDerivedProps2.transitionMs;
        var childHeight = state.childHeight, activeIndex = state.activeIndex;
        var childWidth = _this.calculateChildWidth();
        var totalItems = import_react3.Children.toArray(children).length;
        var hiddenSlots = totalItems - itemsToShow;
        var moveBy = activeIndex * -1;
        var emptySlots = itemsToShow - (totalItems - activeIndex);
        if (emptySlots > 0 && hiddenSlots > 0) {
          moveBy = emptySlots + activeIndex * -1;
        }
        var sliderPosition = (verticalMode ? childHeight : childWidth) * moveBy;
        var newActiveIndex = emptySlots > 0 ? activeIndex - emptySlots : activeIndex;
        window.requestAnimationFrame(function() {
          if (_this.isComponentMounted) {
            _this.setState({
              transitionMs
            });
          }
        });
        return {
          sliderPosition,
          activeIndex: newActiveIndex < 0 ? 0 : newActiveIndex
        };
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onSliderResize", function(sliderNode) {
      if (!_this.isComponentMounted) {
        return;
      }
      var _this$getDerivedProps3 = _this.getDerivedPropsFromBreakPoint(), verticalMode = _this$getDerivedProps3.verticalMode, children = _this$getDerivedProps3.children, itemsToShow = _this$getDerivedProps3.itemsToShow;
      var sliderHeight = sliderNode.contentRect.height;
      var nextState = {};
      var childrenLength = import_react3.Children.toArray(children).length;
      if (verticalMode) {
        var childHeight = sliderHeight / childrenLength;
        nextState.rootHeight = childHeight * Math.min(childrenLength, itemsToShow);
        nextState.childHeight = childHeight;
      } else {
        nextState.rootHeight = sliderHeight;
      }
      _this.setState(nextState);
    });
    _defineProperty(_assertThisInitialized(_this), "calculateChildWidth", function() {
      var sliderContainerWidth = _this.state.sliderContainerWidth;
      var _this$getDerivedProps4 = _this.getDerivedPropsFromBreakPoint(), verticalMode = _this$getDerivedProps4.verticalMode, itemsToShow = _this$getDerivedProps4.itemsToShow, showEmptySlots = _this$getDerivedProps4.showEmptySlots, children = _this$getDerivedProps4.children;
      var childrenLength = import_react3.Children.toArray(children).length || 1;
      var childWidth = 0;
      if (verticalMode) {
        childWidth = sliderContainerWidth;
      } else {
        childWidth = sliderContainerWidth / (showEmptySlots ? itemsToShow : Math.min(childrenLength, itemsToShow));
      }
      return childWidth;
    });
    _defineProperty(_assertThisInitialized(_this), "onContainerResize", function(sliderContainerNode) {
      var newSliderContainerWidth = sliderContainerNode.contentRect.width;
      var _this$getDerivedProps5 = _this.getDerivedPropsFromBreakPoint(), outerSpacing = _this$getDerivedProps5.outerSpacing, initialVerticalMode = _this$getDerivedProps5.verticalMode;
      var containerWidth = newSliderContainerWidth - (initialVerticalMode ? 0 : outerSpacing * 2);
      if (!_this.isComponentMounted || _this.state.sliderContainerWidth === newSliderContainerWidth) {
        return;
      }
      _this.setState({
        sliderContainerWidth: containerWidth,
        transitionMs: 0
      }, function() {
        var _this$getDerivedProps6 = _this.getDerivedPropsFromBreakPoint(), onResize = _this$getDerivedProps6.onResize, itemsToShow = _this$getDerivedProps6.itemsToShow, children = _this$getDerivedProps6.children;
        var childrenLength = import_react3.Children.toArray(children).length || 1;
        _this.setState(function(currentState) {
          var activeIndex = currentState.activeIndex;
          var maxItemsToShow = Math.min(childrenLength, itemsToShow);
          var endLimit = childrenLength - maxItemsToShow;
          if (activeIndex > endLimit) {
            activeIndex = endLimit;
          }
          return {
            activeIndex
          };
        }, function() {
          _this.updateSliderPosition();
          var currentBreakPoint = _this.getDerivedPropsFromBreakPoint();
          onResize(currentBreakPoint);
        });
      });
    });
    _defineProperty(_assertThisInitialized(_this), "tiltMovement", function(position) {
      var distance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;
      var duration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 150;
      _this.setState(function(state) {
        return {
          isSwiping: true,
          swipedSliderPosition: position - distance
        };
      });
      setTimeout(function() {
        _this.setState({
          isSwiping: false,
          swipedSliderPosition: 0
        });
      }, duration);
    });
    _defineProperty(_assertThisInitialized(_this), "convertChildToCbObj", function(index2) {
      var _this$getDerivedProps7 = _this.getDerivedPropsFromBreakPoint(), children = _this$getDerivedProps7.children;
      var roundedIdx = Math.round(index2);
      var child = import_react3.Children.toArray(children)[roundedIdx];
      return {
        item: child.props,
        index: roundedIdx
      };
    });
    _defineProperty(_assertThisInitialized(_this), "getNextItemIndex", function(currentIndex, getPrev) {
      var _this$getDerivedProps8 = _this.getDerivedPropsFromBreakPoint(), children = _this$getDerivedProps8.children, itemsToShow = _this$getDerivedProps8.itemsToShow, itemsToScroll = _this$getDerivedProps8.itemsToScroll;
      var childrenLength = import_react3.Children.toArray(children).length || 1;
      var notEnoughItemsToShow = itemsToShow > childrenLength;
      var limit = getPrev ? 0 : childrenLength - itemsToShow;
      if (notEnoughItemsToShow) {
        limit = 0;
      }
      var nextAction = getPrev ? prevItemAction(0, itemsToScroll) : nextItemAction(limit, itemsToScroll);
      var nextItem = activeIndexReducer(currentIndex, nextAction);
      return nextItem;
    });
    _defineProperty(_assertThisInitialized(_this), "getNextItemObj", function(getPrev) {
      var _this$getDerivedProps9 = _this.getDerivedPropsFromBreakPoint(), children = _this$getDerivedProps9.children;
      var activeIndex = _this.state.activeIndex;
      var nextItemIndex = _this.getNextItemIndex(activeIndex, getPrev);
      var roundedIdx = Math.round(nextItemIndex);
      var asElement = import_react3.Children.toArray(children)[roundedIdx];
      var asObj = {
        item: asElement.props,
        index: roundedIdx
      };
      return asObj;
    });
    _defineProperty(_assertThisInitialized(_this), "resetSwipe", function() {
      _this.setState({
        swipedSliderPosition: 0,
        transitioning: false,
        isSwiping: false
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onSwiping", function(data) {
      var deltaX = data.deltaX, absX = data.absX, deltaY = data.deltaY, absY = data.absY, dir = data.dir;
      _this.setState(function(state) {
        var childHeight = state.childHeight, activeIndex = state.activeIndex, sliderPosition = state.sliderPosition;
        var _this$getDerivedProps10 = _this.getDerivedPropsFromBreakPoint(), itemsToShow = _this$getDerivedProps10.itemsToShow, verticalMode = _this$getDerivedProps10.verticalMode, children = _this$getDerivedProps10.children, isRTL = _this$getDerivedProps10.isRTL;
        var childWidth = _this.calculateChildWidth();
        var childrenLength = import_react3.Children.toArray(children).length || 1;
        var goingNext = !verticalMode && dir === "Left" && !isRTL || !verticalMode && dir === "Right" && isRTL || verticalMode && dir === "Up";
        var goingBack = !verticalMode && dir === "Right" && !isRTL || !verticalMode && dir === "Left" && isRTL || verticalMode && dir === "Down";
        var horizontalSwipe = dir === "Left" || dir === "Right";
        var verticalSwipe = dir === "Up" || dir === "Down";
        var horizontalMode = !verticalMode;
        var distanceSwipe = 0;
        var horizontalEdgeStoppage = childWidth / 2;
        var verticalEdgeStoppage = childHeight / 2;
        if (verticalMode) {
          if (verticalSwipe) {
            var trackSize = childrenLength * childHeight;
            if (goingNext) {
              distanceSwipe = trackSize - childHeight * activeIndex - itemsToShow * childHeight + verticalEdgeStoppage;
            } else if (goingBack) {
              distanceSwipe = childHeight * activeIndex + verticalEdgeStoppage;
            }
          }
        } else {
          if (horizontalSwipe) {
            var _trackSize = childrenLength * childWidth;
            if (goingNext) {
              distanceSwipe = _trackSize - childWidth * activeIndex - itemsToShow * childWidth + horizontalEdgeStoppage;
            } else if (goingBack) {
              distanceSwipe = childWidth * activeIndex + horizontalEdgeStoppage;
            }
          }
        }
        var shouldHorizontalSkipUpdate = horizontalMode && verticalSwipe || horizontalMode && horizontalSwipe && absX > distanceSwipe;
        var shouldVerticalSkipUpdate = verticalMode && horizontalSwipe || verticalMode && verticalSwipe && absY > distanceSwipe;
        if (shouldHorizontalSkipUpdate || shouldVerticalSkipUpdate) {
          return;
        }
        var swipedSliderPosition;
        if (horizontalSwipe) {
          if (isRTL) {
            swipedSliderPosition = sliderPosition + deltaX;
          } else {
            swipedSliderPosition = sliderPosition - deltaX;
          }
        } else {
          swipedSliderPosition = sliderPosition - deltaY;
        }
        return {
          swipedSliderPosition,
          isSwiping: true,
          transitioning: true
        };
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onSwiped", function(data) {
      var absX = data.absX, absY = data.absY, dir = data.dir;
      var _this$state = _this.state, childHeight = _this$state.childHeight, activeIndex = _this$state.activeIndex;
      var _this$getDerivedProps11 = _this.getDerivedPropsFromBreakPoint(), verticalMode = _this$getDerivedProps11.verticalMode, isRTL = _this$getDerivedProps11.isRTL, itemsToScroll = _this$getDerivedProps11.itemsToScroll;
      var childWidth = _this.calculateChildWidth();
      var func = _this.resetSwipe;
      var minSwipeDistanceHorizontal = childWidth / 5;
      var minSwipeDistanceVertical = childHeight / 5;
      var swipedLeft = dir === "Left";
      var swipedRight = dir === "Right";
      var swipedUp = dir === "Up";
      var swipedDown = dir === "Down";
      var verticalGoSwipe = verticalMode && (swipedUp || swipedDown) && absY > minSwipeDistanceVertical;
      var horizontalGoSwipe = !verticalMode && (swipedRight || swipedLeft) && absX > minSwipeDistanceHorizontal;
      var goodToGo = false;
      if (verticalGoSwipe || horizontalGoSwipe) {
        goodToGo = true;
      }
      if (goodToGo) {
        if (verticalMode) {
          var numberOfSlidesViaSwipe = Math.ceil((absY - minSwipeDistanceVertical) / childHeight);
          var numberOfSlidesTogo = Math.max(itemsToScroll, numberOfSlidesViaSwipe);
          var backSlidesToGo = activeIndex - numberOfSlidesTogo;
          var forwardSlideTtoGo = activeIndex + numberOfSlidesTogo;
          if (swipedDown) {
            func = function func2() {
              return _this.goTo(backSlidesToGo);
            };
          }
          if (swipedUp) {
            func = function func2() {
              return _this.goTo(forwardSlideTtoGo);
            };
          }
        } else {
          var _numberOfSlidesViaSwipe = Math.ceil((absX - minSwipeDistanceHorizontal) / childWidth);
          var _numberOfSlidesTogo = Math.max(itemsToScroll, _numberOfSlidesViaSwipe);
          var _backSlidesToGo = activeIndex - _numberOfSlidesTogo;
          var _forwardSlideTtoGo = activeIndex + _numberOfSlidesTogo;
          if (isRTL) {
            if (swipedLeft) {
              func = function func2() {
                return _this.goTo(_backSlidesToGo);
              };
            }
            if (swipedRight) {
              func = function func2() {
                return _this.goTo(_forwardSlideTtoGo);
              };
            }
          } else {
            if (swipedLeft) {
              func = function func2() {
                return _this.goTo(_forwardSlideTtoGo);
              };
            }
            if (swipedRight) {
              func = function func2() {
                return _this.goTo(_backSlidesToGo);
              };
            }
          }
        }
      }
      _this.setState({
        isSwiping: false,
        transitioning: false
      });
      func({
        skipTilt: true
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onNextStart", function(options) {
      var _this$getDerivedProps12 = _this.getDerivedPropsFromBreakPoint(), onNextStart = _this$getDerivedProps12.onNextStart;
      var activeIndex = _this.state.activeIndex;
      var nextItemObj = _this.getNextItemObj();
      var prevItemObj = _this.convertChildToCbObj(activeIndex);
      onNextStart(prevItemObj, nextItemObj);
      _this.slideNext(options);
    });
    _defineProperty(_assertThisInitialized(_this), "onPrevStart", function(options) {
      var _this$getDerivedProps13 = _this.getDerivedPropsFromBreakPoint(), onPrevStart = _this$getDerivedProps13.onPrevStart;
      var activeIndex = _this.state.activeIndex;
      var nextItemObj = _this.getNextItemObj(true);
      var prevItemObj = _this.convertChildToCbObj(activeIndex);
      onPrevStart(prevItemObj, nextItemObj);
      _this.slidePrev(options);
    });
    _defineProperty(_assertThisInitialized(_this), "slideNext", function() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var skipTilt = options.skipTilt;
      var _this$getDerivedProps14 = _this.getDerivedPropsFromBreakPoint(), enableTilt = _this$getDerivedProps14.enableTilt;
      var _this$state2 = _this.state, activeIndex = _this$state2.activeIndex, sliderPosition = _this$state2.sliderPosition;
      var nextItem = _this.getNextItemIndex(activeIndex, false);
      if (activeIndex !== nextItem) {
        _this.goTo(nextItem);
      } else if (enableTilt && !skipTilt) {
        _this.tiltMovement(sliderPosition, 20, 150);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "slidePrev", function() {
      var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var skipTilt = options.skipTilt;
      var activeIndex = _this.state.activeIndex;
      var _this$getDerivedProps15 = _this.getDerivedPropsFromBreakPoint(), enableTilt = _this$getDerivedProps15.enableTilt;
      var prevItem = _this.getNextItemIndex(activeIndex, true);
      if (activeIndex !== prevItem) {
        _this.goTo(prevItem);
      } else if (enableTilt && !skipTilt) {
        _this.tiltMovement(0, -20, 150);
      }
    });
    _defineProperty(_assertThisInitialized(_this), "onNextEnd", function() {
      var _this$getDerivedProps16 = _this.getDerivedPropsFromBreakPoint(), onNextEnd = _this$getDerivedProps16.onNextEnd, onChange = _this$getDerivedProps16.onChange;
      var _this$state3 = _this.state, activeIndex = _this$state3.activeIndex, activePage = _this$state3.activePage;
      var nextItemObj = _this.convertChildToCbObj(activeIndex);
      _this.removeSliderTransitionHook(_this.onNextEnd);
      _this.setState({
        transitioning: false
      });
      onChange && onChange(nextItemObj, activePage);
      onNextEnd(nextItemObj, activePage);
    });
    _defineProperty(_assertThisInitialized(_this), "onPrevEnd", function() {
      var _this$getDerivedProps17 = _this.getDerivedPropsFromBreakPoint(), onPrevEnd = _this$getDerivedProps17.onPrevEnd, onChange = _this$getDerivedProps17.onChange;
      var _this$state4 = _this.state, activeIndex = _this$state4.activeIndex, activePage = _this$state4.activePage;
      var nextItemObj = _this.convertChildToCbObj(activeIndex);
      _this.removeSliderTransitionHook(_this.onPrevEnd);
      _this.setState({
        transitioning: false
      });
      onChange && onChange(nextItemObj, activePage);
      onPrevEnd(nextItemObj, activePage);
    });
    _defineProperty(_assertThisInitialized(_this), "generatePositionUpdater", function(direction, nextItemId, verticalMode, rest) {
      return function(state) {
        var sliderPosition = state.sliderPosition, childHeight = state.childHeight, activeIndex = state.activeIndex;
        var childWidth = _this.calculateChildWidth();
        var newSliderPosition = 0;
        var childSize = verticalMode ? childHeight : childWidth;
        if (direction === consts.NEXT) {
          newSliderPosition = sliderPosition - childSize * (nextItemId - activeIndex);
        } else {
          newSliderPosition = sliderPosition + childSize * (activeIndex - nextItemId);
        }
        return _objectSpread2({
          sliderPosition: newSliderPosition,
          activeIndex: nextItemId,
          swipedSliderPosition: 0,
          isSwiping: false
        }, rest);
      };
    });
    _defineProperty(_assertThisInitialized(_this), "goTo", function(nextItemId) {
      var _this$getDerivedProps18 = _this.getDerivedPropsFromBreakPoint(), children = _this$getDerivedProps18.children, verticalMode = _this$getDerivedProps18.verticalMode, itemsToShow = _this$getDerivedProps18.itemsToShow;
      var activeIndex = _this.state.activeIndex;
      var childrenLength = import_react3.Children.toArray(children).length;
      var safeNextItemId = Math.max(0, nextItemId);
      var isPrev = activeIndex > safeNextItemId;
      var nextAvailableItem = _this.getNextItemIndex(activeIndex, isPrev);
      var noChange = nextAvailableItem === activeIndex;
      var outOfBoundary = safeNextItemId + itemsToShow >= childrenLength;
      if (noChange) {
        return;
      }
      if (outOfBoundary) {
        safeNextItemId = Math.max(0, childrenLength - itemsToShow);
      }
      var direction = consts.NEXT;
      var positionEndCb = _this.onNextEnd;
      if (isPrev) {
        direction = consts.PREV;
        positionEndCb = _this.onPrevEnd;
      }
      var stateUpdater = _this.generatePositionUpdater(direction, safeNextItemId, verticalMode, {
        transitioning: true
      });
      _this.setState(stateUpdater, function() {
        pipe(_this.updateActivePage(), _this.onSliderTransitionEnd(positionEndCb));
      });
    });
    _defineProperty(_assertThisInitialized(_this), "getNumOfPages", function() {
      var _this$getDerivedProps19 = _this.getDerivedPropsFromBreakPoint(), children = _this$getDerivedProps19.children, itemsToShow = _this$getDerivedProps19.itemsToShow;
      var childrenLength = import_react3.Children.toArray(children).length;
      var safeItemsToShow = Math.max(itemsToShow, 1);
      var numOfPages = Math.ceil(childrenLength / safeItemsToShow);
      return numOfPages || 1;
    });
    _defineProperty(_assertThisInitialized(_this), "updateActivePage", function() {
      _this.setState(function(state) {
        var _this$getDerivedProps20 = _this.getDerivedPropsFromBreakPoint(), itemsToShow = _this$getDerivedProps20.itemsToShow, children = _this$getDerivedProps20.children;
        var activeIndex = state.activeIndex, activePage = state.activePage;
        var numOfPages = _this.getNumOfPages();
        var childrenLength = import_react3.Children.toArray(children).length;
        var inRangeItemsToShow = Math.min(childrenLength, itemsToShow);
        var safeItemsToShow = Math.max(inRangeItemsToShow, 1);
        var newActivePage = Math.ceil(activeIndex / safeItemsToShow);
        var inRangeActivePageIndex = Math.min(numOfPages - 1, newActivePage);
        if (activePage !== inRangeActivePageIndex) {
          return {
            activePage: inRangeActivePageIndex
          };
        }
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onIndicatorClick", function(indicatorId) {
      var _this$getDerivedProps21 = _this.getDerivedPropsFromBreakPoint(), itemsToShow = _this$getDerivedProps21.itemsToShow;
      var gotoIndex = indicatorId * itemsToShow;
      _this.setState({
        activePage: indicatorId
      });
      _this.goTo(gotoIndex);
    });
    return _this;
  }
  _createClass(Carousel2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.isComponentMounted = true;
      this.initResizeObserver();
      this.updateActivePage();
      this.setPages();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this$props2 = this.props, enableAutoPlay = _this$props2.enableAutoPlay, children = _this$props2.children, itemsToShow = _this$props2.itemsToShow, itemsToScroll = _this$props2.itemsToScroll, breakPoints = _this$props2.breakPoints;
      var _this$state5 = this.state, activeIndex = _this$state5.activeIndex, sliderContainerWidth = _this$state5.sliderContainerWidth;
      var nextItem = this.getNextItemIndex(activeIndex, false);
      var currentChildrenLength = import_react3.Children.toArray(children).length;
      var prevChildrenLength = import_react3.Children.toArray(prevProps.children).length;
      if (prevChildrenLength !== currentChildrenLength || prevProps.itemsToShow !== itemsToShow || prevProps.itemsToScroll !== itemsToScroll || prevProps.breakPoints !== breakPoints || sliderContainerWidth !== prevState.sliderContainerWidth) {
        this.onContainerResize({
          contentRect: {
            width: sliderContainerWidth
          }
        });
        this.setPages();
        this.updateActivePage();
      }
      if (activeIndex === nextItem) {
        this.removeAutoPlay();
      } else if (enableAutoPlay && !this.autoPlayIntervalId) {
        this.setAutoPlay();
      } else if (!enableAutoPlay && this.autoPlayIntervalId) {
        this.removeAutoPlay();
      }
      if (prevChildrenLength !== currentChildrenLength) {
        var _this$getDerivedProps22 = this.getDerivedPropsFromBreakPoint(), calculatedItemsToShow = _this$getDerivedProps22.itemsToShow;
        var lastIndex = currentChildrenLength - 1;
        var isOutOfRange = activeIndex + calculatedItemsToShow > lastIndex;
        if (isOutOfRange) {
          this.goTo(Math.max(0, currentChildrenLength - calculatedItemsToShow));
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.isComponentMounted = false;
      this.removeAutoPlay();
      this.unSubscribeObserver();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state6 = this.state, activePage = _this$state6.activePage, isSwiping = _this$state6.isSwiping, sliderPosition = _this$state6.sliderPosition, swipedSliderPosition = _this$state6.swipedSliderPosition, rootHeight = _this$state6.rootHeight, pages = _this$state6.pages, activeIndex = _this$state6.activeIndex, transitionMs = _this$state6.transitionMs;
      var _this$getDerivedProps23 = this.getDerivedPropsFromBreakPoint(), className = _this$getDerivedProps23.className, style = _this$getDerivedProps23.style, itemsToShow = _this$getDerivedProps23.itemsToShow, itemsToScroll = _this$getDerivedProps23.itemsToScroll, verticalMode = _this$getDerivedProps23.verticalMode, isRTL = _this$getDerivedProps23.isRTL, easing = _this$getDerivedProps23.easing, tiltEasing = _this$getDerivedProps23.tiltEasing, children = _this$getDerivedProps23.children, focusOnSelect = _this$getDerivedProps23.focusOnSelect, autoTabIndexVisibleItems = _this$getDerivedProps23.autoTabIndexVisibleItems, itemPosition = _this$getDerivedProps23.itemPosition, itemPadding = _this$getDerivedProps23.itemPadding, outerSpacing = _this$getDerivedProps23.outerSpacing, enableSwipe = _this$getDerivedProps23.enableSwipe, enableMouseSwipe = _this$getDerivedProps23.enableMouseSwipe, pagination = _this$getDerivedProps23.pagination, showArrows = _this$getDerivedProps23.showArrows, disableArrowsOnEnd = _this$getDerivedProps23.disableArrowsOnEnd, preventDefaultTouchmoveEvent = _this$getDerivedProps23.preventDefaultTouchmoveEvent, renderArrow = _this$getDerivedProps23.renderArrow, renderPagination = _this$getDerivedProps23.renderPagination;
      var childWidth = this.calculateChildWidth();
      var numOfPages = this.getNumOfPages();
      var canSlidePrev = activeIndex !== this.getNextItemIndex(activeIndex, true);
      var canSlideNext = activeIndex !== this.getNextItemIndex(activeIndex, false);
      var disabledPrevArrow = !canSlidePrev && disableArrowsOnEnd;
      var disabledNextArrow = !canSlideNext && disableArrowsOnEnd;
      return import_react3.default.createElement(CarouselWrapper, {
        isRTL,
        className: "".concat(cssPrefix("carousel-wrapper"), " ").concat(className),
        style
      }, import_react3.default.createElement(StyledCarousel, {
        className: cssPrefix("carousel"),
        size: {
          height: rootHeight
        }
      }, import_react3.default.createElement(index_es_default, {
        when: showArrows
      }, renderArrow ? renderArrow({
        type: consts.PREV,
        onClick: this.onPrevStart,
        isEdge: !canSlidePrev
      }) : import_react3.default.createElement(Arrow, {
        onClick: this.onPrevStart,
        direction: verticalMode ? Arrow.up : Arrow.left,
        disabled: disabledPrevArrow
      })), import_react3.default.createElement(SliderContainer, {
        className: cssPrefix("slider-container"),
        ref: this.setRef("sliderContainer")
      }, import_react3.default.createElement(Slider, {
        verticalMode,
        isRTL,
        easing,
        sliderPosition,
        swipedSliderPosition,
        isSwiping,
        transitionMs,
        tiltEasing,
        className: cssPrefix("slider"),
        ref: this.setRef("slider"),
        outerSpacing
      }, import_react3.default.createElement(Track, {
        verticalMode,
        children: import_react3.Children.toArray(children),
        childWidth,
        currentItem: activeIndex,
        autoTabIndexVisibleItems,
        itemsToShow,
        itemsToScroll,
        itemPosition,
        itemPadding,
        enableSwipe,
        enableMouseSwipe,
        preventDefaultTouchmoveEvent,
        onSwiped: this.onSwiped,
        onSwiping: this.onSwiping,
        onItemClick: focusOnSelect ? this.goTo : void 0
      }))), import_react3.default.createElement(index_es_default, {
        when: showArrows
      }, renderArrow ? renderArrow({
        type: consts.NEXT,
        onClick: this.onNextStart,
        isEdge: !canSlideNext
      }) : import_react3.default.createElement(Arrow, {
        onClick: this.onNextStart,
        direction: verticalMode ? Arrow.down : Arrow.right,
        disabled: disabledNextArrow
      }))), import_react3.default.createElement(index_es_default, {
        when: pagination
      }, renderPagination ? renderPagination({
        pages,
        activePage,
        onClick: this.onIndicatorClick
      }) : import_react3.default.createElement(Pagination, {
        numOfPages,
        activePage,
        onClick: this.onIndicatorClick
      })));
    }
  }]);
  return Carousel2;
}(import_react3.default.Component);
Carousel.defaultProps = {
  className: "",
  style: {},
  verticalMode: false,
  isRTL: false,
  initialFirstItem: 0,
  initialActiveIndex: 0,
  showArrows: true,
  showEmptySlots: false,
  disableArrowsOnEnd: true,
  pagination: true,
  easing: "ease",
  tiltEasing: "ease",
  transitionMs: 500,
  enableTilt: true,
  enableSwipe: true,
  enableMouseSwipe: true,
  preventDefaultTouchmoveEvent: false,
  focusOnSelect: false,
  autoTabIndexVisibleItems: true,
  itemsToShow: 1,
  itemsToScroll: 1,
  itemPosition: consts.CENTER,
  itemPadding: [0, 0, 0, 0],
  outerSpacing: 0,
  enableAutoPlay: false,
  autoPlaySpeed: 2e3,
  // callbacks
  onChange: noop,
  onNextEnd: noop,
  onPrevEnd: noop,
  onNextStart: noop,
  onPrevStart: noop,
  onResize: noop
};
Carousel.propTypes = {
  /** Items to render */
  children: import_prop_types3.default.node.isRequired,
  /** The css class for the root element */
  className: import_prop_types3.default.string,
  /** The style object for the root element */
  style: import_prop_types3.default.object,
  /** Display the Carousel in a vertical layout */
  verticalMode: import_prop_types3.default.bool,
  /** Flip right to left */
  isRTL: import_prop_types3.default.bool,
  /** Show dots for paging */
  pagination: import_prop_types3.default.bool,
  /** Animation speed */
  transitionMs: import_prop_types3.default.number,
  /** transition easing pattern */
  easing: import_prop_types3.default.string,
  /** transition easing pattern for the tilt */
  tiltEasing: import_prop_types3.default.string,
  /** The "bump" animation when reaching the last item */
  enableTilt: import_prop_types3.default.bool,
  /** Number of visible items  */
  itemsToShow: import_prop_types3.default.number,
  /** Number of items to scroll */
  itemsToScroll: import_prop_types3.default.number,
  /** Collection of objects with a width, itemsToShow and itemsToScroll  */
  breakPoints: import_prop_types3.default.arrayOf(import_prop_types3.default.shape({
    width: import_prop_types3.default.number.isRequired,
    itemsToShow: import_prop_types3.default.number,
    itemsToScroll: import_prop_types3.default.number
  })),
  /** The initial active index when the component mounts */
  initialActiveIndex: import_prop_types3.default.number,
  /** **DEPRECATED - use initialActiveIndex instead** The first items when the component mounts */
  initialFirstItem: import_prop_types3.default.number,
  /** Show the arrow buttons */
  showArrows: import_prop_types3.default.bool,
  /** Show empty slots when children.length < itemsToShow (not compatible with verticalMode yet !) */
  showEmptySlots: import_prop_types3.default.bool,
  /** Disables the arrow button when there are no more items */
  disableArrowsOnEnd: import_prop_types3.default.bool,
  /** Go to item on click */
  focusOnSelect: import_prop_types3.default.bool,
  /** Automatically inject `tabIndex:0` to visible items */
  autoTabIndexVisibleItems: import_prop_types3.default.bool,
  /** A render prop for the arrow component
   * - ({type, onClick}) => <div onClick={onClick}>{type === 'prev' ? '<-' : '->'}</div>
   */
  renderArrow: import_prop_types3.default.func,
  /** A render prop for the pagination component
   * - ({ pages, activePage, onClick }) =>  <YourComponent/>
   */
  renderPagination: import_prop_types3.default.func,
  /** Position the element relative to it's wrapper (use the consts object) - consts.START | consts.CENTER | consts.END */
  itemPosition: import_prop_types3.default.oneOf([consts.START, consts.CENTER, consts.END]),
  /** A padding for each element  */
  itemPadding: import_prop_types3.default.array,
  /** A margin at the beginning and at the end of the carousel (not compatible with verticalMode yet !) */
  outerSpacing: import_prop_types3.default.number,
  // swipe
  /** Enable or disable swipe */
  enableSwipe: import_prop_types3.default.bool,
  /** Enable or disable mouse swipe */
  enableMouseSwipe: import_prop_types3.default.bool,
  /** Prevent page scroll on touchmove.
   * Use this to stop the browser from scrolling while a user swipes.
   * More details: https://github.com/FormidableLabs/react-swipeable#preventdefaulttouchmoveevent-details
   */
  preventDefaultTouchmoveEvent: import_prop_types3.default.bool,
  // auto play
  /** Enable or disable auto play */
  enableAutoPlay: import_prop_types3.default.bool,
  /** Set auto play speed (ms) */
  autoPlaySpeed: import_prop_types3.default.number,
  // callbacks
  /** A callback for the change of an item
   * - onChange(currentItemObject, currentPageIndex) => {} */
  onChange: import_prop_types3.default.func,
  /** A callback for the beginning of the next transition
   * - onNextStart(prevItemObject, nextItemObject) => {} */
  onNextStart: import_prop_types3.default.func,
  /** A callback for the beginning of the prev transition
   * - onPrevStart(prevItemObject, nextItemObject) => {} */
  onPrevStart: import_prop_types3.default.func,
  /** A callback for the end of the next transition
   * - onNextEnd(nextItemObject, currentPageIndex) => {} */
  onNextEnd: import_prop_types3.default.func,
  /** A callback for the end of the prev transition
   * - onPrevEnd(nextItemObject, currentPageIndex) => {} */
  onPrevEnd: import_prop_types3.default.func,
  /** A callback for the "slider-container" resize
   * - onResize(currentBreakPoint) => {} */
  onResize: import_prop_types3.default.func
};
var index_es_default2 = Carousel;
export {
  consts,
  index_es_default2 as default
};
/*! Bundled license information:

classnames/index.js:
  (*!
    Copyright (c) 2018 Jed Watson.
    Licensed under the MIT License (MIT), see
    http://jedwatson.github.io/classnames
  *)
*/
//# sourceMappingURL=react-elastic-carousel.js.map
