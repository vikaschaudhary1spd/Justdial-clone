import {
  require_react_dom
} from "./chunk-DKLBSZ3U.js";
import {
  require_react
} from "./chunk-SBR4UJAD.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@syncfusion/ej2-react-calendars/src/calendar/calendar.component.js
var React5 = __toESM(require_react());

// node_modules/@syncfusion/ej2-base/src/util.js
var instances = "ej2_instances";
var uid = 0;
var isBlazorPlatform = false;
function createInstance(classFunction, params) {
  var arrayParam = params;
  arrayParam.unshift(void 0);
  return new (Function.prototype.bind.apply(classFunction, arrayParam))();
}
function setImmediate(handler) {
  var unbind;
  var num = new Uint16Array(5);
  var intCrypto = window.msCrypto || window.crypto;
  intCrypto.getRandomValues(num);
  var secret = "ej2" + combineArray(num);
  var messageHandler = function(event) {
    if (event.source === window && typeof event.data === "string" && event.data.length <= 32 && event.data === secret) {
      handler();
      unbind();
    }
  };
  window.addEventListener("message", messageHandler, false);
  window.postMessage(secret, "*");
  return unbind = function() {
    window.removeEventListener("message", messageHandler);
    handler = messageHandler = secret = void 0;
  };
}
function getValue(nameSpace, obj) {
  var value = obj;
  var splits = nameSpace.replace(/\[/g, ".").replace(/\]/g, "").split(".");
  for (var i = 0; i < splits.length && !isUndefined(value); i++) {
    value = value[splits[i]];
  }
  return value;
}
function setValue(nameSpace, value, obj) {
  var keys2 = nameSpace.replace(/\[/g, ".").replace(/\]/g, "").split(".");
  var start = obj || {};
  var fromObj = start;
  var i;
  var length = keys2.length;
  var key;
  for (i = 0; i < length; i++) {
    key = keys2[i];
    if (i + 1 === length) {
      fromObj[key] = value === void 0 ? {} : value;
    } else if (isNullOrUndefined(fromObj[key])) {
      fromObj[key] = {};
    }
    fromObj = fromObj[key];
  }
  return start;
}
function deleteObject(obj, key) {
  delete obj[key];
}
function isObject(obj) {
  var objCon = {};
  return !isNullOrUndefined(obj) && obj.constructor === objCon.constructor;
}
function merge(source, destination) {
  if (!isNullOrUndefined(destination)) {
    var temrObj = source;
    var tempProp = destination;
    var keys2 = Object.keys(destination);
    var deepmerge = "deepMerge";
    for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
      var key = keys_1[_i];
      if (!isNullOrUndefined(temrObj[deepmerge]) && temrObj[deepmerge].indexOf(key) !== -1 && (isObject(tempProp[key]) || Array.isArray(tempProp[key]))) {
        extend(temrObj[key], temrObj[key], tempProp[key], true);
      } else {
        temrObj[key] = tempProp[key];
      }
    }
  }
}
function extend(copied, first, second, deep) {
  var result = copied && typeof copied === "object" ? copied : {};
  var length = arguments.length;
  if (deep) {
    length = length - 1;
  }
  var _loop_1 = function(i2) {
    if (!arguments_1[i2]) {
      return "continue";
    }
    var obj1 = arguments_1[i2];
    Object.keys(obj1).forEach(function(key) {
      var src = result[key];
      var copy = obj1[key];
      var clone;
      var isArrayChanged = Array.isArray(copy) && Array.isArray(src) && copy.length !== src.length;
      var blazorEventExtend = isBlazor() ? !(src instanceof Event) && !isArrayChanged : true;
      if (deep && blazorEventExtend && (isObject(copy) || Array.isArray(copy))) {
        if (isObject(copy)) {
          clone = src ? src : {};
          if (Array.isArray(clone) && clone.hasOwnProperty("isComplexArray")) {
            extend(clone, {}, copy, deep);
          } else {
            result[key] = extend(clone, {}, copy, deep);
          }
        } else {
          clone = isBlazor() ? src && Object.keys(copy).length : src ? src : [];
          result[key] = extend([], clone, copy, deep);
        }
      } else {
        result[key] = copy;
      }
    });
  };
  var arguments_1 = arguments;
  for (var i = 1; i < length; i++) {
    _loop_1(i);
  }
  return result;
}
function isNullOrUndefined(value) {
  return value === void 0 || value === null;
}
function isUndefined(value) {
  return "undefined" === typeof value;
}
function getUniqueID(definedName) {
  return definedName + "_" + uid++;
}
function debounce(eventFunction, delay) {
  var out;
  return function() {
    var _this = this;
    var args = arguments;
    var later = function() {
      out = null;
      return eventFunction.apply(_this, args);
    };
    clearTimeout(out);
    out = setTimeout(later, delay);
  };
}
function compareElementParent(child, parent) {
  var node = child;
  if (node === parent) {
    return true;
  } else if (node === document || !node) {
    return false;
  } else {
    return compareElementParent(node.parentNode, parent);
  }
}
function throwError(message) {
  try {
    throw new Error(message);
  } catch (e) {
    throw e.message + "\n" + e.stack;
  }
}
function formatUnit(value) {
  var result = value + "";
  if (result.match(/auto|cm|mm|in|px|pt|pc|%|em|ex|ch|rem|vw|vh|vmin|vmax/)) {
    return result;
  }
  return result + "px";
}
function isBlazor() {
  return isBlazorPlatform;
}
function getInstance(element2, component) {
  var elem = typeof element2 === "string" ? document.querySelector(element2) : element2;
  if (elem[instances]) {
    for (var _i = 0, _a = elem[instances]; _i < _a.length; _i++) {
      var inst = _a[_i];
      if (inst instanceof component) {
        return inst;
      }
    }
  }
  return null;
}
function uniqueID() {
  if (typeof window === "undefined") {
    return;
  }
  var num = new Uint16Array(5);
  var intCrypto = window.msCrypto || window.crypto;
  return intCrypto.getRandomValues(num);
}
function combineArray(num) {
  var ret = "";
  for (var i = 0; i < 5; i++) {
    ret += (i ? "," : "") + num[i];
  }
  return ret;
}

// node_modules/@syncfusion/ej2-base/src/intl/parser-base.js
var defaultNumberingSystem = {
  "latn": {
    "_digits": "0123456789",
    "_type": "numeric"
  }
};
var defaultNumberSymbols = {
  "decimal": ".",
  "group": ",",
  "percentSign": "%",
  "plusSign": "+",
  "minusSign": "-",
  "infinity": "∞",
  "nan": "NaN",
  "exponential": "E"
};
var latnNumberSystem = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
var ParserBase = (
  /** @class */
  function() {
    function ParserBase2() {
    }
    ParserBase2.getMainObject = function(obj, cName) {
      var value = isBlazor() ? cName : "main." + cName;
      return getValue(value, obj);
    };
    ParserBase2.getNumberingSystem = function(obj) {
      return getValue("supplemental.numberingSystems", obj) || this.numberingSystems;
    };
    ParserBase2.reverseObject = function(prop, keys2) {
      var propKeys = keys2 || Object.keys(prop);
      var res = {};
      for (var _i = 0, propKeys_1 = propKeys; _i < propKeys_1.length; _i++) {
        var key = propKeys_1[_i];
        if (!res.hasOwnProperty(prop[key])) {
          res[prop[key]] = key;
        }
      }
      return res;
    };
    ParserBase2.getSymbolRegex = function(props) {
      var regexStr = props.map(function(str) {
        return str.replace(/([.*+?^=!:${}()|[\]/\\])/g, "\\$1");
      }).join("|");
      return new RegExp(regexStr, "g");
    };
    ParserBase2.getSymbolMatch = function(prop) {
      var matchKeys = Object.keys(defaultNumberSymbols);
      var ret = {};
      for (var _i = 0, matchKeys_1 = matchKeys; _i < matchKeys_1.length; _i++) {
        var key = matchKeys_1[_i];
        ret[prop[key]] = defaultNumberSymbols[key];
      }
      return ret;
    };
    ParserBase2.constructRegex = function(val) {
      var len = val.length;
      var ret = "";
      for (var i = 0; i < len; i++) {
        if (i !== len - 1) {
          ret += val[i] + "|";
        } else {
          ret += val[i];
        }
      }
      return ret;
    };
    ParserBase2.convertValueParts = function(value, regex2, obj) {
      return value.replace(regex2, function(str) {
        return obj[str];
      });
    };
    ParserBase2.getDefaultNumberingSystem = function(obj) {
      var ret = {};
      ret.obj = getValue("numbers", obj);
      ret.nSystem = getValue("defaultNumberingSystem", ret.obj);
      return ret;
    };
    ParserBase2.getCurrentNumericOptions = function(curObj, numberSystem, needSymbols, blazorMode) {
      var ret = {};
      var cur = this.getDefaultNumberingSystem(curObj);
      if (!isUndefined(cur.nSystem) || blazorMode) {
        var digits = blazorMode ? getValue("obj.mapperDigits", cur) : getValue(cur.nSystem + "._digits", numberSystem);
        if (!isUndefined(digits)) {
          ret.numericPair = this.reverseObject(digits, latnNumberSystem);
          ret.numberParseRegex = new RegExp(this.constructRegex(digits), "g");
          ret.numericRegex = "[" + digits[0] + "-" + digits[9] + "]";
          if (needSymbols) {
            ret.numericRegex = digits[0] + "-" + digits[9];
            ret.symbolNumberSystem = getValue(blazorMode ? "numberSymbols" : "symbols-numberSystem-" + cur.nSystem, cur.obj);
            ret.symbolMatch = this.getSymbolMatch(ret.symbolNumberSystem);
            ret.numberSystem = cur.nSystem;
          }
        }
      }
      return ret;
    };
    ParserBase2.getNumberMapper = function(curObj, numberSystem, isNumber) {
      var ret = { mapper: {} };
      var cur = this.getDefaultNumberingSystem(curObj);
      if (!isUndefined(cur.nSystem)) {
        ret.numberSystem = cur.nSystem;
        ret.numberSymbols = getValue("symbols-numberSystem-" + cur.nSystem, cur.obj);
        ret.timeSeparator = getValue("timeSeparator", ret.numberSymbols);
        var digits = getValue(cur.nSystem + "._digits", numberSystem);
        if (!isUndefined(digits)) {
          for (var _i = 0, latnNumberSystem_1 = latnNumberSystem; _i < latnNumberSystem_1.length; _i++) {
            var i = latnNumberSystem_1[_i];
            ret.mapper[i] = digits[i];
          }
        }
      }
      return ret;
    };
    ParserBase2.nPair = "numericPair";
    ParserBase2.nRegex = "numericRegex";
    ParserBase2.numberingSystems = defaultNumberingSystem;
    return ParserBase2;
  }()
);
var blazorCurrencyData = {
  "DJF": "Fdj",
  "ERN": "Nfk",
  "ETB": "Br",
  "NAD": "$",
  "ZAR": "R",
  "XAF": "FCFA",
  "GHS": "GH₵",
  "XDR": "XDR",
  "AED": "د.إ.‏",
  "BHD": "د.ب.‏",
  "DZD": "د.ج.‏",
  "EGP": "ج.م.‏",
  "ILS": "₪",
  "IQD": "د.ع.‏",
  "JOD": "د.ا.‏",
  "KMF": "CF",
  "KWD": "د.ك.‏",
  "LBP": "ل.ل.‏",
  "LYD": "د.ل.‏",
  "MAD": "د.م.‏",
  "MRU": "أ.م.",
  "OMR": "ر.ع.‏",
  "QAR": "ر.ق.‏",
  "SAR": "ر.س.‏",
  "SDG": "ج.س.",
  "SOS": "S",
  "SSP": "£",
  "SYP": "ل.س.‏",
  "TND": "د.ت.‏",
  "YER": "ر.ي.‏",
  "CLP": "$",
  "INR": "₹",
  "TZS": "TSh",
  "EUR": "€",
  "AZN": "₼",
  "RUB": "₽",
  "BYN": "Br",
  "ZMW": "K",
  "BGN": "лв.",
  "NGN": "₦",
  "XOF": "CFA",
  "BDT": "৳",
  "CNY": "¥",
  "BAM": "КМ",
  "UGX": "USh",
  "USD": "$",
  "CZK": "Kč",
  "GBP": "£",
  "DKK": "kr.",
  "KES": "Ksh",
  "CHF": "CHF",
  "MVR": "ރ.",
  "BTN": "Nu.",
  "XCD": "EC$",
  "AUD": "$",
  "BBD": "$",
  "BIF": "FBu",
  "BMD": "$",
  "BSD": "$",
  "BWP": "P",
  "BZD": "$",
  "CAD": "$",
  "NZD": "$",
  "FJD": "$",
  "FKP": "£",
  "GIP": "£",
  "GMD": "D",
  "GYD": "$",
  "HKD": "$",
  "IDR": "Rp",
  "JMD": "$",
  "KYD": "$",
  "LRD": "$",
  "MGA": "Ar",
  "MOP": "MOP$",
  "MUR": "Rs",
  "MWK": "MK",
  "MYR": "RM",
  "PGK": "K",
  "PHP": "₱",
  "PKR": "Rs",
  "RWF": "RF",
  "SBD": "$",
  "SCR": "SR",
  "SEK": "kr",
  "SGD": "$",
  "SHP": "£",
  "SLL": "Le",
  "ANG": "NAf.",
  "SZL": "E",
  "TOP": "T$",
  "TTD": "$",
  "VUV": "VT",
  "WST": "WS$",
  "ARS": "$",
  "BOB": "Bs",
  "BRL": "R$",
  "COP": "$",
  "CRC": "₡",
  "CUP": "$",
  "DOP": "$",
  "GTQ": "Q",
  "HNL": "L",
  "MXN": "$",
  "NIO": "C$",
  "PAB": "B/.",
  "PEN": "S/",
  "PYG": "₲",
  "UYU": "$",
  "VES": "Bs.S",
  "IRR": "ريال",
  "GNF": "FG",
  "CDF": "FC",
  "HTG": "G",
  "XPF": "FCFP",
  "HRK": "kn",
  "HUF": "Ft",
  "AMD": "֏",
  "ISK": "kr",
  "JPY": "¥",
  "GEL": "₾",
  "CVE": "​",
  "KZT": "₸",
  "KHR": "៛",
  "KPW": "₩",
  "KRW": "₩",
  "KGS": "сом",
  "AOA": "Kz",
  "LAK": "₭",
  "MZN": "MTn",
  "MKD": "ден",
  "MNT": "₮",
  "BND": "$",
  "MMK": "K",
  "NOK": "kr",
  "NPR": "रु",
  "AWG": "Afl.",
  "SRD": "$",
  "PLN": "zł",
  "AFN": "؋",
  "STN": "Db",
  "MDL": "L",
  "RON": "lei",
  "UAH": "₴",
  "LKR": "රු.",
  "ALL": "Lekë",
  "RSD": "дин.",
  "TJS": "смн",
  "THB": "฿",
  "TMT": "m.",
  "TRY": "₺",
  "UZS": "сўм",
  "VND": "₫",
  "TWD": "NT$"
};
function getBlazorCurrencySymbol(currencyCode) {
  return getValue(currencyCode || "", blazorCurrencyData);
}

// node_modules/@syncfusion/ej2-base/src/hijri-parser.js
var HijriParser;
(function(HijriParser2) {
  var dateCorrection = [
    28607,
    28636,
    28665,
    28695,
    28724,
    28754,
    28783,
    28813,
    28843,
    28872,
    28901,
    28931,
    28960,
    28990,
    29019,
    29049,
    29078,
    29108,
    29137,
    29167,
    29196,
    29226,
    29255,
    29285,
    29315,
    29345,
    29375,
    29404,
    29434,
    29463,
    29492,
    29522,
    29551,
    29580,
    29610,
    29640,
    29669,
    29699,
    29729,
    29759,
    29788,
    29818,
    29847,
    29876,
    29906,
    29935,
    29964,
    29994,
    30023,
    30053,
    30082,
    30112,
    30141,
    30171,
    30200,
    30230,
    30259,
    30289,
    30318,
    30348,
    30378,
    30408,
    30437,
    30467,
    30496,
    30526,
    30555,
    30585,
    30614,
    30644,
    30673,
    30703,
    30732,
    30762,
    30791,
    30821,
    30850,
    30880,
    30909,
    30939,
    30968,
    30998,
    31027,
    31057,
    31086,
    31116,
    31145,
    31175,
    31204,
    31234,
    31263,
    31293,
    31322,
    31352,
    31381,
    31411,
    31441,
    31471,
    31500,
    31530,
    31559,
    31589,
    31618,
    31648,
    31676,
    31706,
    31736,
    31766,
    31795,
    31825,
    31854,
    31884,
    31913,
    31943,
    31972,
    32002,
    32031,
    32061,
    32090,
    32120,
    32150,
    32180,
    32209,
    32239,
    32268,
    32298,
    32327,
    32357,
    32386,
    32416,
    32445,
    32475,
    32504,
    32534,
    32563,
    32593,
    32622,
    32652,
    32681,
    32711,
    32740,
    32770,
    32799,
    32829,
    32858,
    32888,
    32917,
    32947,
    32976,
    33006,
    33035,
    33065,
    33094,
    33124,
    33153,
    33183,
    33213,
    33243,
    33272,
    33302,
    33331,
    33361,
    33390,
    33420,
    33450,
    33479,
    33509,
    33539,
    33568,
    33598,
    33627,
    33657,
    33686,
    33716,
    33745,
    33775,
    33804,
    33834,
    33863,
    33893,
    33922,
    33952,
    33981,
    34011,
    34040,
    34069,
    34099,
    34128,
    34158,
    34187,
    34217,
    34247,
    34277,
    34306,
    34336,
    34365,
    34395,
    34424,
    34454,
    34483,
    34512,
    34542,
    34571,
    34601,
    34631,
    34660,
    34690,
    34719,
    34749,
    34778,
    34808,
    34837,
    34867,
    34896,
    34926,
    34955,
    34985,
    35015,
    35044,
    35074,
    35103,
    35133,
    35162,
    35192,
    35222,
    35251,
    35280,
    35310,
    35340,
    35370,
    35399,
    35429,
    35458,
    35488,
    35517,
    35547,
    35576,
    35605,
    35635,
    35665,
    35694,
    35723,
    35753,
    35782,
    35811,
    35841,
    35871,
    35901,
    35930,
    35960,
    35989,
    36019,
    36048,
    36078,
    36107,
    36136,
    36166,
    36195,
    36225,
    36254,
    36284,
    36314,
    36343,
    36373,
    36403,
    36433,
    36462,
    36492,
    36521,
    36551,
    36580,
    36610,
    36639,
    36669,
    36698,
    36728,
    36757,
    36786,
    36816,
    36845,
    36875,
    36904,
    36934,
    36963,
    36993,
    37022,
    37052,
    37081,
    37111,
    37141,
    37170,
    37200,
    37229,
    37259,
    37288,
    37318,
    37347,
    37377,
    37406,
    37436,
    37465,
    37495,
    37524,
    37554,
    37584,
    37613,
    37643,
    37672,
    37701,
    37731,
    37760,
    37790,
    37819,
    37849,
    37878,
    37908,
    37938,
    37967,
    37997,
    38027,
    38056,
    38085,
    38115,
    38144,
    38174,
    38203,
    38233,
    38262,
    38292,
    38322,
    38351,
    38381,
    38410,
    38440,
    38469,
    38499,
    38528,
    38558,
    38587,
    38617,
    38646,
    38676,
    38705,
    38735,
    38764,
    38794,
    38823,
    38853,
    38882,
    38912,
    38941,
    38971,
    39001,
    39030,
    39059,
    39089,
    39118,
    39148,
    39178,
    39208,
    39237,
    39267,
    39297,
    39326,
    39355,
    39385,
    39414,
    39444,
    39473,
    39503,
    39532,
    39562,
    39592,
    39621,
    39650,
    39680,
    39709,
    39739,
    39768,
    39798,
    39827,
    39857,
    39886,
    39916,
    39946,
    39975,
    40005,
    40035,
    40064,
    40094,
    40123,
    40153,
    40182,
    40212,
    40241,
    40271,
    40300,
    40330,
    40359,
    40389,
    40418,
    40448,
    40477,
    40507,
    40536,
    40566,
    40595,
    40625,
    40655,
    40685,
    40714,
    40744,
    40773,
    40803,
    40832,
    40862,
    40892,
    40921,
    40951,
    40980,
    41009,
    41039,
    41068,
    41098,
    41127,
    41157,
    41186,
    41216,
    41245,
    41275,
    41304,
    41334,
    41364,
    41393,
    41422,
    41452,
    41481,
    41511,
    41540,
    41570,
    41599,
    41629,
    41658,
    41688,
    41718,
    41748,
    41777,
    41807,
    41836,
    41865,
    41894,
    41924,
    41953,
    41983,
    42012,
    42042,
    42072,
    42102,
    42131,
    42161,
    42190,
    42220,
    42249,
    42279,
    42308,
    42337,
    42367,
    42397,
    42426,
    42456,
    42485,
    42515,
    42545,
    42574,
    42604,
    42633,
    42662,
    42692,
    42721,
    42751,
    42780,
    42810,
    42839,
    42869,
    42899,
    42929,
    42958,
    42988,
    43017,
    43046,
    43076,
    43105,
    43135,
    43164,
    43194,
    43223,
    43253,
    43283,
    43312,
    43342,
    43371,
    43401,
    43430,
    43460,
    43489,
    43519,
    43548,
    43578,
    43607,
    43637,
    43666,
    43696,
    43726,
    43755,
    43785,
    43814,
    43844,
    43873,
    43903,
    43932,
    43962,
    43991,
    44021,
    44050,
    44080,
    44109,
    44139,
    44169,
    44198,
    44228,
    44258,
    44287,
    44317,
    44346,
    44375,
    44405,
    44434,
    44464,
    44493,
    44523,
    44553,
    44582,
    44612,
    44641,
    44671,
    44700,
    44730,
    44759,
    44788,
    44818,
    44847,
    44877,
    44906,
    44936,
    44966,
    44996,
    45025,
    45055,
    45084,
    45114,
    45143,
    45172,
    45202,
    45231,
    45261,
    45290,
    45320,
    45350,
    45380,
    45409,
    45439,
    45468,
    45498,
    45527,
    45556,
    45586,
    45615,
    45644,
    45674,
    45704,
    45733,
    45763,
    45793,
    45823,
    45852,
    45882,
    45911,
    45940,
    45970,
    45999,
    46028,
    46058,
    46088,
    46117,
    46147,
    46177,
    46206,
    46236,
    46265,
    46295,
    46324,
    46354,
    46383,
    46413,
    46442,
    46472,
    46501,
    46531,
    46560,
    46590,
    46620,
    46649,
    46679,
    46708,
    46738,
    46767,
    46797,
    46826,
    46856,
    46885,
    46915,
    46944,
    46974,
    47003,
    47033,
    47063,
    47092,
    47122,
    47151,
    47181,
    47210,
    47240,
    47269,
    47298,
    47328,
    47357,
    47387,
    47417,
    47446,
    47476,
    47506,
    47535,
    47565,
    47594,
    47624,
    47653,
    47682,
    47712,
    47741,
    47771,
    47800,
    47830,
    47860,
    47890,
    47919,
    47949,
    47978,
    48008,
    48037,
    48066,
    48096,
    48125,
    48155,
    48184,
    48214,
    48244,
    48273,
    48303,
    48333,
    48362,
    48392,
    48421,
    48450,
    48480,
    48509,
    48538,
    48568,
    48598,
    48627,
    48657,
    48687,
    48717,
    48746,
    48776,
    48805,
    48834,
    48864,
    48893,
    48922,
    48952,
    48982,
    49011,
    49041,
    49071,
    49100,
    49130,
    49160,
    49189,
    49218,
    49248,
    49277,
    49306,
    49336,
    49365,
    49395,
    49425,
    49455,
    49484,
    49514,
    49543,
    49573,
    49602,
    49632,
    49661,
    49690,
    49720,
    49749,
    49779,
    49809,
    49838,
    49868,
    49898,
    49927,
    49957,
    49986,
    50016,
    50045,
    50075,
    50104,
    50133,
    50163,
    50192,
    50222,
    50252,
    50281,
    50311,
    50340,
    50370,
    50400,
    50429,
    50459,
    50488,
    50518,
    50547,
    50576,
    50606,
    50635,
    50665,
    50694,
    50724,
    50754,
    50784,
    50813,
    50843,
    50872,
    50902,
    50931,
    50960,
    50990,
    51019,
    51049,
    51078,
    51108,
    51138,
    51167,
    51197,
    51227,
    51256,
    51286,
    51315,
    51345,
    51374,
    51403,
    51433,
    51462,
    51492,
    51522,
    51552,
    51582,
    51611,
    51641,
    51670,
    51699,
    51729,
    51758,
    51787,
    51816,
    51846,
    51876,
    51906,
    51936,
    51965,
    51995,
    52025,
    52054,
    52083,
    52113,
    52142,
    52171,
    52200,
    52230,
    52260,
    52290,
    52319,
    52349,
    52379,
    52408,
    52438,
    52467,
    52497,
    52526,
    52555,
    52585,
    52614,
    52644,
    52673,
    52703,
    52733,
    52762,
    52792,
    52822,
    52851,
    52881,
    52910,
    52939,
    52969,
    52998,
    53028,
    53057,
    53087,
    53116,
    53146,
    53176,
    53205,
    53235,
    53264,
    53294,
    53324,
    53353,
    53383,
    53412,
    53441,
    53471,
    53500,
    53530,
    53559,
    53589,
    53619,
    53648,
    53678,
    53708,
    53737,
    53767,
    53796,
    53825,
    53855,
    53884,
    53913,
    53943,
    53973,
    54003,
    54032,
    54062,
    54092,
    54121,
    54151,
    54180,
    54209,
    54239,
    54268,
    54297,
    54327,
    54357,
    54387,
    54416,
    54446,
    54476,
    54505,
    54535,
    54564,
    54593,
    54623,
    54652,
    54681,
    54711,
    54741,
    54770,
    54800,
    54830,
    54859,
    54889,
    54919,
    54948,
    54977,
    55007,
    55036,
    55066,
    55095,
    55125,
    55154,
    55184,
    55213,
    55243,
    55273,
    55302,
    55332,
    55361,
    55391,
    55420,
    55450,
    55479,
    55508,
    55538,
    55567,
    55597,
    55627,
    55657,
    55686,
    55716,
    55745,
    55775,
    55804,
    55834,
    55863,
    55892,
    55922,
    55951,
    55981,
    56011,
    56040,
    56070,
    56100,
    56129,
    56159,
    56188,
    56218,
    56247,
    56276,
    56306,
    56335,
    56365,
    56394,
    56424,
    56454,
    56483,
    56513,
    56543,
    56572,
    56601,
    56631,
    56660,
    56690,
    56719,
    56749,
    56778,
    56808,
    56837,
    56867,
    56897,
    56926,
    56956,
    56985,
    57015,
    57044,
    57074,
    57103,
    57133,
    57162,
    57192,
    57221,
    57251,
    57280,
    57310,
    57340,
    57369,
    57399,
    57429,
    57458,
    57487,
    57517,
    57546,
    57576,
    57605,
    57634,
    57664,
    57694,
    57723,
    57753,
    57783,
    57813,
    57842,
    57871,
    57901,
    57930,
    57959,
    57989,
    58018,
    58048,
    58077,
    58107,
    58137,
    58167,
    58196,
    58226,
    58255,
    58285,
    58314,
    58343,
    58373,
    58402,
    58432,
    58461,
    58491,
    58521,
    58551,
    58580,
    58610,
    58639,
    58669,
    58698,
    58727,
    58757,
    58786,
    58816,
    58845,
    58875,
    58905,
    58934,
    58964,
    58994,
    59023,
    59053,
    59082,
    59111,
    59141,
    59170,
    59200,
    59229,
    59259,
    59288,
    59318,
    59348,
    59377,
    59407,
    59436,
    59466,
    59495,
    59525,
    59554,
    59584,
    59613,
    59643,
    59672,
    59702,
    59731,
    59761,
    59791,
    59820,
    59850,
    59879,
    59909,
    59939,
    59968,
    59997,
    60027,
    60056,
    60086,
    60115,
    60145,
    60174,
    60204,
    60234,
    60264,
    60293,
    60323,
    60352,
    60381,
    60411,
    60440,
    60469,
    60499,
    60528,
    60558,
    60588,
    60618,
    60648,
    60677,
    60707,
    60736,
    60765,
    60795,
    60824,
    60853,
    60883,
    60912,
    60942,
    60972,
    61002,
    61031,
    61061,
    61090,
    61120,
    61149,
    61179,
    61208,
    61237,
    61267,
    61296,
    61326,
    61356,
    61385,
    61415,
    61445,
    61474,
    61504,
    61533,
    61563,
    61592,
    61621,
    61651,
    61680,
    61710,
    61739,
    61769,
    61799,
    61828,
    61858,
    61888,
    61917,
    61947,
    61976,
    62006,
    62035,
    62064,
    62094,
    62123,
    62153,
    62182,
    62212,
    62242,
    62271,
    62301,
    62331,
    62360,
    62390,
    62419,
    62448,
    62478,
    62507,
    62537,
    62566,
    62596,
    62625,
    62655,
    62685,
    62715,
    62744,
    62774,
    62803,
    62832,
    62862,
    62891,
    62921,
    62950,
    62980,
    63009,
    63039,
    63069,
    63099,
    63128,
    63157,
    63187,
    63216,
    63246,
    63275,
    63305,
    63334,
    63363,
    63393,
    63423,
    63453,
    63482,
    63512,
    63541,
    63571,
    63600,
    63630,
    63659,
    63689,
    63718,
    63747,
    63777,
    63807,
    63836,
    63866,
    63895,
    63925,
    63955,
    63984,
    64014,
    64043,
    64073,
    64102,
    64131,
    64161,
    64190,
    64220,
    64249,
    64279,
    64309,
    64339,
    64368,
    64398,
    64427,
    64457,
    64486,
    64515,
    64545,
    64574,
    64603,
    64633,
    64663,
    64692,
    64722,
    64752,
    64782,
    64811,
    64841,
    64870,
    64899,
    64929,
    64958,
    64987,
    65017,
    65047,
    65076,
    65106,
    65136,
    65166,
    65195,
    65225,
    65254,
    65283,
    65313,
    65342,
    65371,
    65401,
    65431,
    65460,
    65490,
    65520,
    65549,
    65579,
    65608,
    65638,
    65667,
    65697,
    65726,
    65755,
    65785,
    65815,
    65844,
    65874,
    65903,
    65933,
    65963,
    65992,
    66022,
    66051,
    66081,
    66110,
    66140,
    66169,
    66199,
    66228,
    66258,
    66287,
    66317,
    66346,
    66376,
    66405,
    66435,
    66465,
    66494,
    66524,
    66553,
    66583,
    66612,
    66641,
    66671,
    66700,
    66730,
    66760,
    66789,
    66819,
    66849,
    66878,
    66908,
    66937,
    66967,
    66996,
    67025,
    67055,
    67084,
    67114,
    67143,
    67173,
    67203,
    67233,
    67262,
    67292,
    67321,
    67351,
    67380,
    67409,
    67439,
    67468,
    67497,
    67527,
    67557,
    67587,
    67617,
    67646,
    67676,
    67705,
    67735,
    67764,
    67793,
    67823,
    67852,
    67882,
    67911,
    67941,
    67971,
    68e3,
    68030,
    68060,
    68089,
    68119,
    68148,
    68177,
    68207,
    68236,
    68266,
    68295,
    68325,
    68354,
    68384,
    68414,
    68443,
    68473,
    68502,
    68532,
    68561,
    68591,
    68620,
    68650,
    68679,
    68708,
    68738,
    68768,
    68797,
    68827,
    68857,
    68886,
    68916,
    68946,
    68975,
    69004,
    69034,
    69063,
    69092,
    69122,
    69152,
    69181,
    69211,
    69240,
    69270,
    69300,
    69330,
    69359,
    69388,
    69418,
    69447,
    69476,
    69506,
    69535,
    69565,
    69595,
    69624,
    69654,
    69684,
    69713,
    69743,
    69772,
    69802,
    69831,
    69861,
    69890,
    69919,
    69949,
    69978,
    70008,
    70038,
    70067,
    70097,
    70126,
    70156,
    70186,
    70215,
    70245,
    70274,
    70303,
    70333,
    70362,
    70392,
    70421,
    70451,
    70481,
    70510,
    70540,
    70570,
    70599,
    70629,
    70658,
    70687,
    70717,
    70746,
    70776,
    70805,
    70835,
    70864,
    70894,
    70924,
    70954,
    70983,
    71013,
    71042,
    71071,
    71101,
    71130,
    71159,
    71189,
    71218,
    71248,
    71278,
    71308,
    71337,
    71367,
    71397,
    71426,
    71455,
    71485,
    71514,
    71543,
    71573,
    71602,
    71632,
    71662,
    71691,
    71721,
    71751,
    71781,
    71810,
    71839,
    71869,
    71898,
    71927,
    71957,
    71986,
    72016,
    72046,
    72075,
    72105,
    72135,
    72164,
    72194,
    72223,
    72253,
    72282,
    72311,
    72341,
    72370,
    72400,
    72429,
    72459,
    72489,
    72518,
    72548,
    72577,
    72607,
    72637,
    72666,
    72695,
    72725,
    72754,
    72784,
    72813,
    72843,
    72872,
    72902,
    72931,
    72961,
    72991,
    73020,
    73050,
    73080,
    73109,
    73139,
    73168,
    73197,
    73227,
    73256,
    73286,
    73315,
    73345,
    73375,
    73404,
    73434,
    73464,
    73493,
    73523,
    73552,
    73581,
    73611,
    73640,
    73669,
    73699,
    73729,
    73758,
    73788,
    73818,
    73848,
    73877,
    73907,
    73936,
    73965,
    73995,
    74024,
    74053,
    74083,
    74113,
    74142,
    74172,
    74202,
    74231,
    74261,
    74291,
    74320,
    74349,
    74379,
    74408,
    74437,
    74467,
    74497,
    74526,
    74556,
    74586,
    74615,
    74645,
    74675,
    74704,
    74733,
    74763,
    74792,
    74822,
    74851,
    74881,
    74910,
    74940,
    74969,
    74999,
    75029,
    75058,
    75088,
    75117,
    75147,
    75176,
    75206,
    75235,
    75264,
    75294,
    75323,
    75353,
    75383,
    75412,
    75442,
    75472,
    75501,
    75531,
    75560,
    75590,
    75619,
    75648,
    75678,
    75707,
    75737,
    75766,
    75796,
    75826,
    75856,
    75885,
    75915,
    75944,
    75974,
    76003,
    76032,
    76062,
    76091,
    76121,
    76150,
    76180,
    76210,
    76239,
    76269,
    76299,
    76328,
    76358,
    76387,
    76416,
    76446,
    76475,
    76505,
    76534,
    76564,
    76593,
    76623,
    76653,
    76682,
    76712,
    76741,
    76771,
    76801,
    76830,
    76859,
    76889,
    76918,
    76948,
    76977,
    77007,
    77036,
    77066,
    77096,
    77125,
    77155,
    77185,
    77214,
    77243,
    77273,
    77302,
    77332,
    77361,
    77390,
    77420,
    77450,
    77479,
    77509,
    77539,
    77569,
    77598,
    77627,
    77657,
    77686,
    77715,
    77745,
    77774,
    77804,
    77833,
    77863,
    77893,
    77923,
    77952,
    77982,
    78011,
    78041,
    78070,
    78099,
    78129,
    78158,
    78188,
    78217,
    78247,
    78277,
    78307,
    78336,
    78366,
    78395,
    78425,
    78454,
    78483,
    78513,
    78542,
    78572,
    78601,
    78631,
    78661,
    78690,
    78720,
    78750,
    78779,
    78808,
    78838,
    78867,
    78897,
    78926,
    78956,
    78985,
    79015,
    79044,
    79074,
    79104,
    79133,
    79163,
    79192,
    79222,
    79251,
    79281,
    79310,
    79340,
    79369,
    79399,
    79428,
    79458,
    79487,
    79517,
    79546,
    79576,
    79606,
    79635,
    79665,
    79695,
    79724,
    79753,
    79783,
    79812,
    79841,
    79871,
    79900,
    79930,
    79960,
    79990
  ];
  function getHijriDate(gDate) {
    var day = gDate.getDate();
    var month2 = gDate.getMonth();
    var year = gDate.getFullYear();
    var tMonth = month2 + 1;
    var tYear = year;
    if (tMonth < 3) {
      tYear -= 1;
      tMonth += 12;
    }
    var yPrefix = Math.floor(tYear / 100);
    var julilanOffset = yPrefix - Math.floor(yPrefix / 4) - 2;
    var julianNumber = Math.floor(365.25 * (tYear + 4716)) + Math.floor(30.6001 * (tMonth + 1)) + day - julilanOffset - 1524;
    yPrefix = Math.floor((julianNumber - 186721625e-2) / 36524.25);
    julilanOffset = yPrefix - Math.floor(yPrefix / 4) + 1;
    var b = julianNumber + julilanOffset + 1524;
    var c = Math.floor((b - 122.1) / 365.25);
    var d = Math.floor(365.25 * c);
    var tempMonth = Math.floor((b - d) / 30.6001);
    day = b - d - Math.floor(30.6001 * tempMonth);
    month2 = Math.floor((b - d) / 20.6001);
    if (month2 > 13) {
      c += 1;
      month2 -= 12;
    }
    month2 -= 1;
    year = c - 4716;
    var modifiedJulianDate = julianNumber - 24e5;
    var iyear = 10631 / 30;
    var z = julianNumber - 1948084;
    var cyc = Math.floor(z / 10631);
    z = z - 10631 * cyc;
    var j = Math.floor((z - 0.1335) / iyear);
    var iy = 30 * cyc + j;
    z = z - Math.floor(j * iyear + 0.1335);
    var im = Math.floor((z + 28.5001) / 29.5);
    if (im === 13) {
      im = 12;
    }
    var tempDay = z - Math.floor(29.5001 * im - 29);
    var i = 0;
    for (; i < dateCorrection.length; i++) {
      if (dateCorrection[i] > modifiedJulianDate) {
        break;
      }
    }
    var iln = i + 16260;
    var ii = Math.floor((iln - 1) / 12);
    var hYear = ii + 1;
    var hmonth = iln - 12 * ii;
    var hDate = modifiedJulianDate - dateCorrection[i - 1] + 1;
    if ((hDate + "").length > 2) {
      hDate = tempDay;
      hmonth = im;
      hYear = iy;
    }
    return { year: hYear, month: hmonth, date: hDate };
  }
  HijriParser2.getHijriDate = getHijriDate;
  function toGregorian(year, month2, day) {
    var iy = year;
    var im = month2;
    var id = day;
    var ii = iy - 1;
    var iln = ii * 12 + 1 + (im - 1);
    var i = iln - 16260;
    var mcjdn = id + dateCorrection[i - 1] - 1;
    var julianDate = mcjdn + 24e5;
    var z = Math.floor(julianDate + 0.5);
    var a = Math.floor((z - 186721625e-2) / 36524.25);
    a = z + 1 + a - Math.floor(a / 4);
    var b = a + 1524;
    var c = Math.floor((b - 122.1) / 365.25);
    var d = Math.floor(365.25 * c);
    var e = Math.floor((b - d) / 30.6001);
    var gDay = b - d - Math.floor(e * 30.6001);
    var gMonth = e - (e > 13.5 ? 13 : 1);
    var gYear = c - (gMonth > 2.5 ? 4716 : 4715);
    if (gYear <= 0) {
      gMonth--;
    }
    return /* @__PURE__ */ new Date(gYear + "/" + gMonth + "/" + gDay);
  }
  HijriParser2.toGregorian = toGregorian;
})(HijriParser || (HijriParser = {}));

// node_modules/@syncfusion/ej2-base/src/intl/date-formatter.js
var abbreviateRegexGlobal = /\/MMMMM|MMMM|MMM|a|LLLL|LLL|EEEEE|EEEE|E|K|cccc|ccc|WW|W|G+|z+/gi;
var standalone = "stand-alone";
var weekdayKey = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
var timeSetter = {
  m: "getMinutes",
  h: "getHours",
  H: "getHours",
  s: "getSeconds",
  d: "getDate",
  f: "getMilliseconds"
};
var datePartMatcher = {
  "M": "month",
  "d": "day",
  "E": "weekday",
  "c": "weekday",
  "y": "year",
  "m": "minute",
  "h": "hour",
  "H": "hour",
  "s": "second",
  "L": "month",
  "a": "designator",
  "z": "timeZone",
  "Z": "timeZone",
  "G": "era",
  "f": "milliseconds"
};
var timeSeparator = "timeSeparator";
var DateFormat = (
  /** @class */
  function() {
    function DateFormat2() {
    }
    DateFormat2.dateFormat = function(culture, option, cldr) {
      var _this = this;
      var dependable = IntlBase.getDependables(cldr, culture, option.calendar);
      var numObject = getValue("parserObject.numbers", dependable);
      var dateObject = dependable.dateObject;
      var formatOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar) };
      if (isBlazor() && option.isServerRendered) {
        option = IntlBase.compareBlazorDateFormats(option, culture);
      }
      var resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : "");
      formatOptions.dateSeperator = isBlazor() ? getValue("dateSeperator", dateObject) : IntlBase.getDateSeparator(dependable.dateObject);
      if (isUndefined(resPattern)) {
        throwError("Format options or type given must be invalid");
      } else {
        resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);
        if (isBlazor()) {
          resPattern = resPattern.replace(/tt/, "a");
        }
        formatOptions.pattern = resPattern;
        formatOptions.numMapper = isBlazor() ? extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));
        var patternMatch = resPattern.match(abbreviateRegexGlobal) || [];
        for (var _i = 0, patternMatch_1 = patternMatch; _i < patternMatch_1.length; _i++) {
          var str = patternMatch_1[_i];
          var len = str.length;
          var char = str[0];
          if (char === "K") {
            char = "h";
          }
          switch (char) {
            case "E":
            case "c":
              if (isBlazor()) {
                formatOptions.weekday = getValue("days." + IntlBase.monthIndex[len], dateObject);
              } else {
                formatOptions.weekday = dependable.dateObject[IntlBase.days][standalone][IntlBase.monthIndex[len]];
              }
              break;
            case "M":
            case "L":
              if (isBlazor()) {
                formatOptions.month = getValue("months." + IntlBase.monthIndex[len], dateObject);
              } else {
                formatOptions.month = dependable.dateObject[IntlBase.month][standalone][IntlBase.monthIndex[len]];
              }
              break;
            case "a":
              formatOptions.designator = isBlazor() ? getValue("dayPeriods", dateObject) : getValue("dayPeriods.format.wide", dateObject);
              break;
            case "G":
              var eText = len <= 3 ? "eraAbbr" : len === 4 ? "eraNames" : "eraNarrow";
              formatOptions.era = isBlazor() ? getValue("eras", dateObject) : getValue("eras." + eText, dependable.dateObject);
              break;
            case "z":
              formatOptions.timeZone = getValue("dates.timeZoneNames", dependable.parserObject);
              break;
          }
        }
      }
      return function(value) {
        if (isNaN(value.getDate())) {
          return null;
        }
        return _this.intDateFormatter(value, formatOptions);
      };
    };
    DateFormat2.intDateFormatter = function(value, options) {
      var pattern = options.pattern;
      var ret = "";
      var matches2 = pattern.match(IntlBase.dateParseRegex);
      var dObject = this.getCurrentDateValue(value, options.isIslamic);
      for (var _i = 0, matches_1 = matches2; _i < matches_1.length; _i++) {
        var match = matches_1[_i];
        var length_1 = match.length;
        var char = match[0];
        if (char === "K") {
          char = "h";
        }
        var curval = void 0;
        var curvalstr = "";
        var isNumber = void 0;
        var processNumber = void 0;
        var curstr = "";
        switch (char) {
          case "M":
          case "L":
            curval = dObject.month;
            if (length_1 > 2) {
              ret += options.month[curval];
            } else {
              isNumber = true;
            }
            break;
          case "E":
          case "c":
            ret += options.weekday[weekdayKey[value.getDay()]];
            break;
          case "H":
          case "h":
          case "m":
          case "s":
          case "d":
          case "f":
            isNumber = true;
            if (char === "d") {
              curval = dObject.date;
            } else if (char === "f") {
              isNumber = false;
              processNumber = true;
              curvalstr = value[timeSetter[char]]().toString();
              curvalstr = curvalstr.substring(0, length_1);
              var curlength = curvalstr.length;
              if (length_1 !== curlength) {
                if (length_1 > 3) {
                  continue;
                }
                for (var i = 0; i < length_1 - curlength; i++) {
                  curvalstr = "0" + curvalstr.toString();
                }
              }
              curstr += curvalstr;
            } else {
              curval = value[timeSetter[char]]();
            }
            if (char === "h") {
              curval = curval % 12 || 12;
            }
            break;
          case "y":
            processNumber = true;
            curstr += dObject.year;
            if (length_1 === 2) {
              curstr = curstr.substr(curstr.length - 2);
            }
            break;
          case "a":
            var desig = value.getHours() < 12 ? "am" : "pm";
            ret += options.designator[desig];
            break;
          case "G":
            var dec = value.getFullYear() < 0 ? 0 : 1;
            var retu = options.era[dec];
            if (isNullOrUndefined(retu)) {
              retu = options.era[dec ? 0 : 1];
            }
            ret += retu || "";
            break;
          case "'":
            ret += match === "''" ? "'" : match.replace(/'/g, "");
            break;
          case "z":
            var timezone = value.getTimezoneOffset();
            var pattern_1 = length_1 < 4 ? "+H;-H" : options.timeZone.hourFormat;
            pattern_1 = pattern_1.replace(/:/g, options.numMapper.timeSeparator);
            if (timezone === 0) {
              ret += options.timeZone.gmtZeroFormat;
            } else {
              processNumber = true;
              curstr = this.getTimeZoneValue(timezone, pattern_1);
            }
            curstr = options.timeZone.gmtFormat.replace(/\{0\}/, curstr);
            break;
          case ":":
            ret += options.numMapper.numberSymbols[timeSeparator];
            break;
          case "/":
            ret += options.dateSeperator;
            break;
          case "W":
            isNumber = true;
            curval = IntlBase.getWeekOfYear(value);
            break;
          default:
            ret += match;
        }
        if (isNumber) {
          processNumber = true;
          curstr = this.checkTwodigitNumber(curval, length_1);
        }
        if (processNumber) {
          ret += ParserBase.convertValueParts(curstr, IntlBase.latnParseRegex, options.numMapper.mapper);
        }
      }
      return ret;
    };
    DateFormat2.getCurrentDateValue = function(value, isIslamic) {
      if (isIslamic) {
        return HijriParser.getHijriDate(value);
      }
      return { year: value.getFullYear(), month: value.getMonth() + 1, date: value.getDate() };
    };
    DateFormat2.checkTwodigitNumber = function(val, len) {
      var ret = val + "";
      if (len === 2 && ret.length !== 2) {
        return "0" + ret;
      }
      return ret;
    };
    DateFormat2.getTimeZoneValue = function(tVal, pattern) {
      var _this = this;
      var splt = pattern.split(";");
      var curPattern = splt[tVal > 0 ? 1 : 0];
      var no = Math.abs(tVal);
      return curPattern = curPattern.replace(/HH?|mm/g, function(str) {
        var len = str.length;
        var ishour = str.indexOf("H") !== -1;
        return _this.checkTwodigitNumber(Math.floor(ishour ? no / 60 : no % 60), len);
      });
    };
    return DateFormat2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/intl/number-formatter.js
var errorText = {
  "ms": "minimumSignificantDigits",
  "ls": "maximumSignificantDigits",
  "mf": "minimumFractionDigits",
  "lf": "maximumFractionDigits"
};
var percentSign = "percentSign";
var minusSign = "minusSign";
var mapper = ["infinity", "nan", "group", "decimal", "exponential"];
var NumberFormat = (
  /** @class */
  function() {
    function NumberFormat2() {
    }
    NumberFormat2.numberFormatter = function(culture, option, cldr) {
      var _this = this;
      var fOptions = extend({}, option);
      var cOptions = {};
      var dOptions = {};
      var symbolPattern;
      var dependable = IntlBase.getDependables(cldr, culture, "", true);
      var numObject = dependable.numericObject;
      dOptions.numberMapper = isBlazor() ? extend({}, numObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);
      dOptions.currencySymbol = isBlazor() ? getValue("currencySymbol", numObject) : IntlBase.getCurrencySymbol(dependable.numericObject, fOptions.currency || defaultCurrencyCode, option.altSymbol);
      dOptions.percentSymbol = isBlazor() ? getValue("numberSymbols.percentSign", numObject) : dOptions.numberMapper.numberSymbols[percentSign];
      dOptions.minusSymbol = isBlazor() ? getValue("numberSymbols.minusSign", numObject) : dOptions.numberMapper.numberSymbols[minusSign];
      var symbols = dOptions.numberMapper.numberSymbols;
      if (option.format && !IntlBase.formatRegex.test(option.format)) {
        cOptions = IntlBase.customFormat(option.format, dOptions, dependable.numericObject);
      } else {
        extend(fOptions, IntlBase.getProperNumericSkeleton(option.format || "N"));
        fOptions.isCurrency = fOptions.type === "currency";
        fOptions.isPercent = fOptions.type === "percent";
        if (!isBlazor()) {
          symbolPattern = IntlBase.getSymbolPattern(fOptions.type, dOptions.numberMapper.numberSystem, dependable.numericObject, fOptions.isAccount);
        }
        fOptions.groupOne = this.checkValueRange(fOptions.maximumSignificantDigits, fOptions.minimumSignificantDigits, true);
        this.checkValueRange(fOptions.maximumFractionDigits, fOptions.minimumFractionDigits, false, true);
        if (!isUndefined(fOptions.fractionDigits)) {
          fOptions.minimumFractionDigits = fOptions.maximumFractionDigits = fOptions.fractionDigits;
        }
        if (isUndefined(fOptions.useGrouping)) {
          fOptions.useGrouping = true;
        }
        if (fOptions.isCurrency && !isBlazor()) {
          symbolPattern = symbolPattern.replace(/\u00A4/g, IntlBase.defaultCurrency);
        }
        if (!isBlazor()) {
          var split = symbolPattern.split(";");
          cOptions.nData = IntlBase.getFormatData(split[1] || "-" + split[0], true, dOptions.currencySymbol);
          cOptions.pData = IntlBase.getFormatData(split[0], false, dOptions.currencySymbol);
          if (fOptions.useGrouping) {
            fOptions.groupSeparator = symbols[mapper[2]];
            fOptions.groupData = this.getGroupingDetails(split[0]);
          }
        } else {
          cOptions.nData = extend({}, {}, getValue(fOptions.type + "nData", numObject));
          cOptions.pData = extend({}, {}, getValue(fOptions.type + "pData", numObject));
          if (fOptions.type === "currency" && option.currency) {
            IntlBase.replaceBlazorCurrency([cOptions.pData, cOptions.nData], dOptions.currencySymbol, option.currency);
          }
        }
        var minFrac = isUndefined(fOptions.minimumFractionDigits);
        if (minFrac) {
          fOptions.minimumFractionDigits = cOptions.nData.minimumFraction;
        }
        if (isUndefined(fOptions.maximumFractionDigits)) {
          var mval = cOptions.nData.maximumFraction;
          fOptions.maximumFractionDigits = isUndefined(mval) && fOptions.isPercent ? 0 : mval;
        }
        var mfrac = fOptions.minimumFractionDigits;
        var lfrac = fOptions.maximumFractionDigits;
        if (!isUndefined(mfrac) && !isUndefined(lfrac)) {
          if (mfrac > lfrac) {
            fOptions.maximumFractionDigits = mfrac;
          }
        }
      }
      extend(cOptions.nData, fOptions);
      extend(cOptions.pData, fOptions);
      return function(value) {
        if (isNaN(value)) {
          return symbols[mapper[1]];
        } else if (!isFinite(value)) {
          return symbols[mapper[0]];
        }
        return _this.intNumberFormatter(value, cOptions, dOptions);
      };
    };
    NumberFormat2.getGroupingDetails = function(pattern) {
      var ret = {};
      var match = pattern.match(IntlBase.negativeDataRegex);
      if (match && match[4]) {
        var pattern_1 = match[4];
        var p = pattern_1.lastIndexOf(",");
        if (p !== -1) {
          var temp = pattern_1.split(".")[0];
          ret.primary = temp.length - p - 1;
          var s = pattern_1.lastIndexOf(",", p - 1);
          if (s !== -1) {
            ret.secondary = p - 1 - s;
          }
        }
      }
      return ret;
    };
    NumberFormat2.checkValueRange = function(val1, val2, checkbothExist, isFraction) {
      var decide = isFraction ? "f" : "s";
      var dint = 0;
      var str1 = errorText["l" + decide];
      var str2 = errorText["m" + decide];
      if (!isUndefined(val1)) {
        this.checkRange(val1, str1, isFraction);
        dint++;
      }
      if (!isUndefined(val2)) {
        this.checkRange(val2, str2, isFraction);
        dint++;
      }
      if (dint === 2) {
        if (val1 < val2) {
          throwError(str2 + "specified must be less than the" + str1);
        } else {
          return true;
        }
      } else if (checkbothExist && dint === 1) {
        throwError("Both" + str2 + "and" + str2 + "must be present");
      }
      return false;
    };
    NumberFormat2.checkRange = function(val, text, isFraction) {
      var range = isFraction ? [0, 20] : [1, 21];
      if (val < range[0] || val > range[1]) {
        throwError(text + "value must be within the range" + range[0] + "to" + range[1]);
      }
    };
    NumberFormat2.intNumberFormatter = function(value, fOptions, dOptions) {
      var curData;
      if (isUndefined(fOptions.nData.type)) {
        return void 0;
      } else {
        if (value < 0) {
          value = value * -1;
          curData = fOptions.nData;
        } else if (value === 0) {
          curData = fOptions.zeroData || fOptions.pData;
        } else {
          curData = fOptions.pData;
        }
        var fValue = "";
        if (curData.isPercent) {
          value = value * 100;
        }
        if (curData.groupOne) {
          fValue = this.processSignificantDigits(value, curData.minimumSignificantDigits, curData.maximumSignificantDigits);
        } else {
          fValue = this.processFraction(value, curData.minimumFractionDigits, curData.maximumFractionDigits);
          if (curData.minimumIntegerDigits) {
            fValue = this.processMinimumIntegers(fValue, curData.minimumIntegerDigits);
          }
        }
        if (curData.type === "scientific") {
          fValue = value.toExponential(curData.maximumFractionDigits);
          fValue = fValue.replace("e", dOptions.numberMapper.numberSymbols[mapper[4]]);
        }
        fValue = fValue.replace(".", dOptions.numberMapper.numberSymbols[mapper[3]]);
        if (curData.useGrouping) {
          fValue = this.groupNumbers(fValue, curData.groupData.primary, curData.groupSeparator || ",", dOptions.numberMapper.numberSymbols[mapper[3]] || ".", curData.groupData.secondary);
        }
        fValue = ParserBase.convertValueParts(fValue, IntlBase.latnParseRegex, dOptions.numberMapper.mapper);
        if (curData.nlead === "N/A") {
          return curData.nlead;
        } else {
          return curData.nlead + fValue + curData.nend;
        }
      }
    };
    NumberFormat2.processSignificantDigits = function(value, min, max) {
      var temp = value + "";
      var tn;
      var length = temp.length;
      if (length < min) {
        return value.toPrecision(min);
      } else {
        temp = value.toPrecision(max);
        tn = +temp;
        return tn + "";
      }
    };
    NumberFormat2.groupNumbers = function(val, level1, sep, decimalSymbol, level2) {
      var flag = !isNullOrUndefined(level2) && level2 !== 0;
      var split = val.split(decimalSymbol);
      var prefix = split[0];
      var length = prefix.length;
      var str = "";
      while (length > level1) {
        str = prefix.slice(length - level1, length) + (str.length ? sep + str : "");
        length -= level1;
        if (flag) {
          level1 = level2;
          flag = false;
        }
      }
      split[0] = prefix.slice(0, length) + (str.length ? sep : "") + str;
      return split.join(decimalSymbol);
    };
    NumberFormat2.processFraction = function(value, min, max) {
      var temp = (value + "").split(".")[1];
      var length = temp ? temp.length : 0;
      if (min && length < min) {
        var ret = "";
        if (length === 0) {
          ret = value.toFixed(min);
        } else {
          ret += value;
          for (var j = 0; j < min - length; j++) {
            ret += "0";
          }
          return ret;
        }
        return value.toFixed(min);
      } else if (!isNullOrUndefined(max) && (length > max || max === 0)) {
        return value.toFixed(max);
      }
      return value + "";
    };
    NumberFormat2.processMinimumIntegers = function(value, min) {
      var temp = value.split(".");
      var lead = temp[0];
      var len = lead.length;
      if (len < min) {
        for (var i = 0; i < min - len; i++) {
          lead = "0" + lead;
        }
        temp[0] = lead;
      }
      return temp.join(".");
    };
    return NumberFormat2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/intl/date-parser.js
var standalone2 = "stand-alone";
var latnRegex = /^[0-9]*$/;
var timeSetter2 = {
  minute: "setMinutes",
  hour: "setHours",
  second: "setSeconds",
  day: "setDate",
  month: "setMonth",
  milliseconds: "setMilliseconds"
};
var month = "months";
var DateParser = (
  /** @class */
  function() {
    function DateParser2() {
    }
    DateParser2.dateParser = function(culture, option, cldr) {
      var _this = this;
      var dependable = IntlBase.getDependables(cldr, culture, option.calendar);
      var numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), false, isBlazor());
      var parseOptions = {};
      if (isBlazor() && option.isServerRendered) {
        option = IntlBase.compareBlazorDateFormats(option, culture);
      }
      var resPattern = option.format || IntlBase.getResultantPattern(option.skeleton, dependable.dateObject, option.type, false, isBlazor() ? culture : "");
      var regexString = "";
      var hourOnly;
      if (isUndefined(resPattern)) {
        throwError("Format options or type given must be invalid");
      } else {
        resPattern = IntlBase.ConvertDateToWeekFormat(resPattern);
        parseOptions = { isIslamic: IntlBase.islamicRegex.test(option.calendar), pattern: resPattern, evalposition: {}, culture };
        var patternMatch = resPattern.match(IntlBase.dateParseRegex) || [];
        var length_1 = patternMatch.length;
        var gmtCorrection = 0;
        var zCorrectTemp = 0;
        var isgmtTraversed = false;
        var nRegx = numOptions.numericRegex;
        var numMapper = isBlazor() ? dependable.parserObject.numbers : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));
        for (var i = 0; i < length_1; i++) {
          var str = patternMatch[i];
          var len = str.length;
          var char = str[0] === "K" ? "h" : str[0];
          var isNumber = void 0;
          var canUpdate = void 0;
          var charKey = datePartMatcher[char];
          var optional = len === 2 ? "" : "?";
          if (isgmtTraversed) {
            gmtCorrection = zCorrectTemp;
            isgmtTraversed = false;
          }
          switch (char) {
            case "E":
            case "c":
              var weekData = void 0;
              if (isBlazor()) {
                weekData = getValue("days." + IntlBase.monthIndex[len], dependable.dateObject);
              } else {
                weekData = dependable.dateObject[IntlBase.days][standalone2][IntlBase.monthIndex[len]];
              }
              var weekObject = ParserBase.reverseObject(weekData);
              regexString += "(" + Object.keys(weekObject).join("|") + ")";
              break;
            case "M":
            case "L":
            case "d":
            case "m":
            case "s":
            case "h":
            case "H":
            case "f":
              canUpdate = true;
              if ((char === "M" || char === "L") && len > 2) {
                var monthData = void 0;
                if (isBlazor()) {
                  monthData = getValue("months." + IntlBase.monthIndex[len], dependable.dateObject);
                } else {
                  monthData = dependable.dateObject[month][standalone2][IntlBase.monthIndex[len]];
                }
                parseOptions[charKey] = ParserBase.reverseObject(monthData);
                regexString += "(" + Object.keys(parseOptions[charKey]).join("|") + ")";
              } else if (char === "f") {
                if (len > 3) {
                  continue;
                }
                isNumber = true;
                regexString += "(" + nRegx + nRegx + "?" + nRegx + "?)";
              } else {
                isNumber = true;
                regexString += "(" + nRegx + nRegx + optional + ")";
              }
              if (char === "h") {
                parseOptions.hour12 = true;
              }
              break;
            case "W":
              var opt = len === 1 ? "?" : "";
              regexString += "(" + nRegx + opt + nRegx + ")";
              break;
            case "y":
              canUpdate = isNumber = true;
              if (len === 2) {
                regexString += "(" + nRegx + nRegx + ")";
              } else {
                regexString += "(" + nRegx + "{" + len + ",})";
              }
              break;
            case "a":
              canUpdate = true;
              var periodValur = isBlazor() ? getValue("dayPeriods", dependable.dateObject) : getValue("dayPeriods.format.wide", dependable.dateObject);
              parseOptions[charKey] = ParserBase.reverseObject(periodValur);
              regexString += "(" + Object.keys(parseOptions[charKey]).join("|") + ")";
              break;
            case "G":
              canUpdate = true;
              var eText = len <= 3 ? "eraAbbr" : len === 4 ? "eraNames" : "eraNarrow";
              parseOptions[charKey] = ParserBase.reverseObject(isBlazor() ? getValue("eras", dependable.dateObject) : getValue("eras." + eText, dependable.dateObject));
              regexString += "(" + Object.keys(parseOptions[charKey]).join("|") + "?)";
              break;
            case "z":
              var tval = (/* @__PURE__ */ new Date()).getTimezoneOffset();
              canUpdate = tval !== 0;
              parseOptions[charKey] = getValue("dates.timeZoneNames", dependable.parserObject);
              var tzone = parseOptions[charKey];
              hourOnly = len < 4;
              var hpattern = hourOnly ? "+H;-H" : tzone.hourFormat;
              hpattern = hpattern.replace(/:/g, numMapper.timeSeparator);
              regexString += "(" + this.parseTimeZoneRegx(hpattern, tzone, nRegx) + ")?";
              isgmtTraversed = true;
              zCorrectTemp = hourOnly ? 6 : 12;
              break;
            case "'":
              var iString = str.replace(/'/g, "");
              regexString += "(" + iString + ")?";
              break;
            default:
              regexString += "([\\D])";
              break;
          }
          if (canUpdate) {
            parseOptions.evalposition[charKey] = { isNumber, pos: i + 1 + gmtCorrection, hourOnly };
          }
          if (i === length_1 - 1 && !isNullOrUndefined(regexString)) {
            parseOptions.parserRegex = new RegExp("^" + regexString + "$", "i");
          }
        }
      }
      return function(value) {
        var parsedDateParts = _this.internalDateParse(value, parseOptions, numOptions);
        if (isNullOrUndefined(parsedDateParts) || !Object.keys(parsedDateParts).length) {
          return null;
        }
        if (parseOptions.isIslamic) {
          var dobj = {};
          var tYear = parsedDateParts.year;
          var tDate = parsedDateParts.day;
          var tMonth = parsedDateParts.month;
          var ystrig = tYear ? tYear + "" : "";
          var is2DigitYear = ystrig.length === 2;
          if (!tYear || !tMonth || !tDate || is2DigitYear) {
            dobj = HijriParser.getHijriDate(/* @__PURE__ */ new Date());
          }
          if (is2DigitYear) {
            tYear = parseInt((dobj.year + "").slice(0, 2) + ystrig, 10);
          }
          var dateObject = HijriParser.toGregorian(tYear || dobj.year, tMonth || dobj.month, tDate || dobj.date);
          parsedDateParts.year = dateObject.getFullYear();
          parsedDateParts.month = dateObject.getMonth() + 1;
          parsedDateParts.day = dateObject.getDate();
        }
        return _this.getDateObject(parsedDateParts);
      };
    };
    DateParser2.getDateObject = function(options, value) {
      var res = value || /* @__PURE__ */ new Date();
      res.setMilliseconds(0);
      var tKeys = ["hour", "minute", "second", "milliseconds", "month", "day"];
      var y = options.year;
      var desig = options.designator;
      var tzone = options.timeZone;
      if (!isUndefined(y)) {
        var len = (y + "").length;
        if (len <= 2) {
          var century = Math.floor(res.getFullYear() / 100) * 100;
          y += century;
        }
        res.setFullYear(y);
      }
      for (var _i = 0, tKeys_1 = tKeys; _i < tKeys_1.length; _i++) {
        var key = tKeys_1[_i];
        var tValue = options[key];
        if (isUndefined(tValue) && key === "day") {
          res.setDate(1);
        }
        if (!isUndefined(tValue)) {
          if (key === "month") {
            tValue -= 1;
            if (tValue < 0 || tValue > 11) {
              return /* @__PURE__ */ new Date("invalid");
            }
            var pDate = res.getDate();
            res.setDate(1);
            res[timeSetter2[key]](tValue);
            var lDate = new Date(res.getFullYear(), tValue + 1, 0).getDate();
            res.setDate(pDate < lDate ? pDate : lDate);
          } else {
            if (key === "day") {
              var lastDay = new Date(res.getFullYear(), res.getMonth() + 1, 0).getDate();
              if (tValue < 1 || tValue > lastDay) {
                return null;
              }
            }
            res[timeSetter2[key]](tValue);
          }
        }
      }
      if (!isUndefined(desig)) {
        var hour = res.getHours();
        if (desig === "pm") {
          res.setHours(hour + (hour === 12 ? 0 : 12));
        } else if (hour === 12) {
          res.setHours(0);
        }
      }
      if (!isUndefined(tzone)) {
        var tzValue = tzone - res.getTimezoneOffset();
        if (tzValue !== 0) {
          res.setMinutes(res.getMinutes() + tzValue);
        }
      }
      return res;
    };
    DateParser2.internalDateParse = function(value, parseOptions, num) {
      var matches2 = value.match(parseOptions.parserRegex);
      var retOptions = { "hour": 0, "minute": 0, "second": 0 };
      if (isNullOrUndefined(matches2)) {
        return null;
      } else {
        var props = Object.keys(parseOptions.evalposition);
        for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
          var prop = props_1[_i];
          var curObject = parseOptions.evalposition[prop];
          var matchString = matches2[curObject.pos];
          if (curObject.isNumber) {
            retOptions[prop] = this.internalNumberParser(matchString, num);
          } else {
            if (prop === "timeZone" && !isUndefined(matchString)) {
              var pos = curObject.pos;
              var val = void 0;
              var tmatch = matches2[pos + 1];
              var flag = !isUndefined(tmatch);
              if (curObject.hourOnly) {
                val = this.getZoneValue(flag, tmatch, matches2[pos + 4], num) * 60;
              } else {
                val = this.getZoneValue(flag, tmatch, matches2[pos + 7], num) * 60;
                val += this.getZoneValue(flag, matches2[pos + 4], matches2[pos + 10], num);
              }
              if (!isNullOrUndefined(val)) {
                retOptions[prop] = val;
              }
            } else {
              matchString = prop === "month" && !parseOptions.isIslamic && (parseOptions.culture === "en" || parseOptions.culture === "en-GB" || parseOptions.culture === "en-US") ? matchString[0].toUpperCase() + matchString.substring(1).toLowerCase() : matchString;
              retOptions[prop] = parseOptions[prop][matchString];
            }
          }
        }
        if (parseOptions.hour12) {
          retOptions.hour12 = true;
        }
      }
      return retOptions;
    };
    DateParser2.internalNumberParser = function(value, option) {
      value = ParserBase.convertValueParts(value, option.numberParseRegex, option.numericPair);
      if (latnRegex.test(value)) {
        return +value;
      }
      return null;
    };
    DateParser2.parseTimeZoneRegx = function(hourFormat, tZone, nRegex) {
      var pattern = tZone.gmtFormat;
      var ret;
      var cRegex = "(" + nRegex + ")(" + nRegex + ")";
      var splitStr;
      ret = hourFormat.replace("+", "\\+");
      if (hourFormat.indexOf("HH") !== -1) {
        ret = ret.replace(/HH|mm/g, "(" + cRegex + ")");
      } else {
        ret = ret.replace(/H|m/g, "(" + cRegex + "?)");
      }
      splitStr = ret.split(";").map(function(str) {
        return pattern.replace("{0}", str);
      });
      ret = splitStr.join("|") + "|" + tZone.gmtZeroFormat;
      return ret;
    };
    DateParser2.getZoneValue = function(flag, val1, val2, num) {
      var ival = flag ? val1 : val2;
      if (!ival) {
        return 0;
      }
      var value = this.internalNumberParser(ival, num);
      if (flag) {
        return -value;
      }
      return value;
    };
    return DateParser2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/intl/number-parser.js
var parseRegex = /^([^0-9]*)(([0-9,]*[0-9]+)(\.[0-9]+)?)([Ee][+-]?[0-9]+)?([^0-9]*)$/;
var groupRegex = /,/g;
var keys = ["minusSign", "infinity"];
var NumberParser = (
  /** @class */
  function() {
    function NumberParser2() {
    }
    NumberParser2.numberParser = function(culture, option, cldr) {
      var _this = this;
      var dependable = IntlBase.getDependables(cldr, culture, "", true);
      var parseOptions = { custom: true };
      var numOptions;
      if (IntlBase.formatRegex.test(option.format) || !option.format) {
        extend(parseOptions, IntlBase.getProperNumericSkeleton(option.format || "N"));
        parseOptions.custom = false;
        if (!parseOptions.fractionDigits) {
          if (option.maximumFractionDigits) {
            parseOptions.maximumFractionDigits = option.maximumFractionDigits;
          }
        }
      } else {
        extend(parseOptions, IntlBase.customFormat(option.format, null, null));
      }
      var numbers = getValue("numbers", dependable.parserObject);
      numOptions = ParserBase.getCurrentNumericOptions(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true, isBlazor());
      parseOptions.symbolRegex = ParserBase.getSymbolRegex(Object.keys(numOptions.symbolMatch));
      parseOptions.infinity = numOptions.symbolNumberSystem[keys[1]];
      var symbolpattern;
      if (!isBlazor()) {
        symbolpattern = IntlBase.getSymbolPattern(parseOptions.type, numOptions.numberSystem, dependable.numericObject, parseOptions.isAccount);
        if (symbolpattern) {
          symbolpattern = symbolpattern.replace(/\u00A4/g, IntlBase.defaultCurrency);
          var split = symbolpattern.split(";");
          parseOptions.nData = IntlBase.getFormatData(split[1] || "-" + split[0], true, "");
          parseOptions.pData = IntlBase.getFormatData(split[0], true, "");
        }
      } else {
        parseOptions.nData = extend({}, {}, getValue(parseOptions.type + "nData", numbers));
        parseOptions.pData = extend({}, {}, getValue(parseOptions.type + "pData", numbers));
        if (parseOptions.type === "currency" && option.currency) {
          IntlBase.replaceBlazorCurrency([parseOptions.pData, parseOptions.nData], getValue("currencySymbol", numbers), option.currency);
        }
      }
      return function(value) {
        return _this.getParsedNumber(value, parseOptions, numOptions);
      };
    };
    NumberParser2.getParsedNumber = function(value, options, numOptions) {
      var isNegative;
      var isPercent;
      var tempValue;
      var lead;
      var end;
      var ret;
      if (value.indexOf(options.infinity) !== -1) {
        return Infinity;
      } else {
        value = ParserBase.convertValueParts(value, options.symbolRegex, numOptions.symbolMatch);
        value = ParserBase.convertValueParts(value, numOptions.numberParseRegex, numOptions.numericPair);
        value = value.indexOf("-") !== -1 ? value.replace("-.", "-0.") : value;
        if (value.indexOf(".") === 0) {
          value = "0" + value;
        }
        var matches2 = value.match(parseRegex);
        if (isNullOrUndefined(matches2)) {
          return NaN;
        }
        lead = matches2[1];
        tempValue = matches2[2];
        var exponent = matches2[5];
        end = matches2[6];
        isNegative = options.custom ? lead === options.nData.nlead && end === options.nData.nend : lead.indexOf(options.nData.nlead) !== -1 && end.indexOf(options.nData.nend) !== -1;
        isPercent = isNegative ? options.nData.isPercent : options.pData.isPercent;
        tempValue = tempValue.replace(groupRegex, "");
        if (exponent) {
          tempValue += exponent;
        }
        ret = +tempValue;
        if (options.type === "percent" || isPercent) {
          ret = ret / 100;
        }
        if (options.custom || options.fractionDigits) {
          ret = parseFloat(ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.fractionDigits));
        }
        if (options.maximumFractionDigits) {
          ret = this.convertMaxFracDigits(tempValue, options, ret, isNegative);
        }
        if (isNegative) {
          ret *= -1;
        }
        return ret;
      }
    };
    NumberParser2.convertMaxFracDigits = function(value, options, ret, isNegative) {
      var decimalSplitValue = value.split(".");
      if (decimalSplitValue[1] && decimalSplitValue[1].length > options.maximumFractionDigits) {
        ret = +ret.toFixed(options.custom ? isNegative ? options.nData.maximumFractionDigits : options.pData.maximumFractionDigits : options.maximumFractionDigits);
      }
      return ret;
    };
    return NumberParser2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/observer.js
var Observer = (
  /** @class */
  function() {
    function Observer2(context) {
      this.ranArray = [];
      this.boundedEvents = {};
      if (isNullOrUndefined(context)) {
        return;
      }
      this.context = context;
    }
    Observer2.prototype.on = function(property, handler, context, id) {
      if (isNullOrUndefined(handler)) {
        return;
      }
      var cntxt = context || this.context;
      if (this.notExist(property)) {
        this.boundedEvents[property] = [{ handler, context: cntxt }];
        return;
      }
      if (!isNullOrUndefined(id)) {
        if (this.ranArray.indexOf(id) === -1) {
          this.ranArray.push(id);
          this.boundedEvents[property].push({ handler, context: cntxt, id });
        }
      } else if (!this.isHandlerPresent(this.boundedEvents[property], handler)) {
        this.boundedEvents[property].push({ handler, context: cntxt });
      }
    };
    Observer2.prototype.off = function(property, handler, id) {
      if (this.notExist(property)) {
        return;
      }
      var curObject = getValue(property, this.boundedEvents);
      if (handler) {
        for (var i = 0; i < curObject.length; i++) {
          if (id) {
            if (curObject[i].id === id) {
              curObject.splice(i, 1);
              var indexLocation = this.ranArray.indexOf(id);
              if (indexLocation !== -1) {
                this.ranArray.splice(indexLocation, 1);
              }
              break;
            }
          } else if (handler === curObject[i].handler) {
            curObject.splice(i, 1);
            break;
          }
        }
      } else {
        delete this.boundedEvents[property];
      }
    };
    Observer2.prototype.notify = function(property, argument, successHandler, errorHandler) {
      if (this.notExist(property)) {
        if (successHandler) {
          successHandler.call(this, argument);
        }
        return;
      }
      if (argument) {
        argument.name = property;
      }
      var blazor = "Blazor";
      var curObject = getValue(property, this.boundedEvents).slice(0);
      if (window[blazor]) {
        return this.blazorCallback(curObject, argument, successHandler, errorHandler, 0);
      } else {
        for (var _i = 0, curObject_1 = curObject; _i < curObject_1.length; _i++) {
          var cur = curObject_1[_i];
          cur.handler.call(cur.context, argument);
        }
        if (successHandler) {
          successHandler.call(this, argument);
        }
      }
    };
    Observer2.prototype.blazorCallback = function(objs, argument, successHandler, errorHandler, index) {
      var _this = this;
      var isTrigger = index === objs.length - 1;
      if (index < objs.length) {
        var obj_1 = objs[index];
        var promise = obj_1.handler.call(obj_1.context, argument);
        if (promise && typeof promise.then === "function") {
          if (!successHandler) {
            return promise;
          }
          promise.then(function(data) {
            data = typeof data === "string" && _this.isJson(data) ? JSON.parse(data, _this.dateReviver) : data;
            extend(argument, argument, data, true);
            if (successHandler && isTrigger) {
              successHandler.call(obj_1.context, argument);
            } else {
              return _this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
            }
          }).catch(function(data) {
            if (errorHandler) {
              errorHandler.call(obj_1.context, typeof data === "string" && _this.isJson(data) ? JSON.parse(data, _this.dateReviver) : data);
            }
          });
        } else if (successHandler && isTrigger) {
          successHandler.call(obj_1.context, argument);
        } else {
          return this.blazorCallback(objs, argument, successHandler, errorHandler, index + 1);
        }
      }
    };
    Observer2.prototype.dateReviver = function(key, value) {
      var dPattern = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}/;
      if (isBlazor && typeof value === "string" && value.match(dPattern) !== null) {
        return new Date(value);
      }
      return value;
    };
    Observer2.prototype.isJson = function(value) {
      try {
        JSON.parse(value);
      } catch (e) {
        return false;
      }
      return true;
    };
    Observer2.prototype.destroy = function() {
      this.boundedEvents = this.context = void 0;
    };
    Observer2.prototype.notExist = function(prop) {
      return this.boundedEvents.hasOwnProperty(prop) === false || this.boundedEvents[prop].length <= 0;
    };
    Observer2.prototype.isHandlerPresent = function(boundedEvents, handler) {
      for (var _i = 0, boundedEvents_1 = boundedEvents; _i < boundedEvents_1.length; _i++) {
        var cur = boundedEvents_1[_i];
        if (cur.handler === handler) {
          return true;
        }
      }
      return false;
    };
    return Observer2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/internationalization.js
var onIntlChange = new Observer();
var rightToLeft = false;
var cldrData = {};
var defaultCulture = "en-US";
var defaultCurrencyCode = "USD";
var mapper2 = ["numericObject", "dateObject"];
var Internationalization = (
  /** @class */
  function() {
    function Internationalization2(cultureName) {
      if (cultureName) {
        this.culture = cultureName;
      }
    }
    Internationalization2.prototype.getDateFormat = function(options) {
      return DateFormat.dateFormat(this.getCulture(), options || { type: "date", skeleton: "short" }, cldrData);
    };
    Internationalization2.prototype.getNumberFormat = function(options) {
      if (options && !options.currency) {
        options.currency = defaultCurrencyCode;
      }
      if (isBlazor() && options && !options.format) {
        options.minimumFractionDigits = 0;
      }
      return NumberFormat.numberFormatter(this.getCulture(), options || {}, cldrData);
    };
    Internationalization2.prototype.getDateParser = function(options) {
      return DateParser.dateParser(this.getCulture(), options || { skeleton: "short", type: "date" }, cldrData);
    };
    Internationalization2.prototype.getNumberParser = function(options) {
      if (isBlazor() && options && !options.format) {
        options.minimumFractionDigits = 0;
      }
      return NumberParser.numberParser(this.getCulture(), options || { format: "N" }, cldrData);
    };
    Internationalization2.prototype.formatNumber = function(value, option) {
      return this.getNumberFormat(option)(value);
    };
    Internationalization2.prototype.formatDate = function(value, option) {
      return this.getDateFormat(option)(value);
    };
    Internationalization2.prototype.parseDate = function(value, option) {
      return this.getDateParser(option)(value);
    };
    Internationalization2.prototype.parseNumber = function(value, option) {
      return this.getNumberParser(option)(value);
    };
    Internationalization2.prototype.getDatePattern = function(option, isExcelFormat) {
      return IntlBase.getActualDateTimeFormat(this.getCulture(), option, cldrData, isExcelFormat);
    };
    Internationalization2.prototype.getNumberPattern = function(option, isExcel) {
      return IntlBase.getActualNumberFormat(this.getCulture(), option, cldrData, isExcel);
    };
    Internationalization2.prototype.getFirstDayOfWeek = function() {
      return IntlBase.getWeekData(this.getCulture(), cldrData);
    };
    Internationalization2.prototype.getCulture = function() {
      return this.culture || defaultCulture;
    };
    return Internationalization2;
  }()
);
function getNumericObject(locale, type) {
  var numObject = IntlBase.getDependables(cldrData, locale, "", true)[mapper2[0]];
  var dateObject = IntlBase.getDependables(cldrData, locale, "")[mapper2[1]];
  var numSystem = getValue("defaultNumberingSystem", numObject);
  var symbPattern = isBlazor() ? getValue("numberSymbols", numObject) : getValue("symbols-numberSystem-" + numSystem, numObject);
  var pattern = IntlBase.getSymbolPattern(type || "decimal", numSystem, numObject, false);
  return extend(symbPattern, IntlBase.getFormatData(pattern, true, "", true), { "dateSeparator": IntlBase.getDateSeparator(dateObject) });
}
function getDefaultDateObject(mode) {
  return IntlBase.getDependables(cldrData, "", mode, false)[mapper2[1]];
}

// node_modules/@syncfusion/ej2-base/src/intl/intl-base.js
var blazorCultureFormats = {
  "en-US": {
    "d": "M/d/y",
    "D": "EEEE, MMMM d, y",
    "f": "EEEE, MMMM d, y h:mm a",
    "F": "EEEE, MMMM d, y h:mm:s a",
    "g": "M/d/y h:mm a",
    "G": "M/d/yyyy h:mm:ss tt",
    "m": "MMMM d",
    "M": "MMMM d",
    "r": "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
    "R": "ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",
    "s": "yyyy'-'MM'-'dd'T'HH':'mm':'ss",
    "t": "h:mm tt",
    "T": "h:m:s tt",
    "u": "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
    "U": "dddd, MMMM d, yyyy h:mm:ss tt",
    "y": "MMMM yyyy",
    "Y": "MMMM yyyy"
  }
};
var IntlBase;
(function(IntlBase2) {
  IntlBase2.negativeDataRegex = /^(('[^']+'|''|[^*#@0,.E])*)(\*.)?((([#,]*[0,]*0+)(\.0*[0-9]*#*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
  IntlBase2.customRegex = /^(('[^']+'|''|[^*#@0,.])*)(\*.)?((([0#,]*[0,]*[0#]*[0#\ ]*)(\.[0#]*)?)|([#,]*@+#*))(E\+?0+)?(('[^']+'|''|[^*#@0,.E])*)$/;
  IntlBase2.latnParseRegex = /0|1|2|3|4|5|6|7|8|9/g;
  var fractionRegex = /[0-9]/g;
  IntlBase2.defaultCurrency = "$";
  var mapper3 = ["infinity", "nan", "group", "decimal"];
  var patternRegex = /G|M|L|H|c|'| a|yy|y|EEEE|E/g;
  var patternMatch = {
    "G": "",
    "M": "m",
    "L": "m",
    "H": "h",
    "c": "d",
    "'": '"',
    " a": " AM/PM",
    "yy": "yy",
    "y": "yyyy",
    "EEEE": "dddd",
    "E": "ddd"
  };
  IntlBase2.dateConverterMapper = /dddd|ddd/ig;
  var defaultFirstDay = "sun";
  IntlBase2.islamicRegex = /^islamic/;
  var firstDayMapper = {
    "sun": 0,
    "mon": 1,
    "tue": 2,
    "wed": 3,
    "thu": 4,
    "fri": 5,
    "sat": 6
  };
  IntlBase2.formatRegex = /(^[ncpae]{1})([0-1]?[0-9]|20)?$/i;
  IntlBase2.currencyFormatRegex = /(^[ca]{1})([0-1]?[0-9]|20)?$/i;
  IntlBase2.curWithoutNumberRegex = /(c|a)$/ig;
  var typeMapper = {
    "$": "isCurrency",
    "%": "isPercent",
    "-": "isNegative",
    0: "nlead",
    1: "nend"
  };
  IntlBase2.dateParseRegex = /([a-z])\1*|'([^']|'')+'|''|./gi;
  IntlBase2.basicPatterns = ["short", "medium", "long", "full"];
  IntlBase2.defaultObject = {
    "dates": {
      "calendars": {
        "gregorian": {
          "months": {
            "stand-alone": {
              "abbreviated": {
                "1": "Jan",
                "2": "Feb",
                "3": "Mar",
                "4": "Apr",
                "5": "May",
                "6": "Jun",
                "7": "Jul",
                "8": "Aug",
                "9": "Sep",
                "10": "Oct",
                "11": "Nov",
                "12": "Dec"
              },
              "narrow": {
                "1": "J",
                "2": "F",
                "3": "M",
                "4": "A",
                "5": "M",
                "6": "J",
                "7": "J",
                "8": "A",
                "9": "S",
                "10": "O",
                "11": "N",
                "12": "D"
              },
              "wide": {
                "1": "January",
                "2": "February",
                "3": "March",
                "4": "April",
                "5": "May",
                "6": "June",
                "7": "July",
                "8": "August",
                "9": "September",
                "10": "October",
                "11": "November",
                "12": "December"
              }
            }
          },
          "days": {
            "stand-alone": {
              "abbreviated": {
                "sun": "Sun",
                "mon": "Mon",
                "tue": "Tue",
                "wed": "Wed",
                "thu": "Thu",
                "fri": "Fri",
                "sat": "Sat"
              },
              "narrow": {
                "sun": "S",
                "mon": "M",
                "tue": "T",
                "wed": "W",
                "thu": "T",
                "fri": "F",
                "sat": "S"
              },
              "short": {
                "sun": "Su",
                "mon": "Mo",
                "tue": "Tu",
                "wed": "We",
                "thu": "Th",
                "fri": "Fr",
                "sat": "Sa"
              },
              "wide": {
                "sun": "Sunday",
                "mon": "Monday",
                "tue": "Tuesday",
                "wed": "Wednesday",
                "thu": "Thursday",
                "fri": "Friday",
                "sat": "Saturday"
              }
            }
          },
          "dayPeriods": {
            "format": {
              "wide": {
                "am": "AM",
                "pm": "PM"
              }
            }
          },
          "eras": {
            "eraNames": {
              "0": "Before Christ",
              "0-alt-variant": "Before Common Era",
              "1": "Anno Domini",
              "1-alt-variant": "Common Era"
            },
            "eraAbbr": {
              "0": "BC",
              "0-alt-variant": "BCE",
              "1": "AD",
              "1-alt-variant": "CE"
            },
            "eraNarrow": {
              "0": "B",
              "0-alt-variant": "BCE",
              "1": "A",
              "1-alt-variant": "CE"
            }
          },
          "dateFormats": {
            "full": "EEEE, MMMM d, y",
            "long": "MMMM d, y",
            "medium": "MMM d, y",
            "short": "M/d/yy"
          },
          "timeFormats": {
            "full": "h:mm:ss a zzzz",
            "long": "h:mm:ss a z",
            "medium": "h:mm:ss a",
            "short": "h:mm a"
          },
          "dateTimeFormats": {
            "full": "{1} 'at' {0}",
            "long": "{1} 'at' {0}",
            "medium": "{1}, {0}",
            "short": "{1}, {0}",
            "availableFormats": {
              "d": "d",
              "E": "ccc",
              "Ed": "d E",
              "Ehm": "E h:mm a",
              "EHm": "E HH:mm",
              "Ehms": "E h:mm:ss a",
              "EHms": "E HH:mm:ss",
              "Gy": "y G",
              "GyMMM": "MMM y G",
              "GyMMMd": "MMM d, y G",
              "GyMMMEd": "E, MMM d, y G",
              "h": "h a",
              "H": "HH",
              "hm": "h:mm a",
              "Hm": "HH:mm",
              "hms": "h:mm:ss a",
              "Hms": "HH:mm:ss",
              "hmsv": "h:mm:ss a v",
              "Hmsv": "HH:mm:ss v",
              "hmv": "h:mm a v",
              "Hmv": "HH:mm v",
              "M": "L",
              "Md": "M/d",
              "MEd": "E, M/d",
              "MMM": "LLL",
              "MMMd": "MMM d",
              "MMMEd": "E, MMM d",
              "MMMMd": "MMMM d",
              "ms": "mm:ss",
              "y": "y",
              "yM": "M/y",
              "yMd": "M/d/y",
              "yMEd": "E, M/d/y",
              "yMMM": "MMM y",
              "yMMMd": "MMM d, y",
              "yMMMEd": "E, MMM d, y",
              "yMMMM": "MMMM y"
            }
          }
        },
        "islamic": {
          "months": {
            "stand-alone": {
              "abbreviated": {
                "1": "Muh.",
                "2": "Saf.",
                "3": "Rab. I",
                "4": "Rab. II",
                "5": "Jum. I",
                "6": "Jum. II",
                "7": "Raj.",
                "8": "Sha.",
                "9": "Ram.",
                "10": "Shaw.",
                "11": "Dhuʻl-Q.",
                "12": "Dhuʻl-H."
              },
              "narrow": {
                "1": "1",
                "2": "2",
                "3": "3",
                "4": "4",
                "5": "5",
                "6": "6",
                "7": "7",
                "8": "8",
                "9": "9",
                "10": "10",
                "11": "11",
                "12": "12"
              },
              "wide": {
                "1": "Muharram",
                "2": "Safar",
                "3": "Rabiʻ I",
                "4": "Rabiʻ II",
                "5": "Jumada I",
                "6": "Jumada II",
                "7": "Rajab",
                "8": "Shaʻban",
                "9": "Ramadan",
                "10": "Shawwal",
                "11": "Dhuʻl-Qiʻdah",
                "12": "Dhuʻl-Hijjah"
              }
            }
          },
          "days": {
            "stand-alone": {
              "abbreviated": {
                "sun": "Sun",
                "mon": "Mon",
                "tue": "Tue",
                "wed": "Wed",
                "thu": "Thu",
                "fri": "Fri",
                "sat": "Sat"
              },
              "narrow": {
                "sun": "S",
                "mon": "M",
                "tue": "T",
                "wed": "W",
                "thu": "T",
                "fri": "F",
                "sat": "S"
              },
              "short": {
                "sun": "Su",
                "mon": "Mo",
                "tue": "Tu",
                "wed": "We",
                "thu": "Th",
                "fri": "Fr",
                "sat": "Sa"
              },
              "wide": {
                "sun": "Sunday",
                "mon": "Monday",
                "tue": "Tuesday",
                "wed": "Wednesday",
                "thu": "Thursday",
                "fri": "Friday",
                "sat": "Saturday"
              }
            }
          },
          "dayPeriods": {
            "format": {
              "wide": {
                "am": "AM",
                "pm": "PM"
              }
            }
          },
          "eras": {
            "eraNames": {
              "0": "AH"
            },
            "eraAbbr": {
              "0": "AH"
            },
            "eraNarrow": {
              "0": "AH"
            }
          },
          "dateFormats": {
            "full": "EEEE, MMMM d, y G",
            "long": "MMMM d, y G",
            "medium": "MMM d, y G",
            "short": "M/d/y GGGGG"
          },
          "timeFormats": {
            "full": "h:mm:ss a zzzz",
            "long": "h:mm:ss a z",
            "medium": "h:mm:ss a",
            "short": "h:mm a"
          },
          "dateTimeFormats": {
            "full": "{1} 'at' {0}",
            "long": "{1} 'at' {0}",
            "medium": "{1}, {0}",
            "short": "{1}, {0}",
            "availableFormats": {
              "d": "d",
              "E": "ccc",
              "Ed": "d E",
              "Ehm": "E h:mm a",
              "EHm": "E HH:mm",
              "Ehms": "E h:mm:ss a",
              "EHms": "E HH:mm:ss",
              "Gy": "y G",
              "GyMMM": "MMM y G",
              "GyMMMd": "MMM d, y G",
              "GyMMMEd": "E, MMM d, y G",
              "h": "h a",
              "H": "HH",
              "hm": "h:mm a",
              "Hm": "HH:mm",
              "hms": "h:mm:ss a",
              "Hms": "HH:mm:ss",
              "M": "L",
              "Md": "M/d",
              "MEd": "E, M/d",
              "MMM": "LLL",
              "MMMd": "MMM d",
              "MMMEd": "E, MMM d",
              "MMMMd": "MMMM d",
              "ms": "mm:ss",
              "y": "y G",
              "yyyy": "y G",
              "yyyyM": "M/y GGGGG",
              "yyyyMd": "M/d/y GGGGG",
              "yyyyMEd": "E, M/d/y GGGGG",
              "yyyyMMM": "MMM y G",
              "yyyyMMMd": "MMM d, y G",
              "yyyyMMMEd": "E, MMM d, y G",
              "yyyyMMMM": "MMMM y G",
              "yyyyQQQ": "QQQ y G",
              "yyyyQQQQ": "QQQQ y G"
            }
          }
        }
      },
      "timeZoneNames": {
        "hourFormat": "+HH:mm;-HH:mm",
        "gmtFormat": "GMT{0}",
        "gmtZeroFormat": "GMT"
      }
    },
    "numbers": {
      "currencies": {
        "USD": {
          "displayName": "US Dollar",
          "symbol": "$",
          "symbol-alt-narrow": "$"
        },
        "EUR": {
          "displayName": "Euro",
          "symbol": "€",
          "symbol-alt-narrow": "€"
        },
        "GBP": {
          "displayName": "British Pound",
          "symbol-alt-narrow": "£"
        }
      },
      "defaultNumberingSystem": "latn",
      "minimumGroupingDigits": "1",
      "symbols-numberSystem-latn": {
        "decimal": ".",
        "group": ",",
        "list": ";",
        "percentSign": "%",
        "plusSign": "+",
        "minusSign": "-",
        "exponential": "E",
        "superscriptingExponent": "×",
        "perMille": "‰",
        "infinity": "∞",
        "nan": "NaN",
        "timeSeparator": ":"
      },
      "decimalFormats-numberSystem-latn": {
        "standard": "#,##0.###"
      },
      "percentFormats-numberSystem-latn": {
        "standard": "#,##0%"
      },
      "currencyFormats-numberSystem-latn": {
        "standard": "¤#,##0.00",
        "accounting": "¤#,##0.00;(¤#,##0.00)"
      },
      "scientificFormats-numberSystem-latn": {
        "standard": "#E0"
      }
    }
  };
  IntlBase2.blazorDefaultObject = {
    "numbers": {
      "mapper": {
        "0": "0",
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "5",
        "6": "6",
        "7": "7",
        "8": "8",
        "9": "9"
      },
      "mapperDigits": "0123456789",
      "numberSymbols": {
        "decimal": ".",
        "group": ",",
        "plusSign": "+",
        "minusSign": "-",
        "percentSign": "%",
        "nan": "NaN",
        "timeSeparator": ":",
        "infinity": "∞"
      },
      "timeSeparator": ":",
      "currencySymbol": "$",
      "currencypData": {
        "nlead": "$",
        "nend": "",
        "groupSeparator": ",",
        "groupData": {
          "primary": 3
        },
        "maximumFraction": 2,
        "minimumFraction": 2
      },
      "percentpData": {
        "nlead": "",
        "nend": "%",
        "groupSeparator": ",",
        "groupData": {
          "primary": 3
        },
        "maximumFraction": 2,
        "minimumFraction": 2
      },
      "percentnData": {
        "nlead": "-",
        "nend": "%",
        "groupSeparator": ",",
        "groupData": {
          "primary": 3
        },
        "maximumFraction": 2,
        "minimumFraction": 2
      },
      "currencynData": {
        "nlead": "($",
        "nend": ")",
        "groupSeparator": ",",
        "groupData": {
          "primary": 3
        },
        "maximumFraction": 2,
        "minimumFraction": 2
      },
      "decimalnData": {
        "nlead": "-",
        "nend": "",
        "groupData": {
          "primary": 3
        },
        "maximumFraction": 2,
        "minimumFraction": 2
      },
      "decimalpData": {
        "nlead": "",
        "nend": "",
        "groupData": {
          "primary": 3
        },
        "maximumFraction": 2,
        "minimumFraction": 2
      }
    },
    "dates": {
      "dayPeriods": {
        "am": "AM",
        "pm": "PM"
      },
      "dateSeperator": "/",
      "days": {
        "abbreviated": {
          "sun": "Sun",
          "mon": "Mon",
          "tue": "Tue",
          "wed": "Wed",
          "thu": "Thu",
          "fri": "Fri",
          "sat": "Sat"
        },
        "short": {
          "sun": "Su",
          "mon": "Mo",
          "tue": "Tu",
          "wed": "We",
          "thu": "Th",
          "fri": "Fr",
          "sat": "Sa"
        },
        "wide": {
          "sun": "Sunday",
          "mon": "Monday",
          "tue": "Tuesday",
          "wed": "Wednesday",
          "thu": "Thursday",
          "fri": "Friday",
          "sat": "Saturday"
        }
      },
      "months": {
        "abbreviated": {
          "1": "Jan",
          "2": "Feb",
          "3": "Mar",
          "4": "Apr",
          "5": "May",
          "6": "Jun",
          "7": "Jul",
          "8": "Aug",
          "9": "Sep",
          "10": "Oct",
          "11": "Nov",
          "12": "Dec"
        },
        "wide": {
          "1": "January",
          "2": "February",
          "3": "March",
          "4": "April",
          "5": "May",
          "6": "June",
          "7": "July",
          "8": "August",
          "9": "September",
          "10": "October",
          "11": "November",
          "12": "December"
        }
      },
      "eras": {
        "1": "AD"
      }
    }
  };
  IntlBase2.monthIndex = {
    3: "abbreviated",
    4: "wide",
    5: "narrow",
    1: "abbreviated"
  };
  IntlBase2.month = "months";
  IntlBase2.days = "days";
  IntlBase2.patternMatcher = {
    C: "currency",
    P: "percent",
    N: "decimal",
    A: "currency",
    E: "scientific"
  };
  function getResultantPattern(skeleton, dateObject, type, isIslamic, blazorCulture) {
    var resPattern;
    var iType = type || "date";
    if (blazorCulture) {
      resPattern = compareBlazorDateFormats({ skeleton }, blazorCulture).format || compareBlazorDateFormats({ skeleton: "d" }, "en-US").format;
    } else {
      if (IntlBase2.basicPatterns.indexOf(skeleton) !== -1) {
        resPattern = getValue(iType + "Formats." + skeleton, dateObject);
        if (iType === "dateTime") {
          var dPattern = getValue("dateFormats." + skeleton, dateObject);
          var tPattern = getValue("timeFormats." + skeleton, dateObject);
          resPattern = resPattern.replace("{1}", dPattern).replace("{0}", tPattern);
        }
      } else {
        resPattern = getValue("dateTimeFormats.availableFormats." + skeleton, dateObject);
      }
      if (isUndefined(resPattern) && skeleton === "yMd") {
        resPattern = "M/d/y";
      }
    }
    return resPattern;
  }
  IntlBase2.getResultantPattern = getResultantPattern;
  function getDependables(cldr, culture, mode, isNumber) {
    var ret = {};
    var calendartype = mode || "gregorian";
    ret.parserObject = ParserBase.getMainObject(cldr, culture) || (isBlazor() ? IntlBase2.blazorDefaultObject : IntlBase2.defaultObject);
    if (isNumber) {
      ret.numericObject = getValue("numbers", ret.parserObject);
    } else {
      var dateString = isBlazor() ? "dates" : "dates.calendars." + calendartype;
      ret.dateObject = getValue(dateString, ret.parserObject);
    }
    return ret;
  }
  IntlBase2.getDependables = getDependables;
  function getSymbolPattern(type, numSystem, obj, isAccount) {
    return getValue(type + "Formats-numberSystem-" + numSystem + (isAccount ? ".accounting" : ".standard"), obj) || (isAccount ? getValue(type + "Formats-numberSystem-" + numSystem + ".standard", obj) : "");
  }
  IntlBase2.getSymbolPattern = getSymbolPattern;
  function ConvertDateToWeekFormat(format) {
    var convertMapper = format.match(IntlBase2.dateConverterMapper);
    if (convertMapper && isBlazor()) {
      var tempString = convertMapper[0].length === 3 ? "EEE" : "EEEE";
      return format.replace(IntlBase2.dateConverterMapper, tempString);
    }
    return format;
  }
  IntlBase2.ConvertDateToWeekFormat = ConvertDateToWeekFormat;
  function compareBlazorDateFormats(formatOptions, culture) {
    var format = formatOptions.format || formatOptions.skeleton;
    var curFormatMapper = getValue((culture || "en-US") + "." + format, blazorCultureFormats);
    if (!curFormatMapper) {
      curFormatMapper = getValue("en-US." + format, blazorCultureFormats);
    }
    if (curFormatMapper) {
      curFormatMapper = ConvertDateToWeekFormat(curFormatMapper);
      formatOptions.format = curFormatMapper.replace(/tt/, "a");
    }
    return formatOptions;
  }
  IntlBase2.compareBlazorDateFormats = compareBlazorDateFormats;
  function getProperNumericSkeleton(skeleton) {
    var matches2 = skeleton.match(IntlBase2.formatRegex);
    var ret = {};
    var pattern = matches2[1].toUpperCase();
    ret.isAccount = pattern === "A";
    ret.type = IntlBase2.patternMatcher[pattern];
    if (skeleton.length > 1) {
      ret.fractionDigits = parseInt(matches2[2], 10);
    }
    return ret;
  }
  IntlBase2.getProperNumericSkeleton = getProperNumericSkeleton;
  function getFormatData(pattern, needFraction, cSymbol, fractionOnly) {
    var nData = fractionOnly ? {} : { nlead: "", nend: "" };
    var match = pattern.match(IntlBase2.customRegex);
    if (match) {
      if (!fractionOnly) {
        nData.nlead = changeCurrencySymbol(match[1], cSymbol);
        nData.nend = changeCurrencySymbol(match[10], cSymbol);
        nData.groupPattern = match[4];
      }
      var fraction = match[7];
      if (fraction && needFraction) {
        var fmatch = fraction.match(fractionRegex);
        if (!isNullOrUndefined(fmatch)) {
          nData.minimumFraction = fmatch.length;
        } else {
          nData.minimumFraction = 0;
        }
        nData.maximumFraction = fraction.length - 1;
      }
    }
    return nData;
  }
  IntlBase2.getFormatData = getFormatData;
  function changeCurrencySymbol(val, sym) {
    if (val) {
      return val.replace(IntlBase2.defaultCurrency, sym);
    }
    return "";
  }
  IntlBase2.changeCurrencySymbol = changeCurrencySymbol;
  function getCurrencySymbol(numericObject, currencyCode, altSymbol) {
    var symbol = altSymbol ? "." + altSymbol : ".symbol";
    var getCurrency = getValue("currencies." + currencyCode + symbol, numericObject) || getValue("currencies." + currencyCode + ".symbol-alt-narrow", numericObject) || "$";
    return getCurrency;
  }
  IntlBase2.getCurrencySymbol = getCurrencySymbol;
  function customFormat(format, dOptions, obj) {
    var options = {};
    var formatSplit = format.split(";");
    var data = ["pData", "nData", "zeroData"];
    for (var i = 0; i < formatSplit.length; i++) {
      options[data[i]] = customNumberFormat(formatSplit[i], dOptions, obj);
    }
    if (isNullOrUndefined(options.nData)) {
      options.nData = extend({}, options.pData);
      options.nData.nlead = isNullOrUndefined(dOptions) ? "-" + options.nData.nlead : dOptions.minusSymbol + options.nData.nlead;
    }
    return options;
  }
  IntlBase2.customFormat = customFormat;
  function customNumberFormat(format, dOptions, numObject) {
    var cOptions = { type: "decimal", minimumFractionDigits: 0, maximumFractionDigits: 0 };
    var pattern = format.match(IntlBase2.customRegex);
    if (isNullOrUndefined(pattern) || pattern[5] === "" && format !== "N/A") {
      cOptions.type = void 0;
      return cOptions;
    }
    cOptions.nlead = pattern[1];
    cOptions.nend = pattern[10];
    var integerPart = pattern[6];
    var spaceCapture = integerPart.match(/\ $/g) ? true : false;
    var spaceGrouping = integerPart.replace(/\ $/g, "").indexOf(" ") !== -1;
    cOptions.useGrouping = integerPart.indexOf(",") !== -1 || spaceGrouping;
    integerPart = spaceGrouping ? integerPart.replace(/,/g, "") : integerPart.replace(/,/g, "").replace(/\ $/g, "");
    var fractionPart = pattern[7];
    if (integerPart.indexOf("0") !== -1) {
      cOptions.minimumIntegerDigits = integerPart.length - integerPart.indexOf("0");
    }
    if (!isNullOrUndefined(fractionPart)) {
      cOptions.minimumFractionDigits = fractionPart.lastIndexOf("0");
      cOptions.maximumFractionDigits = fractionPart.lastIndexOf("#");
      if (cOptions.minimumFractionDigits === -1) {
        cOptions.minimumFractionDigits = 0;
      }
      if (cOptions.maximumFractionDigits === -1 || cOptions.maximumFractionDigits < cOptions.minimumFractionDigits) {
        cOptions.maximumFractionDigits = cOptions.minimumFractionDigits;
      }
    }
    if (!isNullOrUndefined(dOptions)) {
      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], "$", dOptions.currencySymbol));
      if (!cOptions.isCurrency) {
        extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], "%", dOptions.percentSymbol));
      }
    } else {
      extend(cOptions, isCurrencyPercent([cOptions.nlead, cOptions.nend], "%", "%"));
    }
    if (!isNullOrUndefined(numObject)) {
      var symbolPattern = getSymbolPattern(cOptions.type, dOptions.numberMapper.numberSystem, numObject, false);
      if (cOptions.useGrouping) {
        cOptions.groupSeparator = spaceGrouping ? " " : dOptions.numberMapper.numberSymbols[mapper3[2]];
        cOptions.groupData = NumberFormat.getGroupingDetails(symbolPattern.split(";")[0]);
      }
      cOptions.nlead = cOptions.nlead.replace(/'/g, "");
      cOptions.nend = spaceCapture ? " " + cOptions.nend.replace(/'/g, "") : cOptions.nend.replace(/'/g, "");
    }
    return cOptions;
  }
  IntlBase2.customNumberFormat = customNumberFormat;
  function isCurrencyPercent(parts, actual, symbol) {
    var options = { nlead: parts[0], nend: parts[1] };
    for (var i = 0; i < 2; i++) {
      var part = parts[i];
      var loc = part.indexOf(actual);
      if (loc !== -1 && (loc < part.indexOf("'") || loc > part.lastIndexOf("'"))) {
        options[typeMapper[i]] = part.substr(0, loc) + symbol + part.substr(loc + 1);
        options[typeMapper[actual]] = true;
        options.type = options.isCurrency ? "currency" : "percent";
        break;
      }
    }
    return options;
  }
  IntlBase2.isCurrencyPercent = isCurrencyPercent;
  function getDateSeparator(dateObj) {
    var value = (getValue("dateFormats.short", dateObj) || "").match(/[d‏M‏]([^d‏M])[d‏M‏]/i);
    return value ? value[1] : "/";
  }
  IntlBase2.getDateSeparator = getDateSeparator;
  function getActualDateTimeFormat(culture, options, cldr, isExcelFormat) {
    var dependable = getDependables(cldr, culture, options.calendar);
    if (isBlazor()) {
      options = compareBlazorDateFormats(options, culture);
    }
    var actualPattern = options.format || getResultantPattern(options.skeleton, dependable.dateObject, options.type);
    if (isExcelFormat) {
      actualPattern = actualPattern.replace(patternRegex, function(pattern2) {
        return patternMatch[pattern2];
      });
      if (actualPattern.indexOf("z") !== -1) {
        var tLength = actualPattern.match(/z/g).length;
        var timeZonePattern = void 0;
        var options_1 = { "timeZone": {} };
        options_1.numMapper = ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr));
        options_1.timeZone = getValue("dates.timeZoneNames", dependable.parserObject);
        var value = /* @__PURE__ */ new Date();
        var timezone = value.getTimezoneOffset();
        var pattern = tLength < 4 ? "+H;-H" : options_1.timeZone.hourFormat;
        pattern = pattern.replace(/:/g, options_1.numMapper.timeSeparator);
        if (timezone === 0) {
          timeZonePattern = options_1.timeZone.gmtZeroFormat;
        } else {
          timeZonePattern = DateFormat.getTimeZoneValue(timezone, pattern);
          timeZonePattern = options_1.timeZone.gmtFormat.replace(/\{0\}/, timeZonePattern);
        }
        actualPattern = actualPattern.replace(/[z]+/, '"' + timeZonePattern + '"');
      }
      actualPattern = actualPattern.replace(/ $/, "");
    }
    return actualPattern;
  }
  IntlBase2.getActualDateTimeFormat = getActualDateTimeFormat;
  function processSymbol(actual, option) {
    if (actual.indexOf(",") !== -1) {
      var split = actual.split(",");
      actual = split[0] + getValue("numberMapper.numberSymbols.group", option) + split[1].replace(".", getValue("numberMapper.numberSymbols.decimal", option));
    } else {
      actual = actual.replace(".", getValue("numberMapper.numberSymbols.decimal", option));
    }
    return actual;
  }
  function getActualNumberFormat(culture, options, cldr, isExcel) {
    var dependable = getDependables(cldr, culture, "", true);
    var parseOptions = { custom: true };
    var numrericObject = dependable.numericObject;
    var minFrac;
    var curObj = {};
    var curMatch = (options.format || "").match(IntlBase2.currencyFormatRegex);
    var type = IntlBase2.formatRegex.test(options.format) ? getProperNumericSkeleton(options.format || "N") : {};
    var dOptions = {};
    if (curMatch) {
      dOptions.numberMapper = isBlazor() ? extend({}, dependable.numericObject) : ParserBase.getNumberMapper(dependable.parserObject, ParserBase.getNumberingSystem(cldr), true);
      var curCode = isBlazor() ? getValue("currencySymbol", dependable.numericObject) : getCurrencySymbol(dependable.numericObject, options.currency || defaultCurrencyCode, options.altSymbol);
      var symbolPattern = getSymbolPattern("currency", dOptions.numberMapper.numberSystem, dependable.numericObject, /a/i.test(options.format));
      symbolPattern = symbolPattern.replace(/\u00A4/g, curCode);
      var split = symbolPattern.split(";");
      curObj.hasNegativePattern = isBlazor() ? true : split.length > 1;
      curObj.nData = isBlazor() ? getValue(type.type + "nData", numrericObject) : getFormatData(split[1] || "-" + split[0], true, curCode);
      curObj.pData = isBlazor() ? getValue(type.type + "pData", numrericObject) : getFormatData(split[0], false, curCode);
      if (!curMatch[2] && !options.minimumFractionDigits && !options.maximumFractionDigits) {
        minFrac = getFormatData(symbolPattern.split(";")[0], true, "", true).minimumFraction;
      }
    }
    var actualPattern;
    if (IntlBase2.formatRegex.test(options.format) || !options.format) {
      extend(parseOptions, getProperNumericSkeleton(options.format || "N"));
      parseOptions.custom = false;
      actualPattern = "###0";
      if (parseOptions.fractionDigits || options.minimumFractionDigits || options.maximumFractionDigits || minFrac) {
        var defaultMinimum = 0;
        if (parseOptions.fractionDigits) {
          options.minimumFractionDigits = options.maximumFractionDigits = parseOptions.fractionDigits;
        }
        actualPattern = fractionDigitsPattern(actualPattern, minFrac || parseOptions.fractionDigits || options.minimumFractionDigits || defaultMinimum, options.maximumFractionDigits || defaultMinimum);
      }
      if (options.minimumIntegerDigits) {
        actualPattern = minimumIntegerPattern(actualPattern, options.minimumIntegerDigits);
      }
      if (options.useGrouping) {
        actualPattern = groupingPattern(actualPattern);
      }
      if (parseOptions.type === "currency" || parseOptions.type && isBlazor()) {
        if (isBlazor() && parseOptions.type !== "currency") {
          curObj.pData = getValue(parseOptions.type + "pData", numrericObject);
          curObj.nData = getValue(parseOptions.type + "nData", numrericObject);
        }
        var cPattern = actualPattern;
        actualPattern = curObj.pData.nlead + cPattern + curObj.pData.nend;
        if (curObj.hasNegativePattern || isBlazor()) {
          actualPattern += ";" + curObj.nData.nlead + cPattern + curObj.nData.nend;
        }
      }
      if (parseOptions.type === "percent" && !isBlazor()) {
        actualPattern += " %";
      }
    } else {
      actualPattern = options.format.replace(/'/g, '"');
    }
    if (Object.keys(dOptions).length > 0) {
      actualPattern = !isExcel ? processSymbol(actualPattern, dOptions) : actualPattern;
    }
    return actualPattern;
  }
  IntlBase2.getActualNumberFormat = getActualNumberFormat;
  function fractionDigitsPattern(pattern, minDigits, maxDigits) {
    pattern += ".";
    for (var a = 0; a < minDigits; a++) {
      pattern += "0";
    }
    if (minDigits < maxDigits) {
      var diff = maxDigits - minDigits;
      for (var b = 0; b < diff; b++) {
        pattern += "#";
      }
    }
    return pattern;
  }
  IntlBase2.fractionDigitsPattern = fractionDigitsPattern;
  function minimumIntegerPattern(pattern, digits) {
    var temp = pattern.split(".");
    var integer = "";
    for (var x = 0; x < digits; x++) {
      integer += "0";
    }
    return temp[1] ? integer + "." + temp[1] : integer;
  }
  IntlBase2.minimumIntegerPattern = minimumIntegerPattern;
  function groupingPattern(pattern) {
    var temp = pattern.split(".");
    var integer = temp[0];
    var no = 3 - integer.length % 3;
    var hash = no && no === 1 ? "#" : no === 2 ? "##" : "";
    integer = hash + integer;
    pattern = "";
    for (var x = integer.length - 1; x > 0; x = x - 3) {
      pattern = "," + integer[x - 2] + integer[x - 1] + integer[x] + pattern;
    }
    pattern = pattern.slice(1);
    return temp[1] ? pattern + "." + temp[1] : pattern;
  }
  IntlBase2.groupingPattern = groupingPattern;
  function getWeekData(culture, cldr) {
    var firstDay = defaultFirstDay;
    var mapper4 = getValue("supplemental.weekData.firstDay", cldr);
    var iCulture = culture;
    if (/en-/.test(iCulture)) {
      iCulture = iCulture.slice(3);
    }
    iCulture = iCulture.slice(0, 2).toUpperCase() + iCulture.substr(2);
    if (mapper4) {
      firstDay = mapper4[iCulture] || mapper4[iCulture.slice(0, 2)] || defaultFirstDay;
    }
    return firstDayMapper[firstDay];
  }
  IntlBase2.getWeekData = getWeekData;
  function replaceBlazorCurrency(pData, aCurrency, rCurrency) {
    var iCurrency = getBlazorCurrencySymbol(rCurrency);
    if (aCurrency !== iCurrency) {
      for (var _i = 0, pData_1 = pData; _i < pData_1.length; _i++) {
        var data = pData_1[_i];
        data.nend = data.nend.replace(aCurrency, iCurrency);
        data.nlead = data.nlead.replace(aCurrency, iCurrency);
      }
    }
  }
  IntlBase2.replaceBlazorCurrency = replaceBlazorCurrency;
  function getWeekOfYear(date) {
    var newYear = new Date(date.getFullYear(), 0, 1);
    var day = newYear.getDay();
    var weeknum;
    day = day >= 0 ? day : day + 7;
    var daynum = Math.floor((date.getTime() - newYear.getTime() - (date.getTimezoneOffset() - newYear.getTimezoneOffset()) * 6e4) / 864e5) + 1;
    if (day < 4) {
      weeknum = Math.floor((daynum + day - 1) / 7) + 1;
      if (weeknum > 52) {
        var nYear = new Date(date.getFullYear() + 1, 0, 1);
        var nday = nYear.getDay();
        nday = nday >= 0 ? nday : nday + 7;
        weeknum = nday < 4 ? 1 : 53;
      }
    } else {
      weeknum = Math.floor((daynum + day - 1) / 7);
    }
    return weeknum;
  }
  IntlBase2.getWeekOfYear = getWeekOfYear;
})(IntlBase || (IntlBase = {}));

// node_modules/@syncfusion/ej2-base/src/ajax.js
var headerRegex = /^(.*?):[ \t]*([^\r\n]*)$/gm;
var defaultType = "GET";
var Ajax = (
  /** @class */
  function() {
    function Ajax2(options, type, async, contentType) {
      this.mode = true;
      this.emitError = true;
      this.options = {};
      if (typeof options === "string") {
        this.url = options;
        this.type = type ? type.toUpperCase() : defaultType;
        this.mode = !isNullOrUndefined(async) ? async : true;
      } else if (typeof options === "object") {
        this.options = options;
        merge(this, this.options);
      }
      this.type = this.type ? this.type.toUpperCase() : defaultType;
      this.contentType = this.contentType !== void 0 ? this.contentType : contentType;
    }
    Ajax2.prototype.send = function(data) {
      var _this = this;
      this.data = isNullOrUndefined(data) ? this.data : data;
      var eventArgs = {
        cancel: false,
        httpRequest: null
      };
      var promise = new Promise(function(resolve, reject) {
        _this.httpRequest = new XMLHttpRequest();
        _this.httpRequest.onreadystatechange = function() {
          _this.stateChange(resolve, reject);
        };
        if (!isNullOrUndefined(_this.onLoad)) {
          _this.httpRequest.onload = _this.onLoad;
        }
        if (!isNullOrUndefined(_this.onProgress)) {
          _this.httpRequest.onprogress = _this.onProgress;
        }
        if (!isNullOrUndefined(_this.onAbort)) {
          _this.httpRequest.onabort = _this.onAbort;
        }
        if (!isNullOrUndefined(_this.onError)) {
          _this.httpRequest.onerror = _this.onError;
        }
        if (!isNullOrUndefined(_this.onUploadProgress)) {
          _this.httpRequest.upload.onprogress = _this.onUploadProgress;
        }
        _this.httpRequest.open(_this.type, _this.url, _this.mode);
        if (!isNullOrUndefined(_this.data) && _this.contentType !== null) {
          _this.httpRequest.setRequestHeader("Content-Type", _this.contentType || "application/json; charset=utf-8");
        }
        if (_this.beforeSend) {
          eventArgs.httpRequest = _this.httpRequest;
          _this.beforeSend(eventArgs);
        }
        if (!eventArgs.cancel) {
          _this.httpRequest.send(!isNullOrUndefined(_this.data) ? _this.data : null);
        }
      });
      return promise;
    };
    Ajax2.prototype.successHandler = function(data) {
      if (this.onSuccess) {
        this.onSuccess(data, this);
      }
      return data;
    };
    Ajax2.prototype.failureHandler = function(reason) {
      if (this.onFailure) {
        this.onFailure(this.httpRequest);
      }
      return reason;
    };
    Ajax2.prototype.stateChange = function(resolve, reject) {
      var data = this.httpRequest.responseText;
      if (this.dataType && this.dataType.toLowerCase() === "json") {
        if (data === "") {
          data = void 0;
        } else {
          try {
            data = JSON.parse(data);
          } catch (error) {
          }
        }
      }
      if (this.httpRequest.readyState === 4) {
        if (this.httpRequest.status >= 200 && this.httpRequest.status <= 299 || this.httpRequest.status === 304) {
          resolve(this.successHandler(data));
        } else {
          if (this.emitError) {
            reject(new Error(this.failureHandler(this.httpRequest.statusText)));
          } else {
            resolve();
          }
        }
      }
    };
    Ajax2.prototype.getResponseHeader = function(key) {
      var responseHeaders;
      var header;
      responseHeaders = {};
      var headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());
      while (headers) {
        responseHeaders[headers[1].toLowerCase()] = headers[2];
        headers = headerRegex.exec(this.httpRequest.getAllResponseHeaders());
      }
      header = responseHeaders[key.toLowerCase()];
      return isNullOrUndefined(header) ? null : header;
    };
    return Ajax2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/browser.js
var REGX_MOBILE = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini|mobile/i;
var REGX_IE = /msie|trident/i;
var REGX_IE11 = /Trident\/7\./;
var REGX_IOS = /(ipad|iphone|ipod touch)/i;
var REGX_IOS7 = /(ipad|iphone|ipod touch);.*os 7_\d|(ipad|iphone|ipod touch);.*os 8_\d/i;
var REGX_ANDROID = /android/i;
var REGX_WINDOWS = /trident|windows phone|edge/i;
var REGX_VERSION = /(version)[ /]([\w.]+)/i;
var REGX_BROWSER = {
  OPERA: /(opera|opr)(?:.*version|)[ /]([\w.]+)/i,
  EDGE: /(edge)(?:.*version|)[ /]([\w.]+)/i,
  CHROME: /(chrome|crios)[ /]([\w.]+)/i,
  PANTHOMEJS: /(phantomjs)[ /]([\w.]+)/i,
  SAFARI: /(safari)[ /]([\w.]+)/i,
  WEBKIT: /(webkit)[ /]([\w.]+)/i,
  MSIE: /(msie|trident) ([\w.]+)/i,
  MOZILLA: /(mozilla)(?:.*? rv:([\w.]+)|)/i
};
if (typeof window !== "undefined") {
  window.browserDetails = window.browserDetails || {};
}
var Browser = (
  /** @class */
  function() {
    function Browser2() {
    }
    Browser2.extractBrowserDetail = function() {
      var browserInfo = { culture: {} };
      var keys2 = Object.keys(REGX_BROWSER);
      var clientInfo = [];
      for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        clientInfo = Browser2.userAgent.match(REGX_BROWSER[key]);
        if (clientInfo) {
          browserInfo.name = clientInfo[1].toLowerCase() === "opr" ? "opera" : clientInfo[1].toLowerCase();
          browserInfo.name = clientInfo[1].toLowerCase() === "crios" ? "chrome" : browserInfo.name;
          browserInfo.version = clientInfo[2];
          browserInfo.culture.name = browserInfo.culture.language = navigator.language;
          if (!!Browser2.userAgent.match(REGX_IE11)) {
            browserInfo.name = "msie";
            break;
          }
          var version = Browser2.userAgent.match(REGX_VERSION);
          if (browserInfo.name === "safari" && version) {
            browserInfo.version = version[2];
          }
          break;
        }
      }
      return browserInfo;
    };
    Browser2.getEvent = function(event) {
      var events = {
        start: {
          isPointer: "pointerdown",
          isTouch: "touchstart",
          isDevice: "mousedown"
        },
        move: {
          isPointer: "pointermove",
          isTouch: "touchmove",
          isDevice: "mousemove"
        },
        end: {
          isPointer: "pointerup",
          isTouch: "touchend",
          isDevice: "mouseup"
        },
        cancel: {
          isPointer: "pointercancel",
          isTouch: "touchcancel",
          isDevice: "mouseleave"
        }
      };
      return Browser2.isPointer ? events[event].isPointer : Browser2.isTouch ? events[event].isTouch + (!Browser2.isDevice ? " " + events[event].isDevice : "") : events[event].isDevice;
    };
    Browser2.getTouchStartEvent = function() {
      return Browser2.getEvent("start");
    };
    Browser2.getTouchEndEvent = function() {
      return Browser2.getEvent("end");
    };
    Browser2.getTouchMoveEvent = function() {
      return Browser2.getEvent("move");
    };
    Browser2.getTouchCancelEvent = function() {
      return Browser2.getEvent("cancel");
    };
    Browser2.getValue = function(key, regX) {
      var browserDetails = window.browserDetails;
      if ("undefined" === typeof browserDetails[key]) {
        return browserDetails[key] = regX.test(Browser2.userAgent);
      }
      if (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1 && Browser2.isTouch === true) {
        browserDetails["isIos"] = true;
        browserDetails["isDevice"] = true;
        browserDetails["isTouch"] = true;
        browserDetails["isPointer"] = true;
      }
      return browserDetails[key];
    };
    Object.defineProperty(Browser2, "userAgent", {
      get: function() {
        return Browser2.uA;
      },
      //Properties
      /**
       * Property specifies the userAgent of the browser. Default userAgent value is based on the browser.
       * Also we can set our own userAgent.
       *
       * @param {string} uA ?
       */
      set: function(uA) {
        Browser2.uA = uA;
        window.browserDetails = {};
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "info", {
      //Read Only Properties
      /**
       * Property is to get the browser information like Name, Version and Language
       *
       * @returns {BrowserInfo} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.info)) {
          return window.browserDetails.info = Browser2.extractBrowserDetail();
        }
        return window.browserDetails.info;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isIE", {
      /**
       * Property is to get whether the userAgent is based IE.
       *
       * @returns {boolean} ?
       */
      get: function() {
        return Browser2.getValue("isIE", REGX_IE);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isTouch", {
      /**
       * Property is to get whether the browser has touch support.
       *
       * @returns {boolean} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.isTouch)) {
          return window.browserDetails.isTouch = "ontouchstart" in window.navigator || window && window.navigator && window.navigator.maxTouchPoints > 0 || "ontouchstart" in window;
        }
        return window.browserDetails.isTouch;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isPointer", {
      /**
       * Property is to get whether the browser has Pointer support.
       *
       * @returns {boolean} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.isPointer)) {
          return window.browserDetails.isPointer = "pointerEnabled" in window.navigator;
        }
        return window.browserDetails.isPointer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isMSPointer", {
      /**
       * Property is to get whether the browser has MSPointer support.
       *
       * @returns {boolean} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.isMSPointer)) {
          return window.browserDetails.isMSPointer = "msPointerEnabled" in window.navigator;
        }
        return window.browserDetails.isMSPointer;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isDevice", {
      /**
       * Property is to get whether the userAgent is device based.
       *
       * @returns {boolean} ?
       */
      get: function() {
        return Browser2.getValue("isDevice", REGX_MOBILE);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isIos", {
      /**
       * Property is to get whether the userAgent is IOS.
       *
       * @returns {boolean} ?
       */
      get: function() {
        return Browser2.getValue("isIos", REGX_IOS);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isIos7", {
      /**
       * Property is to get whether the userAgent is Ios7.
       *
       * @returns {boolean} ?
       */
      get: function() {
        return Browser2.getValue("isIos7", REGX_IOS7);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isAndroid", {
      /**
       * Property is to get whether the userAgent is Android.
       *
       * @returns {boolean} ?
       */
      get: function() {
        return Browser2.getValue("isAndroid", REGX_ANDROID);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isWebView", {
      /**
       * Property is to identify whether application ran in web view.
       *
       * @returns {boolean} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.isWebView)) {
          window.browserDetails.isWebView = !(isUndefined(window.cordova) && isUndefined(window.PhoneGap) && isUndefined(window.phonegap) && window.forge !== "object");
          return window.browserDetails.isWebView;
        }
        return window.browserDetails.isWebView;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "isWindows", {
      /**
       * Property is to get whether the userAgent is Windows.
       *
       * @returns {boolean} ?
       */
      get: function() {
        return Browser2.getValue("isWindows", REGX_WINDOWS);
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "touchStartEvent", {
      /**
       * Property is to get the touch start event. It returns event name based on browser.
       *
       * @returns {string} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.touchStartEvent)) {
          return window.browserDetails.touchStartEvent = Browser2.getTouchStartEvent();
        }
        return window.browserDetails.touchStartEvent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "touchMoveEvent", {
      /**
       * Property is to get the touch move event. It returns event name based on browser.
       *
       * @returns {string} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.touchMoveEvent)) {
          return window.browserDetails.touchMoveEvent = Browser2.getTouchMoveEvent();
        }
        return window.browserDetails.touchMoveEvent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "touchEndEvent", {
      /**
       * Property is to get the touch end event. It returns event name based on browser.
       *
       * @returns {string} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.touchEndEvent)) {
          return window.browserDetails.touchEndEvent = Browser2.getTouchEndEvent();
        }
        return window.browserDetails.touchEndEvent;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(Browser2, "touchCancelEvent", {
      /**
       * Property is to cancel the touch end event.
       *
       * @returns {string} ?
       */
      get: function() {
        if (isUndefined(window.browserDetails.touchCancelEvent)) {
          return window.browserDetails.touchCancelEvent = Browser2.getTouchCancelEvent();
        }
        return window.browserDetails.touchCancelEvent;
      },
      enumerable: true,
      configurable: true
    });
    Browser2.uA = typeof navigator !== "undefined" ? navigator.userAgent : "";
    return Browser2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/event-handler.js
var EventHandler = (
  /** @class */
  function() {
    function EventHandler2() {
    }
    EventHandler2.addOrGetEventData = function(element2) {
      if ("__eventList" in element2) {
        return element2.__eventList.events;
      } else {
        element2.__eventList = {};
        return element2.__eventList.events = [];
      }
    };
    EventHandler2.add = function(element2, eventName, listener, bindTo, intDebounce) {
      var eventData = EventHandler2.addOrGetEventData(element2);
      var debounceListener;
      if (intDebounce) {
        debounceListener = debounce(listener, intDebounce);
      } else {
        debounceListener = listener;
      }
      if (bindTo) {
        debounceListener = debounceListener.bind(bindTo);
      }
      var event = eventName.split(" ");
      for (var i = 0; i < event.length; i++) {
        eventData.push({
          name: event[i],
          listener,
          debounce: debounceListener
        });
        if (Browser.isIE) {
          element2.addEventListener(event[i], debounceListener);
        } else {
          element2.addEventListener(event[i], debounceListener, { passive: false });
        }
      }
      return debounceListener;
    };
    EventHandler2.remove = function(element2, eventName, listener) {
      var eventData = EventHandler2.addOrGetEventData(element2);
      var event = eventName.split(" ");
      var _loop_1 = function(j2) {
        var index = -1;
        var debounceListener;
        if (eventData && eventData.length !== 0) {
          eventData.some(function(x, i) {
            return x.name === event[j2] && x.listener === listener ? (index = i, debounceListener = x.debounce, true) : false;
          });
        }
        if (index !== -1) {
          eventData.splice(index, 1);
        }
        if (debounceListener) {
          element2.removeEventListener(event[j2], debounceListener);
        }
      };
      for (var j = 0; j < event.length; j++) {
        _loop_1(j);
      }
    };
    EventHandler2.clearEvents = function(element2) {
      var eventData;
      var copyData;
      eventData = EventHandler2.addOrGetEventData(element2);
      copyData = extend([], copyData, eventData);
      for (var i = 0; i < copyData.length; i++) {
        element2.removeEventListener(copyData[i].name, copyData[i].debounce);
        eventData.shift();
      }
    };
    EventHandler2.trigger = function(element2, eventName, eventProp) {
      var eventData = EventHandler2.addOrGetEventData(element2);
      for (var _i = 0, eventData_1 = eventData; _i < eventData_1.length; _i++) {
        var event_1 = eventData_1[_i];
        if (event_1.name === eventName) {
          event_1.debounce.call(this, eventProp);
        }
      }
    };
    return EventHandler2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/dom.js
var SVG_REG = /^svg|^path|^g/;
function createElement(tagName, properties) {
  var element2 = SVG_REG.test(tagName) ? document.createElementNS("http://www.w3.org/2000/svg", tagName) : document.createElement(tagName);
  if (typeof properties === "undefined") {
    return element2;
  }
  element2.innerHTML = properties.innerHTML ? properties.innerHTML : "";
  if (properties.className !== void 0) {
    element2.className = properties.className;
  }
  if (properties.id !== void 0) {
    element2.id = properties.id;
  }
  if (properties.styles !== void 0) {
    element2.setAttribute("style", properties.styles);
  }
  if (properties.attrs !== void 0) {
    attributes(element2, properties.attrs);
  }
  return element2;
}
function addClass(elements, classes) {
  var classList2 = getClassList(classes);
  for (var _i = 0, _a = elements; _i < _a.length; _i++) {
    var ele = _a[_i];
    for (var _b = 0, classList_1 = classList2; _b < classList_1.length; _b++) {
      var className = classList_1[_b];
      if (isObject(ele)) {
        var curClass = getValue("attributes.className", ele);
        if (isNullOrUndefined(curClass)) {
          setValue("attributes.className", className, ele);
        } else if (!new RegExp("\\b" + className + "\\b", "i").test(curClass)) {
          setValue("attributes.className", curClass + " " + className, ele);
        }
      } else {
        if (!ele.classList.contains(className)) {
          ele.classList.add(className);
        }
      }
    }
  }
  return elements;
}
function removeClass(elements, classes) {
  var classList2 = getClassList(classes);
  for (var _i = 0, _a = elements; _i < _a.length; _i++) {
    var ele = _a[_i];
    var flag = isObject(ele);
    var canRemove = flag ? getValue("attributes.className", ele) : ele.className !== "";
    if (canRemove) {
      for (var _b = 0, classList_2 = classList2; _b < classList_2.length; _b++) {
        var className = classList_2[_b];
        if (flag) {
          var classes_1 = getValue("attributes.className", ele);
          var classArr = classes_1.split(" ");
          var index = classArr.indexOf(className);
          if (index !== -1) {
            classArr.splice(index, 1);
          }
          setValue("attributes.className", classArr.join(" "), ele);
        } else {
          ele.classList.remove(className);
        }
      }
    }
  }
  return elements;
}
function getClassList(classes) {
  var classList2 = [];
  if (typeof classes === "string") {
    classList2.push(classes);
  } else {
    classList2 = classes;
  }
  return classList2;
}
function isVisible(element2) {
  var ele = element2;
  return ele.style.visibility === "" && ele.offsetWidth > 0;
}
function prepend(fromElements, toElement, isEval) {
  var docFrag = document.createDocumentFragment();
  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {
    var ele = _a[_i];
    docFrag.appendChild(ele);
  }
  toElement.insertBefore(docFrag, toElement.firstElementChild);
  if (isEval) {
    executeScript(toElement);
  }
  return fromElements;
}
function append(fromElements, toElement, isEval) {
  var docFrag = document.createDocumentFragment();
  for (var _i = 0, _a = fromElements; _i < _a.length; _i++) {
    var ele = _a[_i];
    docFrag.appendChild(ele);
  }
  toElement.appendChild(docFrag);
  if (isEval) {
    executeScript(toElement);
  }
  return fromElements;
}
function executeScript(ele) {
  var eleArray = ele.querySelectorAll("script");
  eleArray.forEach(function(element2) {
    var script = document.createElement("script");
    script.text = element2.innerHTML;
    document.head.appendChild(script);
    detach(script);
  });
}
function detach(element2) {
  var parentNode = element2.parentNode;
  if (parentNode) {
    return parentNode.removeChild(element2);
  }
}
function remove(element2) {
  var parentNode = element2.parentNode;
  EventHandler.clearEvents(element2);
  parentNode.removeChild(element2);
}
function attributes(element2, attributes2) {
  var keys2 = Object.keys(attributes2);
  var ele = element2;
  for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
    var key = keys_1[_i];
    if (isObject(ele)) {
      var iKey = key;
      if (key === "tabindex") {
        iKey = "tabIndex";
      }
      ele.attributes[iKey] = attributes2[key];
    } else {
      ele.setAttribute(key, attributes2[key]);
    }
  }
  return ele;
}
function select(selector, context, needsVDOM) {
  if (context === void 0) {
    context = document;
  }
  selector = querySelectId(selector);
  return context.querySelector(selector);
}
function selectAll(selector, context, needsVDOM) {
  if (context === void 0) {
    context = document;
  }
  selector = querySelectId(selector);
  var nodeList = context.querySelectorAll(selector);
  return nodeList;
}
function querySelectId(selector) {
  var charRegex = /(!|"|\$|%|&|'|\(|\)|\*|\/|:|;|<|=|\?|@|\]|\^|`|{|}|\||\+|~)/g;
  if (selector.match(/#[0-9]/g) || selector.match(charRegex)) {
    var idList = selector.split(",");
    for (var i = 0; i < idList.length; i++) {
      var list = idList[i].split(" ");
      for (var j = 0; j < list.length; j++) {
        if (list[j].indexOf("#") > -1) {
          if (!list[j].match(/\[.*\]/)) {
            var splitId = list[j].split("#");
            if (splitId[1].match(/^\d/) || splitId[1].match(charRegex)) {
              var setId = list[j].split(".");
              setId[0] = setId[0].replace(/#/, "[id='") + "']";
              list[j] = setId.join(".");
            }
          }
        }
      }
      idList[i] = list.join(" ");
    }
    return idList.join(",");
  }
  return selector;
}
function closest(element2, selector) {
  var el = element2;
  if (typeof el.closest === "function") {
    return el.closest(selector);
  }
  while (el && el.nodeType === 1) {
    if (matches(el, selector)) {
      return el;
    }
    el = el.parentNode;
  }
  return null;
}
function setStyleAttribute(element2, attrs) {
  if (attrs !== void 0) {
    Object.keys(attrs).forEach(function(key) {
      element2.style[key] = attrs[key];
    });
  }
}
function classList(element2, addClasses, removeClasses) {
  addClass([element2], addClasses);
  removeClass([element2], removeClasses);
}
function matches(element2, selector) {
  var matches2 = element2.matches || element2.msMatchesSelector || element2.webkitMatchesSelector;
  if (matches2) {
    return matches2.call(element2, selector);
  } else {
    return [].indexOf.call(document.querySelectorAll(selector), element2) !== -1;
  }
}

// node_modules/@syncfusion/ej2-base/src/base.js
var isColEName = new RegExp("]");
var Base = (
  /** @class */
  function() {
    function Base2(options, element2) {
      this.isRendered = false;
      this.isComplexArraySetter = false;
      this.isServerRendered = false;
      this.allowServerDataBinding = true;
      this.isProtectedOnChange = true;
      this.properties = {};
      this.changedProperties = {};
      this.oldProperties = {};
      this.bulkChanges = {};
      this.refreshing = false;
      this.ignoreCollectionWatch = false;
      this.finalUpdate = function() {
      };
      this.childChangedProperties = {};
      this.modelObserver = new Observer(this);
      if (!isUndefined(element2)) {
        if ("string" === typeof element2) {
          this.element = document.querySelector(element2);
        } else {
          this.element = element2;
        }
        if (!isNullOrUndefined(this.element)) {
          this.isProtectedOnChange = false;
          this.addInstance();
        }
      }
      if (!isUndefined(options)) {
        this.setProperties(options, true);
      }
      this.isDestroyed = false;
    }
    Base2.prototype.setProperties = function(prop, muteOnChange) {
      var prevDetection = this.isProtectedOnChange;
      this.isProtectedOnChange = !!muteOnChange;
      merge(this, prop);
      if (muteOnChange !== true) {
        merge(this.changedProperties, prop);
        this.dataBind();
      } else if (isBlazor() && this.isRendered) {
        this.serverDataBind(prop);
      }
      this.finalUpdate();
      this.changedProperties = {};
      this.oldProperties = {};
      this.isProtectedOnChange = prevDetection;
    };
    Base2.callChildDataBind = function(obj, parent) {
      var keys2 = Object.keys(obj);
      for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        if (parent[key] instanceof Array) {
          for (var _a = 0, _b = parent[key]; _a < _b.length; _a++) {
            var obj_1 = _b[_a];
            if (obj_1.dataBind !== void 0) {
              obj_1.dataBind();
            }
          }
        } else {
          parent[key].dataBind();
        }
      }
    };
    Base2.prototype.clearChanges = function() {
      this.finalUpdate();
      this.changedProperties = {};
      this.oldProperties = {};
      this.childChangedProperties = {};
    };
    Base2.prototype.dataBind = function() {
      Base2.callChildDataBind(this.childChangedProperties, this);
      if (Object.getOwnPropertyNames(this.changedProperties).length) {
        var prevDetection = this.isProtectedOnChange;
        var newChanges = this.changedProperties;
        var oldChanges = this.oldProperties;
        this.clearChanges();
        this.isProtectedOnChange = true;
        this.onPropertyChanged(newChanges, oldChanges);
        this.isProtectedOnChange = prevDetection;
      }
    };
    Base2.prototype.serverDataBind = function(newChanges) {
      if (!isBlazor()) {
        return;
      }
      newChanges = newChanges ? newChanges : {};
      extend(this.bulkChanges, {}, newChanges, true);
      var sfBlazor = "sfBlazor";
      if (this.allowServerDataBinding && window[sfBlazor].updateModel) {
        window[sfBlazor].updateModel(this);
        this.bulkChanges = {};
      }
    };
    Base2.prototype.saveChanges = function(key, newValue, oldValue) {
      if (isBlazor()) {
        var newChanges = {};
        newChanges[key] = newValue;
        this.serverDataBind(newChanges);
      }
      if (this.isProtectedOnChange) {
        return;
      }
      this.oldProperties[key] = oldValue;
      this.changedProperties[key] = newValue;
      this.finalUpdate();
      this.finalUpdate = setImmediate(this.dataBind.bind(this));
    };
    Base2.prototype.addEventListener = function(eventName, handler) {
      this.modelObserver.on(eventName, handler);
    };
    Base2.prototype.removeEventListener = function(eventName, handler) {
      this.modelObserver.off(eventName, handler);
    };
    Base2.prototype.trigger = function(eventName, eventProp, successHandler, errorHandler) {
      var _this = this;
      if (this.isDestroyed !== true) {
        var prevDetection = this.isProtectedOnChange;
        this.isProtectedOnChange = false;
        var data = this.modelObserver.notify(eventName, eventProp, successHandler, errorHandler);
        if (isColEName.test(eventName)) {
          var handler = getValue(eventName, this);
          if (handler) {
            var blazor = "Blazor";
            if (window[blazor]) {
              var promise = handler.call(this, eventProp);
              if (promise && typeof promise.then === "function") {
                if (!successHandler) {
                  data = promise;
                } else {
                  promise.then(function(data2) {
                    if (successHandler) {
                      data2 = typeof data2 === "string" && _this.modelObserver.isJson(data2) ? JSON.parse(data2) : data2;
                      successHandler.call(_this, data2);
                    }
                  }).catch(function(data2) {
                    if (errorHandler) {
                      data2 = typeof data2 === "string" && _this.modelObserver.isJson(data2) ? JSON.parse(data2) : data2;
                      errorHandler.call(_this, data2);
                    }
                  });
                }
              } else if (successHandler) {
                successHandler.call(this, eventProp);
              }
            } else {
              handler.call(this, eventProp);
              if (successHandler) {
                successHandler.call(this, eventProp);
              }
            }
          } else if (successHandler) {
            successHandler.call(this, eventProp);
          }
        }
        this.isProtectedOnChange = prevDetection;
        return data;
      }
    };
    Base2.prototype.addInstance = function() {
      var moduleClass = "e-" + this.getModuleName().toLowerCase();
      addClass([this.element], ["e-lib", moduleClass]);
      if (!isNullOrUndefined(this.element.ej2_instances)) {
        this.element.ej2_instances.push(this);
      } else {
        setValue("ej2_instances", [this], this.element);
      }
    };
    Base2.prototype.destroy = function() {
      var _this = this;
      this.element.ej2_instances = this.element.ej2_instances.filter(function(i) {
        return i !== _this;
      });
      removeClass([this.element], ["e-" + this.getModuleName()]);
      if (this.element.ej2_instances.length === 0) {
        removeClass([this.element], ["e-lib"]);
      }
      this.clearChanges();
      this.modelObserver.destroy();
      this.isDestroyed = true;
    };
    return Base2;
  }()
);
function getComponent(elem, comp) {
  var instance;
  var i;
  var ele = typeof elem === "string" ? document.getElementById(elem) : elem;
  for (i = 0; i < ele.ej2_instances.length; i++) {
    instance = ele.ej2_instances[i];
    if (typeof comp === "string") {
      var compName = instance.getModuleName();
      if (comp === compName) {
        return instance;
      }
    } else {
      if (instance instanceof comp) {
        return instance;
      }
    }
  }
  return void 0;
}

// node_modules/@syncfusion/ej2-base/src/notify-property-change.js
function getObject(instance, curKey, defaultValue, type) {
  if (!instance.properties.hasOwnProperty(curKey) || !(instance.properties[curKey] instanceof type)) {
    instance.properties[curKey] = createInstance(type, [instance, curKey, defaultValue]);
  }
  return instance.properties[curKey];
}
function getObjectArray(instance, curKey, defaultValue, type, isSetter, isFactory) {
  var result = [];
  var len = defaultValue ? defaultValue.length : 0;
  for (var i = 0; i < len; i++) {
    var curType = type;
    if (isFactory) {
      curType = type(defaultValue[i], instance);
    }
    if (isSetter) {
      var inst = createInstance(curType, [instance, curKey, {}, true]);
      inst.setProperties(defaultValue[i], true);
      result.push(inst);
    } else {
      result.push(createInstance(curType, [instance, curKey, defaultValue[i], false]));
    }
  }
  return result;
}
function propertyGetter(defaultValue, curKey) {
  return function() {
    if (!this.properties.hasOwnProperty(curKey)) {
      this.properties[curKey] = defaultValue;
    }
    return this.properties[curKey];
  };
}
function propertySetter(defaultValue, curKey) {
  return function(newValue) {
    if (this.properties[curKey] !== newValue) {
      var oldVal = this.properties.hasOwnProperty(curKey) ? this.properties[curKey] : defaultValue;
      this.saveChanges(curKey, newValue, oldVal);
      this.properties[curKey] = newValue;
    }
  };
}
function complexGetter(defaultValue, curKey, type) {
  return function() {
    return getObject(this, curKey, defaultValue, type);
  };
}
function complexSetter(defaultValue, curKey, type) {
  return function(newValue) {
    getObject(this, curKey, defaultValue, type).setProperties(newValue);
  };
}
function complexArrayGetter(defaultValue, curKey, type) {
  return function() {
    var _this = this;
    if (!this.properties.hasOwnProperty(curKey)) {
      var defCollection = getObjectArray(this, curKey, defaultValue, type, false);
      this.properties[curKey] = defCollection;
    }
    var ignore = this.controlParent !== void 0 && this.controlParent.ignoreCollectionWatch || this.ignoreCollectionWatch;
    if (!this.properties[curKey].hasOwnProperty("push") && !ignore) {
      ["push", "pop"].forEach(function(extendFunc) {
        var descriptor = {
          value: complexArrayDefinedCallback(extendFunc, curKey, type, _this.properties[curKey]).bind(_this),
          configurable: true
        };
        Object.defineProperty(_this.properties[curKey], extendFunc, descriptor);
      });
    }
    if (!this.properties[curKey].hasOwnProperty("isComplexArray")) {
      Object.defineProperty(this.properties[curKey], "isComplexArray", { value: true });
    }
    return this.properties[curKey];
  };
}
function complexArraySetter(defaultValue, curKey, type) {
  return function(newValue) {
    this.isComplexArraySetter = true;
    var oldValueCollection = getObjectArray(this, curKey, defaultValue, type, false);
    var newValCollection = getObjectArray(this, curKey, newValue, type, true);
    this.isComplexArraySetter = false;
    this.saveChanges(curKey, newValCollection, oldValueCollection);
    this.properties[curKey] = newValCollection;
  };
}
function complexArrayDefinedCallback(dFunc, curKey, type, prop) {
  return function() {
    var newValue = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      newValue[_i] = arguments[_i];
    }
    var keyString = this.propName ? this.getParentKey() + "." + curKey + "-" : curKey + "-";
    switch (dFunc) {
      case "push":
        for (var i = 0; i < newValue.length; i++) {
          Array.prototype[dFunc].apply(prop, [newValue[i]]);
          var model_1 = getArrayModel(keyString + (prop.length - 1), newValue[i], !this.controlParent, dFunc);
          this.serverDataBind(model_1, newValue[i], false, dFunc);
        }
        break;
      case "pop":
        Array.prototype[dFunc].apply(prop);
        var model = getArrayModel(keyString + prop.length, null, !this.controlParent, dFunc);
        this.serverDataBind(model, { ejsAction: "pop" }, false, dFunc);
        break;
    }
    return prop;
  };
}
function getArrayModel(keyString, value, isControlParent, arrayFunction) {
  var modelObject = keyString;
  if (isControlParent) {
    modelObject = {};
    modelObject[keyString] = value;
    if (value && typeof value === "object") {
      var action = "ejsAction";
      modelObject[keyString][action] = arrayFunction;
    }
  }
  return modelObject;
}
function Property(defaultValue) {
  return function(target, key) {
    var propertyDescriptor = {
      set: propertySetter(defaultValue, key),
      get: propertyGetter(defaultValue, key),
      enumerable: true,
      configurable: true
    };
    Object.defineProperty(target, key, propertyDescriptor);
    addPropertyCollection(target, key, "prop", defaultValue);
  };
}
function Complex(defaultValue, type) {
  return function(target, key) {
    var propertyDescriptor = {
      set: complexSetter(defaultValue, key, type),
      get: complexGetter(defaultValue, key, type),
      enumerable: true,
      configurable: true
    };
    Object.defineProperty(target, key, propertyDescriptor);
    addPropertyCollection(target, key, "complexProp", defaultValue, type);
  };
}
function Collection(defaultValue, type) {
  return function(target, key) {
    var propertyDescriptor = {
      set: complexArraySetter(defaultValue, key, type),
      get: complexArrayGetter(defaultValue, key, type),
      enumerable: true,
      configurable: true
    };
    Object.defineProperty(target, key, propertyDescriptor);
    addPropertyCollection(target, key, "colProp", defaultValue, type);
  };
}
function Event2() {
  return function(target, key) {
    var eventDescriptor = {
      set: function(newValue) {
        var oldValue = this.properties[key];
        if (oldValue !== newValue) {
          var finalContext = getParentContext(this, key);
          if (isUndefined(oldValue) === false) {
            finalContext.context.removeEventListener(finalContext.prefix, oldValue);
          }
          finalContext.context.addEventListener(finalContext.prefix, newValue);
          this.properties[key] = newValue;
        }
      },
      get: propertyGetter(void 0, key),
      enumerable: true,
      configurable: true
    };
    Object.defineProperty(target, key, eventDescriptor);
    addPropertyCollection(target, key, "event");
  };
}
function NotifyPropertyChanges(classConstructor) {
}
function addPropertyCollection(target, key, propertyType, defaultValue, type) {
  if (isUndefined(target.propList)) {
    target.propList = {
      props: [],
      complexProps: [],
      colProps: [],
      events: [],
      propNames: [],
      complexPropNames: [],
      colPropNames: [],
      eventNames: []
    };
  }
  target.propList[propertyType + "s"].push({
    propertyName: key,
    defaultValue,
    type
  });
  target.propList[propertyType + "Names"].push(key);
}
function getParentContext(context, prefix) {
  if (context.hasOwnProperty("parentObj") === false) {
    return { context, prefix };
  } else {
    var curText = getValue("propName", context);
    if (curText) {
      prefix = curText + "-" + prefix;
    }
    return getParentContext(getValue("parentObj", context), prefix);
  }
}

// node_modules/@syncfusion/ej2-base/src/animation.js
var __extends = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Animation = (
  /** @class */
  function(_super) {
    __extends(Animation3, _super);
    function Animation3(options) {
      var _this = _super.call(this, options, void 0) || this;
      _this.easing = {
        ease: "cubic-bezier(0.250, 0.100, 0.250, 1.000)",
        linear: "cubic-bezier(0.250, 0.250, 0.750, 0.750)",
        easeIn: "cubic-bezier(0.420, 0.000, 1.000, 1.000)",
        easeOut: "cubic-bezier(0.000, 0.000, 0.580, 1.000)",
        easeInOut: "cubic-bezier(0.420, 0.000, 0.580, 1.000)",
        elasticInOut: "cubic-bezier(0.5,-0.58,0.38,1.81)",
        elasticIn: "cubic-bezier(0.17,0.67,0.59,1.81)",
        elasticOut: "cubic-bezier(0.7,-0.75,0.99,1.01)"
      };
      return _this;
    }
    Animation_1 = Animation3;
    Animation3.prototype.animate = function(element2, options) {
      options = !options ? {} : options;
      var model = this.getModel(options);
      if (typeof element2 === "string") {
        var elements = Array.prototype.slice.call(selectAll(element2, document));
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
          var element_1 = elements_1[_i];
          model.element = element_1;
          Animation_1.delayAnimation(model);
        }
      } else {
        model.element = element2;
        Animation_1.delayAnimation(model);
      }
    };
    Animation3.stop = function(element2, model) {
      element2.style.animation = "";
      element2.removeAttribute("e-animate");
      var animationId = element2.getAttribute("e-animation-id");
      if (animationId) {
        var frameId = parseInt(animationId, 10);
        cancelAnimationFrame(frameId);
        element2.removeAttribute("e-animation-id");
      }
      if (model && model.end) {
        model.end.call(this, model);
      }
    };
    Animation3.delayAnimation = function(model) {
      if (model.delay) {
        setTimeout(function() {
          Animation_1.applyAnimation(model);
        }, model.delay);
      } else {
        Animation_1.applyAnimation(model);
      }
    };
    Animation3.applyAnimation = function(model) {
      var _this = this;
      model.timeStamp = 0;
      var step = 0;
      var timerId = 0;
      var prevTimeStamp = 0;
      var duration = model.duration;
      model.element.setAttribute("e-animate", "true");
      var startAnimation = function(timeStamp) {
        try {
          if (timeStamp) {
            prevTimeStamp = prevTimeStamp === 0 ? timeStamp : prevTimeStamp;
            model.timeStamp = timeStamp + model.timeStamp - prevTimeStamp;
            prevTimeStamp = timeStamp;
            if (!step && model.begin) {
              model.begin.call(_this, model);
            }
            step = step + 1;
            var avg = model.timeStamp / step;
            if (model.timeStamp < duration && model.timeStamp + avg < duration && model.element.getAttribute("e-animate")) {
              model.element.style.animation = model.name + " " + model.duration + "ms " + model.timingFunction;
              if (model.progress) {
                model.progress.call(_this, model);
              }
              requestAnimationFrame(startAnimation);
            } else {
              cancelAnimationFrame(timerId);
              model.element.removeAttribute("e-animation-id");
              model.element.removeAttribute("e-animate");
              model.element.style.animation = "";
              if (model.end) {
                model.end.call(_this, model);
              }
            }
          } else {
            timerId = requestAnimationFrame(startAnimation);
            model.element.setAttribute("e-animation-id", timerId.toString());
          }
        } catch (e) {
          cancelAnimationFrame(timerId);
          model.element.removeAttribute("e-animation-id");
          if (model.fail) {
            model.fail.call(_this, e);
          }
        }
      };
      startAnimation();
    };
    Animation3.prototype.getModel = function(options) {
      return {
        name: options.name || this.name,
        delay: options.delay || this.delay,
        duration: options.duration !== void 0 ? options.duration : this.duration,
        begin: options.begin || this.begin,
        end: options.end || this.end,
        fail: options.fail || this.fail,
        progress: options.progress || this.progress,
        timingFunction: this.easing[options.timingFunction] ? this.easing[options.timingFunction] : options.timingFunction || this.easing[this.timingFunction]
      };
    };
    Animation3.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    Animation3.prototype.getModuleName = function() {
      return "animation";
    };
    Animation3.prototype.destroy = function() {
    };
    var Animation_1;
    __decorate([
      Property("FadeIn")
    ], Animation3.prototype, "name", void 0);
    __decorate([
      Property(400)
    ], Animation3.prototype, "duration", void 0);
    __decorate([
      Property("ease")
    ], Animation3.prototype, "timingFunction", void 0);
    __decorate([
      Property(0)
    ], Animation3.prototype, "delay", void 0);
    __decorate([
      Event2()
    ], Animation3.prototype, "progress", void 0);
    __decorate([
      Event2()
    ], Animation3.prototype, "begin", void 0);
    __decorate([
      Event2()
    ], Animation3.prototype, "end", void 0);
    __decorate([
      Event2()
    ], Animation3.prototype, "fail", void 0);
    Animation3 = Animation_1 = __decorate([
      NotifyPropertyChanges
    ], Animation3);
    return Animation3;
  }(Base)
);
function rippleEffect(element2, rippleOptions, done) {
  var rippleModel = getRippleModel(rippleOptions);
  if (rippleModel.rippleFlag === false || rippleModel.rippleFlag === void 0 && !isRippleEnabled) {
    return function() {
    };
  }
  element2.setAttribute("data-ripple", "true");
  EventHandler.add(element2, "mousedown", rippleHandler, { parent: element2, rippleOptions: rippleModel });
  EventHandler.add(element2, "mouseup", rippleUpHandler, { parent: element2, rippleOptions: rippleModel, done });
  EventHandler.add(element2, "mouseleave", rippleLeaveHandler, { parent: element2, rippleOptions: rippleModel });
  if (Browser.isPointer) {
    EventHandler.add(element2, "transitionend", rippleLeaveHandler, { parent: element2, rippleOptions: rippleModel });
  }
  return function() {
    element2.removeAttribute("data-ripple");
    EventHandler.remove(element2, "mousedown", rippleHandler);
    EventHandler.remove(element2, "mouseup", rippleUpHandler);
    EventHandler.remove(element2, "mouseleave", rippleLeaveHandler);
    EventHandler.remove(element2, "transitionend", rippleLeaveHandler);
  };
}
function getRippleModel(rippleOptions) {
  var rippleModel = {
    selector: rippleOptions && rippleOptions.selector ? rippleOptions.selector : null,
    ignore: rippleOptions && rippleOptions.ignore ? rippleOptions.ignore : null,
    rippleFlag: rippleOptions && rippleOptions.rippleFlag,
    isCenterRipple: rippleOptions && rippleOptions.isCenterRipple,
    duration: rippleOptions && rippleOptions.duration ? rippleOptions.duration : 350
  };
  return rippleModel;
}
function rippleHandler(e) {
  var target = e.target;
  var selector = this.rippleOptions.selector;
  var element2 = selector ? closest(target, selector) : target;
  if (!element2 || this.rippleOptions && closest(target, this.rippleOptions.ignore)) {
    return;
  }
  var offset = element2.getBoundingClientRect();
  var offsetX = e.pageX - document.body.scrollLeft;
  var offsetY = e.pageY - (!document.body.scrollTop && document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop);
  var pageX = Math.max(Math.abs(offsetX - offset.left), Math.abs(offsetX - offset.right));
  var pageY = Math.max(Math.abs(offsetY - offset.top), Math.abs(offsetY - offset.bottom));
  var radius = Math.sqrt(pageX * pageX + pageY * pageY);
  var diameter = radius * 2 + "px";
  var x = offsetX - offset.left - radius;
  var y = offsetY - offset.top - radius;
  if (this.rippleOptions && this.rippleOptions.isCenterRipple) {
    x = 0;
    y = 0;
    diameter = "100%";
  }
  element2.classList.add("e-ripple");
  var duration = this.rippleOptions.duration.toString();
  var styles = "width: " + diameter + ";height: " + diameter + ";left: " + x + "px;top: " + y + "px;transition-duration: " + duration + "ms;";
  var rippleElement = createElement("div", { className: "e-ripple-element", styles });
  element2.appendChild(rippleElement);
  window.getComputedStyle(rippleElement).getPropertyValue("opacity");
  rippleElement.style.transform = "scale(1)";
  if (element2 !== this.parent) {
    EventHandler.add(element2, "mouseleave", rippleLeaveHandler, { parent: this.parent, rippleOptions: this.rippleOptions });
  }
}
function rippleUpHandler(e) {
  removeRipple(e, this);
}
function rippleLeaveHandler(e) {
  removeRipple(e, this);
}
function removeRipple(e, eventArgs) {
  var duration = eventArgs.rippleOptions.duration;
  var target = e.target;
  var selector = eventArgs.rippleOptions.selector;
  var element2 = selector ? closest(target, selector) : target;
  if (!element2 || element2 && element2.className.indexOf("e-ripple") === -1) {
    return;
  }
  var rippleElements = selectAll(".e-ripple-element", element2);
  var rippleElement = rippleElements[rippleElements.length - 1];
  if (rippleElement) {
    rippleElement.style.opacity = "0.5";
  }
  if (eventArgs.parent !== element2) {
    EventHandler.remove(element2, "mouseleave", rippleLeaveHandler);
  }
  setTimeout(function() {
    if (rippleElement && rippleElement.parentNode) {
      rippleElement.parentNode.removeChild(rippleElement);
    }
    if (!element2.getElementsByClassName("e-ripple-element").length) {
      element2.classList.remove("e-ripple");
    }
    if (eventArgs.done) {
      eventArgs.done(e);
    }
  }, duration);
}
var isRippleEnabled = false;

// node_modules/@syncfusion/ej2-base/src/module-loader.js
var MODULE_SUFFIX = "Module";
var ModuleLoader = (
  /** @class */
  function() {
    function ModuleLoader2(parent) {
      this.loadedModules = [];
      this.parent = parent;
    }
    ModuleLoader2.prototype.inject = function(requiredModules, moduleList) {
      var reqLength = requiredModules.length;
      if (reqLength === 0) {
        this.clean();
        return;
      }
      if (this.loadedModules.length) {
        this.clearUnusedModule(requiredModules);
      }
      for (var i = 0; i < reqLength; i++) {
        var modl = requiredModules[i];
        for (var _i = 0, moduleList_1 = moduleList; _i < moduleList_1.length; _i++) {
          var module = moduleList_1[_i];
          var modName = modl.member;
          if (module.prototype.getModuleName() === modl.member && !this.isModuleLoaded(modName)) {
            var moduleObject = createInstance(module, modl.args);
            var memberName = this.getMemberName(modName);
            if (modl.isProperty) {
              setValue(memberName, module, this.parent);
            } else {
              setValue(memberName, moduleObject, this.parent);
            }
            var loadedModule = modl;
            loadedModule.member = memberName;
            this.loadedModules.push(loadedModule);
          }
        }
      }
    };
    ModuleLoader2.prototype.clean = function() {
      for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
        var modules = _a[_i];
        if (!modules.isProperty) {
          getValue(modules.member, this.parent).destroy();
        }
      }
      this.loadedModules = [];
    };
    ModuleLoader2.prototype.clearUnusedModule = function(moduleList) {
      var _this = this;
      var usedModules = moduleList.map(function(arg) {
        return _this.getMemberName(arg.member);
      });
      var removableModule = this.loadedModules.filter(function(module) {
        return usedModules.indexOf(module.member) === -1;
      });
      for (var _i = 0, removableModule_1 = removableModule; _i < removableModule_1.length; _i++) {
        var mod = removableModule_1[_i];
        if (!mod.isProperty) {
          getValue(mod.member, this.parent).destroy();
        }
        this.loadedModules.splice(this.loadedModules.indexOf(mod), 1);
        deleteObject(this.parent, mod.member);
      }
    };
    ModuleLoader2.prototype.getMemberName = function(name) {
      return name[0].toLowerCase() + name.substring(1) + MODULE_SUFFIX;
    };
    ModuleLoader2.prototype.isModuleLoaded = function(modName) {
      for (var _i = 0, _a = this.loadedModules; _i < _a.length; _i++) {
        var mod = _a[_i];
        if (mod.member === this.getMemberName(modName)) {
          return true;
        }
      }
      return false;
    };
    return ModuleLoader2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/child-property.js
var ChildProperty = (
  /** @class */
  function() {
    function ChildProperty2(parent, propName, defaultValue, isArray) {
      this.isComplexArraySetter = false;
      this.properties = {};
      this.changedProperties = {};
      this.childChangedProperties = {};
      this.oldProperties = {};
      this.finalUpdate = function() {
      };
      this.callChildDataBind = getValue("callChildDataBind", Base);
      this.parentObj = parent;
      this.controlParent = this.parentObj.controlParent || this.parentObj;
      this.propName = propName;
      this.isParentArray = isArray;
      this.setProperties(defaultValue, true);
    }
    ChildProperty2.prototype.updateChange = function(val, propName) {
      if (val === true) {
        this.parentObj.childChangedProperties[propName] = val;
      } else {
        delete this.parentObj.childChangedProperties[propName];
      }
      if (this.parentObj.updateChange) {
        this.parentObj.updateChange(val, this.parentObj.propName);
      }
    };
    ChildProperty2.prototype.updateTimeOut = function() {
      if (this.parentObj.updateTimeOut) {
        this.parentObj.finalUpdate();
        this.parentObj.updateTimeOut();
      } else {
        var changeTime_1 = setTimeout(this.parentObj.dataBind.bind(this.parentObj));
        var clearUpdate = function() {
          clearTimeout(changeTime_1);
        };
        this.finalUpdate = clearUpdate;
      }
    };
    ChildProperty2.prototype.clearChanges = function() {
      this.finalUpdate();
      this.updateChange(false, this.propName);
      this.oldProperties = {};
      this.changedProperties = {};
    };
    ChildProperty2.prototype.setProperties = function(prop, muteOnChange) {
      if (muteOnChange === true) {
        merge(this, prop);
        this.updateChange(false, this.propName);
        this.clearChanges();
      } else {
        merge(this, prop);
      }
    };
    ChildProperty2.prototype.dataBind = function() {
      this.callChildDataBind(this.childChangedProperties, this);
      if (this.isParentArray) {
        var curIndex = this.parentObj[this.propName].indexOf(this);
        if (Object.keys(this.changedProperties).length) {
          setValue(this.propName + "." + curIndex, this.changedProperties, this.parentObj.changedProperties);
          setValue(this.propName + "." + curIndex, this.oldProperties, this.parentObj.oldProperties);
        }
      } else {
        this.parentObj.changedProperties[this.propName] = this.changedProperties;
        this.parentObj.oldProperties[this.propName] = this.oldProperties;
      }
      this.clearChanges();
    };
    ChildProperty2.prototype.saveChanges = function(key, newValue, oldValue, restrictServerDataBind) {
      if (this.controlParent.isProtectedOnChange) {
        return;
      }
      if (!restrictServerDataBind) {
        this.serverDataBind(key, newValue, true);
      }
      this.oldProperties[key] = oldValue;
      this.changedProperties[key] = newValue;
      this.updateChange(true, this.propName);
      this.finalUpdate();
      this.updateTimeOut();
    };
    ChildProperty2.prototype.serverDataBind = function(key, value, isSaveChanges, action) {
      if (isBlazor() && !this.parentObj.isComplexArraySetter) {
        var parent_1;
        var newChanges = {};
        var parentKey = isSaveChanges ? this.getParentKey(true) + "." + key : key;
        if (parentKey.indexOf(".") !== -1) {
          var complexKeys = parentKey.split(".");
          parent_1 = newChanges;
          for (var i = 0; i < complexKeys.length; i++) {
            var isFinal = i === complexKeys.length - 1;
            parent_1[complexKeys[i]] = isFinal ? value : {};
            parent_1 = isFinal ? parent_1 : parent_1[complexKeys[i]];
          }
        } else {
          newChanges[parentKey] = {};
          parent_1 = newChanges[parentKey];
          newChanges[parentKey][key] = value;
        }
        if (this.isParentArray) {
          var actionProperty = "ejsAction";
          parent_1[actionProperty] = action ? action : "none";
        }
        this.controlParent.serverDataBind(newChanges);
      }
    };
    ChildProperty2.prototype.getParentKey = function(isSaveChanges) {
      var index = "";
      var propName = this.propName;
      if (this.isParentArray) {
        index = this.parentObj[this.propName].indexOf(this);
        var valueLength = this.parentObj[this.propName].length;
        valueLength = isSaveChanges ? valueLength : valueLength > 0 ? valueLength - 1 : 0;
        index = index !== -1 ? "-" + index : "-" + valueLength;
        propName = propName + index;
      }
      if (this.controlParent !== this.parentObj) {
        propName = this.parentObj.getParentKey() + "." + this.propName + index;
      }
      return propName;
    };
    return ChildProperty2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/component.js
var __extends2 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate2 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var componentCount = 0;
var lastPageID;
var lastHistoryLen = 0;
var versionBasedStatePersistence = false;
var Component = (
  /** @class */
  function(_super) {
    __extends2(Component8, _super);
    function Component8(options, selector) {
      var _this = _super.call(this, options, selector) || this;
      _this.randomId = uniqueID();
      _this.isStringTemplate = false;
      _this.needsID = false;
      _this.isReactHybrid = false;
      if (isNullOrUndefined(_this.enableRtl)) {
        _this.setProperties({ "enableRtl": rightToLeft }, true);
      }
      if (isNullOrUndefined(_this.locale)) {
        _this.setProperties({ "locale": defaultCulture }, true);
      }
      _this.moduleLoader = new ModuleLoader(_this);
      _this.localObserver = new Observer(_this);
      onIntlChange.on("notifyExternalChange", _this.detectFunction, _this, _this.randomId);
      if (!isUndefined(selector)) {
        _this.appendTo();
      }
      return _this;
    }
    Component8.prototype.requiredModules = function() {
      return [];
    };
    Component8.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      if (this.enablePersistence) {
        this.setPersistData();
      }
      this.localObserver.destroy();
      if (this.refreshing) {
        return;
      }
      removeClass([this.element], ["e-control"]);
      this.trigger("destroyed", { cancel: false });
      _super.prototype.destroy.call(this);
      this.moduleLoader.clean();
      onIntlChange.off("notifyExternalChange", this.detectFunction, this.randomId);
    };
    Component8.prototype.refresh = function() {
      this.refreshing = true;
      this.moduleLoader.clean();
      this.destroy();
      this.clearChanges();
      this.localObserver = new Observer(this);
      this.preRender();
      this.injectModules();
      this.render();
      this.refreshing = false;
    };
    Component8.prototype.accessMount = function() {
      if (this.mount && !this.isReactHybrid) {
        this.mount();
      }
    };
    Component8.prototype.getRootElement = function() {
      if (this.isReactHybrid) {
        return this.actualElement;
      } else {
        return this.element;
      }
    };
    Component8.prototype.getLocalData = function() {
      var eleId = this.getModuleName() + this.element.id;
      if (versionBasedStatePersistence) {
        return window.localStorage.getItem(eleId + this.ej2StatePersistenceVersion);
      } else {
        return window.localStorage.getItem(eleId);
      }
    };
    Component8.prototype.appendTo = function(selector) {
      if (!isNullOrUndefined(selector) && typeof selector === "string") {
        this.element = select(selector, document);
      } else if (!isNullOrUndefined(selector)) {
        this.element = selector;
      }
      if (!isNullOrUndefined(this.element)) {
        var moduleClass = "e-" + this.getModuleName().toLowerCase();
        addClass([this.element], ["e-control", moduleClass]);
        this.isProtectedOnChange = false;
        if (this.needsID && !this.element.id) {
          this.element.id = this.getUniqueID(this.getModuleName());
        }
        if (this.enablePersistence) {
          this.mergePersistData();
          window.addEventListener("unload", this.setPersistData.bind(this));
        }
        var inst = getValue("ej2_instances", this.element);
        if (!inst || inst.indexOf(this) === -1) {
          _super.prototype.addInstance.call(this);
        }
        this.preRender();
        this.injectModules();
        this.render();
        if (!this.mount) {
          this.trigger("created");
        } else {
          this.accessMount();
        }
      }
    };
    Component8.prototype.renderComplete = function(wrapperElement) {
      if (isBlazor()) {
        var sfBlazor = "sfBlazor";
        window[sfBlazor].renderComplete(this.element, wrapperElement);
      }
      this.isRendered = true;
    };
    Component8.prototype.dataBind = function() {
      this.injectModules();
      _super.prototype.dataBind.call(this);
    };
    Component8.prototype.on = function(event, handler, context) {
      if (typeof event === "string") {
        this.localObserver.on(event, handler, context);
      } else {
        for (var _i = 0, event_1 = event; _i < event_1.length; _i++) {
          var arg = event_1[_i];
          this.localObserver.on(arg.event, arg.handler, arg.context);
        }
      }
    };
    Component8.prototype.off = function(event, handler) {
      if (typeof event === "string") {
        this.localObserver.off(event, handler);
      } else {
        for (var _i = 0, event_2 = event; _i < event_2.length; _i++) {
          var arg = event_2[_i];
          this.localObserver.off(arg.event, arg.handler);
        }
      }
    };
    Component8.prototype.notify = function(property, argument) {
      if (this.isDestroyed !== true) {
        this.localObserver.notify(property, argument);
      }
    };
    Component8.prototype.getInjectedModules = function() {
      return this.injectedModules;
    };
    Component8.Inject = function() {
      var moduleList = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        moduleList[_i] = arguments[_i];
      }
      if (!this.prototype.injectedModules) {
        this.prototype.injectedModules = [];
      }
      for (var i = 0; i < moduleList.length; i++) {
        if (this.prototype.injectedModules.indexOf(moduleList[i]) === -1) {
          this.prototype.injectedModules.push(moduleList[i]);
        }
      }
    };
    Component8.prototype.createElement = function(tagName, prop, isVDOM) {
      return createElement(tagName, prop);
    };
    Component8.prototype.triggerStateChange = function(handler, argument) {
      if (this.isReactHybrid) {
        this.setState();
        this.currentContext = { calls: handler, args: argument };
      }
    };
    Component8.prototype.injectModules = function() {
      if (this.injectedModules && this.injectedModules.length) {
        this.moduleLoader.inject(this.requiredModules(), this.injectedModules);
      }
    };
    Component8.prototype.detectFunction = function(args) {
      var prop = Object.keys(args);
      if (prop.length) {
        this[prop[0]] = args[prop[0]];
      }
    };
    Component8.prototype.mergePersistData = function() {
      var data;
      if (versionBasedStatePersistence) {
        data = window.localStorage.getItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion);
      } else {
        data = window.localStorage.getItem(this.getModuleName() + this.element.id);
      }
      if (!(isNullOrUndefined(data) || data === "")) {
        this.setProperties(JSON.parse(data), true);
      }
    };
    Component8.prototype.setPersistData = function() {
      if (!this.isDestroyed) {
        if (versionBasedStatePersistence) {
          window.localStorage.setItem(this.getModuleName() + this.element.id + this.ej2StatePersistenceVersion, this.getPersistData());
        } else {
          window.localStorage.setItem(this.getModuleName() + this.element.id, this.getPersistData());
        }
      }
    };
    Component8.prototype.appendReactElement = function(element2, container) {
    };
    ;
    Component8.prototype.renderReactTemplates = function() {
    };
    Component8.prototype.clearTemplate = function(templateName, index) {
    };
    Component8.prototype.getUniqueID = function(definedName) {
      if (this.isHistoryChanged()) {
        componentCount = 0;
      }
      lastPageID = this.pageID(location.href);
      lastHistoryLen = history.length;
      return definedName + "_" + lastPageID + "_" + componentCount++;
    };
    Component8.prototype.pageID = function(url) {
      var hash = 0;
      if (url.length === 0) {
        return hash;
      }
      for (var i = 0; i < url.length; i++) {
        var char = url.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return Math.abs(hash);
    };
    Component8.prototype.isHistoryChanged = function() {
      return lastPageID !== this.pageID(location.href) || lastHistoryLen !== history.length;
    };
    Component8.prototype.addOnPersist = function(options) {
      var _this = this;
      var persistObj = {};
      for (var _i = 0, options_1 = options; _i < options_1.length; _i++) {
        var key = options_1[_i];
        var objValue = void 0;
        objValue = getValue(key, this);
        if (!isUndefined(objValue)) {
          setValue(key, this.getActualProperties(objValue), persistObj);
        }
      }
      return JSON.stringify(persistObj, function(key2, value) {
        return _this.getActualProperties(value);
      });
    };
    Component8.prototype.getActualProperties = function(obj) {
      if (obj instanceof ChildProperty) {
        return getValue("properties", obj);
      } else {
        return obj;
      }
    };
    Component8.prototype.ignoreOnPersist = function(options) {
      return JSON.stringify(this.iterateJsonProperties(this.properties, options));
    };
    Component8.prototype.iterateJsonProperties = function(obj, ignoreList) {
      var newObj = {};
      var _loop_1 = function(key2) {
        if (ignoreList.indexOf(key2) === -1) {
          var value = obj[key2];
          if (typeof value === "object" && !(value instanceof Array)) {
            var newList = ignoreList.filter(function(str) {
              return new RegExp(key2 + ".").test(str);
            }).map(function(str) {
              return str.replace(key2 + ".", "");
            });
            newObj[key2] = this_1.iterateJsonProperties(this_1.getActualProperties(value), newList);
          } else {
            newObj[key2] = value;
          }
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
        var key = _a[_i];
        _loop_1(key);
      }
      return newObj;
    };
    __decorate2([
      Property(false)
    ], Component8.prototype, "enablePersistence", void 0);
    __decorate2([
      Property()
    ], Component8.prototype, "enableRtl", void 0);
    __decorate2([
      Property()
    ], Component8.prototype, "locale", void 0);
    Component8 = __decorate2([
      NotifyPropertyChanges
    ], Component8);
    return Component8;
  }(Base)
);
(function() {
  if (typeof window !== "undefined") {
    window.addEventListener(
      "popstate",
      /* istanbul ignore next */
      function() {
        componentCount = 0;
      }
    );
  }
})();

// node_modules/@syncfusion/ej2-base/src/draggable.js
var __extends3 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate3 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var defaultPosition = { left: 0, top: 0, bottom: 0, right: 0 };
var isDraggedObject = { isDragged: false };
var Position = (
  /** @class */
  function(_super) {
    __extends3(Position2, _super);
    function Position2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate3([
      Property(0)
    ], Position2.prototype, "left", void 0);
    __decorate3([
      Property(0)
    ], Position2.prototype, "top", void 0);
    return Position2;
  }(ChildProperty)
);
var Draggable = (
  /** @class */
  function(_super) {
    __extends3(Draggable2, _super);
    function Draggable2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.dragLimit = Draggable_1.getDefaultPosition();
      _this.borderWidth = Draggable_1.getDefaultPosition();
      _this.padding = Draggable_1.getDefaultPosition();
      _this.diffX = 0;
      _this.prevLeft = 0;
      _this.prevTop = 0;
      _this.dragProcessStarted = false;
      _this.eleTop = 0;
      _this.tapHoldTimer = 0;
      _this.externalInitialize = false;
      _this.diffY = 0;
      _this.parentScrollX = 0;
      _this.parentScrollY = 0;
      _this.droppables = {};
      _this.bind();
      return _this;
    }
    Draggable_1 = Draggable2;
    Draggable2.prototype.bind = function() {
      this.toggleEvents();
      if (Browser.isIE) {
        addClass([this.element], "e-block-touch");
      }
      this.droppables[this.scope] = {};
    };
    Draggable2.getDefaultPosition = function() {
      return extend({}, defaultPosition);
    };
    Draggable2.prototype.toggleEvents = function(isUnWire) {
      var ele;
      if (!isUndefined(this.handle)) {
        ele = select(this.handle, this.element);
      }
      var handler = this.enableTapHold && Browser.isDevice && Browser.isTouch ? this.mobileInitialize : this.initialize;
      if (isUnWire) {
        EventHandler.remove(ele || this.element, Browser.touchStartEvent, handler);
      } else {
        EventHandler.add(ele || this.element, Browser.touchStartEvent, handler, this);
      }
    };
    Draggable2.prototype.mobileInitialize = function(evt) {
      var _this = this;
      var target = evt.currentTarget;
      this.tapHoldTimer = setTimeout(function() {
        _this.externalInitialize = true;
        _this.removeTapholdTimer();
        _this.initialize(evt, target);
      }, this.tapHoldThreshold);
      EventHandler.add(document, Browser.touchMoveEvent, this.removeTapholdTimer, this);
      EventHandler.add(document, Browser.touchEndEvent, this.removeTapholdTimer, this);
    };
    Draggable2.prototype.removeTapholdTimer = function() {
      clearTimeout(this.tapHoldTimer);
      EventHandler.remove(document, Browser.touchMoveEvent, this.removeTapholdTimer);
      EventHandler.remove(document, Browser.touchEndEvent, this.removeTapholdTimer);
    };
    Draggable2.prototype.getScrollableParent = function(element2, axis) {
      var scroll = { "vertical": "scrollHeight", "horizontal": "scrollWidth" };
      var client = { "vertical": "clientHeight", "horizontal": "clientWidth" };
      if (isNullOrUndefined(element2)) {
        return null;
      }
      if (element2[scroll[axis]] > element2[client[axis]]) {
        if (axis === "vertical" ? element2.scrollTop > 0 : element2.scrollLeft > 0) {
          if (axis === "vertical") {
            this.parentScrollY = this.parentScrollY + (this.parentScrollY === 0 ? element2.scrollTop : element2.scrollTop - this.parentScrollY);
            this.tempScrollHeight = element2.scrollHeight;
          } else {
            this.parentScrollX = this.parentScrollX + (this.parentScrollX === 0 ? element2.scrollLeft : element2.scrollLeft - this.parentScrollX);
            this.tempScrollWidth = element2.scrollWidth;
          }
          if (!isNullOrUndefined(element2)) {
            return this.getScrollableParent(element2.parentNode, axis);
          } else {
            return element2;
          }
        } else {
          return this.getScrollableParent(element2.parentNode, axis);
        }
      } else {
        return this.getScrollableParent(element2.parentNode, axis);
      }
    };
    Draggable2.prototype.getScrollableValues = function() {
      this.parentScrollX = 0;
      this.parentScrollY = 0;
      var isModalDialog = this.element.classList.contains("e-dialog") && this.element.classList.contains("e-dlg-modal");
      var verticalScrollParent = this.getScrollableParent(this.element.parentNode, "vertical");
      var horizontalScrollParent = this.getScrollableParent(this.element.parentNode, "horizontal");
    };
    Draggable2.prototype.initialize = function(evt, curTarget) {
      this.currentStateTarget = evt.target;
      if (this.isDragStarted()) {
        return;
      } else {
        this.isDragStarted(true);
        this.externalInitialize = false;
      }
      this.target = evt.currentTarget || curTarget;
      this.dragProcessStarted = false;
      if (this.abort) {
        var abortSelectors = this.abort;
        if (typeof abortSelectors === "string") {
          abortSelectors = [abortSelectors];
        }
        for (var i = 0; i < abortSelectors.length; i++) {
          if (!isNullOrUndefined(closest(evt.target, abortSelectors[i]))) {
            if (this.isDragStarted()) {
              this.isDragStarted(true);
            }
            return;
          }
        }
      }
      if (this.preventDefault && !isUndefined(evt.changedTouches) && evt.type !== "touchstart") {
        evt.preventDefault();
      }
      this.element.setAttribute("aria-grabbed", "true");
      var intCoord = this.getCoordinates(evt);
      this.initialPosition = { x: intCoord.pageX, y: intCoord.pageY };
      if (!this.clone) {
        var pos = this.element.getBoundingClientRect();
        this.getScrollableValues();
        if (evt.clientX === evt.pageX) {
          this.parentScrollX = 0;
        }
        if (evt.clientY === evt.pageY) {
          this.parentScrollY = 0;
        }
        this.relativeXPosition = intCoord.pageX - (pos.left + this.parentScrollX);
        this.relativeYPosition = intCoord.pageY - (pos.top + this.parentScrollY);
      }
      if (this.externalInitialize) {
        this.intDragStart(evt);
      } else {
        EventHandler.add(document, Browser.touchMoveEvent, this.intDragStart, this);
        EventHandler.add(document, Browser.touchEndEvent, this.intDestroy, this);
      }
      this.toggleEvents(true);
      if (evt.type !== "touchstart" && this.isPreventSelect) {
        document.body.classList.add("e-prevent-select");
      }
      this.externalInitialize = false;
      EventHandler.trigger(document.documentElement, Browser.touchStartEvent, evt);
    };
    Draggable2.prototype.intDragStart = function(evt) {
      this.removeTapholdTimer();
      var isChangeTouch = !isUndefined(evt.changedTouches);
      if (isChangeTouch && evt.changedTouches.length !== 1) {
        return;
      }
      if (isChangeTouch) {
        evt.preventDefault();
      }
      var intCordinate = this.getCoordinates(evt);
      var pos;
      var styleProp = getComputedStyle(this.element);
      this.margin = {
        left: parseInt(styleProp.marginLeft, 10),
        top: parseInt(styleProp.marginTop, 10),
        right: parseInt(styleProp.marginRight, 10),
        bottom: parseInt(styleProp.marginBottom, 10)
      };
      var element2 = this.element;
      if (this.clone && this.dragTarget) {
        var intClosest = closest(evt.target, this.dragTarget);
        if (!isNullOrUndefined(intClosest)) {
          element2 = intClosest;
        }
      }
      if (this.isReplaceDragEle) {
        element2 = this.currentStateCheck(evt.target, element2);
      }
      this.offset = this.calculateParentPosition(element2);
      this.position = this.getMousePosition(evt, this.isDragScroll);
      var x = this.initialPosition.x - intCordinate.pageX;
      var y = this.initialPosition.y - intCordinate.pageY;
      var distance = Math.sqrt(x * x + y * y);
      if (distance >= this.distance || this.externalInitialize) {
        var ele = this.getHelperElement(evt);
        if (!ele || isNullOrUndefined(ele)) {
          return;
        }
        var dragTargetElement = this.helperElement = ele;
        this.parentClientRect = this.calculateParentPosition(dragTargetElement.offsetParent);
        if (this.dragStart) {
          var curTarget = this.getProperTargetElement(evt);
          var args = {
            event: evt,
            element: element2,
            target: curTarget,
            bindEvents: isBlazor() ? this.bindDragEvents.bind(this) : null,
            dragElement: dragTargetElement
          };
          this.trigger("dragStart", args);
        }
        if (this.dragArea) {
          this.setDragArea();
        } else {
          this.dragLimit = { left: 0, right: 0, bottom: 0, top: 0 };
          this.borderWidth = { top: 0, left: 0 };
        }
        pos = { left: this.position.left - this.parentClientRect.left, top: this.position.top - this.parentClientRect.top };
        if (this.clone && !this.enableTailMode) {
          this.diffX = this.position.left - this.offset.left;
          this.diffY = this.position.top - this.offset.top;
        }
        this.getScrollableValues();
        var styles = getComputedStyle(element2);
        var marginTop = parseFloat(styles.marginTop);
        if (this.clone && marginTop !== 0) {
          pos.top += marginTop;
        }
        this.eleTop = !isNaN(parseFloat(styles.top)) ? parseFloat(styles.top) - this.offset.top : 0;
        if (this.enableScrollHandler && !this.clone) {
          pos.top -= this.parentScrollY;
          pos.left -= this.parentScrollX;
        }
        var posValue = this.getProcessedPositionValue({
          top: pos.top - this.diffY + "px",
          left: pos.left - this.diffX + "px"
        });
        this.dragElePosition = { top: pos.top, left: pos.left };
        setStyleAttribute(dragTargetElement, this.getDragPosition({ position: "absolute", left: posValue.left, top: posValue.top }));
        EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);
        EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);
        if (!isBlazor()) {
          this.bindDragEvents(dragTargetElement);
        }
      }
    };
    Draggable2.prototype.bindDragEvents = function(dragTargetElement) {
      if (isVisible(dragTargetElement)) {
        EventHandler.add(document, Browser.touchMoveEvent, this.intDrag, this);
        EventHandler.add(document, Browser.touchEndEvent, this.intDragStop, this);
        this.setGlobalDroppables(false, this.element, dragTargetElement);
      } else {
        this.toggleEvents();
        document.body.classList.remove("e-prevent-select");
      }
    };
    Draggable2.prototype.elementInViewport = function(el) {
      this.top = el.offsetTop;
      this.left = el.offsetLeft;
      this.width = el.offsetWidth;
      this.height = el.offsetHeight;
      while (el.offsetParent) {
        el = el.offsetParent;
        this.top += el.offsetTop;
        this.left += el.offsetLeft;
      }
      return this.top >= window.pageYOffset && this.left >= window.pageXOffset && this.top + this.height <= window.pageYOffset + window.innerHeight && this.left + this.width <= window.pageXOffset + window.innerWidth;
    };
    Draggable2.prototype.getProcessedPositionValue = function(value) {
      if (this.queryPositionInfo) {
        return this.queryPositionInfo(value);
      }
      return value;
    };
    Draggable2.prototype.calculateParentPosition = function(ele) {
      if (isNullOrUndefined(ele)) {
        return { left: 0, top: 0 };
      }
      var rect = ele.getBoundingClientRect();
      var style = getComputedStyle(ele);
      return {
        left: rect.left + window.pageXOffset - parseInt(style.marginLeft, 10),
        top: rect.top + window.pageYOffset - parseInt(style.marginTop, 10)
      };
    };
    Draggable2.prototype.intDrag = function(evt) {
      if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {
        return;
      }
      var left;
      var top;
      this.position = this.getMousePosition(evt, this.isDragScroll);
      var docHeight = this.getDocumentWidthHeight("Height");
      if (docHeight < this.position.top) {
        this.position.top = docHeight;
      }
      var docWidth = this.getDocumentWidthHeight("Width");
      if (docWidth < this.position.left) {
        this.position.left = docWidth;
      }
      if (this.drag) {
        var curTarget = this.getProperTargetElement(evt);
        this.trigger("drag", { event: evt, element: this.element, target: curTarget });
      }
      var eleObj = this.checkTargetElement(evt);
      if (eleObj.target && eleObj.instance) {
        var flag = true;
        if (this.hoverObject) {
          if (this.hoverObject.instance !== eleObj.instance) {
            this.triggerOutFunction(evt, eleObj);
          } else {
            flag = false;
          }
        }
        if (flag) {
          eleObj.instance.dragData[this.scope] = this.droppables[this.scope];
          eleObj.instance.intOver(evt, eleObj.target);
          this.hoverObject = eleObj;
        }
      } else if (this.hoverObject) {
        this.triggerOutFunction(evt, eleObj);
      }
      var helperElement = this.droppables[this.scope].helper;
      this.parentClientRect = this.calculateParentPosition(this.helperElement.offsetParent);
      var tLeft = this.parentClientRect.left;
      var tTop = this.parentClientRect.top;
      var intCoord = this.getCoordinates(evt);
      var pagex = intCoord.pageX;
      var pagey = intCoord.pageY;
      var dLeft = this.position.left - this.diffX;
      var dTop = this.position.top - this.diffY;
      var styles = getComputedStyle(helperElement);
      if (this.dragArea) {
        if (this.pageX !== pagex || this.skipDistanceCheck) {
          var helperWidth = helperElement.offsetWidth + (parseFloat(styles.marginLeft) + parseFloat(styles.marginRight));
          if (this.dragLimit.left > dLeft && dLeft > 0) {
            left = this.dragLimit.left;
          } else if (this.dragLimit.right + window.pageXOffset < dLeft + helperWidth && dLeft > 0) {
            left = dLeft - (dLeft - this.dragLimit.right) + window.pageXOffset - helperWidth;
          } else {
            left = dLeft < 0 ? this.dragLimit.left : dLeft;
          }
        }
        if (this.pageY !== pagey || this.skipDistanceCheck) {
          var helperHeight = helperElement.offsetHeight + (parseFloat(styles.marginTop) + parseFloat(styles.marginBottom));
          if (this.dragLimit.top > dTop && dTop > 0) {
            top = this.dragLimit.top;
          } else if (this.dragLimit.bottom + window.pageYOffset < dTop + helperHeight && dTop > 0) {
            top = dTop - (dTop - this.dragLimit.bottom) + window.pageYOffset - helperHeight;
          } else {
            top = dTop < 0 ? this.dragLimit.top : dTop;
          }
        }
      } else {
        left = dLeft;
        top = dTop;
      }
      var iTop = tTop + this.borderWidth.top;
      var iLeft = tLeft + this.borderWidth.left;
      if (this.dragProcessStarted) {
        if (isNullOrUndefined(top)) {
          top = this.prevTop;
        }
        if (isNullOrUndefined(left)) {
          left = this.prevLeft;
        }
      }
      var draEleTop;
      var draEleLeft;
      if (this.dragArea) {
        this.dragLimit.top = this.clone ? this.dragLimit.top : 0;
        draEleTop = top - iTop < 0 ? this.dragLimit.top : top - iTop;
        draEleLeft = left - iLeft < 0 ? this.dragElePosition.left : left - iLeft;
      } else {
        draEleTop = top - iTop;
        draEleLeft = left - iLeft;
      }
      var marginTop = parseFloat(getComputedStyle(this.element).marginTop);
      if (marginTop > 0) {
        if (this.clone) {
          draEleTop += marginTop;
          if (dTop < 0) {
            if (marginTop + dTop >= 0) {
              draEleTop = marginTop + dTop;
            } else {
              draEleTop -= marginTop;
            }
          }
          draEleTop = this.dragLimit.bottom < draEleTop ? this.dragLimit.bottom : draEleTop;
        }
        if (top - iTop < 0) {
          if (dTop + marginTop + (helperElement.offsetHeight - iTop) >= 0) {
            var tempDraEleTop = this.dragLimit.top + dTop - iTop;
            if (tempDraEleTop + marginTop + iTop < 0) {
              draEleTop -= marginTop + iTop;
            } else {
              draEleTop = tempDraEleTop;
            }
          } else {
            draEleTop -= marginTop + iTop;
          }
        }
      }
      if (this.enableScrollHandler && !this.clone) {
        draEleTop -= this.parentScrollY;
        draEleLeft -= this.parentScrollX;
      }
      var dragValue = this.getProcessedPositionValue({ top: draEleTop + "px", left: draEleLeft + "px" });
      setStyleAttribute(helperElement, this.getDragPosition(dragValue));
      if (!this.elementInViewport(helperElement) && this.enableAutoScroll) {
        this.helperElement.scrollIntoView();
      }
      this.dragProcessStarted = true;
      this.prevLeft = left;
      this.prevTop = top;
      this.position.left = left;
      this.position.top = top;
      this.pageX = pagex;
      this.pageY = pagey;
    };
    Draggable2.prototype.triggerOutFunction = function(evt, eleObj) {
      this.hoverObject.instance.intOut(evt, eleObj.target);
      this.hoverObject.instance.dragData[this.scope] = null;
      this.hoverObject = null;
    };
    Draggable2.prototype.getDragPosition = function(dragValue) {
      var temp = extend({}, dragValue);
      if (this.axis) {
        if (this.axis === "x") {
          delete temp.top;
        } else if (this.axis === "y") {
          delete temp.left;
        }
      }
      return temp;
    };
    Draggable2.prototype.getDocumentWidthHeight = function(str) {
      var docBody = document.body;
      var docEle = document.documentElement;
      var returnValue = Math.max(docBody["scroll" + str], docEle["scroll" + str], docBody["offset" + str], docEle["offset" + str], docEle["client" + str]);
      return returnValue;
    };
    Draggable2.prototype.intDragStop = function(evt) {
      this.dragProcessStarted = false;
      if (!isUndefined(evt.changedTouches) && evt.changedTouches.length !== 1) {
        return;
      }
      var type = ["touchend", "pointerup", "mouseup"];
      if (type.indexOf(evt.type) !== -1) {
        if (this.dragStop) {
          var curTarget = this.getProperTargetElement(evt);
          this.trigger("dragStop", { event: evt, element: this.element, target: curTarget, helper: this.helperElement });
        }
        this.intDestroy(evt);
      } else {
        this.element.setAttribute("aria-grabbed", "false");
      }
      var eleObj = this.checkTargetElement(evt);
      if (eleObj.target && eleObj.instance) {
        eleObj.instance.dragStopCalled = true;
        eleObj.instance.dragData[this.scope] = this.droppables[this.scope];
        eleObj.instance.intDrop(evt, eleObj.target);
      }
      this.setGlobalDroppables(true);
      document.body.classList.remove("e-prevent-select");
    };
    Draggable2.prototype.intDestroy = function(evt) {
      this.dragProcessStarted = false;
      this.toggleEvents();
      document.body.classList.remove("e-prevent-select");
      this.element.setAttribute("aria-grabbed", "false");
      EventHandler.remove(document, Browser.touchMoveEvent, this.intDragStart);
      EventHandler.remove(document, Browser.touchEndEvent, this.intDragStop);
      EventHandler.remove(document, Browser.touchEndEvent, this.intDestroy);
      EventHandler.remove(document, Browser.touchMoveEvent, this.intDrag);
      if (this.isDragStarted()) {
        this.isDragStarted(true);
      }
    };
    Draggable2.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    Draggable2.prototype.getModuleName = function() {
      return "draggable";
    };
    Draggable2.prototype.isDragStarted = function(change) {
      if (change) {
        isDraggedObject.isDragged = !isDraggedObject.isDragged;
      }
      return isDraggedObject.isDragged;
    };
    Draggable2.prototype.setDragArea = function() {
      var eleWidthBound;
      var eleHeightBound;
      var top = 0;
      var left = 0;
      var ele;
      var type = typeof this.dragArea;
      if (type === "string") {
        ele = select(this.dragArea);
      } else {
        ele = this.dragArea;
      }
      if (ele) {
        var elementArea = ele.getBoundingClientRect();
        eleWidthBound = ele.scrollWidth ? ele.scrollWidth : elementArea.right - elementArea.left;
        eleHeightBound = ele.scrollHeight ? ele.scrollHeight : elementArea.bottom - elementArea.top;
        var keys2 = ["Top", "Left", "Bottom", "Right"];
        var styles = getComputedStyle(ele);
        for (var i = 0; i < keys2.length; i++) {
          var key = keys2[i];
          var tborder = styles["border" + key + "Width"];
          var tpadding = styles["padding" + key];
          var lowerKey = key.toLowerCase();
          this.borderWidth[lowerKey] = isNaN(parseFloat(tborder)) ? 0 : parseFloat(tborder);
          this.padding[lowerKey] = isNaN(parseFloat(tpadding)) ? 0 : parseFloat(tpadding);
        }
        top = elementArea.top;
        left = elementArea.left;
        this.dragLimit.left = left + this.borderWidth.left + this.padding.left;
        this.dragLimit.top = ele.offsetTop + this.borderWidth.top + this.padding.top;
        this.dragLimit.right = left + eleWidthBound - (this.borderWidth.right + this.padding.right);
        this.dragLimit.bottom = top + eleHeightBound - (this.borderWidth.bottom + this.padding.bottom);
      }
    };
    Draggable2.prototype.getProperTargetElement = function(evt) {
      var intCoord = this.getCoordinates(evt);
      var ele;
      var prevStyle = this.helperElement.style.pointerEvents || "";
      if (compareElementParent(evt.target, this.helperElement) || evt.type.indexOf("touch") !== -1) {
        this.helperElement.style.pointerEvents = "none";
        ele = document.elementFromPoint(intCoord.clientX, intCoord.clientY);
        this.helperElement.style.pointerEvents = prevStyle;
      } else {
        ele = evt.target;
      }
      return ele;
    };
    Draggable2.prototype.currentStateCheck = function(ele, oldEle) {
      var elem;
      if (!isNullOrUndefined(this.currentStateTarget) && this.currentStateTarget !== ele) {
        elem = this.currentStateTarget;
      } else {
        elem = !isNullOrUndefined(oldEle) ? oldEle : ele;
      }
      return elem;
    };
    Draggable2.prototype.getMousePosition = function(evt, isdragscroll) {
      var dragEle = evt.srcElement !== void 0 ? evt.srcElement : evt.target;
      var intCoord = this.getCoordinates(evt);
      var pageX;
      var pageY;
      var isOffsetParent = isNullOrUndefined(dragEle.offsetParent);
      if (isdragscroll) {
        pageX = this.clone ? intCoord.pageX : intCoord.pageX + (isOffsetParent ? 0 : dragEle.offsetParent.scrollLeft) - this.relativeXPosition;
        pageY = this.clone ? intCoord.pageY : intCoord.pageY + (isOffsetParent ? 0 : dragEle.offsetParent.scrollTop) - this.relativeYPosition;
      } else {
        pageX = this.clone ? intCoord.pageX : intCoord.pageX + window.pageXOffset - this.relativeXPosition;
        pageY = this.clone ? intCoord.pageY : intCoord.pageY + window.pageYOffset - this.relativeYPosition;
      }
      return {
        left: pageX - (this.margin.left + this.cursorAt.left),
        top: pageY - (this.margin.top + this.cursorAt.top)
      };
    };
    Draggable2.prototype.getCoordinates = function(evt) {
      if (evt.type.indexOf("touch") > -1) {
        return evt.changedTouches[0];
      }
      return evt;
    };
    Draggable2.prototype.getHelperElement = function(evt) {
      var element2;
      if (this.clone) {
        if (this.helper) {
          element2 = this.helper({ sender: evt, element: this.target });
        } else {
          element2 = createElement("div", { className: "e-drag-helper e-block-touch", innerHTML: "Draggable" });
          document.body.appendChild(element2);
        }
      } else {
        element2 = this.element;
      }
      return element2;
    };
    Draggable2.prototype.setGlobalDroppables = function(reset, drag, helper) {
      this.droppables[this.scope] = reset ? null : {
        draggable: drag,
        helper,
        draggedElement: this.element
      };
    };
    Draggable2.prototype.checkTargetElement = function(evt) {
      var target = this.getProperTargetElement(evt);
      var dropIns = this.getDropInstance(target);
      if (!dropIns && target && !isNullOrUndefined(target.parentNode)) {
        var parent_1 = closest(target.parentNode, ".e-droppable") || target.parentElement;
        if (parent_1) {
          dropIns = this.getDropInstance(parent_1);
        }
      }
      return { target, instance: dropIns };
    };
    Draggable2.prototype.getDropInstance = function(ele) {
      var name = "getModuleName";
      var drop;
      var eleInst = ele && ele.ej2_instances;
      if (eleInst) {
        for (var _i = 0, eleInst_1 = eleInst; _i < eleInst_1.length; _i++) {
          var inst = eleInst_1[_i];
          if (inst[name]() === "droppable") {
            drop = inst;
            break;
          }
        }
      }
      return drop;
    };
    Draggable2.prototype.destroy = function() {
      this.toggleEvents(true);
      _super.prototype.destroy.call(this);
    };
    var Draggable_1;
    __decorate3([
      Complex({}, Position)
    ], Draggable2.prototype, "cursorAt", void 0);
    __decorate3([
      Property(true)
    ], Draggable2.prototype, "clone", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "dragArea", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "isDragScroll", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "isReplaceDragEle", void 0);
    __decorate3([
      Property(true)
    ], Draggable2.prototype, "isPreventSelect", void 0);
    __decorate3([
      Event2()
    ], Draggable2.prototype, "drag", void 0);
    __decorate3([
      Event2()
    ], Draggable2.prototype, "dragStart", void 0);
    __decorate3([
      Event2()
    ], Draggable2.prototype, "dragStop", void 0);
    __decorate3([
      Property(1)
    ], Draggable2.prototype, "distance", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "handle", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "abort", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "helper", void 0);
    __decorate3([
      Property("default")
    ], Draggable2.prototype, "scope", void 0);
    __decorate3([
      Property("")
    ], Draggable2.prototype, "dragTarget", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "axis", void 0);
    __decorate3([
      Property()
    ], Draggable2.prototype, "queryPositionInfo", void 0);
    __decorate3([
      Property(false)
    ], Draggable2.prototype, "enableTailMode", void 0);
    __decorate3([
      Property(false)
    ], Draggable2.prototype, "skipDistanceCheck", void 0);
    __decorate3([
      Property(true)
    ], Draggable2.prototype, "preventDefault", void 0);
    __decorate3([
      Property(false)
    ], Draggable2.prototype, "enableAutoScroll", void 0);
    __decorate3([
      Property(false)
    ], Draggable2.prototype, "enableTapHold", void 0);
    __decorate3([
      Property(750)
    ], Draggable2.prototype, "tapHoldThreshold", void 0);
    __decorate3([
      Property(false)
    ], Draggable2.prototype, "enableScrollHandler", void 0);
    Draggable2 = Draggable_1 = __decorate3([
      NotifyPropertyChanges
    ], Draggable2);
    return Draggable2;
  }(Base)
);

// node_modules/@syncfusion/ej2-base/src/droppable.js
var __extends4 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate4 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Droppable = (
  /** @class */
  function(_super) {
    __extends4(Droppable2, _super);
    function Droppable2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.mouseOver = false;
      _this.dragData = {};
      _this.dragStopCalled = false;
      _this.bind();
      return _this;
    }
    Droppable2.prototype.bind = function() {
      this.wireEvents();
    };
    Droppable2.prototype.wireEvents = function() {
      EventHandler.add(this.element, Browser.touchEndEvent, this.intDrop, this);
    };
    Droppable2.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    Droppable2.prototype.getModuleName = function() {
      return "droppable";
    };
    Droppable2.prototype.intOver = function(event, element2) {
      if (!this.mouseOver) {
        var drag = this.dragData[this.scope];
        this.trigger("over", { event, target: element2, dragData: drag });
        this.mouseOver = true;
      }
    };
    Droppable2.prototype.intOut = function(event, element2) {
      if (this.mouseOver) {
        this.trigger("out", { evt: event, target: element2 });
        this.mouseOver = false;
      }
    };
    Droppable2.prototype.intDrop = function(evt, element2) {
      if (!this.dragStopCalled) {
        return;
      } else {
        this.dragStopCalled = false;
      }
      var accept = true;
      var drag = this.dragData[this.scope];
      var isDrag = drag ? drag.helper && isVisible(drag.helper) : false;
      var area;
      if (isDrag) {
        area = this.isDropArea(evt, drag.helper, element2);
        if (this.accept) {
          accept = matches(drag.helper, this.accept);
        }
      }
      if (isDrag && this.drop && area.canDrop && accept) {
        this.trigger("drop", { event: evt, target: area.target, droppedElement: drag.helper, dragData: drag });
      }
      this.mouseOver = false;
    };
    Droppable2.prototype.isDropArea = function(evt, helper, element2) {
      var area = { canDrop: true, target: element2 || evt.target };
      var isTouch = evt.type === "touchend";
      if (isTouch || area.target === helper) {
        helper.style.display = "none";
        var coord = isTouch ? evt.changedTouches[0] : evt;
        var ele = document.elementFromPoint(coord.clientX, coord.clientY);
        area.canDrop = false;
        area.canDrop = compareElementParent(ele, this.element);
        if (area.canDrop) {
          area.target = ele;
        }
        helper.style.display = "";
      }
      return area;
    };
    Droppable2.prototype.destroy = function() {
      EventHandler.remove(this.element, Browser.touchEndEvent, this.intDrop);
      _super.prototype.destroy.call(this);
    };
    __decorate4([
      Property()
    ], Droppable2.prototype, "accept", void 0);
    __decorate4([
      Property("default")
    ], Droppable2.prototype, "scope", void 0);
    __decorate4([
      Event2()
    ], Droppable2.prototype, "drop", void 0);
    __decorate4([
      Event2()
    ], Droppable2.prototype, "over", void 0);
    __decorate4([
      Event2()
    ], Droppable2.prototype, "out", void 0);
    Droppable2 = __decorate4([
      NotifyPropertyChanges
    ], Droppable2);
    return Droppable2;
  }(Base)
);

// node_modules/@syncfusion/ej2-base/src/keyboard.js
var __extends5 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate5 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var keyCode = {
  "backspace": 8,
  "tab": 9,
  "enter": 13,
  "shift": 16,
  "control": 17,
  "alt": 18,
  "pause": 19,
  "capslock": 20,
  "space": 32,
  "escape": 27,
  "pageup": 33,
  "pagedown": 34,
  "end": 35,
  "home": 36,
  "leftarrow": 37,
  "uparrow": 38,
  "rightarrow": 39,
  "downarrow": 40,
  "insert": 45,
  "delete": 46,
  "f1": 112,
  "f2": 113,
  "f3": 114,
  "f4": 115,
  "f5": 116,
  "f6": 117,
  "f7": 118,
  "f8": 119,
  "f9": 120,
  "f10": 121,
  "f11": 122,
  "f12": 123,
  "semicolon": 186,
  "plus": 187,
  "comma": 188,
  "minus": 189,
  "dot": 190,
  "forwardslash": 191,
  "graveaccent": 192,
  "openbracket": 219,
  "backslash": 220,
  "closebracket": 221,
  "singlequote": 222
};
var KeyboardEvents = (
  /** @class */
  function(_super) {
    __extends5(KeyboardEvents2, _super);
    function KeyboardEvents2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.keyPressHandler = function(e) {
        var isAltKey = e.altKey;
        var isCtrlKey = e.ctrlKey;
        var isShiftKey = e.shiftKey;
        var curkeyCode = e.which;
        var keys2 = Object.keys(_this.keyConfigs);
        for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          var configCollection = _this.keyConfigs[key].split(",");
          for (var _a = 0, configCollection_1 = configCollection; _a < configCollection_1.length; _a++) {
            var rconfig = configCollection_1[_a];
            var rKeyObj = KeyboardEvents_1.getKeyConfigData(rconfig.trim());
            if (isAltKey === rKeyObj.altKey && isCtrlKey === rKeyObj.ctrlKey && isShiftKey === rKeyObj.shiftKey && curkeyCode === rKeyObj.keyCode) {
              e.action = key;
              if (_this.keyAction) {
                _this.keyAction(e);
              }
            }
          }
        }
      };
      _this.bind();
      return _this;
    }
    KeyboardEvents_1 = KeyboardEvents2;
    KeyboardEvents2.prototype.destroy = function() {
      this.unwireEvents();
      _super.prototype.destroy.call(this);
    };
    KeyboardEvents2.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    KeyboardEvents2.prototype.bind = function() {
      this.wireEvents();
    };
    KeyboardEvents2.prototype.getModuleName = function() {
      return "keyboard";
    };
    KeyboardEvents2.prototype.wireEvents = function() {
      this.element.addEventListener(this.eventName, this.keyPressHandler);
    };
    KeyboardEvents2.prototype.unwireEvents = function() {
      this.element.removeEventListener(this.eventName, this.keyPressHandler);
    };
    KeyboardEvents2.getKeyConfigData = function(config) {
      if (config in this.configCache) {
        return this.configCache[config];
      }
      var keys2 = config.toLowerCase().split("+");
      var keyData = {
        altKey: keys2.indexOf("alt") !== -1 ? true : false,
        ctrlKey: keys2.indexOf("ctrl") !== -1 ? true : false,
        shiftKey: keys2.indexOf("shift") !== -1 ? true : false,
        keyCode: null
      };
      if (keys2[keys2.length - 1].length > 1 && !!Number(keys2[keys2.length - 1])) {
        keyData.keyCode = Number(keys2[keys2.length - 1]);
      } else {
        keyData.keyCode = KeyboardEvents_1.getKeyCode(keys2[keys2.length - 1]);
      }
      KeyboardEvents_1.configCache[config] = keyData;
      return keyData;
    };
    KeyboardEvents2.getKeyCode = function(keyVal) {
      return keyCode[keyVal] || keyVal.toUpperCase().charCodeAt(0);
    };
    var KeyboardEvents_1;
    KeyboardEvents2.configCache = {};
    __decorate5([
      Property({})
    ], KeyboardEvents2.prototype, "keyConfigs", void 0);
    __decorate5([
      Property("keyup")
    ], KeyboardEvents2.prototype, "eventName", void 0);
    __decorate5([
      Event2()
    ], KeyboardEvents2.prototype, "keyAction", void 0);
    KeyboardEvents2 = KeyboardEvents_1 = __decorate5([
      NotifyPropertyChanges
    ], KeyboardEvents2);
    return KeyboardEvents2;
  }(Base)
);

// node_modules/@syncfusion/ej2-base/src/l10n.js
var L10n = (
  /** @class */
  function() {
    function L10n2(controlName, localeStrings, locale) {
      this.controlName = controlName;
      this.localeStrings = localeStrings;
      this.setLocale(locale || defaultCulture);
    }
    L10n2.prototype.setLocale = function(locale) {
      var intLocale = this.intGetControlConstant(L10n2.locale, locale);
      this.currentLocale = intLocale || this.localeStrings;
    };
    L10n2.load = function(localeObject) {
      this.locale = extend(this.locale, localeObject, {}, true);
    };
    L10n2.prototype.getConstant = function(prop) {
      if (!isNullOrUndefined(this.currentLocale[prop])) {
        return this.currentLocale[prop];
      } else {
        return this.localeStrings[prop] || "";
      }
    };
    L10n2.prototype.intGetControlConstant = function(curObject, locale) {
      if (curObject[locale]) {
        return curObject[locale][this.controlName];
      }
      return null;
    };
    L10n2.locale = {};
    return L10n2;
  }()
);

// node_modules/@syncfusion/ej2-base/src/touch.js
var __extends6 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate6 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var SwipeSettings = (
  /** @class */
  function(_super) {
    __extends6(SwipeSettings2, _super);
    function SwipeSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate6([
      Property(50)
    ], SwipeSettings2.prototype, "swipeThresholdDistance", void 0);
    return SwipeSettings2;
  }(ChildProperty)
);
var swipeRegex = /(Up|Down)/;
var Touch = (
  /** @class */
  function(_super) {
    __extends6(Touch2, _super);
    function Touch2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.touchAction = true;
      _this.tapCount = 0;
      _this.startEvent = function(evt) {
        if (_this.touchAction === true) {
          var point = _this.updateChangeTouches(evt);
          if (evt.changedTouches !== void 0) {
            _this.touchAction = false;
          }
          _this.isTouchMoved = false;
          _this.movedDirection = "";
          _this.startPoint = _this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };
          _this.startEventData = point;
          _this.hScrollLocked = _this.vScrollLocked = false;
          _this.tStampStart = Date.now();
          _this.timeOutTapHold = setTimeout(function() {
            _this.tapHoldEvent(evt);
          }, _this.tapHoldThreshold);
          EventHandler.add(_this.element, Browser.touchMoveEvent, _this.moveEvent, _this);
          EventHandler.add(_this.element, Browser.touchEndEvent, _this.endEvent, _this);
          EventHandler.add(_this.element, Browser.touchCancelEvent, _this.cancelEvent, _this);
        }
      };
      _this.moveEvent = function(evt) {
        var point = _this.updateChangeTouches(evt);
        _this.movedPoint = point;
        _this.isTouchMoved = !(point.clientX === _this.startPoint.clientX && point.clientY === _this.startPoint.clientY);
        var eScrollArgs = {};
        if (_this.isTouchMoved) {
          clearTimeout(_this.timeOutTapHold);
          _this.calcScrollPoints(evt);
          var scrollArg = {
            startEvents: _this.startEventData,
            originalEvent: evt,
            startX: _this.startPoint.clientX,
            startY: _this.startPoint.clientY,
            distanceX: _this.distanceX,
            distanceY: _this.distanceY,
            scrollDirection: _this.scrollDirection,
            velocity: _this.getVelocity(point)
          };
          eScrollArgs = extend(eScrollArgs, {}, scrollArg);
          _this.trigger("scroll", eScrollArgs);
          _this.lastMovedPoint = { clientX: point.clientX, clientY: point.clientY };
        }
      };
      _this.cancelEvent = function(evt) {
        clearTimeout(_this.timeOutTapHold);
        clearTimeout(_this.timeOutTap);
        _this.tapCount = 0;
        _this.swipeFn(evt);
        EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);
      };
      _this.endEvent = function(evt) {
        _this.swipeFn(evt);
        if (!_this.isTouchMoved) {
          if (typeof _this.tap === "function") {
            _this.trigger("tap", { originalEvent: evt, tapCount: ++_this.tapCount });
            _this.timeOutTap = setTimeout(function() {
              _this.tapCount = 0;
            }, _this.tapThreshold);
          }
        }
        _this.modeclear();
      };
      _this.swipeFn = function(evt) {
        clearTimeout(_this.timeOutTapHold);
        clearTimeout(_this.timeOutTap);
        var point = _this.updateChangeTouches(evt);
        var diffX = point.clientX - _this.startPoint.clientX;
        var diffY = point.clientY - _this.startPoint.clientY;
        diffX = Math.floor(diffX < 0 ? -1 * diffX : diffX);
        diffY = Math.floor(diffY < 0 ? -1 * diffY : diffX);
        _this.isTouchMoved = diffX > 1 || diffY > 1;
        _this.endPoint = point;
        _this.calcPoints(evt);
        var swipeArgs = {
          originalEvent: evt,
          startEvents: _this.startEventData,
          startX: _this.startPoint.clientX,
          startY: _this.startPoint.clientY,
          distanceX: _this.distanceX,
          distanceY: _this.distanceY,
          swipeDirection: _this.movedDirection,
          velocity: _this.getVelocity(point)
        };
        if (_this.isTouchMoved) {
          var eSwipeArgs = void 0;
          var tDistance = _this.swipeSettings.swipeThresholdDistance;
          eSwipeArgs = extend(eSwipeArgs, _this.defaultArgs, swipeArgs);
          var canTrigger = false;
          var ele = _this.element;
          var scrollBool = _this.isScrollable(ele);
          var moved = swipeRegex.test(_this.movedDirection);
          if (tDistance < _this.distanceX && !moved || tDistance < _this.distanceY && moved) {
            if (!scrollBool) {
              canTrigger = true;
            } else {
              canTrigger = _this.checkSwipe(ele, moved);
            }
          }
          if (canTrigger) {
            _this.trigger("swipe", eSwipeArgs);
          }
        }
        _this.modeclear();
      };
      _this.modeclear = function() {
        _this.modeClear = setTimeout(function() {
          _this.touchAction = true;
        }, typeof _this.tap !== "function" ? 0 : 20);
        _this.lastTapTime = (/* @__PURE__ */ new Date()).getTime();
        EventHandler.remove(_this.element, Browser.touchMoveEvent, _this.moveEvent);
        EventHandler.remove(_this.element, Browser.touchEndEvent, _this.endEvent);
        EventHandler.remove(_this.element, Browser.touchCancelEvent, _this.cancelEvent);
      };
      _this.bind();
      return _this;
    }
    Touch2.prototype.onPropertyChanged = function(newProp, oldProp) {
    };
    Touch2.prototype.bind = function() {
      this.wireEvents();
      if (Browser.isIE) {
        this.element.classList.add("e-block-touch");
      }
    };
    Touch2.prototype.destroy = function() {
      this.unwireEvents();
      _super.prototype.destroy.call(this);
    };
    Touch2.prototype.wireEvents = function() {
      EventHandler.add(this.element, Browser.touchStartEvent, this.startEvent, this);
    };
    Touch2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, Browser.touchStartEvent, this.startEvent);
    };
    Touch2.prototype.getModuleName = function() {
      return "touch";
    };
    Touch2.prototype.isScrollable = function(element2) {
      var eleStyle = getComputedStyle(element2);
      var style = eleStyle.overflow + eleStyle.overflowX + eleStyle.overflowY;
      if (/(auto|scroll)/.test(style)) {
        return true;
      }
      return false;
    };
    Touch2.prototype.tapHoldEvent = function(evt) {
      this.tapCount = 0;
      this.touchAction = true;
      var eTapArgs;
      EventHandler.remove(this.element, Browser.touchMoveEvent, this.moveEvent);
      EventHandler.remove(this.element, Browser.touchEndEvent, this.endEvent);
      eTapArgs = { originalEvent: evt };
      this.trigger("tapHold", eTapArgs);
      EventHandler.remove(this.element, Browser.touchCancelEvent, this.cancelEvent);
    };
    Touch2.prototype.calcPoints = function(evt) {
      var point = this.updateChangeTouches(evt);
      this.defaultArgs = { originalEvent: evt };
      this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.startPoint.clientX));
      this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.startPoint.clientY));
      if (this.distanceX > this.distanceY) {
        this.movedDirection = point.clientX > this.startPoint.clientX ? "Right" : "Left";
      } else {
        this.movedDirection = point.clientY < this.startPoint.clientY ? "Up" : "Down";
      }
    };
    Touch2.prototype.calcScrollPoints = function(evt) {
      var point = this.updateChangeTouches(evt);
      this.defaultArgs = { originalEvent: evt };
      this.distanceX = Math.abs(Math.abs(point.clientX) - Math.abs(this.lastMovedPoint.clientX));
      this.distanceY = Math.abs(Math.abs(point.clientY) - Math.abs(this.lastMovedPoint.clientY));
      if ((this.distanceX > this.distanceY || this.hScrollLocked === true) && this.vScrollLocked === false) {
        this.scrollDirection = point.clientX > this.lastMovedPoint.clientX ? "Right" : "Left";
        this.hScrollLocked = true;
      } else {
        this.scrollDirection = point.clientY < this.lastMovedPoint.clientY ? "Up" : "Down";
        this.vScrollLocked = true;
      }
    };
    Touch2.prototype.getVelocity = function(pnt) {
      var newX = pnt.clientX;
      var newY = pnt.clientY;
      var newT = Date.now();
      var xDist = newX - this.startPoint.clientX;
      var yDist = newY - this.startPoint.clientX;
      var interval = newT - this.tStampStart;
      return Math.sqrt(xDist * xDist + yDist * yDist) / interval;
    };
    Touch2.prototype.checkSwipe = function(ele, flag) {
      var keys2 = ["scroll", "offset"];
      var temp = flag ? ["Height", "Top"] : ["Width", "Left"];
      if (ele[keys2[0] + temp[0]] <= ele[keys2[1] + temp[0]]) {
        return true;
      }
      return ele[keys2[0] + temp[1]] === 0 || ele[keys2[1] + temp[0]] + ele[keys2[0] + temp[1]] >= ele[keys2[0] + temp[0]];
    };
    Touch2.prototype.updateChangeTouches = function(evt) {
      var point = evt.changedTouches && evt.changedTouches.length !== 0 ? evt.changedTouches[0] : evt;
      return point;
    };
    __decorate6([
      Event2()
    ], Touch2.prototype, "tap", void 0);
    __decorate6([
      Event2()
    ], Touch2.prototype, "tapHold", void 0);
    __decorate6([
      Event2()
    ], Touch2.prototype, "swipe", void 0);
    __decorate6([
      Event2()
    ], Touch2.prototype, "scroll", void 0);
    __decorate6([
      Property(350)
    ], Touch2.prototype, "tapThreshold", void 0);
    __decorate6([
      Property(750)
    ], Touch2.prototype, "tapHoldThreshold", void 0);
    __decorate6([
      Complex({}, SwipeSettings)
    ], Touch2.prototype, "swipeSettings", void 0);
    Touch2 = __decorate6([
      NotifyPropertyChanges
    ], Touch2);
    return Touch2;
  }(Base)
);

// node_modules/@syncfusion/ej2-base/src/template.js
var LINES = new RegExp("\\n|\\r|\\s\\s+", "g");
var QUOTES = new RegExp(/'|"/g);
var IF_STMT = new RegExp("if ?\\(");
var ELSEIF_STMT = new RegExp("else if ?\\(");
var ELSE_STMT = new RegExp("else");
var FOR_STMT = new RegExp("for ?\\(");
var IF_OR_FOR = new RegExp("(/if|/for)");
var CALL_FUNCTION = new RegExp("\\((.*)\\)", "");
var NOT_NUMBER = new RegExp("^[0-9]+$", "g");
var WORD = new RegExp(`[\\w"'.\\s+]+`, "g");
var DBL_QUOTED_STR = new RegExp('"(.*?)"', "g");
var WORDIF = new RegExp(`[\\w"'@#$.\\s-+]+`, "g");
var exp = new RegExp("\\${([^}]*)}", "g");
var ARR_OBJ = /^\..*/gm;
var SINGLE_SLASH = /\\/gi;
var DOUBLE_SLASH = /\\\\/gi;
var WORDFUNC = new RegExp(`[\\w"'@#$.\\s+]+`, "g");
var WINDOWFUNC = /\window\./gm;
function compile(template, helper, ignorePrefix) {
  var argName = "data";
  var evalExpResult = evalExp(template, argName, helper, ignorePrefix);
  var condtion = `var valueRegEx = (/value=\\'([A-Za-z0-9 _]*)((.)([\\w)(!-;?-■\\s]+)['])/g);
    var hrefRegex = (/(?:href)([\\s='"./]+)([\\w-./?=&\\\\#"]+)((.)([\\w)(!-;/?-■\\s]+)['])/g);
    if((str.match(valueRegEx)) && (str.match('svg') === null)){
        var check = str.match(valueRegEx);
        var str1 = str;
        for (var i=0; i < check.length; i++) {
            var check1 = str.match(valueRegEx)[i].split('value=')[1];
            var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '"') : check1;
            change =change.match(/.$/)[0] === '\\'' ? change.replace(/.$/,'"') : change;
            str1 = str1.replace(check1, change);
        }
        str = str.replace(str, str1);
    }
    else if (str.match(/(?:href='')/) === null) {
        if((str.match(hrefRegex)) && (str.match('svg') === null)) {
            var check = str.match(hrefRegex);
            var str1 = str;
            for (var i=0; i < check.length; i++) {
                var check1 = str.match(hrefRegex)[i].split('href=')[1];
                var change = check1.match(/^'/) !== null ? check1.replace(/^'/, '"') : check1;
                change =change.match(/.$/)[0] === '\\'' ? change.replace(/.$/,'"') : change;
                str1 = str1.replace(check1, change);
            }
            str = str.replace(str, str1);
        }
    }
    `;
  var fnCode = 'var str="' + evalExpResult + '";' + condtion + " return str;";
  var fn = new Function(argName, fnCode);
  return fn.bind(helper);
}
function evalExp(str, nameSpace, helper, ignorePrefix) {
  var varCOunt = 0;
  var localKeys = [];
  var isClass = str.match(/class="([^"]+|)\s{2}/g);
  var singleSpace = "";
  if (isClass) {
    isClass.forEach(function(value) {
      singleSpace = value.replace(/\s\s+/g, " ");
      str = str.replace(value, singleSpace);
    });
  }
  return str.replace(LINES, "").replace(DBL_QUOTED_STR, "'$1'").replace(
    exp,
    // eslint-disable-next-line
    function(match, cnt, offset, matchStr) {
      var SPECIAL_CHAR = /@|#|\$/gm;
      var matches2 = cnt.match(CALL_FUNCTION);
      if (matches2) {
        var rlStr = matches2[1];
        if (ELSEIF_STMT.test(cnt)) {
          cnt = '";} ' + cnt.replace(matches2[1], rlStr.replace(WORD, function(str2) {
            str2 = str2.trim();
            return addNameSpace(str2, !QUOTES.test(str2) && localKeys.indexOf(str2) === -1, nameSpace, localKeys, ignorePrefix);
          })) + '{ \n str = str + "';
        } else if (IF_STMT.test(cnt)) {
          cnt = '"; ' + cnt.replace(matches2[1], rlStr.replace(WORDIF, function(strs) {
            return HandleSpecialCharArrObj(strs, nameSpace, localKeys, ignorePrefix);
          })) + '{ \n str = str + "';
        } else if (FOR_STMT.test(cnt)) {
          var rlStr_1 = matches2[1].split(" of ");
          cnt = '"; ' + cnt.replace(matches2[1], function(mtc) {
            localKeys.push(rlStr_1[0]);
            localKeys.push(rlStr_1[0] + "Index");
            varCOunt = varCOunt + 1;
            return "var i" + varCOunt + "=0; i" + varCOunt + " < " + addNameSpace(rlStr_1[1], true, nameSpace, localKeys, ignorePrefix) + ".length; i" + varCOunt + "++";
          }) + "{ \n " + rlStr_1[0] + "= " + addNameSpace(rlStr_1[1], true, nameSpace, localKeys, ignorePrefix) + "[i" + varCOunt + "]; \n var " + rlStr_1[0] + "Index=i" + varCOunt + '; \n str = str + "';
        } else {
          var fnStr = cnt.split("(");
          var fNameSpace = helper && helper.hasOwnProperty(fnStr[0]) ? "this." : "global";
          fNameSpace = /\./.test(fnStr[0]) ? "" : fNameSpace;
          var ftArray = matches2[1].split(",");
          if (matches2[1].length !== 0 && !/data/.test(ftArray[0]) && !/window./.test(ftArray[0])) {
            matches2[1] = fNameSpace === "global" ? nameSpace + "." + matches2[1] : matches2[1];
          }
          var splRegexp = /@|\$|#/gm;
          var arrObj = /\]\./gm;
          if (WINDOWFUNC.test(cnt) && arrObj.test(cnt) || splRegexp.test(cnt)) {
            var splArrRegexp = /@|\$|#|\]\./gm;
            if (splArrRegexp.test(cnt)) {
              cnt = '"+ ' + (fNameSpace === "global" ? "" : fNameSpace) + cnt.replace(matches2[1], rlStr.replace(WORDFUNC, function(strs) {
                return HandleSpecialCharArrObj(strs, nameSpace, localKeys, ignorePrefix);
              })) + '+ "';
            }
          } else {
            cnt = '" + ' + (fNameSpace === "global" ? "" : fNameSpace) + cnt.replace(rlStr, addNameSpace(matches2[1].replace(/,( |)data.|,/gi, "," + nameSpace + ".").replace(/,( |)data.window/gi, ",window"), fNameSpace === "global" ? false : true, nameSpace, localKeys, ignorePrefix)) + '+"';
          }
        }
      } else if (ELSE_STMT.test(cnt)) {
        cnt = '"; ' + cnt.replace(ELSE_STMT, '} else { \n str = str + "');
      } else if (!!cnt.match(IF_OR_FOR)) {
        cnt = cnt.replace(IF_OR_FOR, '"; \n } \n str = str + "');
      } else if (SPECIAL_CHAR.test(cnt)) {
        if (cnt.match(SINGLE_SLASH)) {
          cnt = SlashReplace(cnt);
        }
        cnt = '"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '"]+"';
      } else {
        if (cnt.match(SINGLE_SLASH)) {
          cnt = SlashReplace(cnt);
          cnt = '"+' + NameSpaceForspecialChar(cnt, localKeys.indexOf(cnt) === -1, nameSpace, localKeys) + '"]+"';
        } else {
          cnt = '"+' + addNameSpace(cnt.replace(/,/gi, "+" + nameSpace + "."), localKeys.indexOf(cnt) === -1, nameSpace, localKeys, ignorePrefix) + '+"';
        }
      }
      return cnt;
    }
  );
}
function addNameSpace(str, addNS, nameSpace, ignoreList, ignorePrefix) {
  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split(".")[0]) === -1 && !ignorePrefix ? nameSpace + "." + str : str;
}
function NameSpaceArrObj(str, addNS, nameSpace, ignoreList) {
  var arrObjReg = /^\..*/gm;
  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split(".")[0]) === -1 && !arrObjReg.test(str) ? nameSpace + "." + str : str;
}
function NameSpaceForspecialChar(str, addNS, nameSpace, ignoreList) {
  return addNS && !NOT_NUMBER.test(str) && ignoreList.indexOf(str.split(".")[0]) === -1 ? nameSpace + '["' + str : str;
}
function SlashReplace(tempStr) {
  var double = "\\\\";
  if (tempStr.match(DOUBLE_SLASH)) {
    tempStr = tempStr;
  } else {
    tempStr = tempStr.replace(SINGLE_SLASH, double);
  }
  return tempStr;
}
function HandleSpecialCharArrObj(str, nameSpaceNew, keys2, ignorePrefix) {
  str = str.trim();
  var windowFunc = /\window\./gm;
  if (!windowFunc.test(str)) {
    var quotes = /'|"/gm;
    var splRegexp = /@|\$|#/gm;
    if (splRegexp.test(str)) {
      str = NameSpaceForspecialChar(str, keys2.indexOf(str) === -1, nameSpaceNew, keys2) + '"]';
    }
    if (ARR_OBJ.test(str)) {
      return NameSpaceArrObj(str, !quotes.test(str) && keys2.indexOf(str) === -1, nameSpaceNew, keys2);
    } else {
      return addNameSpace(str, !quotes.test(str) && keys2.indexOf(str) === -1, nameSpaceNew, keys2, ignorePrefix);
    }
  } else {
    return str;
  }
}

// node_modules/@syncfusion/ej2-base/src/template-engine.js
var HAS_ROW = /^[\n\r.]+<tr|^<tr/;
var HAS_SVG = /^[\n\r.]+<svg|^<path|^<g/;
var blazorTemplates = {};
function getRandomId() {
  return "-" + Math.random().toString(36).substr(2, 5);
}
function compile2(templateString, helper, ignorePrefix) {
  var compiler = engineObj.compile(templateString, helper, ignorePrefix);
  return function(data, component, propName, templateId, isStringTemplate, index, element2) {
    var result = compiler(data, component, propName, element2);
    var blazorTemplateId = "BlazorTemplateId";
    if (isBlazor() && !isStringTemplate) {
      var randomId = getRandomId();
      var blazorId = templateId + randomId;
      if (!blazorTemplates[templateId]) {
        blazorTemplates[templateId] = [];
      }
      if (!isNullOrUndefined(index)) {
        var keys2 = Object.keys(blazorTemplates[templateId][index]);
        for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
          var key = keys_1[_i];
          if (key !== blazorTemplateId && data[key]) {
            blazorTemplates[templateId][index][key] = data[key];
          }
          if (key === blazorTemplateId) {
            blazorId = blazorTemplates[templateId][index][key];
          }
        }
      } else {
        data[blazorTemplateId] = blazorId;
        blazorTemplates[templateId].push(data);
      }
      return propName === "rowTemplate" ? [createElement("tr", { id: blazorId, className: "e-blazor-template" })] : (
        // eslint-disable-next-line
        [createElement("div", { id: blazorId, className: "e-blazor-template" })]
      );
    }
    if (typeof result === "string") {
      if (HAS_SVG.test(result)) {
        var ele = createElement("svg", { innerHTML: result });
        return ele.childNodes;
      } else {
        var ele = createElement(HAS_ROW.test(result) ? "table" : "div", { innerHTML: result });
        return ele.childNodes;
      }
    } else {
      return result;
    }
  };
}
function setTemplateEngine(classObj) {
  engineObj.compile = classObj.compile;
}
function getTemplateEngine() {
  return engineObj.compile;
}
var Engine = (
  /** @class */
  function() {
    function Engine2() {
    }
    Engine2.prototype.compile = function(templateString, helper, ignorePrefix) {
      if (helper === void 0) {
        helper = {};
      }
      return compile(templateString, helper);
    };
    return Engine2;
  }()
);
var engineObj = { compile: new Engine().compile };

// node_modules/@syncfusion/ej2-base/src/sanitize-helper.js
var removeTags = [
  "script",
  "style",
  "iframe[src]",
  'link[href*="javascript:"]',
  'object[type="text/x-scriptlet"]',
  'object[data^="data:text/html;base64"]',
  'img[src^="data:text/html;base64"]',
  '[src^="javascript:"]',
  '[dynsrc^="javascript:"]',
  '[lowsrc^="javascript:"]',
  '[type^="application/x-shockwave-flash"]'
];
var removeAttrs = [
  { attribute: "href", selector: '[href*="javascript:"]' },
  { attribute: "background", selector: '[background^="javascript:"]' },
  { attribute: "style", selector: '[style*="javascript:"]' },
  { attribute: "style", selector: '[style*="expression("]' },
  { attribute: "href", selector: 'a[href^="data:text/html;base64"]' }
];
var jsEvents = [
  "onchange",
  "onclick",
  "onmouseover",
  "onmouseout",
  "onkeydown",
  "onload",
  "onerror",
  "onblur",
  "onfocus",
  "onbeforeload",
  "onbeforeunload",
  "onkeyup",
  "onsubmit",
  "onafterprint",
  "onbeforeonload",
  "onbeforeprint",
  "onblur",
  "oncanplay",
  "oncanplaythrough",
  "onchange",
  "onclick",
  "oncontextmenu",
  "ondblclick",
  "ondrag",
  "ondragend",
  "ondragenter",
  "ondragleave",
  "ondragover",
  "ondragstart",
  "ondrop",
  "ondurationchange",
  "onemptied",
  "onended",
  "onerror",
  "onerror",
  "onfocus",
  "onformchange",
  "onforminput",
  "onhaschange",
  "oninput",
  "oninvalid",
  "onkeydown",
  "onkeypress",
  "onkeyup",
  "onload",
  "onloadeddata",
  "onloadedmetadata",
  "onloadstart",
  "onmessage",
  "onmousedown",
  "onmousemove",
  "onmouseout",
  "onmouseover",
  "onmouseup",
  "onmousewheel",
  "onoffline",
  "onoine",
  "ononline",
  "onpagehide",
  "onpageshow",
  "onpause",
  "onplay",
  "onplaying",
  "onpopstate",
  "onprogress",
  "onratechange",
  "onreadystatechange",
  "onredo",
  "onresize",
  "onscroll",
  "onseeked",
  "onseeking",
  "onselect",
  "onstalled",
  "onstorage",
  "onsubmit",
  "onsuspend",
  "ontimeupdate",
  "onundo",
  "onunload",
  "onvolumechange",
  "onwaiting",
  "onmouseenter",
  "onmouseleave",
  "onmousewheel",
  "onstart",
  "onpropertychange"
];
var SanitizeHtmlHelper = (
  /** @class */
  function() {
    function SanitizeHtmlHelper2() {
    }
    SanitizeHtmlHelper2.beforeSanitize = function() {
      return {
        selectors: {
          tags: removeTags,
          attributes: removeAttrs
        }
      };
    };
    SanitizeHtmlHelper2.sanitize = function(value) {
      var item = this.beforeSanitize();
      var output = this.serializeValue(item, value);
      return output;
    };
    SanitizeHtmlHelper2.serializeValue = function(item, value) {
      this.removeAttrs = item.selectors.attributes;
      this.removeTags = item.selectors.tags;
      this.wrapElement = document.createElement("div");
      this.wrapElement.innerHTML = value;
      this.removeXssTags();
      this.removeJsEvents();
      this.removeXssAttrs();
      var tempEleValue = this.wrapElement.innerHTML;
      this.removeElement();
      return tempEleValue;
    };
    SanitizeHtmlHelper2.removeElement = function() {
      var nodes = this.wrapElement.children;
      for (var j = 0; j < nodes.length; j++) {
        var attribute = nodes[j].attributes;
        for (var i = 0; i < attribute.length; i++) {
          this.wrapElement.children[j].removeAttribute(attribute[i].localName);
        }
      }
    };
    SanitizeHtmlHelper2.removeXssTags = function() {
      var elements = this.wrapElement.querySelectorAll(this.removeTags.join(","));
      if (elements.length > 0) {
        elements.forEach(function(element2) {
          detach(element2);
        });
      } else {
        return;
      }
    };
    SanitizeHtmlHelper2.removeJsEvents = function() {
      var elements = this.wrapElement.querySelectorAll("[" + jsEvents.join("],[") + "]");
      if (elements.length > 0) {
        elements.forEach(function(element2) {
          jsEvents.forEach(function(attr) {
            if (element2.hasAttribute(attr)) {
              element2.removeAttribute(attr);
            }
          });
        });
      } else {
        return;
      }
    };
    SanitizeHtmlHelper2.removeXssAttrs = function() {
      var _this = this;
      this.removeAttrs.forEach(function(item, index) {
        var elements = _this.wrapElement.querySelectorAll(item.selector);
        if (elements.length > 0) {
          elements.forEach(function(element2) {
            element2.removeAttribute(item.attribute);
          });
        }
      });
    };
    return SanitizeHtmlHelper2;
  }()
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/calendar.js
var __extends7 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate7 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var OTHERMONTH = "e-other-month";
var OTHERDECADE = "e-other-year";
var ROOT = "e-calendar";
var DEVICE = "e-device";
var HEADER = "e-header";
var RTL = "e-rtl";
var CONTENT = "e-content";
var YEAR = "e-year";
var MONTH = "e-month";
var DECADE = "e-decade";
var ICON = "e-icons";
var PREVICON = "e-prev";
var NEXTICON = "e-next";
var PREVSPAN = "e-date-icon-prev";
var NEXTSPAN = "e-date-icon-next ";
var ICONCONTAINER = "e-icon-container";
var DISABLED = "e-disabled";
var OVERLAY = "e-overlay";
var WEEKEND = "e-weekend";
var WEEKNUMBER = "e-week-number";
var SELECTED = "e-selected";
var FOCUSEDDATE = "e-focused-date";
var OTHERMONTHROW = "e-month-hide";
var TODAY = "e-today";
var TITLE = "e-title";
var LINK = "e-day";
var CELL = "e-cell";
var WEEKHEADER = "e-week-header";
var ZOOMIN = "e-zoomin";
var FOOTER = "e-footer-container";
var BTN = "e-btn";
var FLAT = "e-flat";
var CSS = "e-css";
var PRIMARY = "e-primary";
var DAYHEADERLONG = "e-calendar-day-header-lg";
var dayMilliSeconds = 864e5;
var minutesMilliSeconds = 6e4;
var CalendarBase = (
  /** @class */
  function(_super) {
    __extends7(CalendarBase2, _super);
    function CalendarBase2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.effect = "";
      _this.isPopupClicked = false;
      _this.isDateSelected = true;
      _this.isTodayClicked = false;
      _this.preventChange = false;
      _this.isAngular = false;
      return _this;
    }
    CalendarBase2.prototype.render = function() {
      this.rangeValidation(this.min, this.max);
      this.calendarEleCopy = this.element.cloneNode(true);
      if (this.calendarMode === "Islamic") {
        if (+this.min.setSeconds(0) === +new Date(1900, 0, 1, 0, 0, 0)) {
          this.min = new Date(1944, 2, 18);
        }
        if (+this.max === +new Date(2099, 11, 31)) {
          this.max = new Date(2069, 10, 16);
        }
      }
      this.globalize = new Internationalization(this.locale);
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({ firstDayOfWeek: this.globalize.getFirstDayOfWeek() }, true);
      }
      this.todayDisabled = false;
      this.todayDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (this.getModuleName() === "calendar") {
        this.element.classList.add(ROOT);
        if (this.enableRtl) {
          this.element.classList.add(RTL);
        }
        if (Browser.isDevice) {
          this.element.classList.add(DEVICE);
        }
        attributes(this.element, {
          "data-role": "calendar"
        });
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.setAttribute("tabindex", this.tabIndex);
      } else {
        this.calendarElement = this.createElement("div");
        this.calendarElement.classList.add(ROOT);
        if (this.enableRtl) {
          this.calendarElement.classList.add(RTL);
        }
        if (Browser.isDevice) {
          this.calendarElement.classList.add(DEVICE);
        }
        attributes(this.calendarElement, {
          "role": "calendar"
        });
      }
      this.createHeader();
      this.createContent();
      this.wireEvents();
    };
    CalendarBase2.prototype.rangeValidation = function(min, max) {
      if (isNullOrUndefined(min)) {
        this.setProperties({ min: new Date(1900, 0, 1) }, true);
      }
      if (isNullOrUndefined(max)) {
        this.setProperties({ max: new Date(2099, 11, 31) }, true);
      }
    };
    CalendarBase2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        altUpArrow: "alt+uparrow",
        spacebar: "space",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow"
      };
      return this.defaultKeyConfigs;
    };
    CalendarBase2.prototype.validateDate = function(value) {
      this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(this.min))) }, true);
      this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(this.max))) }, true);
      this.currentDate = this.currentDate ? this.currentDate : new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      if (!isNullOrUndefined(value) && this.min <= this.max && value >= this.min && value <= this.max) {
        this.currentDate = new Date(this.checkValue(value));
      }
    };
    CalendarBase2.prototype.setOverlayIndex = function(popupWrapper, popupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(popupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(popupElement.style.zIndex, 10) ? parseInt(popupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    CalendarBase2.prototype.minMaxUpdate = function(value) {
      if (!(+this.min <= +this.max)) {
        this.setProperties({ min: this.min }, true);
        addClass([this.element], OVERLAY);
      } else {
        removeClass([this.element], OVERLAY);
      }
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (+this.min <= +this.max && value && +value <= +this.max && +value >= +this.min) {
        this.currentDate = new Date(this.checkValue(value));
      } else {
        if (+this.min <= +this.max && !value && +this.currentDate > +this.max) {
          this.currentDate = new Date(this.checkValue(this.max));
        } else {
          if (+this.currentDate < +this.min) {
            this.currentDate = new Date(this.checkValue(this.min));
          }
        }
      }
    };
    CalendarBase2.prototype.createHeader = function() {
      var ariaPrevAttrs = {
        "aria-disabled": "false",
        "aria-label": "previous month"
      };
      var ariaNextAttrs = {
        "aria-disabled": "false",
        "aria-label": "next month"
      };
      var ariaTitleAttrs = {
        "aria-atomic": "true",
        "aria-live": "assertive",
        "aria-label": "title"
      };
      this.headerElement = this.createElement("div", { className: HEADER });
      var iconContainer = this.createElement("div", { className: ICONCONTAINER });
      this.previousIcon = this.createElement("button", { className: "" + PREVICON, attrs: { type: "button" } });
      rippleEffect(this.previousIcon, {
        duration: 400,
        selector: ".e-prev",
        isCenterRipple: true
      });
      attributes(this.previousIcon, ariaPrevAttrs);
      this.nextIcon = this.createElement("button", { className: "" + NEXTICON, attrs: { type: "button" } });
      rippleEffect(this.nextIcon, {
        selector: ".e-next",
        duration: 400,
        isCenterRipple: true
      });
      attributes(this.nextIcon, ariaNextAttrs);
      this.headerTitleElement = this.createElement("div", { className: "" + LINK + " " + TITLE });
      attributes(this.headerTitleElement, ariaTitleAttrs);
      this.headerElement.appendChild(this.headerTitleElement);
      this.previousIcon.appendChild(this.createElement("span", { className: "" + PREVSPAN + " " + ICON }));
      this.nextIcon.appendChild(this.createElement("span", { className: "" + NEXTSPAN + " " + ICON }));
      iconContainer.appendChild(this.previousIcon);
      iconContainer.appendChild(this.nextIcon);
      this.headerElement.appendChild(iconContainer);
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.headerElement);
      } else {
        this.calendarElement.appendChild(this.headerElement);
      }
      this.adjustLongHeaderSize();
    };
    CalendarBase2.prototype.createContent = function() {
      this.contentElement = this.createElement("div", { className: CONTENT });
      this.table = this.createElement("table", { attrs: { tabIndex: "0", "role": "grid", "aria-activedescendant": "" } });
      if (this.getModuleName() === "calendar") {
        this.element.appendChild(this.contentElement);
      } else {
        this.calendarElement.appendChild(this.contentElement);
      }
      this.contentElement.appendChild(this.table);
      this.createContentHeader();
      this.createContentBody();
      if (this.showTodayButton) {
        this.createContentFooter();
      }
    };
    CalendarBase2.prototype.getCultureValues = function() {
      var culShortNames = [];
      var cldrObj;
      var dayFormat = "days.stand-alone." + this.dayHeaderFormat.toLowerCase();
      if (this.locale === "en" || this.locale === "en-US") {
        cldrObj = getValue(dayFormat, getDefaultDateObject());
      } else {
        cldrObj = this.getCultureObjects(cldrData, "" + this.locale);
      }
      for (var _i = 0, _a = Object.keys(cldrObj); _i < _a.length; _i++) {
        var obj = _a[_i];
        culShortNames.push(getValue(obj, cldrObj));
      }
      return culShortNames;
    };
    CalendarBase2.prototype.toCapitalize = function(text) {
      return !isNullOrUndefined(text) && text.length ? text[0].toUpperCase() + text.slice(1) : text;
    };
    CalendarBase2.prototype.createContentHeader = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.element.querySelectorAll(".e-content .e-week-header")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content .e-week-header")[0]);
        }
      }
      var daysCount = 6;
      var html = "";
      if (this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({ firstDayOfWeek: 0 }, true);
      }
      this.tableHeadElement = this.createElement("thead", { className: WEEKHEADER });
      if (this.weekNumber) {
        html += '<th class="e-week-number"></th>';
        if (this.getModuleName() === "calendar") {
          addClass([this.element], "" + WEEKNUMBER);
        } else {
          addClass([this.calendarElement], "" + WEEKNUMBER);
        }
      }
      var shortNames = this.shiftArray(this.getCultureValues().length > 0 && this.getCultureValues(), this.firstDayOfWeek);
      for (var days = 0; days <= daysCount; days++) {
        html += '<th  class="">' + this.toCapitalize(shortNames[days]) + "</th>";
      }
      html = "<tr>" + html + "</tr>";
      this.tableHeadElement.innerHTML = html;
      this.table.appendChild(this.tableHeadElement);
    };
    CalendarBase2.prototype.createContentBody = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content tbody")[0])) {
          detach(this.element.querySelectorAll(".e-content tbody")[0]);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content tbody")[0])) {
          detach(this.calendarElement.querySelectorAll(".e-content tbody")[0]);
        }
      }
      switch (this.start) {
        case "Year":
          this.renderYears();
          break;
        case "Decade":
          this.renderDecades();
          break;
        default:
          this.renderMonths();
      }
    };
    CalendarBase2.prototype.updateFooter = function() {
      this.todayElement.textContent = this.l10.getConstant("today");
      this.todayElement.setAttribute("aria-label", this.l10.getConstant("today"));
    };
    CalendarBase2.prototype.createContentFooter = function() {
      if (this.showTodayButton) {
        var minimum = /* @__PURE__ */ new Date(+this.min);
        var maximum = /* @__PURE__ */ new Date(+this.max);
        var l10nLocale = { today: "Today" };
        this.globalize = new Internationalization(this.locale);
        this.l10 = new L10n(this.getModuleName(), l10nLocale, this.locale);
        this.todayElement = this.createElement("button", { attrs: { role: "button" } });
        rippleEffect(this.todayElement);
        this.updateFooter();
        addClass([this.todayElement], [BTN, TODAY, FLAT, PRIMARY, CSS]);
        if (!(+new Date(minimum.setHours(0, 0, 0, 0)) <= +this.todayDate && +this.todayDate <= +new Date(maximum.setHours(0, 0, 0, 0))) || this.todayDisabled) {
          addClass([this.todayElement], DISABLED);
        }
        this.footer = this.createElement("div", { className: FOOTER });
        this.footer.appendChild(this.todayElement);
        if (this.getModuleName() === "calendar") {
          this.element.appendChild(this.footer);
        }
        if (this.getModuleName() === "datepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (this.getModuleName() === "datetimepicker") {
          this.calendarElement.appendChild(this.footer);
        }
        if (!this.todayElement.classList.contains(DISABLED)) {
          EventHandler.add(this.todayElement, "click", this.todayButtonClick, this);
        }
      }
    };
    CalendarBase2.prototype.wireEvents = function(id, ref, keyConfig, moduleName) {
      EventHandler.add(this.headerTitleElement, "click", this.navigateTitle, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      if (this.getModuleName() === "calendar") {
        this.keyboardModule = new KeyboardEvents(this.element, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.keyboardModule = new KeyboardEvents(this.calendarElement, {
          eventName: "keydown",
          keyAction: this.keyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
    };
    CalendarBase2.prototype.dateWireEvents = function(id, ref, keyConfig, moduleName) {
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, keyConfig);
      this.serverModuleName = moduleName;
    };
    CalendarBase2.prototype.todayButtonClick = function(e, value, isCustomDate) {
      if (this.showTodayButton) {
        if (this.currentView() === this.depth) {
          this.effect = "";
        } else {
          this.effect = "e-zoomin";
        }
        if (this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
          this.navigateTo(this.depth, new Date(this.checkValue(value)), isCustomDate);
        } else {
          this.navigateTo("Month", new Date(this.checkValue(value)), isCustomDate);
        }
      }
    };
    CalendarBase2.prototype.resetCalendar = function() {
      this.calendarElement && detach(this.calendarElement);
      this.tableBodyElement && detach(this.tableBodyElement);
      this.table && detach(this.table);
      this.tableHeadElement && detach(this.tableHeadElement);
      this.nextIcon && detach(this.nextIcon);
      this.previousIcon && detach(this.previousIcon);
      this.footer && detach(this.footer);
      this.todayElement = null;
      this.renderDayCellArgs = null;
      this.calendarElement = this.tableBodyElement = this.footer = this.tableHeadElement = this.nextIcon = this.previousIcon = this.table = null;
    };
    CalendarBase2.prototype.keyActionHandle = function(e, value, multiSelection) {
      var focusedDate = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedDate;
      if (multiSelection) {
        if (!isNullOrUndefined(focusedDate) && +value === parseInt(focusedDate.getAttribute("id").split("_")[0], 10)) {
          selectedDate = focusedDate;
        } else {
          selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
        }
      } else {
        selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      }
      var view = this.getViewNumber(this.currentView());
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      this.effect = "";
      switch (e.action) {
        case "moveLeft":
          this.keyboardNavigate(-1, view, e, this.max, this.min);
          e.preventDefault();
          break;
        case "moveRight":
          this.keyboardNavigate(1, view, e, this.max, this.min);
          e.preventDefault();
          break;
        case "moveUp":
          if (view === 0) {
            this.keyboardNavigate(-7, view, e, this.max, this.min);
          } else {
            this.keyboardNavigate(-4, view, e, this.max, this.min);
          }
          e.preventDefault();
          break;
        case "moveDown":
          if (view === 0) {
            this.keyboardNavigate(7, view, e, this.max, this.min);
          } else {
            this.keyboardNavigate(4, view, e, this.max, this.min);
          }
          e.preventDefault();
          break;
        case "select":
          if (e.target === this.todayElement) {
            this.todayButtonClick(e, value);
          } else {
            var element2 = !isNullOrUndefined(focusedDate) ? focusedDate : selectedDate;
            if (!isNullOrUndefined(element2) && !element2.classList.contains(DISABLED)) {
              if (levelRestrict) {
                var d = new Date(parseInt("" + element2.id, 0));
                this.selectDate(e, d, element2);
              } else {
                this.contentClick(null, --view, element2, value);
              }
            }
          }
          break;
        case "controlUp":
          this.title();
          e.preventDefault();
          break;
        case "controlDown":
          if (!isNullOrUndefined(focusedDate) || !isNullOrUndefined(selectedDate) && !levelRestrict) {
            this.contentClick(null, --view, focusedDate || selectedDate, value);
          }
          e.preventDefault();
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          detach(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          e.preventDefault();
          break;
        case "pageUp":
          this.addMonths(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "pageDown":
          this.addMonths(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageUp":
          this.addYears(this.currentDate, -1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "shiftPageDown":
          this.addYears(this.currentDate, 1);
          this.navigateTo("Month", this.currentDate);
          e.preventDefault();
          break;
        case "controlHome":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 0, 1));
          e.preventDefault();
          break;
        case "controlEnd":
          this.navigateTo("Month", new Date(this.currentDate.getFullYear(), 11, 31));
          e.preventDefault();
          break;
      }
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.keyboardNavigate = function(number, currentView, e, max, min) {
      var date = new Date(this.checkValue(this.currentDate));
      switch (currentView) {
        case 2:
          this.addYears(this.currentDate, number);
          if (this.isMonthYearRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderDecades(e);
          } else {
            this.currentDate = date;
          }
          break;
        case 1:
          this.addMonths(this.currentDate, number);
          if (this.calendarMode === "Gregorian") {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          } else {
            if (this.isMonthYearRange(this.currentDate)) {
              detach(this.tableBodyElement);
              this.renderYears(e);
            } else {
              this.currentDate = date;
            }
          }
          break;
        case 0:
          this.addDay(this.currentDate, number, e, max, min);
          if (this.isMinMaxRange(this.currentDate)) {
            detach(this.tableBodyElement);
            this.renderMonths(e);
          } else {
            this.currentDate = date;
          }
          break;
      }
    };
    CalendarBase2.prototype.preRender = function(value) {
      var _this = this;
      this.navigatePreviousHandler = this.navigatePrevious.bind(this);
      this.navigateNextHandler = this.navigateNext.bind(this);
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.navigateHandler = function(e) {
        _this.triggerNavigate(e);
      };
    };
    CalendarBase2.prototype.minMaxDate = function(localDate) {
      var currentDate = new Date((/* @__PURE__ */ new Date(+localDate)).setHours(0, 0, 0, 0));
      var minDate = new Date((/* @__PURE__ */ new Date(+this.min)).setHours(0, 0, 0, 0));
      var maxDate = new Date((/* @__PURE__ */ new Date(+this.max)).setHours(0, 0, 0, 0));
      if (+currentDate === +minDate || +currentDate === +maxDate) {
        if (+localDate < +this.min) {
          localDate = /* @__PURE__ */ new Date(+this.min);
        }
        if (+localDate > +this.max) {
          localDate = /* @__PURE__ */ new Date(+this.max);
        }
      }
      return localDate;
    };
    CalendarBase2.prototype.renderMonths = function(e, value, isCustomDate) {
      var numCells = this.weekNumber ? 8 : 7;
      var tdEles;
      if (this.calendarMode === "Gregorian") {
        tdEles = this.renderDays(this.currentDate, value, null, null, isCustomDate);
      } else {
        tdEles = this.islamicModule.islamicRenderDays(this.currentDate, value);
      }
      this.createContentHeader();
      if (this.calendarMode === "Gregorian") {
        this.renderTemplate(tdEles, numCells, MONTH, e, value);
      } else {
        this.islamicModule.islamicRenderTemplate(tdEles, numCells, MONTH, e, value);
      }
    };
    CalendarBase2.prototype.renderDays = function(currentDate, value, multiSelection, values, isTodayDate) {
      var tdEles = [];
      var cellsCount = 42;
      var todayDate = isTodayDate ? /* @__PURE__ */ new Date(+currentDate) : this.getDate(/* @__PURE__ */ new Date(), this.timezone);
      var localDate = new Date(this.checkValue(currentDate));
      var minMaxDate;
      var currentMonth = localDate.getMonth();
      this.titleUpdate(currentDate, "days");
      var d = localDate;
      localDate = new Date(d.getFullYear(), d.getMonth(), 0, d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());
      while (localDate.getDay() !== this.firstDayOfWeek) {
        this.setStartDate(localDate, -1 * dayMilliSeconds);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.createElement("td", { className: CELL });
        var weekAnchor = this.createElement("span");
        if (day % 7 === 0 && this.weekNumber) {
          var numberOfDays = this.weekRule === "FirstDay" ? 6 : this.weekRule === "FirstFourDayWeek" ? 3 : 0;
          var finalDate = new Date(localDate.getFullYear(), localDate.getMonth(), localDate.getDate() + numberOfDays);
          weekAnchor.textContent = "" + this.getWeek(finalDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.minMaxDate(localDate);
        var dateFormatOptions = { type: "dateTime", skeleton: "full" };
        var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.dayCell(localDate);
        var title = this.globalize.formatDate(localDate, { type: "date", skeleton: "full" });
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, { format: "d", type: "date", skeleton: "yMd" });
        var disabled = this.min > localDate || this.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED);
          addClass([tdEle], OVERLAY);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        if (currentMonth !== localDate.getMonth()) {
          addClass([tdEle], OTHERMONTH);
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND);
        }
        tdEle.appendChild(dayLink);
        this.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.renderDayCellArgs;
        this.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          var selectDate = new Date(this.checkValue(value));
          var argsDate = new Date(this.checkValue(argument.date));
          if (multiSelection) {
            if (!isNullOrUndefined(values) && values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.globalize.formatDate(argument.date, { type: "date", skeleton: "yMd" }));
                var tempDateString = +new Date(this.globalize.formatDate(values[index], { type: "date", skeleton: "yMd" }));
                if (localDateString === tempDateString) {
                  values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (selectDate && +selectDate === +argsDate) {
            this.setProperties({ value: null }, true);
          }
        }
        if (this.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED)) {
          addClass([tdEle], DISABLED);
          addClass([tdEle], OVERLAY);
          if (+this.renderDayCellArgs.date === +this.todayDate) {
            this.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH);
        var disabledCls = tdEle.classList.contains(DISABLED);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
        }
        if (multiSelection && !isNullOrUndefined(values) && !disabledCls) {
          for (var tempValue = 0; tempValue < values.length; tempValue++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = { format: null, type: "date", skeleton: "short", calendar: type };
            var localDateString = this.globalize.formatDate(localDate, formatOptions);
            var tempDateString = this.globalize.formatDate(values[tempValue], formatOptions);
            if (localDateString === tempDateString && this.getDateVal(localDate, values[tempValue]) || this.getDateVal(localDate, value)) {
              addClass([tdEle], SELECTED);
            } else {
              this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (values.length <= 0) {
            this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!disabledCls && this.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED);
        }
        this.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        if (date.getFullYear() === todayDate.getFullYear() && date.getMonth() === todayDate.getMonth() && date.getDate() === todayDate.getDate()) {
          addClass([tdEle], TODAY);
        }
        tdEles.push(this.renderDayCellArgs.element);
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      return tdEles;
    };
    CalendarBase2.prototype.updateFocus = function(otherMonth, disabled, localDate, tableElement, currentDate) {
      if (currentDate.getDate() === localDate.getDate() && !otherMonth && !disabled) {
        addClass([tableElement], FOCUSEDDATE);
      } else {
        if (currentDate >= this.max && parseInt(tableElement.id, 0) === +this.max && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
        if (currentDate <= this.min && parseInt(tableElement.id, 0) === +this.min && !otherMonth && !disabled) {
          addClass([tableElement], FOCUSEDDATE);
        }
      }
    };
    CalendarBase2.prototype.renderYears = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.checkValue(this.currentDate));
      var mon = curDate.getMonth();
      var yr = curDate.getFullYear();
      var localDate = curDate;
      var curYrs = localDate.getFullYear();
      var minYr = new Date(this.checkValue(this.min)).getFullYear();
      var minMonth = new Date(this.checkValue(this.min)).getMonth();
      var maxYr = new Date(this.checkValue(this.max)).getFullYear();
      var maxMonth = new Date(this.checkValue(this.max)).getMonth();
      localDate.setMonth(0);
      this.titleUpdate(this.currentDate, "months");
      localDate.setDate(1);
      for (var month2 = 0; month2 < 12; ++month2) {
        var tdEle = this.dayCell(localDate);
        var dayLink = this.createElement("span");
        var localMonth = value && value.getMonth() === localDate.getMonth();
        var select2 = value && value.getFullYear() === yr && localMonth;
        dayLink.textContent = this.toCapitalize(this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "MMM"
        }));
        if (this.min && (curYrs < minYr || month2 < minMonth && curYrs === minYr) || this.max && (curYrs > maxYr || month2 > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED);
        } else if (!valueUtil && select2) {
          addClass([tdEle], SELECTED);
        } else {
          if (localDate.getMonth() === mon && this.currentDate.getMonth() === mon) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        localDate.setDate(1);
        localDate.setMonth(localDate.getMonth() + 1);
        if (!tdEle.classList.contains(DISABLED)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, YEAR, e, value);
    };
    CalendarBase2.prototype.renderDecades = function(e, value) {
      this.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.checkValue(this.currentDate));
      localDate.setMonth(0);
      localDate.setDate(1);
      var localYr = localDate.getFullYear();
      var startYr = new Date(localDate.setFullYear(localYr - localYr % 10));
      var endYr = new Date(localDate.setFullYear(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.globalize.formatDate(startYr, {
        format: null,
        type: "dateTime",
        skeleton: "y"
      });
      var endHdrYr = this.globalize.formatDate(endYr, { format: null, type: "dateTime", skeleton: "y" });
      this.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      var start = new Date(localYr - localYr % 10 - 1, 0, 1);
      var startYear = start.getFullYear();
      for (var rowIterator = 0; rowIterator < yearCell; ++rowIterator) {
        var year = startYear + rowIterator;
        localDate.setFullYear(year);
        var tdEle = this.dayCell(localDate);
        attributes(tdEle, { "role": "gridcell" });
        var dayLink = this.createElement("span");
        dayLink.textContent = this.globalize.formatDate(localDate, {
          format: null,
          type: "dateTime",
          skeleton: "y"
        });
        if (year < startFullYr || year > endFullYr) {
          addClass([tdEle], OTHERDECADE);
          if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
            addClass([tdEle], SELECTED);
          }
          if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
            addClass([tdEle], DISABLED);
          }
        } else if (year < new Date(this.checkValue(this.min)).getFullYear() || year > new Date(this.checkValue(this.max)).getFullYear()) {
          addClass([tdEle], DISABLED);
        } else if (!isNullOrUndefined(value) && localDate.getFullYear() === value.getFullYear()) {
          addClass([tdEle], SELECTED);
        } else {
          if (localDate.getFullYear() === this.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED)) {
            addClass([tdEle], FOCUSEDDATE);
          }
        }
        if (!tdEle.classList.contains(DISABLED)) {
          EventHandler.add(tdEle, "click", this.clickHandler, this);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.renderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    CalendarBase2.prototype.dayCell = function(localDate) {
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = { skeleton: "full", type: "dateTime", calendar: type };
      var date = this.globalize.parseDate(this.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
      var value = date.valueOf();
      var attrs = {
        className: CELL,
        attrs: { "id": "" + getUniqueID("" + value), "aria-selected": "false", "role": "gridcell" }
      };
      return this.createElement("td", attrs);
    };
    CalendarBase2.prototype.firstDay = function(date) {
      var collection = this.currentView() !== "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH) : this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE);
      if (collection.length) {
        for (var i = 0; i < collection.length; i++) {
          if (!collection[i].classList.contains(DISABLED)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.lastDay = function(date, view) {
      var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);
      if (view !== 2) {
        var timeOffset = Math.abs(lastDate.getTimezoneOffset() - this.firstDay(date).getTimezoneOffset());
        if (timeOffset) {
          lastDate.setHours(this.firstDay(date).getHours() + timeOffset / 60);
        }
        return this.findLastDay(lastDate);
      } else {
        return this.findLastDay(this.firstDay(lastDate));
      }
    };
    CalendarBase2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    CalendarBase2.prototype.findLastDay = function(date) {
      var collection = this.currentView() === "Decade" ? this.tableBodyElement.querySelectorAll("td:not(." + OTHERDECADE) : this.tableBodyElement.querySelectorAll("td:not(." + OTHERMONTH);
      if (collection.length) {
        for (var i = collection.length - 1; i >= 0; i--) {
          if (!collection[i].classList.contains(DISABLED)) {
            date = new Date(parseInt(collection[i].id, 0));
            break;
          }
        }
      }
      return date;
    };
    CalendarBase2.prototype.removeTableHeadElement = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.element.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      } else {
        if (!isNullOrUndefined(this.calendarElement.querySelectorAll(".e-content table thead")[0])) {
          detach(this.tableHeadElement);
        }
      }
    };
    CalendarBase2.prototype.renderTemplate = function(elements, count, classNm, e, value) {
      var view = this.getViewNumber(this.currentView());
      var trEle;
      this.tableBodyElement = this.createElement("tbody");
      this.table.appendChild(this.tableBodyElement);
      removeClass([this.contentElement, this.headerElement], [MONTH, DECADE, YEAR]);
      addClass([this.contentElement, this.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row = count;
      var rowIterator = 0;
      for (var dayCell = 0; dayCell < elements.length / count; ++dayCell) {
        trEle = this.createElement("tr", { attrs: { "role": "row" } });
        for (rowIterator = 0 + rowIterator; rowIterator < row; rowIterator++) {
          if (!elements[rowIterator].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowIterator].children[0])) {
            addClass([elements[rowIterator].children[0]], [LINK]);
            rippleEffect(elements[rowIterator].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowIterator]);
          if (this.weekNumber && rowIterator === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (!this.weekNumber && rowIterator === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH)) {
            addClass([trEle], OTHERMONTHROW);
          }
          if (this.weekNumber) {
            if (rowIterator === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          } else {
            if (rowIterator === numberCell && elements[numberCell].classList.contains(OTHERMONTH)) {
              addClass([trEle], OTHERMONTHROW);
            }
          }
        }
        row = row + count;
        rowIterator = rowIterator + 0;
        this.tableBodyElement.appendChild(trEle);
      }
      this.table.querySelector("tbody").className = this.effect;
      if (this.calendarMode === "Gregorian") {
        this.iconHandler();
      } else {
        this.islamicModule.islamicIconHandler();
      }
      if (view !== this.getViewNumber(this.currentView()) || view === 0 && view !== this.getViewNumber(this.currentView())) {
        this.navigateHandler(e);
      }
      this.setAriaActiveDescendant();
    };
    CalendarBase2.prototype.clickHandler = function(e, value) {
      this.clickEventEmitter(e);
      var eve = e.currentTarget;
      var view = this.getViewNumber(this.currentView());
      if (eve.classList.contains(OTHERMONTH)) {
        this.contentClick(e, 0, null, value);
      } else if (view === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
        this.contentClick(e, 1, null, value);
      } else if (2 === view) {
        this.contentClick(e, 1, null, value);
      } else if (!eve.classList.contains(OTHERMONTH) && view === 0) {
        this.selectDate(e, this.getIdValue(e, null), null);
      } else {
        this.contentClick(e, 0, eve, value);
      }
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.clickEventEmitter = function(e) {
      e.preventDefault();
    };
    CalendarBase2.prototype.contentClick = function(e, view, element2, value) {
      var currentView = this.getViewNumber(this.currentView());
      var d = this.getIdValue(e, element2);
      switch (view) {
        case 0:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            detach(this.tableBodyElement);
            this.currentDate = d;
            this.effect = ZOOMIN;
            this.renderMonths(e);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setMonth(d.getMonth());
              if (d.getMonth() > 0 && this.currentDate.getMonth() !== d.getMonth()) {
                this.currentDate.setDate(0);
              }
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              this.currentDate = d;
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderMonths(e);
          }
          break;
        case 1:
          if (currentView === this.getViewNumber(this.depth) && this.getViewNumber(this.start) >= this.getViewNumber(this.depth)) {
            this.selectDate(e, d, null);
          } else {
            if (this.calendarMode === "Gregorian") {
              this.currentDate.setFullYear(d.getFullYear());
            } else {
              var islamicDate = this.islamicModule.getIslamicDate(d);
              this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month, 1);
            }
            this.effect = ZOOMIN;
            detach(this.tableBodyElement);
            this.renderYears(e);
          }
      }
    };
    CalendarBase2.prototype.switchView = function(view, e, multiSelection, isCustomDate) {
      switch (view) {
        case 0:
          detach(this.tableBodyElement);
          this.renderMonths(e, null, isCustomDate);
          if (multiSelection && !isNullOrUndefined(this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0])) {
            this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0].classList.remove(FOCUSEDDATE);
          }
          break;
        case 1:
          detach(this.tableBodyElement);
          this.renderYears(e);
          break;
        case 2:
          detach(this.tableBodyElement);
          this.renderDecades(e);
      }
    };
    CalendarBase2.prototype.getModuleName = function() {
      return "calendar";
    };
    CalendarBase2.prototype.requiredModules = function() {
      var modules = [];
      if (this) {
        modules.push({ args: [this], member: "islamic" });
      }
      return modules;
    };
    CalendarBase2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    CalendarBase2.prototype.onPropertyChanged = function(newProp, oldProp, multiSelection, values) {
      this.effect = "";
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "enableRtl":
            if (newProp.enableRtl) {
              if (this.getModuleName() === "calendar") {
                this.element.classList.add("e-rtl");
              } else {
                this.calendarElement.classList.add("e-rtl");
              }
            } else {
              if (this.getModuleName() === "calendar") {
                this.element.classList.remove("e-rtl");
              } else {
                this.calendarElement.classList.remove("e-rtl");
              }
            }
            break;
          case "dayHeaderFormat":
            this.getCultureValues();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
            } else if (this.calendarElement) {
              this.createContentHeader();
            }
            this.adjustLongHeaderSize();
            break;
          case "min":
          case "max":
            this.rangeValidation(this.min, this.max);
            if (prop === "min") {
              this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(newProp.min))) }, true);
            } else {
              this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(newProp.max))) }, true);
            }
            this.setProperties({ start: this.currentView() }, true);
            if (this.tableBodyElement) {
              detach(this.tableBodyElement);
            }
            this.minMaxUpdate();
            if (multiSelection) {
              this.validateValues(multiSelection, values);
            }
            if (this.getModuleName() !== "datepicker") {
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentBody();
            }
            if ((this.todayDate < this.min || this.max < this.todayDate) && this.footer && this.todayElement) {
              detach(this.todayElement);
              detach(this.footer);
              this.todayElement = this.footer = null;
              this.createContentFooter();
            } else {
              if (this.footer && this.todayElement && this.todayElement.classList.contains("e-disabled")) {
                removeClass([this.todayElement], DISABLED);
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = null;
                this.createContentFooter();
              }
            }
            break;
          case "start":
          case "depth":
          case "weekNumber":
          case "firstDayOfWeek":
          case "weekRule":
            this.checkView();
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            if (this.getModuleName() !== "datepicker") {
              this.createContentHeader();
              this.createContentBody();
            } else if (this.calendarElement) {
              this.createContentHeader();
              this.createContentBody();
            }
            this.l10.setLocale(this.locale);
            this.updateFooter();
            break;
          case "showTodayButton":
            if (newProp.showTodayButton) {
              this.createContentFooter();
            } else {
              if (!isNullOrUndefined(this.todayElement) && !isNullOrUndefined(this.footer)) {
                detach(this.todayElement);
                detach(this.footer);
                this.todayElement = this.footer = void 0;
              }
            }
            this.setProperties({ showTodayButton: newProp.showTodayButton }, true);
            break;
        }
      }
    };
    CalendarBase2.prototype.validateValues = function(multiSelection, values) {
      if (multiSelection && !isNullOrUndefined(values) && values.length > 0) {
        var copyValues = this.copyValues(values);
        for (var skipIndex = 0; skipIndex < copyValues.length; skipIndex++) {
          var tempValue = copyValues[skipIndex];
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var tempValueString = void 0;
          if (this.calendarMode === "Gregorian") {
            tempValueString = this.globalize.formatDate(tempValue, { type: "date", skeleton: "yMd" });
          } else {
            tempValueString = this.globalize.formatDate(tempValue, { type: "dateTime", skeleton: "full", calendar: "islamic" });
          }
          var minFormatOption = { type: "date", skeleton: "yMd", calendar: type };
          var minStringValue = this.globalize.formatDate(this.min, minFormatOption);
          var minString = minStringValue;
          var maxFormatOption = { type: "date", skeleton: "yMd", calendar: type };
          var maxStringValue = this.globalize.formatDate(this.max, maxFormatOption);
          var maxString = maxStringValue;
          if (+new Date(tempValueString) < +new Date(minString) || +new Date(tempValueString) > +new Date(maxString)) {
            copyValues.splice(skipIndex, 1);
            skipIndex = -1;
          }
        }
        this.setProperties({ values: copyValues }, true);
      }
    };
    CalendarBase2.prototype.setValueUpdate = function() {
      if (!isNullOrUndefined(this.tableBodyElement)) {
        detach(this.tableBodyElement);
        this.setProperties({ start: this.currentView() }, true);
        this.createContentBody();
      }
    };
    CalendarBase2.prototype.copyValues = function(values) {
      var copyValues = [];
      if (!isNullOrUndefined(values) && values.length > 0) {
        for (var index = 0; index < values.length; index++) {
          copyValues.push(/* @__PURE__ */ new Date(+values[index]));
        }
      }
      return copyValues;
    };
    CalendarBase2.prototype.titleUpdate = function(date, view) {
      var globalize = new Internationalization(this.locale);
      var dayFormatOptions;
      var monthFormatOptions;
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      if (this.calendarMode === "Gregorian") {
        dayFormatOptions = globalize.formatDate(date, { type: "dateTime", skeleton: "yMMMM", calendar: type });
        monthFormatOptions = globalize.formatDate(date, {
          format: null,
          type: "dateTime",
          skeleton: "y",
          calendar: type
        });
      } else {
        dayFormatOptions = globalize.formatDate(date, { type: "dateTime", format: "MMMM y", calendar: type });
        monthFormatOptions = globalize.formatDate(date, { type: "dateTime", format: "y", calendar: type });
      }
      switch (view) {
        case "days":
          this.headerTitleElement.textContent = this.toCapitalize(dayFormatOptions);
          break;
        case "months":
          this.headerTitleElement.textContent = monthFormatOptions;
      }
    };
    CalendarBase2.prototype.setActiveDescendant = function() {
      var id;
      var focusedEle = this.tableBodyElement.querySelector("tr td.e-focused-date");
      var selectedEle = this.tableBodyElement.querySelector("tr td.e-selected");
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var title;
      var view = this.currentView();
      if (view === "Month") {
        title = this.globalize.formatDate(this.currentDate, { type: "date", skeleton: "full", calendar: type });
      } else if (view === "Year") {
        if (type !== "islamic") {
          title = this.globalize.formatDate(this.currentDate, { type: "date", skeleton: "yMMMM", calendar: type });
        } else {
          title = this.globalize.formatDate(this.currentDate, { type: "date", skeleton: "GyMMM", calendar: type });
        }
      } else {
        title = this.globalize.formatDate(this.currentDate, {
          format: null,
          type: "date",
          skeleton: "y",
          calendar: type
        });
      }
      if (selectedEle || focusedEle) {
        if (!isNullOrUndefined(selectedEle)) {
          selectedEle.setAttribute("aria-selected", "true");
        }
        (focusedEle || selectedEle).setAttribute("aria-label", title);
        id = (focusedEle || selectedEle).getAttribute("id");
      }
      return id;
    };
    CalendarBase2.prototype.iconHandler = function() {
      new Date(this.checkValue(this.currentDate)).setDate(1);
      switch (this.currentView()) {
        case "Month":
          this.previousIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareMonth(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Year":
          this.previousIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareYear(new Date(this.checkValue(this.currentDate)), this.max) > -1);
          break;
        case "Decade":
          this.previousIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.min) < 1);
          this.nextIconHandler(this.compareDecade(new Date(this.checkValue(this.currentDate)), this.max) > -1);
      }
    };
    CalendarBase2.prototype.destroy = function() {
      if (this.getModuleName() === "calendar" && this.element) {
        removeClass([this.element], [ROOT]);
      } else {
        if (this.calendarElement && this.element) {
          removeClass([this.element], [ROOT]);
        }
      }
      if (this.getModuleName() === "calendar" && this.element) {
        EventHandler.remove(this.headerTitleElement, "click", this.navigateTitle);
        if (this.todayElement) {
          EventHandler.remove(this.todayElement, "click", this.todayButtonClick);
        }
        this.previousIconHandler(true);
        this.nextIconHandler(true);
        this.keyboardModule.destroy();
        this.element.removeAttribute("data-role");
        if (!isNullOrUndefined(this.calendarEleCopy.getAttribute("tabindex"))) {
          this.element.setAttribute("tabindex", this.tabIndex);
        } else {
          this.element.removeAttribute("tabindex");
        }
      }
      if (this.element) {
        this.element.innerHTML = "";
      }
      _super.prototype.destroy.call(this);
    };
    CalendarBase2.prototype.title = function(e) {
      var currentView = this.getViewNumber(this.currentView());
      this.effect = ZOOMIN;
      this.switchView(++currentView, e);
    };
    CalendarBase2.prototype.getViewNumber = function(stringVal) {
      if (stringVal === "Month") {
        return 0;
      } else if (stringVal === "Year") {
        return 1;
      } else {
        return 2;
      }
    };
    CalendarBase2.prototype.navigateTitle = function(e) {
      e.preventDefault();
      this.title(e);
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.previous = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, -1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, -10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigatePrevious = function(e) {
      e.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.previous();
      } else {
        this.islamicModule.islamicPrevious();
      }
      this.triggerNavigate(e);
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.next = function() {
      this.effect = "";
      var currentView = this.getViewNumber(this.currentView());
      switch (this.currentView()) {
        case "Month":
          this.addMonths(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Year":
          this.addYears(this.currentDate, 1);
          this.switchView(currentView);
          break;
        case "Decade":
          this.addYears(this.currentDate, 10);
          this.switchView(currentView);
          break;
      }
    };
    CalendarBase2.prototype.navigateNext = function(eve) {
      eve.preventDefault();
      if (this.calendarMode === "Gregorian") {
        this.next();
      } else {
        this.islamicModule.islamicNext();
      }
      this.triggerNavigate(eve);
      if (this.getModuleName() === "calendar") {
        this.table.focus();
      }
    };
    CalendarBase2.prototype.navigateTo = function(view, date, isCustomDate) {
      if (+date >= +this.min && +date <= +this.max) {
        this.currentDate = date;
      }
      if (+date <= +this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
      if (+date >= +this.max) {
        this.currentDate = new Date(this.checkValue(this.max));
      }
      if (this.getViewNumber(this.depth) >= this.getViewNumber(view)) {
        if (this.getViewNumber(this.depth) <= this.getViewNumber(this.start) || this.getViewNumber(this.depth) === this.getViewNumber(view)) {
          view = this.depth;
        }
      }
      this.switchView(this.getViewNumber(view), null, null, isCustomDate);
    };
    CalendarBase2.prototype.currentView = function() {
      if (this.contentElement.classList.contains(YEAR)) {
        return "Year";
      } else if (this.contentElement.classList.contains(DECADE)) {
        return "Decade";
      } else {
        return "Month";
      }
    };
    CalendarBase2.prototype.getDateVal = function(date, value) {
      return !isNullOrUndefined(value) && date.getDate() === value.getDate() && date.getMonth() === value.getMonth() && date.getFullYear() === value.getFullYear();
    };
    CalendarBase2.prototype.getCultureObjects = function(ld, c) {
      var gregorianFormat = ".dates.calendars.gregorian.days.format." + this.dayHeaderFormat.toLowerCase();
      var islamicFormat = ".dates.calendars.islamic.days.format." + this.dayHeaderFormat.toLowerCase();
      var mainVal = "main.";
      if (this.calendarMode === "Gregorian") {
        return getValue(mainVal + "" + this.locale + gregorianFormat, ld);
      } else {
        return getValue("main." + this.locale + islamicFormat, ld);
      }
    };
    CalendarBase2.prototype.getWeek = function(d) {
      var currentDate = new Date(this.checkValue(d)).valueOf();
      var date = new Date(d.getFullYear(), 0, 1).valueOf();
      return Math.ceil((currentDate - date + dayMilliSeconds) / dayMilliSeconds / 7);
    };
    CalendarBase2.prototype.setStartDate = function(date, time) {
      var tzOffset = date.getTimezoneOffset();
      var d = new Date(date.getTime() + time);
      var tzOffsetDiff = d.getTimezoneOffset() - tzOffset;
      date.setTime(d.getTime() + tzOffsetDiff * minutesMilliSeconds);
    };
    CalendarBase2.prototype.addMonths = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setMonth(date.getMonth() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year, islamicDate.month + i, 1);
      }
    };
    CalendarBase2.prototype.addYears = function(date, i) {
      if (this.calendarMode === "Gregorian") {
        var day = date.getDate();
        date.setDate(1);
        date.setFullYear(date.getFullYear() + i);
        date.setDate(Math.min(day, this.getMaxDays(date)));
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        this.currentDate = this.islamicModule.toGregorian(islamicDate.year + i, islamicDate.month, 1);
      }
    };
    CalendarBase2.prototype.getIdValue = function(e, element2) {
      var eve;
      if (e) {
        eve = e.currentTarget;
      } else {
        eve = element2;
      }
      var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
      var dateFormatOptions = { type: "dateTime", skeleton: "full", calendar: type };
      var dateString = this.globalize.formatDate(new Date(parseInt("" + eve.getAttribute("id"), 0)), dateFormatOptions);
      var date = this.globalize.parseDate(dateString, dateFormatOptions);
      var value = date.valueOf() - date.valueOf() % 1e3;
      return new Date(value);
    };
    CalendarBase2.prototype.adjustLongHeaderSize = function() {
      removeClass([this.element], DAYHEADERLONG);
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.getModuleName() === "calendar" ? this.element : this.calendarElement], DAYHEADERLONG);
      }
    };
    CalendarBase2.prototype.selectDate = function(e, date, node, multiSelection, values) {
      var element2 = node || e.currentTarget;
      this.isDateSelected = false;
      if (this.currentView() === "Decade") {
        this.setDateDecade(this.currentDate, date.getFullYear());
      } else if (this.currentView() === "Year") {
        this.setDateYear(this.currentDate, date);
      } else {
        if (multiSelection && !this.checkPresentDate(date, values)) {
          var copyValues = this.copyValues(values);
          if (!isNullOrUndefined(values) && copyValues.length > 0) {
            copyValues.push(new Date(this.checkValue(date)));
            this.setProperties({ values: copyValues }, true);
            this.setProperties({ value: values[values.length - 1] }, true);
          } else {
            this.setProperties({ values: [new Date(this.checkValue(date))] }, true);
          }
        } else {
          this.setProperties({ value: new Date(this.checkValue(date)) }, true);
        }
        this.currentDate = new Date(this.checkValue(date));
      }
      var tableBodyElement = closest(element2, "." + ROOT);
      if (isNullOrUndefined(tableBodyElement)) {
        tableBodyElement = this.tableBodyElement;
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + SELECTED))) {
        removeClass([tableBodyElement.querySelector("." + SELECTED)], SELECTED);
      }
      if (!multiSelection && !isNullOrUndefined(tableBodyElement.querySelector("." + FOCUSEDDATE))) {
        removeClass([tableBodyElement.querySelector("." + FOCUSEDDATE)], FOCUSEDDATE);
      }
      if (multiSelection) {
        var copyValues = this.copyValues(values);
        var collection = Array.prototype.slice.call(this.tableBodyElement.querySelectorAll("td"));
        for (var index = 0; index < collection.length; index++) {
          var tempElement = tableBodyElement.querySelectorAll("td." + FOCUSEDDATE)[0];
          var selectedElement = tableBodyElement.querySelectorAll("td." + SELECTED)[0];
          if (collection[index] === tempElement) {
            removeClass([collection[index]], FOCUSEDDATE);
          }
          if (collection[index] === selectedElement && !this.checkPresentDate(new Date(parseInt(selectedElement.getAttribute("id").split("_")[0], 10)), values)) {
            removeClass([collection[index]], SELECTED);
          }
        }
        if (element2.classList.contains(SELECTED)) {
          removeClass([element2], SELECTED);
          for (var i = 0; i < copyValues.length; i++) {
            var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
            var formatOptions = { format: null, type: "date", skeleton: "short", calendar: type };
            var localDateString = this.globalize.formatDate(date, formatOptions);
            var tempDateString = this.globalize.formatDate(copyValues[i], formatOptions);
            if (localDateString === tempDateString) {
              var index = copyValues.indexOf(copyValues[i]);
              copyValues.splice(index, 1);
              addClass([element2], FOCUSEDDATE);
            }
          }
          this.setProperties({ values: copyValues }, true);
        } else {
          addClass([element2], SELECTED);
        }
      } else {
        addClass([element2], SELECTED);
      }
      this.isDateSelected = true;
    };
    CalendarBase2.prototype.checkPresentDate = function(dates, values) {
      var previousValue = false;
      if (!isNullOrUndefined(values)) {
        for (var checkPrevious = 0; checkPrevious < values.length; checkPrevious++) {
          var type = this.calendarMode === "Gregorian" ? "gregorian" : "islamic";
          var localDateString = this.globalize.formatDate(dates, {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          var tempDateString = this.globalize.formatDate(values[checkPrevious], {
            format: null,
            type: "date",
            skeleton: "short",
            calendar: type
          });
          if (localDateString === tempDateString) {
            previousValue = true;
          }
        }
      }
      return previousValue;
    };
    CalendarBase2.prototype.setAriaActiveDescendant = function() {
      attributes(this.table, {
        "aria-activedescendant": "" + this.setActiveDescendant()
      });
    };
    CalendarBase2.prototype.previousIconHandler = function(disabled) {
      if (disabled) {
        EventHandler.remove(this.previousIcon, "click", this.navigatePreviousHandler);
        addClass([this.previousIcon], "" + DISABLED);
        addClass([this.previousIcon], "" + OVERLAY);
        this.previousIcon.setAttribute("aria-disabled", "true");
      } else {
        EventHandler.add(this.previousIcon, "click", this.navigatePreviousHandler);
        removeClass([this.previousIcon], "" + DISABLED);
        removeClass([this.previousIcon], "" + OVERLAY);
        this.previousIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.renderDayCellEvent = function(args) {
      extend(this.renderDayCellArgs, { name: "renderDayCell" });
      this.trigger("renderDayCell", args);
    };
    CalendarBase2.prototype.navigatedEvent = function(eve) {
      extend(this.navigatedArgs, { name: "navigated", event: eve });
      this.trigger("navigated", this.navigatedArgs);
    };
    CalendarBase2.prototype.triggerNavigate = function(event) {
      this.navigatedArgs = { view: this.currentView(), date: this.currentDate };
      this.navigatedEvent(event);
    };
    CalendarBase2.prototype.nextIconHandler = function(disabled) {
      if (disabled) {
        EventHandler.remove(this.nextIcon, "click", this.navigateNextHandler);
        addClass([this.nextIcon], DISABLED);
        addClass([this.nextIcon], OVERLAY);
        this.nextIcon.setAttribute("aria-disabled", "true");
      } else {
        EventHandler.add(this.nextIcon, "click", this.navigateNextHandler);
        removeClass([this.nextIcon], DISABLED);
        removeClass([this.nextIcon], OVERLAY);
        this.nextIcon.setAttribute("aria-disabled", "false");
      }
    };
    CalendarBase2.prototype.compare = function(startDate, endDate, modifier) {
      var start = endDate.getFullYear();
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (startDate.getFullYear() > end) {
        result = 1;
      } else if (startDate.getFullYear() < start) {
        result = -1;
      }
      return result;
    };
    CalendarBase2.prototype.isMinMaxRange = function(date) {
      return +date >= +this.min && +date <= +this.max;
    };
    CalendarBase2.prototype.isMonthYearRange = function(date) {
      if (this.calendarMode === "Gregorian") {
        return date.getMonth() >= this.min.getMonth() && date.getFullYear() >= this.min.getFullYear() && date.getMonth() <= this.max.getMonth() && date.getFullYear() <= this.max.getFullYear();
      } else {
        var islamicDate = this.islamicModule.getIslamicDate(date);
        return islamicDate.month >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).month && islamicDate.year >= this.islamicModule.getIslamicDate(new Date(1944, 1, 18)).year && islamicDate.month <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).month && islamicDate.year <= this.islamicModule.getIslamicDate(new Date(2069, 1, 16)).year;
      }
    };
    CalendarBase2.prototype.compareYear = function(start, end) {
      return this.compare(start, end, 0);
    };
    CalendarBase2.prototype.compareDecade = function(start, end) {
      return this.compare(start, end, 10);
    };
    CalendarBase2.prototype.shiftArray = function(array, i) {
      return array.slice(i).concat(array.slice(0, i));
    };
    CalendarBase2.prototype.addDay = function(date, i, e, max, min) {
      var column = i;
      var value = /* @__PURE__ */ new Date(+date);
      if (!isNullOrUndefined(this.tableBodyElement) && !isNullOrUndefined(e)) {
        while (this.findNextTD(/* @__PURE__ */ new Date(+date), column, max, min)) {
          column += i;
        }
        var rangeValue = new Date(value.setDate(value.getDate() + column));
        column = +rangeValue > +max || +rangeValue < +min ? column === i ? i - i : i : column;
      }
      date.setDate(date.getDate() + column);
    };
    CalendarBase2.prototype.findNextTD = function(date, column, max, min) {
      var value = new Date(date.setDate(date.getDate() + column));
      var collection = [];
      var isDisabled = false;
      if ((!isNullOrUndefined(value) && value.getMonth()) === (!isNullOrUndefined(this.currentDate) && this.currentDate.getMonth())) {
        var tdEles = void 0;
        if (this.calendarMode === "Gregorian") {
          tdEles = this.renderDays(value);
        } else {
          tdEles = this.islamicModule.islamicRenderDays(this.currentDate, value);
        }
        collection = tdEles.filter(function(element2) {
          return element2.classList.contains(DISABLED);
        });
      } else {
        collection = this.tableBodyElement.querySelectorAll("td." + DISABLED);
      }
      if (+value <= +max && +value >= +min) {
        if (collection.length) {
          for (var i = 0; i < collection.length; i++) {
            isDisabled = +value === +new Date(parseInt(collection[i].id, 0)) ? true : false;
            if (isDisabled) {
              break;
            }
          }
        }
      }
      return isDisabled;
    };
    CalendarBase2.prototype.getMaxDays = function(d) {
      var date;
      var tmpDate = new Date(this.checkValue(d));
      date = 28;
      var month2 = tmpDate.getMonth();
      while (tmpDate.getMonth() === month2) {
        ++date;
        tmpDate.setDate(date);
      }
      return date - 1;
    };
    CalendarBase2.prototype.setDateDecade = function(date, year) {
      date.setFullYear(year);
      this.setProperties({ value: new Date(this.checkValue(date)) }, true);
    };
    CalendarBase2.prototype.setDateYear = function(date, value) {
      date.setFullYear(value.getFullYear(), value.getMonth(), date.getDate());
      if (value.getMonth() !== date.getMonth()) {
        date.setDate(0);
        this.currentDate = new Date(this.checkValue(value));
      }
      this.setProperties({ value: new Date(this.checkValue(date)) }, true);
    };
    CalendarBase2.prototype.compareMonth = function(start, end) {
      var result;
      if (start.getFullYear() > end.getFullYear()) {
        result = 1;
      } else if (start.getFullYear() < end.getFullYear()) {
        result = -1;
      } else {
        result = start.getMonth() === end.getMonth() ? 0 : start.getMonth() > end.getMonth() ? 1 : -1;
      }
      return result;
    };
    CalendarBase2.prototype.checkValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    CalendarBase2.prototype.checkView = function() {
      if (this.start !== "Decade" && this.start !== "Year") {
        this.setProperties({ start: "Month" }, true);
      }
      if (this.depth !== "Decade" && this.depth !== "Year") {
        this.setProperties({ depth: "Month" }, true);
      }
      if (this.getViewNumber(this.depth) > this.getViewNumber(this.start)) {
        this.setProperties({ depth: "Month" }, true);
      }
    };
    CalendarBase2.prototype.getDate = function(date, timezone) {
      if (timezone) {
        date = new Date(date.toLocaleString("en-US", { timeZone: timezone }));
      }
      return date;
    };
    __decorate7([
      Property(new Date(1900, 0, 1))
    ], CalendarBase2.prototype, "min", void 0);
    __decorate7([
      Property(true)
    ], CalendarBase2.prototype, "enabled", void 0);
    __decorate7([
      Property(null)
    ], CalendarBase2.prototype, "cssClass", void 0);
    __decorate7([
      Property(new Date(2099, 11, 31))
    ], CalendarBase2.prototype, "max", void 0);
    __decorate7([
      Property(null)
    ], CalendarBase2.prototype, "firstDayOfWeek", void 0);
    __decorate7([
      Property("Gregorian")
    ], CalendarBase2.prototype, "calendarMode", void 0);
    __decorate7([
      Property("Month")
    ], CalendarBase2.prototype, "start", void 0);
    __decorate7([
      Property("Month")
    ], CalendarBase2.prototype, "depth", void 0);
    __decorate7([
      Property(false)
    ], CalendarBase2.prototype, "weekNumber", void 0);
    __decorate7([
      Property("FirstDay")
    ], CalendarBase2.prototype, "weekRule", void 0);
    __decorate7([
      Property(true)
    ], CalendarBase2.prototype, "showTodayButton", void 0);
    __decorate7([
      Property("Short")
    ], CalendarBase2.prototype, "dayHeaderFormat", void 0);
    __decorate7([
      Property(false)
    ], CalendarBase2.prototype, "enablePersistence", void 0);
    __decorate7([
      Property(null)
    ], CalendarBase2.prototype, "keyConfigs", void 0);
    __decorate7([
      Property(null)
    ], CalendarBase2.prototype, "serverTimezoneOffset", void 0);
    __decorate7([
      Event2()
    ], CalendarBase2.prototype, "created", void 0);
    __decorate7([
      Event2()
    ], CalendarBase2.prototype, "destroyed", void 0);
    __decorate7([
      Event2()
    ], CalendarBase2.prototype, "navigated", void 0);
    __decorate7([
      Event2()
    ], CalendarBase2.prototype, "renderDayCell", void 0);
    CalendarBase2 = __decorate7([
      NotifyPropertyChanges
    ], CalendarBase2);
    return CalendarBase2;
  }(Component)
);
var Calendar = (
  /** @class */
  function(_super) {
    __extends7(Calendar2, _super);
    function Calendar2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Calendar2.prototype.render = function() {
      if (this.calendarMode === "Islamic" && this.islamicModule === void 0) {
        throwError("Requires the injectable Islamic modules to render Calendar in Islamic mode");
      }
      if (this.isMultiSelection && typeof this.values === "object" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var tempValues = [];
        var copyValues = [];
        for (var limit = 0; limit < this.values.length; limit++) {
          if (tempValues.indexOf(+this.values[limit]) === -1) {
            tempValues.push(+this.values[limit]);
            copyValues.push(this.values[limit]);
          }
        }
        this.setProperties({ values: copyValues }, true);
        for (var index = 0; index < this.values.length; index++) {
          if (!this.checkDateValue(this.values[index])) {
            if (typeof this.values[index] === "string" && this.checkDateValue(new Date(this.checkValue(this.values[index])))) {
              var copyDate = new Date(this.checkValue(this.values[index]));
              this.values.splice(index, 1);
              this.values.splice(index, 0, copyDate);
            } else {
              this.values.splice(index, 1);
            }
          }
        }
        this.setProperties({ value: this.values[this.values.length - 1] }, true);
        this.previousValues = this.values.length;
      }
      this.validateDate();
      this.minMaxUpdate();
      if (this.getModuleName() === "calendar") {
        this.setEnable(this.enabled);
        this.setClass(this.cssClass);
      }
      _super.prototype.render.call(this);
      if (this.getModuleName() === "calendar") {
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.add(form, "reset", this.formResetHandler.bind(this));
        }
        this.setTimeZone(this.serverTimezoneOffset);
      }
      this.renderComplete();
    };
    Calendar2.prototype.setEnable = function(enable) {
      if (!enable) {
        addClass([this.element], DISABLED);
      } else {
        removeClass([this.element], DISABLED);
      }
    };
    Calendar2.prototype.setClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(oldCssClass) && oldCssClass !== "") {
        removeClass([this.element], oldCssClass.split(" "));
      }
      if (!isNullOrUndefined(newCssClass)) {
        addClass([this.element], newCssClass.split(" "));
      }
    };
    Calendar2.prototype.isDayLightSaving = function() {
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    Calendar2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var serverTimezoneDiff = offsetValue;
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
      }
    };
    Calendar2.prototype.formResetHandler = function() {
      this.setProperties({ value: null }, true);
    };
    Calendar2.prototype.validateDate = function() {
      if (typeof this.value === "string") {
        this.setProperties({ value: this.checkDateValue(new Date(this.checkValue(this.value))) }, true);
      }
      _super.prototype.validateDate.call(this, this.value);
      if (!isNullOrUndefined(this.value) && this.min <= this.max && this.value >= this.min && this.value <= this.max) {
        this.currentDate = new Date(this.checkValue(this.value));
      }
      if (isNaN(+this.value)) {
        this.setProperties({ value: null }, true);
      }
    };
    Calendar2.prototype.minMaxUpdate = function() {
      if (this.getModuleName() === "calendar") {
        if (!isNullOrUndefined(this.value) && this.value <= this.min && this.min <= this.max) {
          this.setProperties({ value: this.min }, true);
          this.changedArgs = { value: this.value };
        } else {
          if (!isNullOrUndefined(this.value) && this.value >= this.max && this.min <= this.max) {
            this.setProperties({ value: this.max }, true);
            this.changedArgs = { value: this.value };
          }
        }
      }
      if (this.getModuleName() !== "calendar" && !isNullOrUndefined(this.value)) {
        if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max) {
          _super.prototype.minMaxUpdate.call(this, this.min);
        } else {
          if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max) {
            _super.prototype.minMaxUpdate.call(this, this.max);
          }
        }
      } else {
        _super.prototype.minMaxUpdate.call(this, this.value);
      }
    };
    Calendar2.prototype.generateTodayVal = function(value) {
      var tempValue = /* @__PURE__ */ new Date();
      if (!isNullOrUndefined(this.timezone)) {
        tempValue = _super.prototype.getDate.call(this, tempValue, this.timezone);
      }
      if (value && isNullOrUndefined(this.timezone)) {
        tempValue.setHours(value.getHours());
        tempValue.setMinutes(value.getMinutes());
        tempValue.setSeconds(value.getSeconds());
        tempValue.setMilliseconds(value.getMilliseconds());
      } else {
        tempValue = new Date(tempValue.getFullYear(), tempValue.getMonth(), tempValue.getDate(), 0, 0, 0, 0);
      }
      return tempValue;
    };
    Calendar2.prototype.todayButtonClick = function(e) {
      if (this.showTodayButton) {
        var tempValue = this.generateTodayVal(this.value);
        this.setProperties({ value: tempValue }, true);
        this.isTodayClicked = true;
        this.todayButtonEvent = e;
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          if (!_super.prototype.checkPresentDate.call(this, tempValue, this.values)) {
            copyValues.push(tempValue);
            this.setProperties({ values: copyValues });
          }
        }
        _super.prototype.todayButtonClick.call(this, e, /* @__PURE__ */ new Date(+this.value));
      }
    };
    Calendar2.prototype.keyActionHandle = function(e) {
      _super.prototype.keyActionHandle.call(this, e, this.value, this.isMultiSelection);
    };
    Calendar2.prototype.preRender = function() {
      var _this = this;
      this.changeHandler = function(e) {
        _this.triggerChange(e);
      };
      this.checkView();
      _super.prototype.preRender.call(this, this.value);
    };
    Calendar2.prototype.createContent = function() {
      this.previousDate = this.value;
      this.previousDateTime = this.value;
      _super.prototype.createContent.call(this);
    };
    Calendar2.prototype.minMaxDate = function(localDate) {
      return _super.prototype.minMaxDate.call(this, localDate);
    };
    Calendar2.prototype.renderMonths = function(e, value, isCustomDate) {
      _super.prototype.renderMonths.call(this, e, this.value, isCustomDate);
    };
    Calendar2.prototype.renderDays = function(currentDate, value, isMultiSelect, values, isCustomDate) {
      var tempDays = _super.prototype.renderDays.call(this, currentDate, this.value, this.isMultiSelection, this.values, isCustomDate);
      if (this.isMultiSelection) {
        _super.prototype.validateValues.call(this, this.isMultiSelection, this.values);
      }
      return tempDays;
    };
    Calendar2.prototype.renderYears = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderYears.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderYears(e, this.value);
      }
    };
    Calendar2.prototype.renderDecades = function(e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderDecades.call(this, e, this.value);
      } else {
        this.islamicModule.islamicRenderDecade(e, this.value);
      }
    };
    Calendar2.prototype.renderTemplate = function(elements, count, classNm, e) {
      if (this.calendarMode === "Gregorian") {
        _super.prototype.renderTemplate.call(this, elements, count, classNm, e, this.value);
      } else {
        this.islamicModule.islamicRenderTemplate(elements, count, classNm, e, this.value);
      }
      this.changedArgs = { value: this.value, values: this.values };
      this.changeHandler();
    };
    Calendar2.prototype.clickHandler = function(e) {
      var eve = e.currentTarget;
      this.isPopupClicked = true;
      if (eve.classList.contains(OTHERMONTH)) {
        if (this.isMultiSelection) {
          var copyValues = this.copyValues(this.values);
          copyValues.push(this.getIdValue(e, null));
          this.setProperties({ values: copyValues }, true);
          this.setProperties({ value: this.values[this.values.length - 1] }, true);
        } else {
          this.setProperties({ value: this.getIdValue(e, null) }, true);
        }
      }
      var storeView = this.currentView();
      _super.prototype.clickHandler.call(this, e, this.value);
      if (this.isMultiSelection && this.currentDate !== this.value && !isNullOrUndefined(this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0]) && storeView === "Year") {
        this.tableBodyElement.querySelectorAll("." + FOCUSEDDATE)[0].classList.remove(FOCUSEDDATE);
      }
    };
    Calendar2.prototype.switchView = function(view, e, isMultiSelection, isCustomDate) {
      _super.prototype.switchView.call(this, view, e, this.isMultiSelection, isCustomDate);
    };
    Calendar2.prototype.getModuleName = function() {
      _super.prototype.getModuleName.call(this);
      return "calendar";
    };
    Calendar2.prototype.getPersistData = function() {
      _super.prototype.getPersistData.call(this);
      var keyEntity = ["value", "values"];
      return this.addOnPersist(keyEntity);
    };
    Calendar2.prototype.onPropertyChanged = function(newProp, oldProp) {
      this.effect = "";
      this.rangeValidation(this.min, this.max);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            if (this.isDateSelected) {
              if (typeof newProp.value === "string") {
                this.setProperties({ value: new Date(this.checkValue(newProp.value)) }, true);
              } else {
                newProp.value = new Date(this.checkValue(newProp.value));
              }
              if (isNaN(+this.value)) {
                this.setProperties({ value: oldProp.value }, true);
              }
              this.update();
            }
            break;
          case "values":
            if (this.isDateSelected) {
              if (typeof newProp.values === "string" || typeof newProp.values === "number") {
                this.setProperties({ values: null }, true);
              } else {
                var copyValues = this.copyValues(this.values);
                for (var index = 0; index < copyValues.length; index++) {
                  var tempDate = copyValues[index];
                  if (this.checkDateValue(tempDate) && !_super.prototype.checkPresentDate.call(this, tempDate, copyValues)) {
                    copyValues.push(tempDate);
                  }
                }
                this.setProperties({ values: copyValues }, true);
                if (this.values.length > 0) {
                  this.setProperties({ value: newProp.values[newProp.values.length - 1] }, true);
                }
              }
              this.validateValues(this.isMultiSelection, this.values);
              this.update();
            }
            break;
          case "isMultiSelection":
            if (this.isDateSelected) {
              this.setProperties({ isMultiSelection: newProp.isMultiSelection }, true);
              this.update();
            }
            break;
          case "enabled":
            this.setEnable(this.enabled);
            break;
          case "cssClass":
            if (this.getModuleName() === "calendar") {
              this.setClass(newProp.cssClass, oldProp.cssClass);
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp, this.isMultiSelection, this.values);
        }
      }
      this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
    };
    Calendar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.getModuleName() === "calendar") {
        var form = closest(this.element, "form");
        if (form) {
          EventHandler.remove(form, "reset", this.formResetHandler.bind(this));
        }
      }
    };
    Calendar2.prototype.navigateTo = function(view, date, isCustomDate) {
      this.minMaxUpdate();
      _super.prototype.navigateTo.call(this, view, date, isCustomDate);
    };
    Calendar2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    Calendar2.prototype.addDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number") {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var i = 0; i < tempDates.length; i++) {
            if (this.checkDateValue(tempDates[i]) && !_super.prototype.checkPresentDate.call(this, tempDates[i], copyValues)) {
              if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
                copyValues.push(tempDates[i]);
              } else {
                copyValues = [/* @__PURE__ */ new Date(+tempDates[i])];
              }
            }
          }
        } else {
          if (this.checkDateValue(dates) && !_super.prototype.checkPresentDate.call(this, dates, copyValues)) {
            if (!isNullOrUndefined(copyValues) && copyValues.length > 0) {
              copyValues.push(dates);
            } else {
              copyValues = [/* @__PURE__ */ new Date(+dates)];
            }
          }
        }
        this.setProperties({ values: copyValues }, true);
        if (this.isMultiSelection) {
          this.setProperties({ value: this.values[this.values.length - 1] }, true);
        }
        this.validateValues(this.isMultiSelection, copyValues);
        this.update();
        this.changedArgs = { value: this.value, values: this.values };
        this.changeHandler();
      }
    };
    Calendar2.prototype.removeDate = function(dates) {
      if (typeof dates !== "string" && typeof dates !== "number" && !isNullOrUndefined(this.values) && this.values.length > 0) {
        var copyValues = this.copyValues(this.values);
        if (typeof dates === "object" && dates.length > 0) {
          var tempDates = dates;
          for (var index = 0; index < tempDates.length; index++) {
            for (var i = 0; i < copyValues.length; i++) {
              if (+copyValues[i] === +tempDates[index]) {
                copyValues.splice(i, 1);
              }
            }
          }
        } else {
          for (var i = 0; i < copyValues.length; i++) {
            if (+copyValues[i] === +dates) {
              copyValues.splice(i, 1);
            }
          }
        }
        this.setProperties({ values: copyValues }, false);
        this.update();
        if (this.isMultiSelection) {
          this.setProperties({ value: this.values[this.values.length - 1] }, true);
        }
        this.changedArgs = { value: this.value, values: this.values };
        this.changeHandler();
      }
    };
    Calendar2.prototype.setTodayDate = function(date) {
      var todayDate = /* @__PURE__ */ new Date(+date);
      this.setProperties({ value: todayDate }, true);
      _super.prototype.todayButtonClick.call(this, null, todayDate, true);
    };
    Calendar2.prototype.update = function() {
      this.validateDate();
      this.minMaxUpdate();
      _super.prototype.setValueUpdate.call(this);
    };
    Calendar2.prototype.selectDate = function(e, date, element2) {
      _super.prototype.selectDate.call(this, e, date, element2, this.isMultiSelection, this.values);
      if (this.isMultiSelection && !isNullOrUndefined(this.values) && this.values.length > 0) {
        this.setProperties({ value: this.values[this.values.length - 1] }, true);
      }
      this.changedArgs = { value: this.value, values: this.values };
      this.changeHandler(e);
    };
    Calendar2.prototype.changeEvent = function(e) {
      if ((this.value && this.value.valueOf()) !== (this.previousDate && +this.previousDate.valueOf()) || this.isMultiSelection) {
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = /* @__PURE__ */ new Date(+this.value);
      }
    };
    Calendar2.prototype.triggerChange = function(e) {
      if (!isNullOrUndefined(this.todayButtonEvent) && this.isTodayClicked) {
        e = this.todayButtonEvent;
        this.isTodayClicked = false;
      }
      this.changedArgs.event = e || null;
      this.changedArgs.isInteracted = !isNullOrUndefined(e);
      if (!isNullOrUndefined(this.value)) {
        this.setProperties({ value: this.value }, true);
      }
      if (!this.isMultiSelection && +this.value !== Number.NaN && (+this.value !== +this.previousDate || this.previousDate == null && !isNaN(+this.value))) {
        this.changeEvent(e);
      } else if (!isNullOrUndefined(this.values) && this.previousValues !== this.values.length) {
        this.changeEvent(e);
        this.previousValues = this.values.length;
      }
    };
    __decorate7([
      Property(null)
    ], Calendar2.prototype, "value", void 0);
    __decorate7([
      Property(null)
    ], Calendar2.prototype, "values", void 0);
    __decorate7([
      Property(false)
    ], Calendar2.prototype, "isMultiSelection", void 0);
    __decorate7([
      Event2()
    ], Calendar2.prototype, "change", void 0);
    Calendar2 = __decorate7([
      NotifyPropertyChanges
    ], Calendar2);
    return Calendar2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/calendar/islamic.js
var OTHERMONTH2 = "e-other-month";
var YEAR2 = "e-year";
var MONTH2 = "e-month";
var DECADE2 = "e-decade";
var DISABLED2 = "e-disabled";
var OVERLAY2 = "e-overlay";
var WEEKEND2 = "e-weekend";
var WEEKNUMBER2 = "e-week-number";
var SELECTED2 = "e-selected";
var FOCUSEDDATE2 = "e-focused-date";
var OTHERMONTHROW2 = "e-month-hide";
var TODAY2 = "e-today";
var LINK2 = "e-day";
var CELL2 = "e-cell";
var dayMilliSeconds2 = 864e5;
var minDecade = 2060;
var maxDecade = 2069;
var Islamic = (
  /** @class */
  function() {
    function Islamic2(instance) {
      this.calendarInstance = instance;
    }
    Islamic2.prototype.getModuleName = function() {
      return "islamic";
    };
    Islamic2.prototype.islamicTitleUpdate = function(date, view) {
      var globalize = new Internationalization(this.calendarInstance.locale);
      switch (view) {
        case "days":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, { type: "dateTime", format: "MMMMyyyy", calendar: "islamic" });
          break;
        case "months":
          this.calendarInstance.headerTitleElement.textContent = globalize.formatDate(date, { type: "dateTime", format: "yyyy", calendar: "islamic" });
      }
    };
    Islamic2.prototype.islamicRenderDays = function(currentDate, value, multiSelection, values) {
      var tdEles = [];
      var cellsCount = 42;
      var localDate = new Date(this.islamicInValue(currentDate));
      var minMaxDate;
      this.islamicTitleUpdate(currentDate, "days");
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = this.toGregorian(islamicDate.year, islamicDate.month, 1);
      var currentMonth = islamicDate.month;
      localDate = gregorianObject;
      while (localDate.getDay() !== this.calendarInstance.firstDayOfWeek) {
        this.calendarInstance.setStartDate(localDate, -1 * dayMilliSeconds2);
      }
      for (var day = 0; day < cellsCount; ++day) {
        var weekEle = this.calendarInstance.createElement("td", { className: CELL2 });
        var weekAnchor = this.calendarInstance.createElement("span");
        if (day % 7 === 0 && this.calendarInstance.weekNumber) {
          weekAnchor.textContent = "" + this.calendarInstance.getWeek(localDate);
          weekEle.appendChild(weekAnchor);
          addClass([weekEle], "" + WEEKNUMBER2);
          tdEles.push(weekEle);
        }
        minMaxDate = /* @__PURE__ */ new Date(+localDate);
        localDate = this.calendarInstance.minMaxDate(localDate);
        var dateFormatOptions = { type: "dateTime", skeleton: "full", calendar: "islamic" };
        var date = this.calendarInstance.globalize.parseDate(this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions), dateFormatOptions);
        var tdEle = this.islamicDayCell(localDate);
        var title = this.calendarInstance.globalize.formatDate(localDate, { type: "date", skeleton: "full", calendar: "islamic" });
        var dayLink = this.calendarInstance.createElement("span");
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, { type: "date", skeleton: "d", calendar: "islamic" });
        var disabled = this.calendarInstance.min > localDate || this.calendarInstance.max < localDate;
        if (disabled) {
          addClass([tdEle], DISABLED2);
          addClass([tdEle], OVERLAY2);
        } else {
          dayLink.setAttribute("title", "" + title);
        }
        var hijriMonthObject = this.getIslamicDate(localDate);
        if (currentMonth !== hijriMonthObject.month) {
          addClass([tdEle], OTHERMONTH2);
        }
        if (localDate.getDay() === 0 || localDate.getDay() === 6) {
          addClass([tdEle], WEEKEND2);
        }
        tdEle.appendChild(dayLink);
        this.calendarInstance.renderDayCellArgs = {
          date: localDate,
          isDisabled: false,
          element: tdEle,
          isOutOfRange: disabled
        };
        var argument = this.calendarInstance.renderDayCellArgs;
        this.calendarInstance.renderDayCellEvent(argument);
        if (argument.isDisabled) {
          if (this.calendarInstance.isMultiSelection) {
            if (!isNullOrUndefined(this.calendarInstance.values) && this.calendarInstance.values.length > 0) {
              for (var index = 0; index < values.length; index++) {
                var localDateString = +new Date(this.calendarInstance.globalize.formatDate(argument.date, { type: "date", skeleton: "yMd", calendar: "islamic" }));
                var tempDateString = +new Date(this.calendarInstance.globalize.formatDate(this.calendarInstance.values[index], { type: "date", skeleton: "yMd", calendar: "islamic" }));
                if (localDateString === tempDateString) {
                  this.calendarInstance.values.splice(index, 1);
                  index = -1;
                }
              }
            }
          } else if (value && +value === +argument.date) {
            this.calendarInstance.setProperties({ value: null }, true);
          }
        }
        if (this.calendarInstance.renderDayCellArgs.isDisabled && !tdEle.classList.contains(SELECTED2)) {
          addClass([tdEle], DISABLED2);
          addClass([tdEle], OVERLAY2);
          if (+this.calendarInstance.renderDayCellArgs.date === +this.calendarInstance.todayDate) {
            this.calendarInstance.todayDisabled = true;
          }
        }
        var otherMnthBool = tdEle.classList.contains(OTHERMONTH2);
        var disabledCls = tdEle.classList.contains(DISABLED2);
        if (!disabledCls) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        if (this.calendarInstance.isMultiSelection && !isNullOrUndefined(this.calendarInstance.values) && !otherMnthBool && !disabledCls) {
          for (var tempValue = 0; tempValue < this.calendarInstance.values.length; tempValue++) {
            var localDateString = this.calendarInstance.globalize.formatDate(localDate, { type: "date", skeleton: "short", calendar: "islamic" });
            var tempDateString = this.calendarInstance.globalize.formatDate(this.calendarInstance.values[tempValue], { type: "date", skeleton: "short", calendar: "islamic" });
            if (localDateString === tempDateString && this.calendarInstance.getDateVal(localDate, this.calendarInstance.values[tempValue])) {
              addClass([tdEle], SELECTED2);
            } else {
              this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
            }
          }
          if (this.calendarInstance.values.length <= 0) {
            this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
          }
        } else if (!otherMnthBool && !disabledCls && this.calendarInstance.getDateVal(localDate, value)) {
          addClass([tdEle], SELECTED2);
        } else {
          this.calendarInstance.updateFocus(otherMnthBool, disabledCls, localDate, tdEle, currentDate);
        }
        if (date.getDate() === (/* @__PURE__ */ new Date()).getDate() && date.getMonth() === (/* @__PURE__ */ new Date()).getMonth()) {
          if (date.getFullYear() === (/* @__PURE__ */ new Date()).getFullYear()) {
            addClass([tdEle], TODAY2);
          }
        }
        localDate = /* @__PURE__ */ new Date(+minMaxDate);
        tdEles.push(this.calendarInstance.renderDayCellArgs.element);
        this.calendarInstance.addDay(localDate, 1, null, this.calendarInstance.max, this.calendarInstance.min);
      }
      return tdEles;
    };
    Islamic2.prototype.islamicIconHandler = function() {
      new Date(this.islamicInValue(this.calendarInstance.currentDate)).setDate(1);
      var date = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      switch (this.calendarInstance.currentView()) {
        case "Month":
          {
            var prevMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.min) < 1;
            var nextMonthCompare = this.islamicCompareMonth(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevMonthCompare);
            this.calendarInstance.nextIconHandler(nextMonthCompare);
          }
          break;
        case "Year":
          {
            var prevYearCompare = this.hijriCompareYear(date, this.calendarInstance.min) < 1;
            var nextYearCompare = this.hijriCompareYear(date, this.calendarInstance.max) > -1;
            this.calendarInstance.previousIconHandler(prevYearCompare);
            this.calendarInstance.nextIconHandler(nextYearCompare);
          }
          break;
        case "Decade": {
          var prevDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.min) < 1;
          var nextDecadeCompare = this.hijriCompareDecade(date, this.calendarInstance.max) > -1;
          this.calendarInstance.previousIconHandler(prevDecadeCompare);
          this.calendarInstance.nextIconHandler(nextDecadeCompare);
        }
      }
    };
    Islamic2.prototype.islamicNext = function() {
      this.calendarInstance.effect = "";
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 1, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month + 1, 1);
          this.calendarInstance.switchView(view);
          break;
        case "Decade":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year + 10, islamicDate.month, 1);
          this.calendarInstance.switchView(view);
          break;
      }
    };
    Islamic2.prototype.islamicPrevious = function() {
      var currentView = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      this.calendarInstance.effect = "";
      var islamicDate = this.getIslamicDate(this.calendarInstance.currentDate);
      switch (this.calendarInstance.currentView()) {
        case "Month":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Year":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 1, islamicDate.month, 1);
          this.calendarInstance.switchView(currentView);
          break;
        case "Decade":
          this.calendarInstance.currentDate = this.toGregorian(islamicDate.year - 10, islamicDate.month - 1, 1);
          this.calendarInstance.switchView(currentView);
          break;
      }
    };
    Islamic2.prototype.islamicRenderYears = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var tdEles = [];
      var valueUtil = isNullOrUndefined(value);
      var curDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var localDate = curDate;
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var mon = islamicDate.month;
      var yr = islamicDate.year;
      var curYrs = islamicDate.year;
      var minYr = this.getIslamicDate(this.calendarInstance.min).year;
      var minMonth = this.getIslamicDate(this.calendarInstance.min).month;
      var maxYr = this.getIslamicDate(this.calendarInstance.max).year;
      var maxMonth = this.getIslamicDate(this.calendarInstance.max).month;
      this.islamicTitleUpdate(this.calendarInstance.currentDate, "months");
      for (var month2 = 1; month2 <= 12; ++month2) {
        var islamicDate_1 = this.getIslamicDate(localDate);
        var gregorianObject_1 = HijriParser.toGregorian(islamicDate_1.year, month2, 1);
        localDate = gregorianObject_1;
        var tdEle = this.islamicDayCell(localDate);
        var dayLink = this.calendarInstance.createElement("span");
        var localMonth = value && this.getIslamicDate(value).month === this.getIslamicDate(localDate).month;
        var select2 = value && this.getIslamicDate(value).year === yr && localMonth;
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, { type: "dateTime", format: "MMM", calendar: "islamic" });
        if (this.calendarInstance.min && (curYrs < minYr || month2 < minMonth && curYrs === minYr) || this.calendarInstance.max && (curYrs > maxYr || month2 > maxMonth && curYrs >= maxYr)) {
          addClass([tdEle], DISABLED2);
        } else if (!valueUtil && select2) {
          addClass([tdEle], SELECTED2);
        } else {
          if (this.getIslamicDate(localDate).month === mon && this.getIslamicDate(this.calendarInstance.currentDate).month === mon) {
            addClass([tdEle], FOCUSEDDATE2);
          }
        }
        if (!tdEle.classList.contains(DISABLED2)) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.islamicRenderTemplate(tdEles, numCells, YEAR2, e, value);
    };
    Islamic2.prototype.islamicRenderDecade = function(e, value) {
      this.calendarInstance.removeTableHeadElement();
      var numCells = 4;
      var yearCell = 12;
      var tdEles = [];
      var localDate = new Date(this.islamicInValue(this.calendarInstance.currentDate));
      var islamicDate = this.getIslamicDate(localDate);
      var gregorianObject = HijriParser.toGregorian(islamicDate.year, 1, 1);
      localDate = gregorianObject;
      var localYr = localDate.getFullYear();
      var startYr = new Date(this.islamicInValue(localYr - localYr % 10));
      var endYr = new Date(this.islamicInValue(localYr - localYr % 10 + (10 - 1)));
      var startFullYr = startYr.getFullYear();
      var endFullYr = endYr.getFullYear();
      var startHdrYr = this.calendarInstance.globalize.formatDate(startYr, { type: "dateTime", format: "y", calendar: "islamic" });
      var endHdrYr = this.calendarInstance.globalize.formatDate(endYr, { type: "dateTime", format: "y", calendar: "islamic" });
      this.calendarInstance.headerTitleElement.textContent = startHdrYr + " - " + endHdrYr;
      var start = new Date(localYr - localYr % 10 - 2, 0, 1);
      var startYear = start.getFullYear();
      for (var rowCount = 1; rowCount <= yearCell; ++rowCount) {
        var year = startYear + rowCount;
        localDate.setFullYear(year);
        localDate.setDate(1);
        localDate.setMonth(0);
        var islamicDate_2 = this.getIslamicDate(localDate);
        var gregorianObject_2 = HijriParser.toGregorian(islamicDate_2.year, 1, 1);
        localDate = gregorianObject_2;
        var tdEle = this.islamicDayCell(localDate);
        attributes(tdEle, { "role": "gridcell" });
        var dayLink = this.calendarInstance.createElement("span");
        dayLink.textContent = this.calendarInstance.globalize.formatDate(localDate, { type: "dateTime", format: "y", calendar: "islamic" });
        if (year < startFullYr || year > endFullYr) {
          addClass([tdEle], OTHERMONTH2);
        } else if (year < new Date(this.islamicInValue(this.calendarInstance.min)).getFullYear() || year > new Date(this.islamicInValue(this.calendarInstance.max)).getFullYear()) {
          addClass([tdEle], DISABLED2);
        } else if (!isNullOrUndefined(value) && this.getIslamicDate(localDate).year === this.getIslamicDate(value).year) {
          addClass([tdEle], SELECTED2);
        } else {
          if (localDate.getFullYear() === this.calendarInstance.currentDate.getFullYear() && !tdEle.classList.contains(DISABLED2)) {
            addClass([tdEle], FOCUSEDDATE2);
          }
        }
        if (!tdEle.classList.contains(DISABLED2)) {
          EventHandler.add(tdEle, "click", this.calendarInstance.clickHandler, this.calendarInstance);
        }
        tdEle.appendChild(dayLink);
        tdEles.push(tdEle);
      }
      this.islamicRenderTemplate(tdEles, numCells, "e-decade", e, value);
    };
    Islamic2.prototype.islamicDayCell = function(localDate) {
      var dateFormatOptions = { skeleton: "full", type: "dateTime", calendar: "islamic" };
      var formatDate = this.calendarInstance.globalize.formatDate(localDate, dateFormatOptions);
      var date = this.calendarInstance.globalize.parseDate(formatDate, dateFormatOptions);
      var value = date.valueOf();
      var attrs = {
        className: CELL2,
        attrs: { "id": "" + getUniqueID("" + value), "aria-selected": "false", "role": "gridcell" }
      };
      return this.calendarInstance.createElement("td", attrs);
    };
    Islamic2.prototype.islamicRenderTemplate = function(elements, count, classNm, e, value) {
      var view = this.calendarInstance.getViewNumber(this.calendarInstance.currentView());
      var trEle;
      this.calendarInstance.tableBodyElement = this.calendarInstance.createElement("tbody");
      this.calendarInstance.table.appendChild(this.calendarInstance.tableBodyElement);
      removeClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [MONTH2, DECADE2, YEAR2]);
      addClass([this.calendarInstance.contentElement, this.calendarInstance.headerElement], [classNm]);
      var weekNumCell = 41;
      var numberCell = 35;
      var otherMonthCell = 6;
      var row = count;
      var rowCount = 0;
      for (var dayCell = 0; dayCell < elements.length / count; ++dayCell) {
        trEle = this.calendarInstance.createElement("tr", { attrs: { "role": "row" } });
        for (rowCount = 0 + rowCount; rowCount < row; rowCount++) {
          if (!elements[rowCount].classList.contains("e-week-number") && !isNullOrUndefined(elements[rowCount].children[0])) {
            addClass([elements[rowCount].children[0]], [LINK2]);
            rippleEffect(elements[rowCount].children[0], {
              duration: 600,
              isCenterRipple: true
            });
          }
          trEle.appendChild(elements[rowCount]);
          if (this.calendarInstance.weekNumber && rowCount === otherMonthCell + 1 && elements[otherMonthCell + 1].classList.contains(OTHERMONTH2)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (!this.calendarInstance.weekNumber && rowCount === otherMonthCell && elements[otherMonthCell].classList.contains(OTHERMONTH2)) {
            addClass([trEle], OTHERMONTHROW2);
          }
          if (this.calendarInstance.weekNumber) {
            if (rowCount === weekNumCell && elements[weekNumCell].classList.contains(OTHERMONTH2)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          } else {
            if (rowCount === numberCell && elements[numberCell].classList.contains(OTHERMONTH2)) {
              addClass([trEle], OTHERMONTHROW2);
            }
          }
        }
        row = row + count;
        rowCount = rowCount + 0;
        this.calendarInstance.tableBodyElement.appendChild(trEle);
      }
      this.calendarInstance.table.querySelector("tbody").className = this.calendarInstance.effect;
      this.islamicIconHandler();
      if (view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView()) || view === 0 && view !== this.calendarInstance.getViewNumber(this.calendarInstance.currentView())) {
        this.calendarInstance.navigateHandler(e);
      }
      this.calendarInstance.setAriaActiveDescendant();
      this.calendarInstance.changedArgs = { value: this.calendarInstance.value, values: this.calendarInstance.values };
      this.calendarInstance.changeHandler();
    };
    Islamic2.prototype.islamicCompareMonth = function(start, end) {
      var hijriStart = this.getIslamicDate(start);
      var hijriEnd = this.getIslamicDate(end);
      var result;
      if (hijriStart.year > hijriEnd.year) {
        result = 1;
      } else if (hijriStart.year < hijriEnd.year) {
        result = -1;
      } else {
        result = hijriStart.month === hijriEnd.month ? 0 : hijriStart.month > hijriEnd.month ? 1 : -1;
      }
      return result;
    };
    Islamic2.prototype.islamicCompare = function(startDate, endDate, modifier) {
      var hijriStart = this.getIslamicDate(startDate);
      var hijriEnd = this.getIslamicDate(endDate);
      var start = hijriEnd.year;
      var end;
      var result;
      end = start;
      result = 0;
      if (modifier) {
        start = start - start % modifier;
        end = start - start % modifier + modifier - 1;
      }
      if (hijriStart.year > end) {
        result = 1;
      } else if (this.calendarInstance.currentView() === "Decade" && hijriStart.year < start && !(startDate.getFullYear() >= minDecade && startDate.getFullYear() <= maxDecade)) {
        result = -1;
      } else if (hijriStart.year < start && this.calendarInstance.currentView() === "Year") {
        result = -1;
      }
      return result;
    };
    Islamic2.prototype.getIslamicDate = function(date) {
      return HijriParser.getHijriDate(date);
    };
    Islamic2.prototype.toGregorian = function(year, month2, date) {
      return HijriParser.toGregorian(year, month2, date);
    };
    Islamic2.prototype.hijriCompareYear = function(start, end) {
      return this.islamicCompare(start, end, 0);
    };
    Islamic2.prototype.hijriCompareDecade = function(start, end) {
      return this.islamicCompare(start, end, 10);
    };
    Islamic2.prototype.destroy = function() {
      this.calendarInstance = null;
    };
    Islamic2.prototype.islamicInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    return Islamic2;
  }()
);

// node_modules/@syncfusion/ej2-popups/src/common/position.js
var elementRect;
var popupRect;
var element;
var parentDocument;
var fixedParent = false;
function calculateRelativeBasedPosition(anchor, element2) {
  var fixedElement = false;
  var anchorPos = { left: 0, top: 0 };
  var tempAnchor = anchor;
  if (!anchor || !element2) {
    return anchorPos;
  }
  if (isNullOrUndefined(element2.offsetParent) && element2.style.position === "fixed") {
    fixedElement = true;
  }
  while ((element2.offsetParent || fixedElement) && anchor && element2.offsetParent !== anchor) {
    anchorPos.left += anchor.offsetLeft;
    anchorPos.top += anchor.offsetTop;
    anchor = anchor.offsetParent;
  }
  anchor = tempAnchor;
  while ((element2.offsetParent || fixedElement) && anchor && element2.offsetParent !== anchor) {
    anchorPos.left -= anchor.scrollLeft;
    anchorPos.top -= anchor.scrollTop;
    anchor = anchor.parentElement;
  }
  return anchorPos;
}
function calculatePosition(currentElement, positionX, positionY, parentElement, targetValues) {
  popupRect = void 0;
  popupRect = targetValues;
  fixedParent = parentElement ? true : false;
  if (!currentElement) {
    return { left: 0, top: 0 };
  }
  if (!positionX) {
    positionX = "left";
  }
  if (!positionY) {
    positionY = "top";
  }
  parentDocument = currentElement.ownerDocument;
  element = currentElement;
  var pos = { left: 0, top: 0 };
  return updatePosition(positionX.toLowerCase(), positionY.toLowerCase(), pos);
}
function setPosx(value, pos) {
  pos.left = value;
}
function setPosy(value, pos) {
  pos.top = value;
}
function updatePosition(posX, posY, pos) {
  elementRect = element.getBoundingClientRect();
  switch (posY + posX) {
    case "topcenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementTop(), pos);
      break;
    case "topright":
      setPosx(getElementRight(), pos);
      setPosy(getElementTop(), pos);
      break;
    case "centercenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "centerright":
      setPosx(getElementRight(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "centerleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementVCenter(), pos);
      break;
    case "bottomcenter":
      setPosx(getElementHCenter(), pos);
      setPosy(getElementBottom(), pos);
      break;
    case "bottomright":
      setPosx(getElementRight(), pos);
      setPosy(getElementBottom(), pos);
      break;
    case "bottomleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementBottom(), pos);
      break;
    default:
    case "topleft":
      setPosx(getElementLeft(), pos);
      setPosy(getElementTop(), pos);
      break;
  }
  return pos;
}
function getBodyScrollTop() {
  return parentDocument.documentElement.scrollTop || parentDocument.body.scrollTop;
}
function getBodyScrollLeft() {
  return parentDocument.documentElement.scrollLeft || parentDocument.body.scrollLeft;
}
function getElementBottom() {
  return fixedParent ? elementRect.bottom : elementRect.bottom + getBodyScrollTop();
}
function getElementVCenter() {
  return getElementTop() + elementRect.height / 2;
}
function getElementTop() {
  return fixedParent ? elementRect.top : elementRect.top + getBodyScrollTop();
}
function getElementLeft() {
  return elementRect.left + getBodyScrollLeft();
}
function getElementRight() {
  var popupWidth = element && element.classList.contains("e-date-range-wrapper") ? popupRect ? popupRect.width : 0 : popupRect && elementRect.width >= popupRect.width ? popupRect.width : 0;
  return elementRect.right + getBodyScrollLeft() - popupWidth;
}
function getElementHCenter() {
  return getElementLeft() + elementRect.width / 2;
}

// node_modules/@syncfusion/ej2-popups/src/common/collision.js
var parentDocument2;
var targetContainer;
function fit(element2, viewPortElement, axis, position) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  if (axis === void 0) {
    axis = { X: false, Y: false };
  }
  if (!axis.Y && !axis.X) {
    return { left: 0, top: 0 };
  }
  var elemData = element2.getBoundingClientRect();
  targetContainer = viewPortElement;
  parentDocument2 = element2.ownerDocument;
  if (!position) {
    position = calculatePosition(element2, "left", "top");
  }
  if (axis.X) {
    var containerWidth = targetContainer ? getTargetContainerWidth() : getViewPortWidth();
    var containerLeft = ContainerLeft();
    var containerRight = ContainerRight();
    var overLeft = containerLeft - position.left;
    var overRight = position.left + elemData.width - containerRight;
    if (elemData.width > containerWidth) {
      if (overLeft > 0 && overRight <= 0) {
        position.left = containerRight - elemData.width;
      } else if (overRight > 0 && overLeft <= 0) {
        position.left = containerLeft;
      } else {
        position.left = overLeft > overRight ? containerRight - elemData.width : containerLeft;
      }
    } else if (overLeft > 0) {
      position.left += overLeft;
    } else if (overRight > 0) {
      position.left -= overRight;
    }
  }
  if (axis.Y) {
    var containerHeight = targetContainer ? getTargetContainerHeight() : getViewPortHeight();
    var containerTop = ContainerTop();
    var containerBottom = ContainerBottom();
    var overTop = containerTop - position.top;
    var overBottom = position.top + elemData.height - containerBottom;
    if (elemData.height > containerHeight) {
      if (overTop > 0 && overBottom <= 0) {
        position.top = containerBottom - elemData.height;
      } else if (overBottom > 0 && overTop <= 0) {
        position.top = containerTop;
      } else {
        position.top = overTop > overBottom ? containerBottom - elemData.height : containerTop;
      }
    } else if (overTop > 0) {
      position.top += overTop;
    } else if (overBottom > 0) {
      position.top -= overBottom;
    }
  }
  return position;
}
function isCollide(element2, viewPortElement, x, y) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  var elemOffset = calculatePosition(element2, "left", "top");
  if (x) {
    elemOffset.left = x;
  }
  if (y) {
    elemOffset.top = y;
  }
  var data = [];
  targetContainer = viewPortElement;
  parentDocument2 = element2.ownerDocument;
  var elementRect2 = element2.getBoundingClientRect();
  var top = elemOffset.top;
  var left = elemOffset.left;
  var right = elemOffset.left + elementRect2.width;
  var bottom = elemOffset.top + elementRect2.height;
  var topData = "", leftData = "";
  var yAxis = topCollideCheck(top, bottom);
  var xAxis = leftCollideCheck(left, right);
  if (yAxis.topSide) {
    data.push("top");
  }
  if (xAxis.rightSide) {
    data.push("right");
  }
  if (xAxis.leftSide) {
    data.push("left");
  }
  if (yAxis.bottomSide) {
    data.push("bottom");
  }
  return data;
}
function flip(element2, target, offsetX, offsetY, positionX, positionY, viewPortElement, axis, fixedParent2) {
  if (viewPortElement === void 0) {
    viewPortElement = null;
  }
  if (axis === void 0) {
    axis = { X: true, Y: true };
  }
  if (!target || !element2 || !positionX || !positionY || !axis.X && !axis.Y) {
    return;
  }
  var tEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
  }, eEdge = {
    TL: null,
    TR: null,
    BL: null,
    BR: null
    /* eslint-enable */
  };
  var elementRect2;
  if (window.getComputedStyle(element2).display === "none") {
    var oldVisibility = element2.style.visibility;
    element2.style.visibility = "hidden";
    element2.style.display = "block";
    elementRect2 = element2.getBoundingClientRect();
    element2.style.removeProperty("display");
    element2.style.visibility = oldVisibility;
  } else {
    elementRect2 = element2.getBoundingClientRect();
  }
  var pos = {
    posX: positionX,
    posY: positionY,
    offsetX,
    offsetY,
    position: { left: 0, top: 0 }
  };
  targetContainer = viewPortElement;
  parentDocument2 = target.ownerDocument;
  updateElementData(target, tEdge, pos, fixedParent2, elementRect2);
  setPosition(eEdge, pos, elementRect2);
  if (axis.X) {
    leftFlip(target, eEdge, tEdge, pos, elementRect2, true);
  }
  if (axis.Y && tEdge.TL.top > -1) {
    topFlip(target, eEdge, tEdge, pos, elementRect2, true);
  }
  setPopup(element2, pos, elementRect2);
}
function setPopup(element2, pos, elementRect2) {
  var left = 0, top = 0;
  if (element2.offsetParent != null && (getComputedStyle(element2.offsetParent).position === "absolute" || getComputedStyle(element2.offsetParent).position === "relative")) {
    var data = calculatePosition(element2.offsetParent, "left", "top", false, elementRect2);
    left = data.left;
    top = data.top;
  }
  element2.style.top = pos.position.top + pos.offsetY - top + "px";
  element2.style.left = pos.position.left + pos.offsetX - left + "px";
}
function updateElementData(target, edge, pos, fixedParent2, elementRect2) {
  pos.position = calculatePosition(target, pos.posX, pos.posY, fixedParent2, elementRect2);
  edge.TL = calculatePosition(target, "left", "top", fixedParent2, elementRect2);
  edge.TR = calculatePosition(target, "right", "top", fixedParent2, elementRect2);
  edge.BR = calculatePosition(target, "left", "bottom", fixedParent2, elementRect2);
  edge.BL = calculatePosition(target, "right", "bottom", fixedParent2, elementRect2);
}
function setPosition(eStatus, pos, elementRect2) {
  eStatus.TL = { top: pos.position.top + pos.offsetY, left: pos.position.left + pos.offsetX };
  eStatus.TR = { top: eStatus.TL.top, left: eStatus.TL.left + elementRect2.width };
  eStatus.BL = {
    top: eStatus.TL.top + elementRect2.height,
    left: eStatus.TL.left
  };
  eStatus.BR = {
    top: eStatus.TL.top + elementRect2.height,
    left: eStatus.TL.left + elementRect2.width
  };
}
function leftCollideCheck(left, right) {
  var leftSide = false, rightSide = false;
  if (left - getBodyScrollLeft2() < ContainerLeft()) {
    leftSide = true;
  }
  if (right > ContainerRight()) {
    rightSide = true;
  }
  return { leftSide, rightSide };
}
function leftFlip(target, edge, tEdge, pos, elementRect2, deepCheck) {
  var collideSide = leftCollideCheck(edge.TL.left, edge.TR.left);
  if (tEdge.TL.left - getBodyScrollLeft2() <= ContainerLeft()) {
    collideSide.leftSide = false;
  }
  if (tEdge.TR.left > ContainerRight()) {
    collideSide.rightSide = false;
  }
  if (collideSide.leftSide && !collideSide.rightSide || !collideSide.leftSide && collideSide.rightSide) {
    if (pos.posX === "right") {
      pos.posX = "left";
    } else {
      pos.posX = "right";
    }
    pos.offsetX = pos.offsetX + elementRect2.width;
    pos.offsetX = -1 * pos.offsetX;
    pos.position = calculatePosition(target, pos.posX, pos.posY, false);
    setPosition(edge, pos, elementRect2);
    if (deepCheck) {
      leftFlip(target, edge, tEdge, pos, elementRect2, false);
    }
  }
}
function topFlip(target, edge, tEdge, pos, elementRect2, deepCheck) {
  var collideSide = topCollideCheck(edge.TL.top, edge.BL.top);
  if (tEdge.TL.top - getBodyScrollTop2() <= ContainerTop()) {
    collideSide.topSide = false;
  }
  if (tEdge.BL.top >= ContainerBottom() && target.getBoundingClientRect().bottom < window.innerHeight) {
    collideSide.bottomSide = false;
  }
  if (collideSide.topSide && !collideSide.bottomSide || !collideSide.topSide && collideSide.bottomSide) {
    if (pos.posY === "top") {
      pos.posY = "bottom";
    } else {
      pos.posY = "top";
    }
    pos.offsetY = pos.offsetY + elementRect2.height;
    pos.offsetY = -1 * pos.offsetY;
    pos.position = calculatePosition(target, pos.posX, pos.posY, false, elementRect2);
    setPosition(edge, pos, elementRect2);
    if (deepCheck) {
      topFlip(target, edge, tEdge, pos, elementRect2, false);
    }
  }
}
function topCollideCheck(top, bottom) {
  var topSide = false, bottomSide = false;
  if (top - getBodyScrollTop2() < ContainerTop()) {
    topSide = true;
  }
  if (bottom > ContainerBottom()) {
    bottomSide = true;
  }
  return { topSide, bottomSide };
}
function getTargetContainerWidth() {
  return targetContainer.getBoundingClientRect().width;
}
function getTargetContainerHeight() {
  return targetContainer.getBoundingClientRect().height;
}
function getTargetContainerLeft() {
  return targetContainer.getBoundingClientRect().left;
}
function getTargetContainerTop() {
  return targetContainer.getBoundingClientRect().top;
}
function ContainerTop() {
  if (targetContainer) {
    return getTargetContainerTop();
  }
  return 0;
}
function ContainerLeft() {
  if (targetContainer) {
    return getTargetContainerLeft();
  }
  return 0;
}
function ContainerRight() {
  if (targetContainer) {
    return getBodyScrollLeft2() + getTargetContainerLeft() + getTargetContainerWidth();
  }
  return getBodyScrollLeft2() + getViewPortWidth();
}
function ContainerBottom() {
  if (targetContainer) {
    return getBodyScrollTop2() + getTargetContainerTop() + getTargetContainerHeight();
  }
  return getBodyScrollTop2() + getViewPortHeight();
}
function getBodyScrollTop2() {
  return parentDocument2.documentElement.scrollTop || parentDocument2.body.scrollTop;
}
function getBodyScrollLeft2() {
  return parentDocument2.documentElement.scrollLeft || parentDocument2.body.scrollLeft;
}
function getViewPortHeight() {
  return window.innerHeight;
}
function getViewPortWidth() {
  var windowWidth = window.innerWidth;
  var documentReact = document.documentElement.getBoundingClientRect();
  var offsetWidth = isNullOrUndefined(document.documentElement) ? 0 : documentReact.width;
  return windowWidth - (windowWidth - offsetWidth);
}

// node_modules/@syncfusion/ej2-popups/src/popup/popup.js
var __extends8 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate8 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var PositionData = (
  /** @class */
  function(_super) {
    __extends8(PositionData2, _super);
    function PositionData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate8([
      Property("left")
    ], PositionData2.prototype, "X", void 0);
    __decorate8([
      Property("top")
    ], PositionData2.prototype, "Y", void 0);
    return PositionData2;
  }(ChildProperty)
);
var CLASSNAMES = {
  ROOT: "e-popup",
  RTL: "e-rtl",
  OPEN: "e-popup-open",
  CLOSE: "e-popup-close"
};
var Popup = (
  /** @class */
  function(_super) {
    __extends8(Popup2, _super);
    function Popup2(element2, options) {
      return _super.call(this, options, element2) || this;
    }
    Popup2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(newProp.width) });
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "zIndex":
            setStyleAttribute(this.element, { "zIndex": newProp.zIndex });
            break;
          case "enableRtl":
            this.setEnableRtl();
            break;
          case "position":
          case "relateTo":
            this.refreshPosition();
            break;
          case "offsetX":
            var x = newProp.offsetX - oldProp.offsetX;
            this.element.style.left = (parseInt(this.element.style.left, 10) + x).toString() + "px";
            break;
          case "offsetY":
            var y = newProp.offsetY - oldProp.offsetY;
            this.element.style.top = (parseInt(this.element.style.top, 10) + y).toString() + "px";
            break;
          case "content":
            this.setContent();
            break;
          case "actionOnScroll":
            if (newProp.actionOnScroll !== "none") {
              this.wireScrollEvents();
            } else {
              this.unwireScrollEvents();
            }
            break;
        }
      }
    };
    Popup2.prototype.getModuleName = function() {
      return "popup";
    };
    Popup2.prototype.resolveCollision = function() {
      this.checkCollision();
    };
    Popup2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Popup2.prototype.destroy = function() {
      this.element.classList.remove(CLASSNAMES.ROOT, CLASSNAMES.RTL, CLASSNAMES.OPEN, CLASSNAMES.CLOSE);
      this.unwireEvents();
      _super.prototype.destroy.call(this);
    };
    Popup2.prototype.render = function() {
      this.element.classList.add(CLASSNAMES.ROOT);
      var styles = {};
      if (this.zIndex !== 1e3) {
        styles.zIndex = this.zIndex;
      }
      if (this.width !== "auto") {
        styles.width = formatUnit(this.width);
      }
      if (this.height !== "auto") {
        styles.height = formatUnit(this.height);
      }
      setStyleAttribute(this.element, styles);
      this.fixedParent = false;
      this.setEnableRtl();
      this.setContent();
    };
    Popup2.prototype.wireEvents = function() {
      if (Browser.isDevice) {
        EventHandler.add(window, "orientationchange", this.orientationOnChange, this);
      }
      if (this.actionOnScroll !== "none") {
        this.wireScrollEvents();
      }
    };
    Popup2.prototype.wireScrollEvents = function() {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_1 = _a[_i];
          EventHandler.add(parent_1, "scroll", this.scrollRefresh, this);
        }
      }
    };
    Popup2.prototype.unwireEvents = function() {
      if (Browser.isDevice) {
        EventHandler.remove(window, "orientationchange", this.orientationOnChange);
      }
      if (this.actionOnScroll !== "none") {
        this.unwireScrollEvents();
      }
    };
    Popup2.prototype.unwireScrollEvents = function() {
      if (this.getRelateToElement()) {
        for (var _i = 0, _a = this.getScrollableParent(this.getRelateToElement()); _i < _a.length; _i++) {
          var parent_2 = _a[_i];
          EventHandler.remove(parent_2, "scroll", this.scrollRefresh);
        }
      }
    };
    Popup2.prototype.getRelateToElement = function() {
      var relateToElement = this.relateTo === "" || isNullOrUndefined(this.relateTo) ? document.body : this.relateTo;
      this.setProperties({ relateTo: relateToElement }, true);
      return typeof this.relateTo === "string" ? document.querySelector(this.relateTo) : this.relateTo;
    };
    Popup2.prototype.scrollRefresh = function(e) {
      if (this.actionOnScroll === "reposition") {
        if (!isNullOrUndefined(this.element) && !(this.element.offsetParent === e.target || this.element.offsetParent && this.element.offsetParent.tagName === "BODY" && e.target.parentElement == null)) {
          this.refreshPosition();
        }
      } else if (this.actionOnScroll === "hide") {
        this.hide();
      }
      if (this.actionOnScroll !== "none") {
        if (this.getRelateToElement()) {
          var targetVisible = this.isElementOnViewport(this.getRelateToElement(), e.target);
          if (!targetVisible && !this.targetInvisibleStatus) {
            this.trigger("targetExitViewport");
            this.targetInvisibleStatus = true;
          } else if (targetVisible) {
            this.targetInvisibleStatus = false;
          }
        }
      }
    };
    Popup2.prototype.isElementOnViewport = function(relateToElement, scrollElement) {
      var scrollParents = this.getScrollableParent(relateToElement);
      for (var parent_3 = 0; parent_3 < scrollParents.length; parent_3++) {
        if (this.isElementVisible(relateToElement, scrollParents[parent_3])) {
          continue;
        } else {
          return false;
        }
      }
      return true;
    };
    Popup2.prototype.isElementVisible = function(relateToElement, scrollElement) {
      var rect = this.checkGetBoundingClientRect(relateToElement);
      if (!rect.height || !rect.width) {
        return false;
      }
      if (!isNullOrUndefined(this.checkGetBoundingClientRect(scrollElement))) {
        var parent_4 = scrollElement.getBoundingClientRect();
        return !(rect.bottom < parent_4.top) && (!(rect.bottom > parent_4.bottom) && (!(rect.right > parent_4.right) && !(rect.left < parent_4.left)));
      } else {
        var win = window;
        var windowView = {
          top: win.scrollY,
          left: win.scrollX,
          right: win.scrollX + win.outerWidth,
          bottom: win.scrollY + win.outerHeight
        };
        var off = calculatePosition(relateToElement);
        var ele = {
          top: off.top,
          left: off.left,
          right: off.left + rect.width,
          bottom: off.top + rect.height
        };
        var elementView = {
          top: windowView.bottom - ele.top,
          left: windowView.right - ele.left,
          bottom: ele.bottom - windowView.top,
          right: ele.right - windowView.left
        };
        return elementView.top > 0 && elementView.left > 0 && elementView.right > 0 && elementView.bottom > 0;
      }
    };
    Popup2.prototype.preRender = function() {
    };
    Popup2.prototype.setEnableRtl = function() {
      this.reposition();
      this.enableRtl ? this.element.classList.add(CLASSNAMES.RTL) : this.element.classList.remove(CLASSNAMES.RTL);
    };
    Popup2.prototype.setContent = function() {
      if (!isNullOrUndefined(this.content)) {
        this.element.innerHTML = "";
        if (typeof this.content === "string") {
          this.element.textContent = this.content;
        } else {
          var relateToElem = this.getRelateToElement();
          var props = this.content.props;
          if (!relateToElem.classList.contains("e-dropdown-btn") || isNullOrUndefined(props)) {
            this.element.appendChild(this.content);
          }
        }
      }
    };
    Popup2.prototype.orientationOnChange = function() {
      var _this = this;
      setTimeout(function() {
        _this.refreshPosition();
      }, 200);
    };
    Popup2.prototype.refreshPosition = function(target, collision) {
      if (!isNullOrUndefined(target)) {
        this.checkFixedParent(target);
      }
      this.reposition();
      if (!collision) {
        this.checkCollision();
      }
    };
    Popup2.prototype.reposition = function() {
      var pos;
      var position;
      var relateToElement = this.getRelateToElement();
      if (typeof this.position.X === "number" && typeof this.position.Y === "number") {
        pos = { left: this.position.X, top: this.position.Y };
      } else if (typeof this.position.X === "string" && typeof this.position.Y === "number" || typeof this.position.X === "number" && typeof this.position.Y === "string") {
        var parentDisplay = void 0;
        var display = this.element.style.display;
        this.element.style.display = "block";
        if (this.element.classList.contains("e-dlg-modal")) {
          parentDisplay = this.element.parentElement.style.display;
          this.element.parentElement.style.display = "block";
        }
        position = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);
        if (typeof this.position.X === "string") {
          pos = { left: position.left, top: this.position.Y };
        } else {
          pos = { left: this.position.X, top: position.top };
        }
        this.element.style.display = display;
        if (this.element.classList.contains("e-dlg-modal")) {
          this.element.parentElement.style.display = parentDisplay;
        }
      } else if (relateToElement) {
        var display = this.element.style.display;
        this.element.style.display = "block";
        pos = this.getAnchorPosition(relateToElement, this.element, this.position, this.offsetX, this.offsetY);
        this.element.style.display = display;
      } else {
        pos = { left: 0, top: 0 };
      }
      if (!isNullOrUndefined(pos)) {
        this.element.style.left = pos.left + "px";
        this.element.style.top = pos.top + "px";
      }
    };
    Popup2.prototype.checkGetBoundingClientRect = function(ele) {
      var eleRect;
      try {
        eleRect = ele.getBoundingClientRect();
        return eleRect;
      } catch (error) {
        return null;
      }
    };
    Popup2.prototype.getAnchorPosition = function(anchorEle, ele, position, offsetX, offsetY) {
      var eleRect = this.checkGetBoundingClientRect(ele);
      var anchorRect = this.checkGetBoundingClientRect(anchorEle);
      if (isNullOrUndefined(eleRect) || isNullOrUndefined(anchorRect)) {
        return null;
      }
      var anchor = anchorEle;
      var anchorPos = { left: 0, top: 0 };
      if (ele.offsetParent && ele.offsetParent.tagName === "BODY" && anchorEle.tagName === "BODY") {
        anchorPos = calculatePosition(anchorEle);
      } else {
        if (ele.classList.contains("e-dlg-modal") && anchor.tagName !== "BODY") {
          ele = ele.parentElement;
        }
        anchorPos = calculateRelativeBasedPosition(anchor, ele);
      }
      switch (position.X) {
        default:
        case "left":
          break;
        case "center":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.left += window.innerWidth / 2 - eleRect.width / 2;
          } else if (this.targetType === "container") {
            anchorPos.left += anchorRect.width / 2 - eleRect.width / 2;
          } else {
            anchorPos.left += anchorRect.width / 2;
          }
          break;
        case "right":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.left += window.innerWidth - eleRect.width;
          } else if (this.targetType === "container") {
            anchorPos.left += anchorRect.width - eleRect.width;
          } else {
            anchorPos.left += anchorRect.width;
          }
          break;
      }
      switch (position.Y) {
        default:
        case "top":
          break;
        case "center":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.top += window.innerHeight / 2 - eleRect.height / 2;
          } else if (this.targetType === "container") {
            anchorPos.top += anchorRect.height / 2 - eleRect.height / 2;
          } else {
            anchorPos.top += anchorRect.height / 2;
          }
          break;
        case "bottom":
          if (ele.classList.contains("e-dlg-modal") && anchor.tagName === "BODY" && this.targetType === "container") {
            anchorPos.top += window.innerHeight - eleRect.height;
          } else if (this.targetType === "container") {
            anchorPos.top += anchorRect.height - eleRect.height;
          } else {
            anchorPos.top += anchorRect.height;
          }
          break;
      }
      anchorPos.left += offsetX;
      anchorPos.top += offsetY;
      return anchorPos;
    };
    Popup2.prototype.callFlip = function(param) {
      var relateToElement = this.getRelateToElement();
      flip(this.element, relateToElement, this.offsetX, this.offsetY, this.position.X, this.position.Y, this.viewPortElement, param, this.fixedParent);
    };
    Popup2.prototype.callFit = function(param) {
      if (isCollide(this.element, this.viewPortElement).length !== 0) {
        if (isNullOrUndefined(this.viewPortElement)) {
          var data = fit(this.element, this.viewPortElement, param);
          if (param.X) {
            this.element.style.left = data.left + "px";
          }
          if (param.Y) {
            this.element.style.top = data.top + "px";
          }
        } else {
          var elementRect2 = this.checkGetBoundingClientRect(this.element);
          var viewPortRect = this.checkGetBoundingClientRect(this.viewPortElement);
          if (isNullOrUndefined(elementRect2) || isNullOrUndefined(viewPortRect)) {
            return null;
          }
          if (param && param.Y === true) {
            if (viewPortRect.top > elementRect2.top) {
              this.element.style.top = "0px";
            } else if (viewPortRect.bottom < elementRect2.bottom) {
              this.element.style.top = parseInt(this.element.style.top, 10) - (elementRect2.bottom - viewPortRect.bottom) + "px";
            }
          }
          if (param && param.X === true) {
            if (viewPortRect.right < elementRect2.right) {
              this.element.style.left = parseInt(this.element.style.left, 10) - (elementRect2.right - viewPortRect.right) + "px";
            } else if (viewPortRect.left > elementRect2.left) {
              this.element.style.left = parseInt(this.element.style.left, 10) + (viewPortRect.left - elementRect2.left) + "px";
            }
          }
        }
      }
    };
    Popup2.prototype.checkCollision = function() {
      var horz = this.collision.X;
      var vert = this.collision.Y;
      if (horz === "none" && vert === "none") {
        return;
      }
      if (horz === "flip" && vert === "flip") {
        this.callFlip({ X: true, Y: true });
      } else if (horz === "fit" && vert === "fit") {
        this.callFit({ X: true, Y: true });
      } else {
        if (horz === "flip") {
          this.callFlip({ X: true, Y: false });
        } else if (vert === "flip") {
          this.callFlip({ Y: true, X: false });
        }
        if (horz === "fit") {
          this.callFit({ X: true, Y: false });
        } else if (vert === "fit") {
          this.callFit({ X: false, Y: true });
        }
      }
    };
    Popup2.prototype.show = function(animationOptions, relativeElement) {
      var _this = this;
      this.wireEvents();
      if (this.zIndex === 1e3 || !isNullOrUndefined(relativeElement)) {
        var zIndexElement = isNullOrUndefined(relativeElement) ? this.element : relativeElement;
        this.zIndex = getZindexPartial(zIndexElement);
        setStyleAttribute(this.element, { "zIndex": this.zIndex });
      }
      animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === "object" ? animationOptions : this.showAnimation;
      if (this.collision.X !== "none" || this.collision.Y !== "none") {
        removeClass([this.element], CLASSNAMES.CLOSE);
        addClass([this.element], CLASSNAMES.OPEN);
        this.checkCollision();
        removeClass([this.element], CLASSNAMES.OPEN);
        addClass([this.element], CLASSNAMES.CLOSE);
      }
      if (!isNullOrUndefined(animationOptions)) {
        animationOptions.begin = function() {
          if (!_this.isDestroyed) {
            removeClass([_this.element], CLASSNAMES.CLOSE);
            addClass([_this.element], CLASSNAMES.OPEN);
          }
        };
        animationOptions.end = function() {
          if (!_this.isDestroyed) {
            _this.trigger("open");
          }
        };
        new Animation(animationOptions).animate(this.element);
      } else {
        removeClass([this.element], CLASSNAMES.CLOSE);
        addClass([this.element], CLASSNAMES.OPEN);
        this.trigger("open");
      }
    };
    Popup2.prototype.hide = function(animationOptions) {
      var _this = this;
      animationOptions = !isNullOrUndefined(animationOptions) && typeof animationOptions === "object" ? animationOptions : this.hideAnimation;
      if (!isNullOrUndefined(animationOptions)) {
        animationOptions.end = function() {
          if (!_this.isDestroyed) {
            removeClass([_this.element], CLASSNAMES.OPEN);
            addClass([_this.element], CLASSNAMES.CLOSE);
            _this.trigger("close");
          }
        };
        new Animation(animationOptions).animate(this.element);
      } else {
        removeClass([this.element], CLASSNAMES.OPEN);
        addClass([this.element], CLASSNAMES.CLOSE);
        this.trigger("close");
      }
      this.unwireEvents();
    };
    Popup2.prototype.getScrollableParent = function(element2) {
      this.checkFixedParent(element2);
      return getScrollableParent(element2, this.fixedParent);
    };
    Popup2.prototype.checkFixedParent = function(element2) {
      var parent = element2.parentElement;
      while (parent && parent.tagName !== "HTML") {
        var parentStyle = getComputedStyle(parent);
        if (parentStyle.position === "fixed" && !isNullOrUndefined(this.element) && this.element.offsetParent && this.element.offsetParent.tagName === "BODY") {
          this.element.style.top = window.scrollY > parseInt(this.element.style.top) ? formatUnit(window.scrollY - parseInt(this.element.style.top)) : formatUnit(parseInt(this.element.style.top) - window.scrollY);
          this.element.style.position = "fixed";
          this.fixedParent = true;
        }
        parent = parent.parentElement;
        if (!isNullOrUndefined(this.element) && isNullOrUndefined(this.element.offsetParent) && parentStyle.position === "fixed" && this.element.style.position === "fixed") {
          this.fixedParent = true;
        }
      }
    };
    __decorate8([
      Property("auto")
    ], Popup2.prototype, "height", void 0);
    __decorate8([
      Property("auto")
    ], Popup2.prototype, "width", void 0);
    __decorate8([
      Property(null)
    ], Popup2.prototype, "content", void 0);
    __decorate8([
      Property("container")
    ], Popup2.prototype, "targetType", void 0);
    __decorate8([
      Property(null)
    ], Popup2.prototype, "viewPortElement", void 0);
    __decorate8([
      Property({ X: "none", Y: "none" })
    ], Popup2.prototype, "collision", void 0);
    __decorate8([
      Property("")
    ], Popup2.prototype, "relateTo", void 0);
    __decorate8([
      Complex({}, PositionData)
    ], Popup2.prototype, "position", void 0);
    __decorate8([
      Property(0)
    ], Popup2.prototype, "offsetX", void 0);
    __decorate8([
      Property(0)
    ], Popup2.prototype, "offsetY", void 0);
    __decorate8([
      Property(1e3)
    ], Popup2.prototype, "zIndex", void 0);
    __decorate8([
      Property(false)
    ], Popup2.prototype, "enableRtl", void 0);
    __decorate8([
      Property("reposition")
    ], Popup2.prototype, "actionOnScroll", void 0);
    __decorate8([
      Property(null)
    ], Popup2.prototype, "showAnimation", void 0);
    __decorate8([
      Property(null)
    ], Popup2.prototype, "hideAnimation", void 0);
    __decorate8([
      Event2()
    ], Popup2.prototype, "open", void 0);
    __decorate8([
      Event2()
    ], Popup2.prototype, "close", void 0);
    __decorate8([
      Event2()
    ], Popup2.prototype, "targetExitViewport", void 0);
    Popup2 = __decorate8([
      NotifyPropertyChanges
    ], Popup2);
    return Popup2;
  }(Component)
);
function getScrollableParent(element2, fixedParent2) {
  var eleStyle = getComputedStyle(element2);
  var scrollParents = [];
  var overflowRegex = /(auto|scroll)/;
  var parent = element2.parentElement;
  while (parent && parent.tagName !== "HTML") {
    var parentStyle = getComputedStyle(parent);
    if (!(eleStyle.position === "absolute" && parentStyle.position === "static") && overflowRegex.test(parentStyle.overflow + parentStyle.overflowY + parentStyle.overflowX)) {
      scrollParents.push(parent);
    }
    parent = parent.parentElement;
  }
  if (!fixedParent2) {
    scrollParents.push(document);
  }
  return scrollParents;
}
function getZindexPartial(element2) {
  var parent = element2.parentElement;
  var parentZindex = [];
  while (parent) {
    if (parent.tagName !== "BODY") {
      var index = document.defaultView.getComputedStyle(parent, null).getPropertyValue("z-index");
      var position = document.defaultView.getComputedStyle(parent, null).getPropertyValue("position");
      if (index !== "auto" && position !== "static") {
        parentZindex.push(index);
      }
      parent = parent.parentElement;
    } else {
      break;
    }
  }
  var childrenZindex = [];
  for (var i = 0; i < document.body.children.length; i++) {
    if (!element2.isEqualNode(document.body.children[i])) {
      var index = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("z-index");
      var position = document.defaultView.getComputedStyle(document.body.children[i], null).getPropertyValue("position");
      if (index !== "auto" && position !== "static") {
        childrenZindex.push(index);
      }
    }
  }
  childrenZindex.push("999");
  var siblingsZindex = [];
  if (!isNullOrUndefined(element2.parentElement) && element2.parentElement.tagName !== "BODY") {
    var childNodes = [].slice.call(element2.parentElement.children);
    for (var i = 0; i < childNodes.length; i++) {
      if (!element2.isEqualNode(childNodes[i])) {
        var index = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("z-index");
        var position = document.defaultView.getComputedStyle(childNodes[i], null).getPropertyValue("position");
        if (index !== "auto" && position !== "static") {
          siblingsZindex.push(index);
        }
      }
    }
  }
  var finalValue = parentZindex.concat(childrenZindex, siblingsZindex);
  var currentZindexValue = Math.max.apply(Math, finalValue) + 1;
  return currentZindexValue > 2147483647 ? 2147483647 : currentZindexValue;
}

// node_modules/@syncfusion/ej2-buttons/src/common/common.js
function wrapperInitialize(createElement8, tag, type, element2, WRAPPER4, role) {
  var input = element2;
  if (element2.tagName === tag) {
    var ejInstance = getValue("ej2_instances", element2);
    input = createElement8("input", { attrs: { "type": type } });
    var props = ["change", "cssClass", "label", "labelPosition", "id"];
    for (var index = 0, len = element2.attributes.length; index < len; index++) {
      if (props.indexOf(element2.attributes[index].nodeName) === -1) {
        input.setAttribute(element2.attributes[index].nodeName, element2.attributes[index].nodeValue);
      }
    }
    attributes(element2, { "class": WRAPPER4, "role": role, "aria-checked": "false" });
    element2.appendChild(input);
    setValue("ej2_instances", ejInstance, input);
    deleteObject(element2, "ej2_instances");
  }
  return input;
}
function getTextNode(element2) {
  var node;
  var childnode = element2.childNodes;
  for (var i = 0; i < childnode.length; i++) {
    node = childnode[i];
    if (node.nodeType === 3) {
      return node;
    }
  }
  return null;
}
function destroy(ejInst, wrapper, tagName) {
  if (tagName === "INPUT") {
    wrapper.parentNode.insertBefore(ejInst.element, wrapper);
    detach(wrapper);
    ejInst.element.checked = false;
    ["name", "value", "disabled"].forEach(function(key) {
      ejInst.element.removeAttribute(key);
    });
  } else {
    ["role", "aria-checked", "class"].forEach(function(key) {
      wrapper.removeAttribute(key);
    });
    wrapper.innerHTML = "";
  }
}
function preRender(proxy2, control, wrapper, element2, moduleName) {
  element2 = wrapperInitialize(proxy2.createElement, control, "checkbox", element2, wrapper, moduleName);
  proxy2.element = element2;
  if (proxy2.element.getAttribute("type") !== "checkbox") {
    proxy2.element.setAttribute("type", "checkbox");
  }
  if (!proxy2.element.id) {
    proxy2.element.id = getUniqueID("e-" + moduleName);
  }
}
function createCheckBox(createElement8, enableRipple, options) {
  if (enableRipple === void 0) {
    enableRipple = false;
  }
  if (options === void 0) {
    options = {};
  }
  var wrapper = createElement8("div", { className: "e-checkbox-wrapper e-css" });
  if (options.cssClass) {
    addClass([wrapper], options.cssClass.split(" "));
  }
  if (options.enableRtl) {
    wrapper.classList.add("e-rtl");
  }
  if (enableRipple) {
    var rippleSpan = createElement8("span", { className: "e-ripple-container" });
    rippleEffect(rippleSpan, { isCenterRipple: true, duration: 400 });
    wrapper.appendChild(rippleSpan);
  }
  var frameSpan = createElement8("span", { className: "e-frame e-icons" });
  if (options.checked) {
    frameSpan.classList.add("e-check");
  }
  wrapper.appendChild(frameSpan);
  if (options.label) {
    var labelSpan = createElement8("span", { className: "e-label" });
    if (options.disableHtmlEncode) {
      labelSpan.textContent = options.label;
    } else {
      labelSpan.innerHTML = options.label;
    }
    wrapper.appendChild(labelSpan);
  }
  return wrapper;
}
function rippleMouseHandler(e, rippleSpan) {
  if (rippleSpan) {
    var event_1 = document.createEvent("MouseEvents");
    event_1.initEvent(e.type, false, true);
    rippleSpan.dispatchEvent(event_1);
  }
}
function setHiddenInput(proxy2, wrap) {
  if (proxy2.element.getAttribute("ejs-for")) {
    wrap.appendChild(proxy2.createElement("input", {
      attrs: { "name": proxy2.name || proxy2.element.name, "value": "false", "type": "hidden" }
    }));
  }
}

// node_modules/@syncfusion/ej2-buttons/src/button/button.js
var __extends9 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate9 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var buttonObserver = new Observer();
var cssClassName = {
  RTL: "e-rtl",
  BUTTON: "e-btn",
  PRIMARY: "e-primary",
  ICONBTN: "e-icon-btn"
};
var Button = (
  /** @class */
  function(_super) {
    __extends9(Button2, _super);
    function Button2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Button2.prototype.preRender = function() {
    };
    Button2.prototype.render = function() {
      this.initialize();
      this.removeRippleEffect = rippleEffect(this.element, { selector: "." + cssClassName.BUTTON });
      this.renderComplete();
    };
    Button2.prototype.initialize = function() {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (this.isPrimary) {
        this.element.classList.add(cssClassName.PRIMARY);
      }
      if (!isBlazor() || isBlazor() && this.getModuleName() !== "progress-btn") {
        if (this.content) {
          var tempContent = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(this.content) : this.content;
          this.element.innerHTML = tempContent;
        }
        this.setIconCss();
      }
      if (this.enableRtl) {
        this.element.classList.add(cssClassName.RTL);
      }
      if (this.disabled) {
        this.controlStatus(this.disabled);
      } else {
        this.wireEvents();
      }
    };
    Button2.prototype.controlStatus = function(disabled) {
      this.element.disabled = disabled;
    };
    Button2.prototype.setIconCss = function() {
      if (this.iconCss) {
        var span = this.createElement("span", { className: "e-btn-icon " + this.iconCss });
        if (!this.element.textContent.trim()) {
          this.element.classList.add(cssClassName.ICONBTN);
        } else {
          span.classList.add("e-icon-" + this.iconPosition.toLowerCase());
          if (this.iconPosition === "Top" || this.iconPosition === "Bottom") {
            this.element.classList.add("e-" + this.iconPosition.toLowerCase() + "-icon-btn");
          }
        }
        var node = this.element.childNodes[0];
        if (node && (this.iconPosition === "Left" || this.iconPosition === "Top")) {
          this.element.insertBefore(span, node);
        } else {
          this.element.appendChild(span);
        }
      }
    };
    Button2.prototype.wireEvents = function() {
      if (this.isToggle) {
        EventHandler.add(this.element, "click", this.btnClickHandler, this);
      }
    };
    Button2.prototype.unWireEvents = function() {
      if (this.isToggle) {
        EventHandler.remove(this.element, "click", this.btnClickHandler);
      }
    };
    Button2.prototype.btnClickHandler = function() {
      if (this.element.classList.contains("e-active")) {
        this.element.classList.remove("e-active");
      } else {
        this.element.classList.add("e-active");
      }
    };
    Button2.prototype.destroy = function() {
      var classList2 = [
        cssClassName.PRIMARY,
        cssClassName.RTL,
        cssClassName.ICONBTN,
        "e-success",
        "e-info",
        "e-danger",
        "e-warning",
        "e-flat",
        "e-outline",
        "e-small",
        "e-bigger",
        "e-active",
        "e-round",
        "e-top-icon-btn",
        "e-bottom-icon-btn"
      ];
      if (this.cssClass) {
        classList2 = classList2.concat(this.cssClass.split(" "));
      }
      _super.prototype.destroy.call(this);
      removeClass([this.element], classList2);
      if (!this.element.getAttribute("class")) {
        this.element.removeAttribute("class");
      }
      if (this.disabled) {
        this.element.removeAttribute("disabled");
      }
      if (this.content) {
        this.element.innerHTML = this.element.innerHTML.replace(this.content, "");
      }
      var span = this.element.querySelector("span.e-btn-icon");
      if (span) {
        detach(span);
      }
      this.unWireEvents();
      if (isRippleEnabled) {
        this.removeRippleEffect();
      }
    };
    Button2.prototype.getModuleName = function() {
      return "btn";
    };
    Button2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Button2.Inject = function() {
    };
    Button2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var span = this.element.querySelector("span.e-btn-icon");
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "isPrimary":
            if (newProp.isPrimary) {
              this.element.classList.add(cssClassName.PRIMARY);
            } else {
              this.element.classList.remove(cssClassName.PRIMARY);
            }
            break;
          case "disabled":
            this.controlStatus(newProp.disabled);
            break;
          case "iconCss": {
            if (span) {
              if (newProp.iconCss) {
                span.className = "e-btn-icon " + newProp.iconCss;
                if (this.element.textContent.trim()) {
                  if (this.iconPosition === "Left") {
                    span.classList.add("e-icon-left");
                  } else {
                    span.classList.add("e-icon-right");
                  }
                }
              } else {
                detach(span);
              }
            } else {
              this.setIconCss();
            }
            break;
          }
          case "iconPosition":
            removeClass([this.element], ["e-top-icon-btn", "e-bottom-icon-btn"]);
            span = this.element.querySelector("span.e-btn-icon");
            if (span) {
              detach(span);
            }
            this.setIconCss();
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.element], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([this.element], newProp.cssClass.split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              this.element.classList.add(cssClassName.RTL);
            } else {
              this.element.classList.remove(cssClassName.RTL);
            }
            break;
          case "content": {
            var node = getTextNode(this.element);
            if (!node) {
              this.element.classList.remove(cssClassName.ICONBTN);
            }
            if (!isBlazor() || isBlazor() && !this.isServerRendered && this.getModuleName() !== "progress-btn") {
              if (this.enableHtmlSanitizer) {
                newProp.content = SanitizeHtmlHelper.sanitize(newProp.content);
              }
              this.element.innerHTML = newProp.content;
              this.setIconCss();
            }
            break;
          }
          case "isToggle":
            if (newProp.isToggle) {
              EventHandler.add(this.element, "click", this.btnClickHandler, this);
            } else {
              EventHandler.remove(this.element, "click", this.btnClickHandler);
              removeClass([this.element], ["e-active"]);
            }
            break;
        }
      }
    };
    Button2.prototype.click = function() {
      this.element.click();
    };
    Button2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate9([
      Property("Left")
    ], Button2.prototype, "iconPosition", void 0);
    __decorate9([
      Property("")
    ], Button2.prototype, "iconCss", void 0);
    __decorate9([
      Property(false)
    ], Button2.prototype, "disabled", void 0);
    __decorate9([
      Property(false)
    ], Button2.prototype, "isPrimary", void 0);
    __decorate9([
      Property("")
    ], Button2.prototype, "cssClass", void 0);
    __decorate9([
      Property("")
    ], Button2.prototype, "content", void 0);
    __decorate9([
      Property(false)
    ], Button2.prototype, "isToggle", void 0);
    __decorate9([
      Property()
    ], Button2.prototype, "locale", void 0);
    __decorate9([
      Property(false)
    ], Button2.prototype, "enableHtmlSanitizer", void 0);
    __decorate9([
      Event2()
    ], Button2.prototype, "created", void 0);
    Button2 = __decorate9([
      NotifyPropertyChanges
    ], Button2);
    return Button2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/check-box/check-box.js
var __extends10 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate10 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CHECK = "e-check";
var DISABLED3 = "e-checkbox-disabled";
var FRAME = "e-frame";
var INDETERMINATE = "e-stop";
var LABEL = "e-label";
var RIPPLE = "e-ripple-container";
var RIPPLECHECK = "e-ripple-check";
var RIPPLEINDETERMINATE = "e-ripple-stop";
var RTL2 = "e-rtl";
var WRAPPER = "e-checkbox-wrapper";
var containerAttr = ["title", "class", "style", "disabled", "readonly", "name", "value"];
var CheckBox = (
  /** @class */
  function(_super) {
    __extends10(CheckBox2, _super);
    function CheckBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      _this.isMouseClick = false;
      _this.clickTriggered = false;
      return _this;
    }
    CheckBox2.prototype.changeState = function(state) {
      var ariaState;
      var rippleSpan;
      var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
      if (isRippleEnabled) {
        rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      }
      if (state === "check") {
        frameSpan.classList.remove(INDETERMINATE);
        frameSpan.classList.add(CHECK);
        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLEINDETERMINATE);
          rippleSpan.classList.add(RIPPLECHECK);
        }
        ariaState = "true";
        this.element.checked = true;
      } else if (state === "uncheck") {
        removeClass([frameSpan], [CHECK, INDETERMINATE]);
        if (rippleSpan) {
          removeClass([rippleSpan], [RIPPLECHECK, RIPPLEINDETERMINATE]);
        }
        ariaState = "false";
        this.element.checked = false;
      } else {
        frameSpan.classList.remove(CHECK);
        frameSpan.classList.add(INDETERMINATE);
        if (rippleSpan) {
          rippleSpan.classList.remove(RIPPLECHECK);
          rippleSpan.classList.add(RIPPLEINDETERMINATE);
        }
        ariaState = "mixed";
        this.element.indeterminate = true;
      }
      this.getWrapper().setAttribute("aria-checked", ariaState);
    };
    CheckBox2.prototype.clickHandler = function(event) {
      if (event.target.tagName === "INPUT" && this.clickTriggered) {
        event.stopPropagation();
        this.clickTriggered = false;
        return;
      }
      if (event.target.tagName === "SPAN" || event.target.tagName === "LABEL") {
        this.clickTriggered = true;
      }
      if (this.isMouseClick) {
        this.focusOutHandler();
        this.isMouseClick = false;
      }
      if (this.indeterminate) {
        this.changeState(this.checked ? "check" : "uncheck");
        this.indeterminate = false;
        this.element.indeterminate = false;
      } else if (this.checked) {
        this.changeState("uncheck");
        this.checked = false;
      } else {
        this.changeState("check");
        this.checked = true;
      }
      var changeEventArgs = { checked: this.updateVueArrayModel(false), event };
      this.trigger("change", changeEventArgs);
      event.stopPropagation();
    };
    CheckBox2.prototype.destroy = function() {
      var _this = this;
      var wrapper = this.getWrapper();
      _super.prototype.destroy.call(this);
      if (this.wrapper) {
        wrapper = this.wrapper;
        if (!this.disabled) {
          this.unWireEvents();
        }
        if (this.tagName === "INPUT") {
          if (this.getWrapper() && wrapper.parentNode) {
            wrapper.parentNode.insertBefore(this.element, wrapper);
          }
          detach(wrapper);
          this.element.checked = false;
          if (this.indeterminate) {
            this.element.indeterminate = false;
          }
          ["name", "value", "disabled"].forEach(function(key) {
            _this.element.removeAttribute(key);
          });
        } else {
          ["role", "aria-checked", "class"].forEach(function(key) {
            wrapper.removeAttribute(key);
          });
          wrapper.innerHTML = "";
        }
      }
    };
    CheckBox2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    CheckBox2.prototype.focusOutHandler = function() {
      var wrapper = this.getWrapper();
      if (wrapper) {
        wrapper.classList.remove("e-focus");
      }
      this.isFocused = false;
    };
    CheckBox2.prototype.getModuleName = function() {
      return "checkbox";
    };
    CheckBox2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked", "indeterminate"]);
    };
    CheckBox2.prototype.getWrapper = function() {
      if (this.element && this.element.parentElement) {
        return this.element.parentElement.parentElement;
      } else {
        return null;
      }
    };
    CheckBox2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      if (this.value) {
        this.element.setAttribute("value", this.value);
        if (this.isVue && typeof this.value === "boolean" && this.value === true) {
          this.setProperties({ "checked": true }, true);
        }
      }
      if (this.checked) {
        this.changeState("check");
      }
      if (this.indeterminate) {
        this.changeState();
      }
      if (this.disabled) {
        this.setDisabled();
      }
    };
    CheckBox2.prototype.initWrapper = function() {
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER)) {
        wrapper = this.createElement("div", {
          className: WRAPPER,
          attrs: { "role": "checkbox", "aria-checked": "false" }
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }
      var label = this.createElement("label", { attrs: { for: this.element.id } });
      var frameSpan = this.createElement("span", { className: "e-icons " + FRAME });
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        wrapper.classList.add(RTL2);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.split(" "));
      }
      wrapper.appendChild(label);
      label.appendChild(this.element);
      setHiddenInput(this, label);
      label.appendChild(frameSpan);
      if (isRippleEnabled) {
        var rippleSpan = this.createElement("span", { className: RIPPLE });
        if (this.labelPosition === "Before") {
          label.appendChild(rippleSpan);
        } else {
          label.insertBefore(rippleSpan, frameSpan);
        }
        rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });
      }
      if (this.label) {
        this.setText(this.label);
      }
    };
    CheckBox2.prototype.keyUpHandler = function() {
      if (this.isFocused) {
        this.getWrapper().classList.add("e-focus");
      }
    };
    CheckBox2.prototype.labelMouseDownHandler = function(e) {
      this.isMouseClick = true;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      rippleMouseHandler(e, rippleSpan);
    };
    CheckBox2.prototype.labelMouseUpHandler = function(e) {
      this.isMouseClick = true;
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE)[0];
      if (rippleSpan) {
        var rippleElem = rippleSpan.querySelectorAll(".e-ripple-element");
        for (var i = 0; i < rippleElem.length - 1; i++) {
          rippleSpan.removeChild(rippleSpan.childNodes[i]);
        }
        rippleMouseHandler(e, rippleSpan);
      }
    };
    CheckBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            this.indeterminate = false;
            this.element.indeterminate = false;
            this.changeState(newProp.checked ? "check" : "uncheck");
            break;
          case "indeterminate":
            if (newProp.indeterminate) {
              this.changeState();
            } else {
              this.element.indeterminate = false;
              this.changeState(this.checked ? "check" : "uncheck");
            }
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.wrapper = this.getWrapper();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED3);
              wrapper.setAttribute("aria-disabled", "false");
              this.wireEvents();
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL2);
            } else {
              wrapper.classList.remove(RTL2);
            }
            break;
          case "label":
            this.setText(newProp.label);
            break;
          case "labelPosition": {
            var label = wrapper.getElementsByClassName(LABEL)[0];
            var labelWrap = wrapper.getElementsByTagName("label")[0];
            detach(label);
            if (newProp.labelPosition === "After") {
              labelWrap.appendChild(label);
            } else {
              labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
            }
            break;
          }
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "value":
            if (this.isVue && typeof newProp.value === "object") {
              break;
            }
            this.element.setAttribute("value", newProp.value);
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToWrapper();
            break;
        }
      }
    };
    CheckBox2.prototype.preRender = function() {
      var element2 = this.element;
      this.tagName = this.element.tagName;
      element2 = wrapperInitialize(this.createElement, "EJS-CHECKBOX", "checkbox", element2, WRAPPER, "checkbox");
      this.element = element2;
      if (this.element.getAttribute("type") !== "checkbox") {
        this.element.setAttribute("type", "checkbox");
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    CheckBox2.prototype.render = function() {
      this.initWrapper();
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.updateHtmlAttributeToWrapper();
      this.updateVueArrayModel(true);
      this.renderComplete();
      this.wrapper = this.getWrapper();
    };
    CheckBox2.prototype.setDisabled = function() {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED3);
      wrapper.setAttribute("aria-disabled", "true");
    };
    CheckBox2.prototype.setText = function(text) {
      var wrapper = this.getWrapper();
      if (!wrapper) {
        return;
      }
      var label = wrapper.getElementsByClassName(LABEL)[0];
      if (label) {
        label.textContent = text;
      } else {
        text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
        label = this.createElement("span", { className: LABEL, innerHTML: text });
        var labelWrap = wrapper.getElementsByTagName("label")[0];
        if (this.labelPosition === "Before") {
          labelWrap.insertBefore(label, wrapper.getElementsByClassName(FRAME)[0]);
        } else {
          labelWrap.appendChild(label);
        }
      }
    };
    CheckBox2.prototype.changeHandler = function(e) {
      e.stopPropagation();
    };
    CheckBox2.prototype.formResetHandler = function() {
      this.checked = this.initialCheckedValue;
      this.element.checked = this.initialCheckedValue;
    };
    CheckBox2.prototype.unWireEvents = function() {
      var wrapper = this.wrapper;
      EventHandler.remove(wrapper, "click", this.clickHandler);
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      var label = wrapper.getElementsByTagName("label")[0];
      EventHandler.remove(label, "mousedown", this.labelMouseDownHandler);
      EventHandler.remove(label, "mouseup", this.labelMouseUpHandler);
      var formElem = closest(this.element, "form");
      if (formElem) {
        EventHandler.remove(formElem, "reset", this.formResetHandler);
      }
      if (this.tagName === "EJS-CHECKBOX") {
        EventHandler.remove(this.element, "change", this.changeHandler);
      }
    };
    CheckBox2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      EventHandler.add(wrapper, "click", this.clickHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      var label = wrapper.getElementsByTagName("label")[0];
      EventHandler.add(label, "mousedown", this.labelMouseDownHandler, this);
      EventHandler.add(label, "mouseup", this.labelMouseUpHandler, this);
      var formElem = closest(this.element, "form");
      if (formElem) {
        EventHandler.add(formElem, "reset", this.formResetHandler, this);
      }
      if (this.tagName === "EJS-CHECKBOX") {
        EventHandler.add(this.element, "change", this.changeHandler, this);
      }
    };
    CheckBox2.prototype.updateVueArrayModel = function(init) {
      if (this.isVue && typeof this.value === "object") {
        var value = this.element.value;
        if (value && this.value) {
          if (init) {
            for (var i = 0; i < this.value.length; i++) {
              if (value === this.value[i]) {
                this.changeState("check");
                this.setProperties({ "checked": true }, true);
              }
            }
          } else {
            var index = this.value.indexOf(value);
            if (this.checked) {
              if (index < 0) {
                this.value.push(value);
              }
            } else {
              if (index > -1) {
                this.value.splice(index, 1);
              }
            }
            return this.value;
          }
        }
      }
      return this.element.checked;
    };
    CheckBox2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr.indexOf(key) > -1) {
            var wrapper = this.getWrapper();
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes[key].split(" "));
            } else if (key === "title") {
              wrapper.setAttribute(key, this.htmlAttributes[key]);
            } else if (key === "style") {
              var frameSpan = this.getWrapper().getElementsByClassName(FRAME)[0];
              frameSpan.setAttribute(key, this.htmlAttributes[key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };
    CheckBox2.prototype.click = function() {
      this.element.click();
    };
    CheckBox2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate10([
      Event2()
    ], CheckBox2.prototype, "change", void 0);
    __decorate10([
      Event2()
    ], CheckBox2.prototype, "created", void 0);
    __decorate10([
      Property(false)
    ], CheckBox2.prototype, "checked", void 0);
    __decorate10([
      Property("")
    ], CheckBox2.prototype, "cssClass", void 0);
    __decorate10([
      Property(false)
    ], CheckBox2.prototype, "disabled", void 0);
    __decorate10([
      Property(false)
    ], CheckBox2.prototype, "indeterminate", void 0);
    __decorate10([
      Property("")
    ], CheckBox2.prototype, "label", void 0);
    __decorate10([
      Property("After")
    ], CheckBox2.prototype, "labelPosition", void 0);
    __decorate10([
      Property("")
    ], CheckBox2.prototype, "name", void 0);
    __decorate10([
      Property("")
    ], CheckBox2.prototype, "value", void 0);
    __decorate10([
      Property(false)
    ], CheckBox2.prototype, "enableHtmlSanitizer", void 0);
    __decorate10([
      Property({})
    ], CheckBox2.prototype, "htmlAttributes", void 0);
    CheckBox2 = __decorate10([
      NotifyPropertyChanges
    ], CheckBox2);
    return CheckBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/radio-button/radio-button.js
var __extends11 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate11 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var LABEL2 = "e-label";
var RIPPLE2 = "e-ripple-container";
var RTL3 = "e-rtl";
var WRAPPER2 = "e-radio-wrapper";
var ATTRIBUTES = ["title", "class", "style", "disabled", "readonly", "name", "value"];
var RadioButton = (
  /** @class */
  function(_super) {
    __extends11(RadioButton2, _super);
    function RadioButton2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      return _this;
    }
    RadioButton_1 = RadioButton2;
    RadioButton2.prototype.changeHandler = function(event) {
      this.checked = true;
      this.dataBind();
      var value = this.element.getAttribute("value");
      value = this.isVue && value ? this.element.value : this.value;
      this.trigger("change", { value, event });
      if (this.tagName === "EJS-RADIOBUTTON") {
        event.stopPropagation();
      }
    };
    RadioButton2.prototype.updateChange = function() {
      var input;
      var instance;
      var radioGrp = this.getRadioGroup();
      for (var i = 0; i < radioGrp.length; i++) {
        input = radioGrp[i];
        if (input !== this.element) {
          instance = getInstance(input, RadioButton_1);
          instance.checked = false;
          if (this.tagName === "EJS-RADIOBUTTON") {
            instance.angularValue = this.value;
          }
        }
      }
    };
    RadioButton2.prototype.destroy = function() {
      var _this = this;
      var radioWrap = this.wrapper;
      _super.prototype.destroy.call(this);
      if (radioWrap) {
        if (!this.disabled) {
          this.unWireEvents();
        }
        if (this.tagName === "INPUT") {
          if (radioWrap.parentNode) {
            radioWrap.parentNode.insertBefore(this.element, radioWrap);
          }
          detach(radioWrap);
          this.element.checked = false;
          ["name", "value", "disabled"].forEach(function(key) {
            _this.element.removeAttribute(key);
          });
        } else {
          ["role", "aria-checked", "class"].forEach(function(key) {
            radioWrap.removeAttribute(key);
          });
          radioWrap.innerHTML = "";
        }
      }
    };
    RadioButton2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    RadioButton2.prototype.focusOutHandler = function() {
      var label = this.getLabel();
      if (label) {
        label.classList.remove("e-focus");
      }
    };
    RadioButton2.prototype.getModuleName = function() {
      return "radio";
    };
    RadioButton2.prototype.getSelectedValue = function() {
      var input;
      var radioGrp = this.getRadioGroup();
      for (var i = 0, len = radioGrp.length; i < len; i++) {
        input = radioGrp[i];
        if (input.checked) {
          return input.value;
        }
      }
      return "";
    };
    RadioButton2.prototype.getRadioGroup = function() {
      return document.querySelectorAll('input.e-radio[name="' + this.element.getAttribute("name") + '"]');
    };
    RadioButton2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked"]);
    };
    RadioButton2.prototype.getWrapper = function() {
      if (this.element) {
        return this.element.parentElement;
      } else {
        return null;
      }
    };
    RadioButton2.prototype.getLabel = function() {
      if (this.element) {
        return this.element.nextElementSibling;
      } else {
        return null;
      }
    };
    RadioButton2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialCheckedValue)) {
        this.initialCheckedValue = this.checked;
      }
      this.initWrapper();
      this.updateHtmlAttribute();
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      var value = this.element.getAttribute("value");
      if (this.isVue && value && value === this.value) {
        this.checked = true;
      }
      if (this.isVue ? this.value && !value : this.value) {
        this.element.setAttribute("value", this.value);
      }
      if (this.checked) {
        this.element.checked = true;
      }
      if (this.disabled) {
        this.setDisabled();
      }
    };
    RadioButton2.prototype.initWrapper = function() {
      var rippleSpan;
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER2)) {
        wrapper = this.createElement("div", { className: WRAPPER2 });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }
      var label = this.createElement("label", { attrs: { for: this.element.id } });
      wrapper.appendChild(this.element);
      wrapper.appendChild(label);
      if (isRippleEnabled) {
        rippleSpan = this.createElement("span", { className: RIPPLE2 });
        label.appendChild(rippleSpan);
        rippleEffect(rippleSpan, {
          duration: 400,
          isCenterRipple: true
        });
      }
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        label.classList.add(RTL3);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.split(" "));
      }
      if (this.label) {
        this.setText(this.label);
      }
    };
    RadioButton2.prototype.keyUpHandler = function() {
      if (this.isFocused) {
        this.getLabel().classList.add("e-focus");
      }
    };
    RadioButton2.prototype.labelRippleHandler = function(e) {
      var ripple = this.getLabel().getElementsByClassName(RIPPLE2)[0];
      rippleMouseHandler(e, ripple);
    };
    RadioButton2.prototype.formResetHandler = function() {
      this.checked = this.initialCheckedValue;
      if (this.initialCheckedValue) {
        attributes(this.element, { "checked": "true" });
      }
    };
    RadioButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrap = this.getWrapper();
      var label = this.getLabel();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            if (newProp.checked) {
              this.updateChange();
            }
            this.element.checked = newProp.checked;
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              this.wireEvents();
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrap], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrap], newProp.cssClass.split(" "));
            }
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              label.classList.add(RTL3);
            } else {
              label.classList.remove(RTL3);
            }
            break;
          case "label":
            this.setText(newProp.label);
            break;
          case "labelPosition":
            if (newProp.labelPosition === "Before") {
              label.classList.add("e-right");
            } else {
              label.classList.remove("e-right");
            }
            break;
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "value":
            if (!isNullOrUndefined(this.htmlAttributes) && this.htmlAttributes.value) {
              break;
            }
            this.element.setAttribute("value", newProp.value);
            break;
          case "htmlAttributes":
            this.updateHtmlAttribute();
            break;
        }
      }
    };
    RadioButton2.prototype.preRender = function() {
      var element2 = this.element;
      this.formElement = closest(this.element, "form");
      this.tagName = this.element.tagName;
      element2 = wrapperInitialize(this.createElement, "EJS-RADIOBUTTON", "radio", element2, WRAPPER2, "radio");
      this.element = element2;
      if (this.element.getAttribute("type") !== "radio") {
        this.element.setAttribute("type", "radio");
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      if (this.tagName === "EJS-RADIOBUTTON") {
        var formControlName = this.element.getAttribute("formcontrolname");
        if (formControlName) {
          this.setProperties({ "name": formControlName }, true);
          this.element.setAttribute("name", formControlName);
        }
      }
    };
    RadioButton2.prototype.render = function() {
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.renderComplete();
      this.wrapper = this.getWrapper();
    };
    RadioButton2.prototype.setDisabled = function() {
      this.element.disabled = true;
    };
    RadioButton2.prototype.setText = function(text) {
      var label = this.getLabel();
      var textLabel = label.getElementsByClassName(LABEL2)[0];
      if (textLabel) {
        textLabel.textContent = text;
      } else {
        text = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(text) : text;
        textLabel = this.createElement("span", { className: LABEL2, innerHTML: text });
        label.appendChild(textLabel);
      }
      if (this.labelPosition === "Before") {
        this.getLabel().classList.add("e-right");
      } else {
        this.getLabel().classList.remove("e-right");
      }
    };
    RadioButton2.prototype.updateHtmlAttribute = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (ATTRIBUTES.indexOf(key) > -1) {
            var wrapper = this.element.parentElement;
            if (key === "class") {
              addClass([wrapper], this.htmlAttributes[key].split(" "));
            } else if (key === "title" || key === "style") {
              wrapper.setAttribute(key, this.htmlAttributes[key]);
            } else {
              this.element.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };
    RadioButton2.prototype.unWireEvents = function() {
      var label = this.wrapper;
      EventHandler.remove(this.element, "change", this.changeHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      var rippleLabel = label.getElementsByTagName("label")[0];
      if (rippleLabel) {
        EventHandler.remove(rippleLabel, "mousedown", this.labelRippleHandler);
        EventHandler.remove(rippleLabel, "mouseup", this.labelRippleHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    RadioButton2.prototype.wireEvents = function() {
      var label = this.getLabel();
      EventHandler.add(this.element, "change", this.changeHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      var rippleLabel = label.getElementsByClassName(LABEL2)[0];
      if (rippleLabel) {
        EventHandler.add(rippleLabel, "mousedown", this.labelRippleHandler, this);
        EventHandler.add(rippleLabel, "mouseup", this.labelRippleHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
    };
    RadioButton2.prototype.click = function() {
      this.element.click();
    };
    RadioButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    var RadioButton_1;
    __decorate11([
      Event2()
    ], RadioButton2.prototype, "change", void 0);
    __decorate11([
      Event2()
    ], RadioButton2.prototype, "created", void 0);
    __decorate11([
      Property(false)
    ], RadioButton2.prototype, "checked", void 0);
    __decorate11([
      Property("")
    ], RadioButton2.prototype, "cssClass", void 0);
    __decorate11([
      Property(false)
    ], RadioButton2.prototype, "disabled", void 0);
    __decorate11([
      Property("")
    ], RadioButton2.prototype, "label", void 0);
    __decorate11([
      Property("After")
    ], RadioButton2.prototype, "labelPosition", void 0);
    __decorate11([
      Property("")
    ], RadioButton2.prototype, "name", void 0);
    __decorate11([
      Property("")
    ], RadioButton2.prototype, "value", void 0);
    __decorate11([
      Property(false)
    ], RadioButton2.prototype, "enableHtmlSanitizer", void 0);
    __decorate11([
      Property({})
    ], RadioButton2.prototype, "htmlAttributes", void 0);
    RadioButton2 = RadioButton_1 = __decorate11([
      NotifyPropertyChanges
    ], RadioButton2);
    return RadioButton2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/switch/switch.js
var __extends12 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate12 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DISABLED4 = "e-switch-disabled";
var RIPPLE3 = "e-ripple-container";
var RIPPLE_CHECK = "e-ripple-check";
var RTL4 = "e-rtl";
var WRAPPER3 = "e-switch-wrapper";
var ACTIVE = "e-switch-active";
var Switch = (
  /** @class */
  function(_super) {
    __extends12(Switch2, _super);
    function Switch2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isFocused = false;
      _this.isDrag = false;
      return _this;
    }
    Switch2.prototype.changeState = function(state) {
      var ariaState;
      var rippleSpan;
      var wrapper = this.getWrapper();
      var bar = wrapper.querySelector(".e-switch-inner");
      var handle = wrapper.querySelector(".e-switch-handle");
      if (isRippleEnabled) {
        rippleSpan = wrapper.getElementsByClassName(RIPPLE3)[0];
      }
      if (state) {
        addClass([bar, handle], ACTIVE);
        ariaState = "true";
        this.element.checked = true;
        this.checked = true;
        if (rippleSpan) {
          addClass([rippleSpan], [RIPPLE_CHECK]);
        }
      } else {
        removeClass([bar, handle], ACTIVE);
        ariaState = "false";
        this.element.checked = false;
        this.checked = false;
        if (rippleSpan) {
          removeClass([rippleSpan], [RIPPLE_CHECK]);
        }
      }
      wrapper.setAttribute("aria-checked", ariaState);
    };
    Switch2.prototype.clickHandler = function(evt) {
      this.isDrag = false;
      this.focusOutHandler();
      this.changeState(!this.checked);
      this.element.focus();
      var changeEventArgs = { checked: this.element.checked, event: evt };
      this.trigger("change", changeEventArgs);
    };
    Switch2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (!this.disabled) {
        this.unWireEvents();
      }
      destroy(this, this.getWrapper(), this.tagName);
    };
    Switch2.prototype.focusHandler = function() {
      this.isFocused = true;
    };
    Switch2.prototype.focusOutHandler = function() {
      this.getWrapper().classList.remove("e-focus");
    };
    Switch2.prototype.getModuleName = function() {
      return "switch";
    };
    Switch2.prototype.getPersistData = function() {
      return this.addOnPersist(["checked"]);
    };
    Switch2.prototype.getWrapper = function() {
      return this.element.parentElement;
    };
    Switch2.prototype.initialize = function() {
      if (isNullOrUndefined(this.initialSwitchCheckedValue)) {
        this.initialSwitchCheckedValue = this.checked;
      }
      if (this.name) {
        this.element.setAttribute("name", this.name);
      }
      if (this.value) {
        this.element.setAttribute("value", this.value);
      }
      if (this.checked) {
        this.changeState(true);
      }
      if (this.disabled) {
        this.setDisabled();
      }
      if (this.onLabel || this.offLabel) {
        this.setLabel(this.onLabel, this.offLabel);
      }
    };
    Switch2.prototype.initWrapper = function() {
      var wrapper = this.element.parentElement;
      if (!wrapper.classList.contains(WRAPPER3)) {
        wrapper = this.createElement("div", {
          className: WRAPPER3,
          attrs: { "role": "switch", "aria-checked": "false" }
        });
        this.element.parentNode.insertBefore(wrapper, this.element);
      }
      var switchInner = this.createElement("span", { className: "e-switch-inner" });
      var onLabel = this.createElement("span", { className: "e-switch-on" });
      var offLabel = this.createElement("span", { className: "e-switch-off" });
      var handle = this.createElement("span", { className: "e-switch-handle" });
      wrapper.appendChild(this.element);
      setHiddenInput(this, wrapper);
      switchInner.appendChild(onLabel);
      switchInner.appendChild(offLabel);
      wrapper.appendChild(switchInner);
      wrapper.appendChild(handle);
      if (isRippleEnabled) {
        var rippleSpan = this.createElement("span", { className: RIPPLE3 });
        handle.appendChild(rippleSpan);
        rippleEffect(rippleSpan, { duration: 400, isCenterRipple: true });
      }
      wrapper.classList.add("e-wrapper");
      if (this.enableRtl) {
        wrapper.classList.add(RTL4);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.split(" "));
      }
    };
    Switch2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "checked":
            this.changeState(newProp.checked);
            break;
          case "disabled":
            if (newProp.disabled) {
              this.setDisabled();
              this.unWireEvents();
            } else {
              this.element.disabled = false;
              wrapper.classList.remove(DISABLED4);
              wrapper.setAttribute("aria-disabled", "false");
              this.wireEvents();
            }
            break;
          case "value":
            this.element.setAttribute("value", newProp.value);
            break;
          case "name":
            this.element.setAttribute("name", newProp.name);
            break;
          case "onLabel":
          case "offLabel":
            this.setLabel(newProp.onLabel, newProp.offLabel);
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              wrapper.classList.add(RTL4);
            } else {
              wrapper.classList.remove(RTL4);
            }
            break;
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([wrapper], oldProp.cssClass.split(" "));
            }
            if (newProp.cssClass) {
              addClass([wrapper], newProp.cssClass.split(" "));
            }
            break;
        }
      }
    };
    Switch2.prototype.preRender = function() {
      var element2 = this.element;
      this.formElement = closest(this.element, "form");
      this.tagName = this.element.tagName;
      preRender(this, "EJS-SWITCH", WRAPPER3, element2, this.getModuleName());
    };
    Switch2.prototype.render = function() {
      this.initWrapper();
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.renderComplete();
    };
    Switch2.prototype.rippleHandler = function(e) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE3)[0];
      rippleMouseHandler(e, rippleSpan);
      if (e.type === "mousedown" && e.currentTarget.classList.contains("e-switch-wrapper") && e.which === 1) {
        this.isDrag = true;
        this.isFocused = false;
      }
    };
    Switch2.prototype.rippleTouchHandler = function(eventType) {
      var rippleSpan = this.getWrapper().getElementsByClassName(RIPPLE3)[0];
      if (rippleSpan) {
        var event_1 = document.createEvent("MouseEvents");
        event_1.initEvent(eventType, false, true);
        rippleSpan.dispatchEvent(event_1);
      }
    };
    Switch2.prototype.setDisabled = function() {
      var wrapper = this.getWrapper();
      this.element.disabled = true;
      wrapper.classList.add(DISABLED4);
      wrapper.setAttribute("aria-disabled", "true");
    };
    Switch2.prototype.setLabel = function(onText, offText) {
      var wrapper = this.getWrapper();
      if (onText) {
        wrapper.querySelector(".e-switch-on").textContent = onText;
      }
      if (offText) {
        wrapper.querySelector(".e-switch-off").textContent = offText;
      }
    };
    Switch2.prototype.switchFocusHandler = function() {
      if (this.isFocused) {
        this.getWrapper().classList.add("e-focus");
      }
    };
    Switch2.prototype.switchMouseUp = function(e) {
      var target = e.target;
      if (e.type === "touchmove") {
        e.preventDefault();
      }
      if (e.type === "touchstart") {
        this.isDrag = true;
        this.rippleTouchHandler("mousedown");
      }
      if (this.isDrag) {
        if (e.type === "mouseup" && target.className.indexOf("e-switch") < 0 || e.type === "touchend") {
          this.clickHandler(e);
          this.rippleTouchHandler("mouseup");
          e.preventDefault();
        }
      }
    };
    Switch2.prototype.formResetHandler = function() {
      this.checked = this.initialSwitchCheckedValue;
      this.element.checked = this.initialSwitchCheckedValue;
    };
    Switch2.prototype.toggle = function() {
      this.clickHandler();
    };
    Switch2.prototype.wireEvents = function() {
      var wrapper = this.getWrapper();
      this.delegateMouseUpHandler = this.switchMouseUp.bind(this);
      this.delegateKeyUpHandler = this.switchFocusHandler.bind(this);
      EventHandler.add(wrapper, "click", this.clickHandler, this);
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
      EventHandler.add(this.element, "mouseup", this.delegateMouseUpHandler, this);
      EventHandler.add(this.element, "keyup", this.delegateKeyUpHandler, this);
      EventHandler.add(wrapper, "mousedown mouseup", this.rippleHandler, this);
      EventHandler.add(wrapper, "touchstart touchmove touchend", this.switchMouseUp, this);
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
    };
    Switch2.prototype.unWireEvents = function() {
      var wrapper = this.getWrapper();
      EventHandler.remove(wrapper, "click", this.clickHandler);
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "focusout", this.focusOutHandler);
      EventHandler.remove(this.element, "mouseup", this.delegateMouseUpHandler);
      EventHandler.remove(this.element, "keyup", this.delegateKeyUpHandler);
      EventHandler.remove(wrapper, "mousedown mouseup", this.rippleHandler);
      EventHandler.remove(wrapper, "touchstart touchmove touchend", this.switchMouseUp);
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    Switch2.prototype.click = function() {
      this.element.click();
    };
    Switch2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate12([
      Event2()
    ], Switch2.prototype, "change", void 0);
    __decorate12([
      Event2()
    ], Switch2.prototype, "created", void 0);
    __decorate12([
      Property(false)
    ], Switch2.prototype, "checked", void 0);
    __decorate12([
      Property("")
    ], Switch2.prototype, "cssClass", void 0);
    __decorate12([
      Property(false)
    ], Switch2.prototype, "disabled", void 0);
    __decorate12([
      Property("")
    ], Switch2.prototype, "name", void 0);
    __decorate12([
      Property("")
    ], Switch2.prototype, "onLabel", void 0);
    __decorate12([
      Property("")
    ], Switch2.prototype, "offLabel", void 0);
    __decorate12([
      Property("")
    ], Switch2.prototype, "value", void 0);
    Switch2 = __decorate12([
      NotifyPropertyChanges
    ], Switch2);
    return Switch2;
  }(Component)
);

// node_modules/@syncfusion/ej2-buttons/src/chips/chip-list.js
var __extends13 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate13 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var classNames = {
  chipSet: "e-chip-set",
  chip: "e-chip",
  avatar: "e-chip-avatar",
  text: "e-chip-text",
  icon: "e-chip-icon",
  delete: "e-chip-delete",
  deleteIcon: "e-dlt-btn",
  multiSelection: "e-multi-selection",
  singleSelection: "e-selection",
  active: "e-active",
  chipWrapper: "e-chip-avatar-wrap",
  iconWrapper: "e-chip-icon-wrap",
  focused: "e-focused",
  disabled: "e-disabled",
  rtl: "e-rtl"
};
var ChipList = (
  /** @class */
  function(_super) {
    __extends13(ChipList2, _super);
    function ChipList2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.multiSelectedChip = [];
      return _this;
    }
    ChipList2.prototype.preRender = function() {
    };
    ChipList2.prototype.chipType = function() {
      return this.chips && this.chips.length && this.chips.length > 0;
    };
    ChipList2.prototype.render = function() {
      var property;
      this.type = this.chips.length ? "chipset" : this.text || this.element.innerText ? "chip" : "chipset";
      this.setAttributes();
      this.createChip();
      this.setRtl();
      this.select(this.selectedChips, property);
      this.wireEvent(false);
      this.rippleFunction = rippleEffect(this.element, {
        selector: ".e-chip"
      });
      this.renderComplete();
    };
    ChipList2.prototype.createChip = function() {
      this.innerText = this.element.innerText && this.element.innerText.length !== 0 ? this.element.innerText.trim() : this.element.innerText;
      this.element.innerHTML = "";
      this.chipCreation(this.type === "chip" ? [this.innerText ? this.innerText : this.text] : this.chips);
    };
    ChipList2.prototype.setAttributes = function() {
      if (this.type === "chip") {
        this.element.tabIndex = 0;
        this.element.setAttribute("role", "option");
      } else {
        this.element.classList.add(classNames.chipSet);
        this.element.setAttribute("role", "listbox");
        if (this.selection === "Multiple") {
          this.element.classList.add(classNames.multiSelection);
          this.element.setAttribute("aria-multiselectable", "true");
        } else if (this.selection === "Single") {
          this.element.classList.add(classNames.singleSelection);
          this.element.setAttribute("aria-multiselectable", "false");
        } else {
          this.element.setAttribute("aria-multiselectable", "false");
        }
      }
    };
    ChipList2.prototype.setRtl = function() {
      this.element.classList[this.enableRtl ? "add" : "remove"](classNames.rtl);
    };
    ChipList2.prototype.chipCreation = function(data) {
      var chipListArray = [];
      for (var i = 0; i < data.length; i++) {
        var fieldsData = this.getFieldValues(data[i]);
        var chipArray = this.elementCreation(fieldsData);
        var className = (classNames.chip + " " + (fieldsData.enabled ? " " : classNames.disabled) + " " + (fieldsData.avatarIconCss || fieldsData.avatarText ? classNames.chipWrapper : fieldsData.leadingIconCss ? classNames.iconWrapper : " ") + " " + fieldsData.cssClass).split(" ").filter(function(css) {
          return css;
        });
        if (!this.chipType()) {
          chipListArray = chipArray;
          addClass([this.element], className);
          this.element.setAttribute("aria-label", fieldsData.text);
          if (fieldsData.value) {
            this.element.setAttribute("data-value", fieldsData.value.toString());
          }
        } else {
          var wrapper = this.createElement("DIV", {
            className: className.join(" "),
            attrs: {
              tabIndex: "0",
              role: "option",
              "aria-label": fieldsData.text,
              "aria-selected": "false"
            }
          });
          if (fieldsData.value) {
            wrapper.setAttribute("data-value", fieldsData.value.toString());
          }
          append(chipArray, wrapper);
          chipListArray.push(wrapper);
        }
      }
      append(chipListArray, this.element);
    };
    ChipList2.prototype.getFieldValues = function(data) {
      var chipEnabled = !(this.enabled.toString() === "false");
      var fields = {
        text: typeof data === "object" ? data.text ? data.text.toString() : this.text.toString() : !this.chipType() ? this.innerText ? this.innerText : this.text.toString() : data.toString(),
        cssClass: typeof data === "object" ? data.cssClass ? data.cssClass.toString() : this.cssClass.toString() : this.cssClass.toString(),
        leadingIconCss: typeof data === "object" ? data.leadingIconCss ? data.leadingIconCss.toString() : this.leadingIconCss.toString() : this.leadingIconCss.toString(),
        avatarIconCss: typeof data === "object" ? data.avatarIconCss ? data.avatarIconCss.toString() : this.avatarIconCss.toString() : this.avatarIconCss.toString(),
        avatarText: typeof data === "object" ? data.avatarText ? data.avatarText.toString() : this.avatarText.toString() : this.avatarText.toString(),
        trailingIconCss: typeof data === "object" ? data.trailingIconCss ? data.trailingIconCss.toString() : this.trailingIconCss.toString() : this.trailingIconCss.toString(),
        enabled: typeof data === "object" ? !isNullOrUndefined(data.enabled) ? data.enabled.toString() === "false" ? false : true : chipEnabled : chipEnabled,
        value: typeof data === "object" ? data.value ? data.value.toString() : null : null,
        leadingIconUrl: typeof data === "object" ? data.leadingIconUrl ? data.leadingIconUrl.toString() : this.leadingIconUrl : this.leadingIconUrl,
        trailingIconUrl: typeof data === "object" ? data.trailingIconUrl ? data.trailingIconUrl.toString() : this.trailingIconUrl : this.trailingIconUrl
      };
      return fields;
    };
    ChipList2.prototype.elementCreation = function(fields) {
      var chipArray = [];
      if (fields.avatarText || fields.avatarIconCss) {
        var className = (classNames.avatar + " " + fields.avatarIconCss).trim();
        var chipAvatarElement = this.createElement("span", { className });
        chipAvatarElement.innerText = fields.avatarText;
        chipArray.push(chipAvatarElement);
      } else if (fields.leadingIconCss) {
        var className = (classNames.icon + " " + fields.leadingIconCss).trim();
        var chipIconElement = this.createElement("span", { className });
        chipArray.push(chipIconElement);
      } else if (fields.leadingIconUrl) {
        var className = (classNames.avatar + " image-url").trim();
        var chipIconElement = this.createElement("span", { className });
        chipIconElement.style.backgroundImage = "url(" + fields.leadingIconUrl + ")";
        chipArray.push(chipIconElement);
      }
      var chipTextElement = this.createElement("span", { className: classNames.text });
      chipTextElement.innerText = fields.text;
      chipArray.push(chipTextElement);
      if (fields.trailingIconCss || this.chipType() && this.enableDelete) {
        var className = (classNames.delete + " " + (fields.trailingIconCss ? fields.trailingIconCss : classNames.deleteIcon)).trim();
        var chipdeleteElement = this.createElement("span", { className });
        chipArray.push(chipdeleteElement);
      } else if (fields.trailingIconUrl) {
        var className = "trailing-icon-url".trim();
        var chipIconsElement = this.createElement("span", { className });
        chipIconsElement.style.backgroundImage = "url(" + fields.trailingIconUrl + ")";
        chipArray.push(chipIconsElement);
      }
      return chipArray;
    };
    ChipList2.prototype.find = function(fields) {
      var chipData;
      var chipElement = fields instanceof HTMLElement ? fields : this.element.querySelectorAll("." + classNames.chip)[fields];
      if (chipElement && this.chipType()) {
        chipData = { text: void 0, index: void 0, element: void 0, data: void 0 };
        chipData.index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chipElement);
        chipData.text = typeof this.chips[chipData.index] === "object" ? this.chips[chipData.index].text ? this.chips[chipData.index].text.toString() : "" : this.chips[chipData.index].toString();
        chipData.data = this.chips[chipData.index];
        chipData.element = chipElement;
      }
      return chipData;
    };
    ChipList2.prototype.add = function(chipsData) {
      var _a;
      if (this.type !== "chip") {
        var fieldData = chipsData instanceof Array ? chipsData : [chipsData];
        (_a = this.chips).push.apply(_a, fieldData);
        this.chipCreation(fieldData);
      }
    };
    ChipList2.prototype.select = function(fields, selectionType) {
      this.onSelect(fields, false, selectionType);
    };
    ChipList2.prototype.multiSelection = function(newProp) {
      var items = this.element.querySelectorAll(".e-chip");
      for (var j = 0; j < newProp.length; j++) {
        if (typeof newProp[j] === "string") {
          for (var k = 0; k < items.length; k++) {
            if (newProp[j] !== k) {
              if (newProp[j] === items[k].attributes[5].value) {
                this.multiSelectedChip.push(k);
                break;
              }
            }
          }
        } else {
          this.multiSelectedChip.push(newProp[j]);
        }
      }
    };
    ChipList2.prototype.onSelect = function(fields, callFromProperty, selectionType) {
      var index;
      var chipNodes;
      var chipValue;
      if (this.chipType() && this.selection !== "None") {
        if (callFromProperty) {
          var chipElements = this.element.querySelectorAll("." + classNames.chip);
          for (var i = 0; i < chipElements.length; i++) {
            chipElements[i].setAttribute("aria-selected", "false");
            chipElements[i].classList.remove(classNames.active);
          }
        }
        var fieldData = fields instanceof Array ? fields : [fields];
        for (var i = 0; i < fieldData.length; i++) {
          var chipElement = fieldData[i] instanceof HTMLElement ? fieldData[i] : this.element.querySelectorAll("." + classNames.chip)[fieldData[i]];
          if (selectionType !== "index") {
            for (var j = 0; j < this.chips.length; j++) {
              chipNodes = this.element.querySelectorAll("." + classNames.chip)[j];
              var fieldsData = this.getFieldValues(this.chips[j]);
              if (selectionType === "value") {
                if (fieldsData.value !== null) {
                  chipValue = chipNodes.dataset.value;
                }
              } else if (selectionType === "text") {
                chipValue = chipNodes.innerText;
              }
              if (chipValue === fieldData[i].toString()) {
                index = j;
                chipElement = this.element.querySelectorAll("." + classNames.chip)[index];
              }
            }
          }
          if (chipElement instanceof HTMLElement) {
            this.selectionHandler(chipElement);
          }
        }
      }
    };
    ChipList2.prototype.remove = function(fields) {
      var _this = this;
      if (this.chipType()) {
        var fieldData = fields instanceof Array ? fields : [fields];
        var chipElements_1 = [];
        var chipCollection_1 = this.element.querySelectorAll("." + classNames.chip);
        fieldData.forEach(function(data) {
          var chipElement = data instanceof HTMLElement ? data : chipCollection_1[data];
          if (chipElement instanceof HTMLElement) {
            chipElements_1.push(chipElement);
          }
        });
        chipElements_1.forEach(function(element2) {
          var chips = _this.element.querySelectorAll("." + classNames.chip);
          var index = Array.prototype.slice.call(chips).indexOf(element2);
          _this.deleteHandler(element2, index);
        });
      }
    };
    ChipList2.prototype.getSelectedChips = function() {
      var selectedChips;
      if (this.chipType() && this.selection !== "None") {
        var selectedItems = { texts: [], Indexes: [], data: [], elements: [] };
        var items = this.element.querySelectorAll("." + classNames.active);
        for (var i = 0; i < items.length; i++) {
          var chip = items[i];
          selectedItems.elements.push(chip);
          var index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chip);
          selectedItems.Indexes.push(index);
          selectedItems.data.push(this.chips[index]);
          var text = typeof this.chips[index] === "object" ? this.chips[index].text ? this.chips[index].text.toString() : null : this.chips[index].toString();
          selectedItems.texts.push(text);
        }
        var selectedItem = {
          text: selectedItems.texts[0],
          index: selectedItems.Indexes[0],
          data: selectedItems.data[0],
          element: selectedItems.elements[0]
        };
        selectedChips = !isNullOrUndefined(selectedItem.index) ? this.selection === "Multiple" ? selectedItems : selectedItem : void 0;
      }
      return selectedChips;
    };
    ChipList2.prototype.wireEvent = function(unWireEvent) {
      if (!unWireEvent) {
        EventHandler.add(this.element, "click", this.clickHandler, this);
        EventHandler.add(this.element, "focusout", this.focusOutHandler, this);
        EventHandler.add(this.element, "keydown", this.keyHandler, this);
        EventHandler.add(this.element, "keyup", this.keyHandler, this);
      } else {
        EventHandler.remove(this.element, "click", this.clickHandler);
        EventHandler.remove(this.element, "focusout", this.focusOutHandler);
        EventHandler.remove(this.element, "keydown", this.keyHandler);
        EventHandler.remove(this.element, "keyup", this.keyHandler);
      }
    };
    ChipList2.prototype.keyHandler = function(e) {
      if (e.target.classList.contains(classNames.chip)) {
        if (e.type === "keydown") {
          if (e.keyCode === 13) {
            this.clickHandler(e);
          } else if (e.keyCode === 46 && this.enableDelete) {
            this.clickHandler(e, true);
          }
        } else if (e.keyCode === 9) {
          this.focusInHandler(e.target);
        }
      }
    };
    ChipList2.prototype.focusInHandler = function(chipWrapper) {
      if (!chipWrapper.classList.contains(classNames.focused)) {
        chipWrapper.classList.add(classNames.focused);
      }
    };
    ChipList2.prototype.focusOutHandler = function(e) {
      var chipWrapper = closest(e.target, "." + classNames.chip);
      var focusedElement = !this.chipType() ? this.element.classList.contains(classNames.focused) ? this.element : null : this.element.querySelector("." + classNames.focused);
      if (chipWrapper && focusedElement) {
        focusedElement.classList.remove(classNames.focused);
      }
    };
    ChipList2.prototype.clickHandler = function(e, del) {
      var _this = this;
      if (del === void 0) {
        del = false;
      }
      var chipWrapper = closest(e.target, "." + classNames.chip);
      if (chipWrapper) {
        var chipDataArgs = void 0;
        if (this.chipType()) {
          chipDataArgs = this.find(chipWrapper);
        } else {
          var index = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames.chip)).indexOf(chipWrapper);
          chipDataArgs = {
            text: this.innerText ? this.innerText : this.text,
            element: chipWrapper,
            data: this.text,
            index
          };
        }
        chipDataArgs.event = e;
        chipDataArgs.cancel = false;
        this.trigger("beforeClick", chipDataArgs, function(observedArgs) {
          if (!observedArgs.cancel) {
            _this.clickEventHandler(observedArgs.element, e, del);
          }
        });
      }
    };
    ChipList2.prototype.clickEventHandler = function(chipWrapper, e, del) {
      var _this = this;
      if (this.chipType()) {
        var chipData_1 = this.find(chipWrapper);
        chipData_1.event = e;
        var deleteElement = e.target.classList.contains(classNames.deleteIcon) ? e.target : del ? chipWrapper.querySelector("." + classNames.deleteIcon) : void 0;
        if (deleteElement && this.enableDelete) {
          chipData_1.cancel = false;
          var deletedItemArgs = chipData_1;
          this.trigger("delete", deletedItemArgs, function(observedArgs) {
            if (!observedArgs.cancel) {
              _this.deleteHandler(observedArgs.element, observedArgs.index);
              _this.selectionHandler(chipWrapper);
              chipData_1.selected = observedArgs.element.classList.contains(classNames.active);
              var selectedItemArgs2 = chipData_1;
              _this.trigger("click", selectedItemArgs2);
            }
          });
        } else if (this.selection !== "None") {
          this.selectionHandler(chipWrapper);
          chipData_1.selected = chipWrapper.classList.contains(classNames.active);
          var selectedItemArgs = chipData_1;
          this.trigger("click", selectedItemArgs);
        } else {
          this.focusInHandler(chipWrapper);
          var clickedItemArgs = chipData_1;
          this.trigger("click", clickedItemArgs);
        }
      } else {
        this.focusInHandler(chipWrapper);
        var clickedItemArgs = {
          text: this.innerText ? this.innerText : this.text,
          element: chipWrapper,
          data: this.text,
          event: e
        };
        this.trigger("click", clickedItemArgs);
      }
    };
    ChipList2.prototype.selectionHandler = function(chipWrapper) {
      if (this.selection === "Single") {
        var activeElement = this.element.querySelector("." + classNames.active);
        if (activeElement && activeElement !== chipWrapper) {
          activeElement.classList.remove(classNames.active);
          activeElement.setAttribute("aria-selected", "false");
        }
        this.setProperties({ selectedChips: null }, true);
      } else {
        this.setProperties({ selectedChips: [] }, true);
      }
      if (chipWrapper.classList.contains(classNames.active)) {
        chipWrapper.classList.remove(classNames.active);
        chipWrapper.setAttribute("aria-selected", "false");
      } else {
        chipWrapper.classList.add(classNames.active);
        chipWrapper.setAttribute("aria-selected", "true");
      }
      this.updateSelectedChips();
    };
    ChipList2.prototype.updateSelectedChips = function() {
      var chipListEle = this.element.querySelectorAll(".e-chip");
      var chipCollIndex = [];
      var chipCollValue = [];
      var chip = null;
      var value;
      for (var i = 0; i < chipListEle.length; i++) {
        var selectedEle = this.element.querySelectorAll(".e-chip")[i];
        if (selectedEle.getAttribute("aria-selected") === "true") {
          value = selectedEle.getAttribute("data-value");
          if (this.selection === "Single" && selectedEle.classList.contains("e-active")) {
            chip = value ? value : i;
            break;
          } else {
            chip = value ? chipCollValue.push(value) : chipCollIndex.push(i);
          }
        }
      }
      this.setProperties({ selectedChips: this.selection === "Single" ? chip : value ? chipCollValue : chipCollIndex }, true);
    };
    ChipList2.prototype.deleteHandler = function(chipWrapper, index) {
      var deletedChipData = this.find(chipWrapper);
      this.chips.splice(index, 1);
      this.setProperties({ chips: this.chips }, true);
      detach(chipWrapper);
      this.trigger("deleted", deletedChipData);
    };
    ChipList2.prototype.destroy = function() {
      removeClass([this.element], [
        classNames.chipSet,
        classNames.chip,
        classNames.rtl,
        classNames.multiSelection,
        classNames.singleSelection,
        classNames.disabled,
        classNames.chipWrapper,
        classNames.iconWrapper,
        classNames.active,
        classNames.focused
      ].concat(this.cssClass.toString().split(" ").filter(function(css) {
        return css;
      })));
      this.removeMultipleAttributes(["tabindex", "role", "aria-label", "aria-multiselectable"], this.element);
      this.wireEvent(true);
      this.rippleFunction();
      _super.prototype.destroy.call(this);
      this.element.innerHTML = "";
      this.element.innerText = this.innerText;
    };
    ChipList2.prototype.removeMultipleAttributes = function(attributes2, element2) {
      attributes2.forEach(function(attr) {
        element2.removeAttribute(attr);
      });
    };
    ChipList2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    ChipList2.prototype.getModuleName = function() {
      return "chip-list";
    };
    ChipList2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var property;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "chips":
          case "text":
          case "avatarText":
          case "avatarIconCss":
          case "leadingIconCss":
          case "trailingIconCss":
          case "selection":
          case "enableDelete":
          case "enabled":
            this.refresh();
            break;
          case "cssClass":
            if (!this.chipType()) {
              removeClass([this.element], oldProp.cssClass.toString().split(" ").filter(function(css) {
                return css;
              }));
              addClass([this.element], newProp.cssClass.toString().split(" ").filter(function(css) {
                return css;
              }));
            } else {
              this.refresh();
            }
            break;
          case "selectedChips":
            removeClass(this.element.querySelectorAll(".e-active"), "e-active");
            if (this.selection === "Multiple") {
              this.multiSelectedChip = [];
              this.multiSelection(newProp.selectedChips);
              this.onSelect(this.multiSelectedChip, true, property);
              this.updateSelectedChips();
            } else {
              this.onSelect(newProp.selectedChips, true, property);
            }
            break;
          case "enableRtl":
            this.setRtl();
            break;
        }
      }
    };
    __decorate13([
      Property([])
    ], ChipList2.prototype, "chips", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "text", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "avatarText", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "avatarIconCss", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "leadingIconCss", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "trailingIconCss", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "leadingIconUrl", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "trailingIconUrl", void 0);
    __decorate13([
      Property("")
    ], ChipList2.prototype, "cssClass", void 0);
    __decorate13([
      Property(true)
    ], ChipList2.prototype, "enabled", void 0);
    __decorate13([
      Property([])
    ], ChipList2.prototype, "selectedChips", void 0);
    __decorate13([
      Property("None")
    ], ChipList2.prototype, "selection", void 0);
    __decorate13([
      Property(false)
    ], ChipList2.prototype, "enableDelete", void 0);
    __decorate13([
      Event2()
    ], ChipList2.prototype, "created", void 0);
    __decorate13([
      Event2()
    ], ChipList2.prototype, "click", void 0);
    __decorate13([
      Event2()
    ], ChipList2.prototype, "beforeClick", void 0);
    __decorate13([
      Event2()
    ], ChipList2.prototype, "delete", void 0);
    __decorate13([
      Event2()
    ], ChipList2.prototype, "deleted", void 0);
    ChipList2 = __decorate13([
      NotifyPropertyChanges
    ], ChipList2);
    return ChipList2;
  }(Component)
);

// node_modules/@syncfusion/ej2-popups/src/common/resize.js
var elementClass = ["north-west", "north", "north-east", "west", "east", "south-west", "south", "south-east"];
var RESIZE_HANDLER = "e-resize-handle";
var FOCUSED_HANDLER = "e-focused-handle";
var DIALOG_RESIZABLE = "e-dlg-resizable";
var RESTRICT_LEFT = ["e-restrict-left"];
var RESIZE_WITHIN_VIEWPORT = "e-resize-viewport";
var dialogBorderResize = ["north", "west", "east", "south"];
var targetElement;
var selectedHandler;
var originalWidth = 0;
var originalHeight = 0;
var originalX = 0;
var originalY = 0;
var originalMouseX = 0;
var originalMouseY = 0;
var minHeight;
var maxHeight;
var minWidth;
var maxWidth;
var containerElement;
var resizeStart = null;
var resize = null;
var resizeEnd = null;
var resizeWestWidth;
var setLeft = true;
var previousWidth = 0;
var setWidth = true;
var proxy;
function createResize(args) {
  resizeStart = args.resizeBegin;
  resize = args.resizing;
  resizeEnd = args.resizeComplete;
  targetElement = getDOMElement(args.element);
  containerElement = getDOMElement(args.boundary);
  var directions = args.direction.split(" ");
  for (var i = 0; i < directions.length; i++) {
    if (dialogBorderResize.indexOf(directions[i]) >= 0 && directions[i]) {
      setBorderResizeElm(directions[i]);
    } else if (directions[i].trim() !== "") {
      var resizeHandler = createElement("div", { className: "e-icons " + RESIZE_HANDLER + " e-" + directions[i] });
      targetElement.appendChild(resizeHandler);
    }
  }
  minHeight = args.minHeight;
  minWidth = args.minWidth;
  maxWidth = args.maxWidth;
  maxHeight = args.maxHeight;
  if (args.proxy && args.proxy.element && args.proxy.element.classList.contains("e-dialog")) {
    wireEvents(args.proxy);
  } else {
    wireEvents();
  }
}
function setBorderResizeElm(direction) {
  calculateValues();
  var borderBottom = createElement("span", {
    attrs: {
      "unselectable": "on",
      "contenteditable": "false"
    }
  });
  borderBottom.setAttribute("class", "e-dialog-border-resize e-" + direction);
  if (direction === "south") {
    borderBottom.style.height = "2px";
    borderBottom.style.width = "100%";
    borderBottom.style.bottom = "0px";
    borderBottom.style.left = "0px";
  }
  if (direction === "north") {
    borderBottom.style.height = "2px";
    borderBottom.style.width = "100%";
    borderBottom.style.top = "0px";
    borderBottom.style.left = "0px";
  }
  if (direction === "east") {
    borderBottom.style.height = "100%";
    borderBottom.style.width = "2px";
    borderBottom.style.right = "0px";
    borderBottom.style.top = "0px";
  }
  if (direction === "west") {
    borderBottom.style.height = "100%";
    borderBottom.style.width = "2px";
    borderBottom.style.left = "0px";
    borderBottom.style.top = "0px";
  }
  targetElement.appendChild(borderBottom);
}
function getDOMElement(element2) {
  var domElement;
  if (!isNullOrUndefined(element2)) {
    if (typeof element2 === "string") {
      domElement = document.querySelector(element2);
    } else {
      domElement = element2;
    }
  }
  return domElement;
}
function wireEvents(args) {
  if (isNullOrUndefined(args)) {
    args = this;
  }
  var resizers = targetElement.querySelectorAll("." + RESIZE_HANDLER);
  for (var i = 0; i < resizers.length; i++) {
    selectedHandler = resizers[i];
    EventHandler.add(selectedHandler, "mousedown", onMouseDown, args);
    var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
    EventHandler.add(selectedHandler, eventName, onTouchStart, args);
  }
  var borderResizers = targetElement.querySelectorAll(".e-dialog-border-resize");
  if (!isNullOrUndefined(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      selectedHandler = borderResizers[i];
      EventHandler.add(selectedHandler, "mousedown", onMouseDown, args);
      var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
      EventHandler.add(selectedHandler, eventName, onTouchStart, args);
    }
  }
}
function getEventType(e) {
  return e.indexOf("mouse") > -1 ? "mouse" : "touch";
}
function onMouseDown(e) {
  e.preventDefault();
  targetElement = e.target.parentElement;
  calculateValues();
  originalMouseX = e.pageX;
  originalMouseY = e.pageY;
  e.target.classList.add(FOCUSED_HANDLER);
  if (!isNullOrUndefined(resizeStart)) {
    proxy = this;
    if (resizeStart(e, proxy) === true) {
      return;
    }
  }
  if (this.targetEle && targetElement && targetElement.querySelector("." + DIALOG_RESIZABLE)) {
    containerElement = this.target === "body" || "document.body" ? null : this.targetEle;
    maxWidth = this.targetEle.clientWidth;
    maxHeight = this.targetEle.clientHeight;
  }
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  EventHandler.add(target, "mousemove", onMouseMove, this);
  EventHandler.add(document, "mouseup", onMouseUp, this);
  for (var i = 0; i < RESTRICT_LEFT.length; i++) {
    if (targetElement.classList.contains(RESTRICT_LEFT[i])) {
      setLeft = false;
    } else {
      setLeft = true;
    }
  }
}
function onMouseUp(e) {
  var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
  var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  var eventName = Browser.info.name === "msie" ? "pointerdown" : "touchstart";
  EventHandler.remove(target, "mousemove", onMouseMove);
  EventHandler.remove(target, touchMoveEvent, onMouseMove);
  EventHandler.remove(target, eventName, onMouseMove);
  if (!isNullOrUndefined(document.body.querySelector("." + FOCUSED_HANDLER))) {
    document.body.querySelector("." + FOCUSED_HANDLER).classList.remove(FOCUSED_HANDLER);
  }
  if (!isNullOrUndefined(resizeEnd)) {
    proxy = this;
    resizeEnd(e, proxy);
  }
  EventHandler.remove(document, "mouseup", onMouseUp);
  EventHandler.remove(document, touchEndEvent, onMouseUp);
}
function calculateValues() {
  originalWidth = parseFloat(getComputedStyle(targetElement, null).getPropertyValue("width").replace("px", ""));
  originalHeight = parseFloat(getComputedStyle(targetElement, null).getPropertyValue("height").replace("px", ""));
  originalX = targetElement.getBoundingClientRect().left;
  originalY = targetElement.getBoundingClientRect().top;
}
function onTouchStart(e) {
  targetElement = e.target.parentElement;
  calculateValues();
  var coordinates = e.touches ? e.changedTouches[0] : e;
  originalMouseX = coordinates.pageX;
  originalMouseY = coordinates.pageY;
  if (!isNullOrUndefined(resizeStart)) {
    proxy = this;
    if (resizeStart(e, proxy) === true) {
      return;
    }
  }
  var touchMoveEvent = Browser.info.name === "msie" ? "pointermove" : "touchmove";
  var touchEndEvent = Browser.info.name === "msie" ? "pointerup" : "touchend";
  var target = isNullOrUndefined(containerElement) ? document : containerElement;
  EventHandler.add(target, touchMoveEvent, onMouseMove, this);
  EventHandler.add(document, touchEndEvent, onMouseUp);
}
function onMouseMove(e) {
  if (e.target.classList.contains(RESIZE_HANDLER) && e.target.classList.contains(FOCUSED_HANDLER)) {
    selectedHandler = e.target;
  } else if (!isNullOrUndefined(document.body.querySelector("." + FOCUSED_HANDLER))) {
    selectedHandler = document.body.querySelector("." + FOCUSED_HANDLER);
  }
  if (!isNullOrUndefined(selectedHandler)) {
    var resizeTowards = "";
    for (var i = 0; i < elementClass.length; i++) {
      if (selectedHandler.classList.contains("e-" + elementClass[i])) {
        resizeTowards = elementClass[i];
      }
    }
    if (!isNullOrUndefined(resize)) {
      proxy = this;
      resize(e, proxy);
    }
    switch (resizeTowards) {
      case "south":
        resizeSouth(e);
        break;
      case "north":
        resizeNorth(e);
        break;
      case "west":
        resizeWest(e);
        break;
      case "east":
        resizeEast(e);
        break;
      case "south-east":
        resizeSouth(e);
        resizeEast(e);
        break;
      case "south-west":
        resizeSouth(e);
        resizeWest(e);
        break;
      case "north-east":
        resizeNorth(e);
        resizeEast(e);
        break;
      case "north-west":
        resizeNorth(e);
        resizeWest(e);
        break;
      default:
        break;
    }
  }
}
function getClientRectValues(element2) {
  return element2.getBoundingClientRect();
}
function resizeSouth(e) {
  var documentHeight = document.documentElement.clientHeight;
  var calculateValue = false;
  var coordinates = e.touches ? e.changedTouches[0] : e;
  var currentpageY = coordinates.pageY;
  var targetRectValues = getClientRectValues(targetElement);
  var containerRectValues;
  if (!isNullOrUndefined(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }
  if (!isNullOrUndefined(containerElement)) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && (documentHeight - currentpageY >= 0 || targetRectValues.top < 0)) {
    calculateValue = true;
  }
  var calculatedHeight = originalHeight + (currentpageY - originalMouseY);
  calculatedHeight = calculatedHeight > minHeight ? calculatedHeight : minHeight;
  var containerTop = 0;
  if (!isNullOrUndefined(containerElement)) {
    containerTop = containerRectValues.top;
  }
  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetHeight - containerElement.clientHeight;
  var topWithoutborder = targetRectValues.top - containerTop - borderValue / 2;
  topWithoutborder = topWithoutborder < 0 ? 0 : topWithoutborder;
  if (targetRectValues.top > 0 && topWithoutborder + calculatedHeight > maxHeight) {
    calculateValue = false;
    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }
    targetElement.style.height = maxHeight - parseInt(topWithoutborder.toString(), 10) + "px";
    return;
  }
  var targetTop = 0;
  if (calculateValue) {
    if (targetRectValues.top < 0 && documentHeight + (targetRectValues.height + targetRectValues.top) > 0) {
      targetTop = targetRectValues.top;
      if (calculatedHeight + targetTop <= 30) {
        calculatedHeight = targetRectValues.height - (targetRectValues.height + targetRectValues.top) + 30;
      }
    }
    if (calculatedHeight + targetRectValues.top >= maxHeight) {
      targetElement.style.height = targetRectValues.height + (documentHeight - (targetRectValues.height + targetRectValues.top)) + "px";
    }
    var calculatedTop = isNullOrUndefined(containerElement) ? targetTop : topWithoutborder;
    if (calculatedHeight >= minHeight && calculatedHeight + calculatedTop <= maxHeight) {
      targetElement.style.height = calculatedHeight + "px";
    }
  }
}
function resizeNorth(e) {
  var calculateValue = false;
  var boundaryRectValues;
  var pageY = getEventType(e.type) === "mouse" ? e.pageY : e.touches[0].pageY;
  var targetRectValues = getClientRectValues(targetElement);
  if (!isNullOrUndefined(containerElement)) {
    boundaryRectValues = getClientRectValues(containerElement);
  }
  if (!isNullOrUndefined(containerElement) && targetRectValues.top - boundaryRectValues.top > 0) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && pageY > 0) {
    calculateValue = true;
  }
  var currentHeight = originalHeight - (pageY - originalMouseY);
  if (calculateValue) {
    if (currentHeight >= minHeight && currentHeight <= maxHeight) {
      var containerTop = 0;
      if (!isNullOrUndefined(containerElement)) {
        containerTop = boundaryRectValues.top;
      }
      var top_1 = originalY - containerTop + (pageY - originalMouseY);
      top_1 = top_1 > 0 ? top_1 : 1;
      targetElement.style.height = currentHeight + "px";
      targetElement.style.top = top_1 + "px";
    }
  }
}
function resizeWest(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var rectValues;
  if (!isNullOrUndefined(containerElement)) {
    rectValues = getClientRectValues(containerElement);
  }
  var pageX = getEventType(e.type) === "mouse" ? e.pageX : e.touches[0].pageX;
  var targetRectValues = getClientRectValues(targetElement);
  var borderValue = isNullOrUndefined(containerElement) ? 0 : containerElement.offsetWidth - containerElement.clientWidth;
  var left = isNullOrUndefined(containerElement) ? 0 : rectValues.left;
  var containerWidth = isNullOrUndefined(containerElement) ? 0 : rectValues.width;
  if (isNullOrUndefined(resizeWestWidth)) {
    if (!isNullOrUndefined(containerElement)) {
      resizeWestWidth = targetRectValues.left - left - borderValue / 2 + targetRectValues.width;
      resizeWestWidth = resizeWestWidth + (containerWidth - borderValue - resizeWestWidth);
    } else {
      resizeWestWidth = documentWidth;
    }
  }
  if (!isNullOrUndefined(containerElement) && Math.floor(targetRectValues.left - rectValues.left + targetRectValues.width + (rectValues.right - targetRectValues.right)) - borderValue <= maxWidth) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && pageX >= 0) {
    calculateValue = true;
  }
  var calculatedWidth = originalWidth - (pageX - originalMouseX);
  if (setLeft) {
    calculatedWidth = calculatedWidth > resizeWestWidth ? resizeWestWidth : calculatedWidth;
  }
  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      var containerLeft = 0;
      if (!isNullOrUndefined(containerElement)) {
        containerLeft = rectValues.left;
      }
      var left_1 = originalX - containerLeft + (pageX - originalMouseX);
      left_1 = left_1 > 0 ? left_1 : 1;
      if (calculatedWidth !== previousWidth && setWidth) {
        targetElement.style.width = calculatedWidth + "px";
      }
      if (setLeft) {
        targetElement.style.left = left_1 + "px";
        if (left_1 === 1) {
          setWidth = false;
        } else {
          setWidth = true;
        }
      }
    }
  }
  previousWidth = calculatedWidth;
}
function resizeEast(e) {
  var documentWidth = document.documentElement.clientWidth;
  var calculateValue = false;
  var containerRectValues;
  if (!isNullOrUndefined(containerElement)) {
    containerRectValues = getClientRectValues(containerElement);
  }
  var coordinates = e.touches ? e.changedTouches[0] : e;
  var pageX = coordinates.pageX;
  var targetRectValues = getClientRectValues(targetElement);
  if (!isNullOrUndefined(containerElement) && (targetRectValues.left - containerRectValues.left + targetRectValues.width <= maxWidth || targetRectValues.right - containerRectValues.left >= targetRectValues.width)) {
    calculateValue = true;
  } else if (isNullOrUndefined(containerElement) && documentWidth - pageX > 0) {
    calculateValue = true;
  }
  var calculatedWidth = originalWidth + (pageX - originalMouseX);
  var containerLeft = 0;
  if (!isNullOrUndefined(containerElement)) {
    containerLeft = containerRectValues.left;
  }
  if (targetRectValues.left - containerLeft + calculatedWidth > maxWidth) {
    calculateValue = false;
    if (targetElement.classList.contains(RESIZE_WITHIN_VIEWPORT)) {
      return;
    }
    targetElement.style.width = maxWidth - (targetRectValues.left - containerLeft) + "px";
  }
  if (calculateValue) {
    if (calculatedWidth >= minWidth && calculatedWidth <= maxWidth) {
      targetElement.style.width = calculatedWidth + "px";
    }
  }
}
function setMinHeight(minimumHeight) {
  minHeight = minimumHeight;
}
function setMaxWidth(value) {
  maxWidth = value;
}
function setMaxHeight(value) {
  maxHeight = value;
}
function removeResize() {
  var handlers = targetElement.querySelectorAll("." + RESIZE_HANDLER);
  for (var i = 0; i < handlers.length; i++) {
    detach(handlers[i]);
  }
  var borderResizers = targetElement.querySelectorAll(".e-dialog-border-resize");
  if (!isNullOrUndefined(borderResizers)) {
    for (var i = 0; i < borderResizers.length; i++) {
      detach(borderResizers[i]);
    }
  }
}

// node_modules/@syncfusion/ej2-popups/src/dialog/dialog.js
var __extends14 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate14 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ButtonProps = (
  /** @class */
  function(_super) {
    __extends14(ButtonProps2, _super);
    function ButtonProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property(true)
    ], ButtonProps2.prototype, "isFlat", void 0);
    __decorate14([
      Property()
    ], ButtonProps2.prototype, "buttonModel", void 0);
    __decorate14([
      Property("Button")
    ], ButtonProps2.prototype, "type", void 0);
    __decorate14([
      Event2()
    ], ButtonProps2.prototype, "click", void 0);
    return ButtonProps2;
  }(ChildProperty)
);
var AnimationSettings = (
  /** @class */
  function(_super) {
    __extends14(AnimationSettings3, _super);
    function AnimationSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate14([
      Property("Fade")
    ], AnimationSettings3.prototype, "effect", void 0);
    __decorate14([
      Property(400)
    ], AnimationSettings3.prototype, "duration", void 0);
    __decorate14([
      Property(0)
    ], AnimationSettings3.prototype, "delay", void 0);
    return AnimationSettings3;
  }(ChildProperty)
);
var ROOT2 = "e-dialog";
var RTL5 = "e-rtl";
var DLG_HEADER_CONTENT = "e-dlg-header-content";
var DLG_HEADER = "e-dlg-header";
var DLG_FOOTER_CONTENT = "e-footer-content";
var MODAL_DLG = "e-dlg-modal";
var DLG_CONTENT = "e-dlg-content";
var DLG_CLOSE_ICON = "e-icon-dlg-close";
var DLG_OVERLAY = "e-dlg-overlay";
var DLG_TARGET = "e-dlg-target";
var DLG_CONTAINER = "e-dlg-container";
var SCROLL_DISABLED = "e-scroll-disabled";
var DLG_PRIMARY_BUTTON = "e-primary";
var ICON2 = "e-icons";
var POPUP_ROOT = "e-popup";
var DEVICE2 = "e-device";
var FULLSCREEN = "e-dlg-fullscreen";
var DLG_CLOSE_ICON_BTN = "e-dlg-closeicon-btn";
var DLG_HIDE = "e-popup-close";
var DLG_SHOW = "e-popup-open";
var DLG_UTIL_DEFAULT_TITLE = "Information";
var DLG_UTIL_ROOT = "e-scroll-disabled";
var DLG_UTIL_ALERT = "e-alert-dialog";
var DLG_UTIL_CONFIRM = "e-confirm-dialog";
var DLG_RESIZABLE = "e-dlg-resizable";
var DLG_RESTRICT_LEFT_VALUE = "e-restrict-left";
var DLG_RESTRICT_WIDTH_VALUE = "e-resize-viewport";
var DLG_REF_ELEMENT = "e-dlg-ref-element";
var DLG_USER_ACTION_CLOSED = "user action";
var DLG_CLOSE_ICON_CLOSED = "close icon";
var DLG_ESCAPE_CLOSED = "escape";
var DLG_OVERLAYCLICK_CLOSED = "overlayClick";
var Dialog = (
  /** @class */
  function(_super) {
    __extends14(Dialog2, _super);
    function Dialog2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
      return _this;
    }
    Dialog2.prototype.render = function() {
      this.initialize();
      this.initRender();
      this.wireEvents();
      if (this.width === "100%") {
        this.element.style.width = "";
      }
      if (this.minHeight !== "") {
        this.element.style.minHeight = formatUnit(this.minHeight);
      }
      if (this.enableResize) {
        this.setResize();
        if (this.animationSettings.effect === "None") {
          this.getMinHeight();
        }
      }
      this.renderComplete();
    };
    Dialog2.prototype.preRender = function() {
      var _this = this;
      this.headerContent = null;
      this.allowMaxHeight = true;
      this.preventVisibility = true;
      this.clonedEle = this.element.cloneNode(true);
      this.closeIconClickEventHandler = function(event) {
        _this.dlgClosedBy = DLG_CLOSE_ICON_CLOSED;
        _this.hide(event);
      };
      this.dlgOverlayClickEventHandler = function(event) {
        _this.dlgClosedBy = DLG_OVERLAYCLICK_CLOSED;
        event.preventFocus = false;
        _this.trigger("overlayClick", event, function(overlayClickEventArgs) {
          if (!overlayClickEventArgs.preventFocus) {
            _this.focusContent();
          }
          _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
        });
      };
      var localeText = { close: "Close" };
      this.l10n = new L10n("dialog", localeText, this.locale);
      this.checkPositionData();
      if (isNullOrUndefined(this.target)) {
        var prevOnChange = this.isProtectedOnChange;
        this.isProtectedOnChange = true;
        this.target = document.body;
        this.isProtectedOnChange = prevOnChange;
      }
    };
    Dialog2.prototype.isNumberValue = function(value) {
      var isNumber = /^[-+]?\d*\.?\d+$/.test(value);
      return isNumber;
    };
    Dialog2.prototype.checkPositionData = function() {
      if (!isNullOrUndefined(this.position)) {
        if (!isNullOrUndefined(this.position.X) && typeof this.position.X !== "number") {
          var isNumber = this.isNumberValue(this.position.X);
          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.X = parseFloat(this.position.X);
            this.isProtectedOnChange = prevOnChange;
          }
        }
        if (!isNullOrUndefined(this.position.Y) && typeof this.position.Y !== "number") {
          var isNumber = this.isNumberValue(this.position.Y);
          if (isNumber) {
            var prevOnChange = this.isProtectedOnChange;
            this.isProtectedOnChange = true;
            this.position.Y = parseFloat(this.position.Y);
            this.isProtectedOnChange = prevOnChange;
          }
        }
      }
    };
    Dialog2.prototype.getEle = function(list, selector) {
      var element2 = void 0;
      for (var i = 0; i < list.length; i++) {
        if (list[i].classList.contains(selector)) {
          element2 = list[i];
          break;
        }
      }
      return element2;
    };
    Dialog2.prototype.getMinHeight = function() {
      var computedHeaderHeight = "0px";
      var computedFooterHeight = "0px";
      if (!isNullOrUndefined(this.element.querySelector("." + DLG_HEADER_CONTENT))) {
        computedHeaderHeight = getComputedStyle(this.headerContent).height;
      }
      var footerEle = this.getEle(this.element.children, DLG_FOOTER_CONTENT);
      if (!isNullOrUndefined(footerEle)) {
        computedFooterHeight = getComputedStyle(footerEle).height;
      }
      var headerHeight = parseInt(computedHeaderHeight.slice(0, computedHeaderHeight.indexOf("p")), 10);
      var footerHeight = parseInt(computedFooterHeight.slice(0, computedFooterHeight.indexOf("p")), 10);
      setMinHeight(headerHeight + 30 + (isNaN(footerHeight) ? 0 : footerHeight));
      return headerHeight + 30 + footerHeight;
    };
    Dialog2.prototype.onResizeStart = function(args, dialogObj) {
      dialogObj.trigger("resizeStart", args);
      return args.cancel;
    };
    Dialog2.prototype.onResizing = function(args, dialogObj) {
      dialogObj.trigger("resizing", args);
    };
    Dialog2.prototype.onResizeComplete = function(args, dialogObj) {
      dialogObj.trigger("resizeStop", args);
    };
    Dialog2.prototype.setResize = function() {
      if (this.enableResize) {
        if (this.isBlazorServerRender() && !isNullOrUndefined(this.element.querySelector(".e-icons.e-resize-handle"))) {
          return;
        }
        this.element.classList.add(DLG_RESIZABLE);
        var computedHeight = getComputedStyle(this.element).minHeight;
        var computedWidth = getComputedStyle(this.element).minWidth;
        var direction = "";
        for (var i = 0; i < this.resizeHandles.length; i++) {
          if (this.resizeHandles[i] === "All") {
            direction = "south north east west north-east north-west south-east south-west";
            break;
          } else {
            var directionValue = "";
            switch (this.resizeHandles[i].toString()) {
              case "SouthEast":
                directionValue = "south-east";
                break;
              case "SouthWest":
                directionValue = "south-west";
                break;
              case "NorthEast":
                directionValue = "north-east";
                break;
              case "NorthWest":
                directionValue = "north-west";
                break;
              default:
                directionValue = this.resizeHandles[i].toString();
                break;
            }
            direction += directionValue.toLocaleLowerCase() + " ";
          }
        }
        if (this.enableRtl && direction.trim() === "south-east") {
          direction = "south-west";
        } else if (this.enableRtl && direction.trim() === "south-west") {
          direction = "south-east";
        }
        if (this.isModal && this.enableRtl) {
          this.element.classList.add(DLG_RESTRICT_LEFT_VALUE);
        } else if (this.isModal && this.target === document.body) {
          this.element.classList.add(DLG_RESTRICT_WIDTH_VALUE);
        }
        createResize({
          element: this.element,
          direction,
          minHeight: parseInt(computedHeight.slice(0, computedWidth.indexOf("p")), 10),
          maxHeight: this.targetEle.clientHeight,
          minWidth: parseInt(computedWidth.slice(0, computedWidth.indexOf("p")), 10),
          maxWidth: this.targetEle.clientWidth,
          boundary: this.target === document.body ? null : this.targetEle,
          resizeBegin: this.onResizeStart.bind(this),
          resizeComplete: this.onResizeComplete.bind(this),
          resizing: this.onResizing.bind(this),
          proxy: this
        });
        this.wireWindowResizeEvent();
      } else {
        removeResize();
        this.unWireWindowResizeEvent();
        if (this.isModal) {
          this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
        } else {
          this.element.classList.remove(DLG_RESTRICT_WIDTH_VALUE);
        }
        this.element.classList.remove(DLG_RESIZABLE);
      }
    };
    Dialog2.prototype.getFocusElement = function(target) {
      var value = 'input,select,textarea,button:enabled,a,[contenteditable="true"],[tabindex]';
      var items = target.querySelectorAll(value);
      return { element: items[items.length - 1] };
    };
    Dialog2.prototype.keyDown = function(event) {
      var _this = this;
      if (event.keyCode === 9) {
        if (this.isModal) {
          var buttonObj = void 0;
          if (!isNullOrUndefined(this.btnObj)) {
            buttonObj = this.btnObj[this.btnObj.length - 1];
          }
          if (isNullOrUndefined(this.btnObj) && !isNullOrUndefined(this.ftrTemplateContent)) {
            buttonObj = this.getFocusElement(this.ftrTemplateContent);
          }
          if (isNullOrUndefined(this.btnObj) && isNullOrUndefined(this.ftrTemplateContent) && !isNullOrUndefined(this.contentEle)) {
            buttonObj = this.getFocusElement(this.contentEle);
          }
          if (!isNullOrUndefined(buttonObj) && document.activeElement === buttonObj.element && !event.shiftKey) {
            event.preventDefault();
            this.focusableElements(this.element).focus();
          }
          if (document.activeElement === this.focusableElements(this.element) && event.shiftKey) {
            event.preventDefault();
            if (!isNullOrUndefined(buttonObj)) {
              buttonObj.element.focus();
            }
          }
        }
      }
      var element2 = document.activeElement;
      var isTagName = ["input", "textarea"].indexOf(element2.tagName.toLowerCase()) > -1;
      var isContentEdit = false;
      if (!isTagName) {
        isContentEdit = element2.hasAttribute("contenteditable") && element2.getAttribute("contenteditable") === "true";
      }
      if (event.keyCode === 27 && this.closeOnEscape) {
        this.dlgClosedBy = DLG_ESCAPE_CLOSED;
        if (!document.querySelector(".e-popup-open:not(.e-dialog)")) {
          this.hide(event);
        }
      }
      if (event.keyCode === 13 && !event.ctrlKey && element2.tagName.toLowerCase() !== "textarea" && isTagName && !isNullOrUndefined(this.primaryButtonEle) || event.keyCode === 13 && event.ctrlKey && (element2.tagName.toLowerCase() === "textarea" || isContentEdit) && !isNullOrUndefined(this.primaryButtonEle)) {
        var buttonIndex_1;
        var firstPrimary = this.buttons.some(function(data, index) {
          buttonIndex_1 = index;
          var buttonModel = data.buttonModel;
          return !isNullOrUndefined(buttonModel) && buttonModel.isPrimary === true;
        });
        if (firstPrimary && typeof this.buttons[buttonIndex_1].click === "function") {
          setTimeout(function() {
            _this.buttons[buttonIndex_1].click.call(_this, event);
          });
        }
      }
    };
    Dialog2.prototype.initialize = function() {
      if (!isNullOrUndefined(this.target)) {
        this.targetEle = typeof this.target === "string" ? document.querySelector(this.target) : this.target;
      }
      if (!this.isBlazorServerRender()) {
        addClass([this.element], ROOT2);
      }
      if (Browser.isDevice) {
        addClass([this.element], DEVICE2);
      }
      if (!this.isBlazorServerRender()) {
        this.setCSSClass();
      }
      this.setMaxHeight();
    };
    Dialog2.prototype.initRender = function() {
      var _this = this;
      this.initialRender = true;
      if (!this.isBlazorServerRender()) {
        attributes(this.element, { role: "dialog" });
      }
      if (this.zIndex === 1e3) {
        this.setzIndex(this.element, false);
        this.calculatezIndex = true;
      } else {
        this.calculatezIndex = false;
      }
      if (this.isBlazorServerRender() && isNullOrUndefined(this.headerContent)) {
        this.headerContent = this.element.getElementsByClassName("e-dlg-header-content")[0];
      }
      if (this.isBlazorServerRender() && isNullOrUndefined(this.contentEle)) {
        this.contentEle = this.element.querySelector("#" + this.element.id + "_dialog-content");
      }
      if (!this.isBlazorServerRender()) {
        this.setTargetContent();
        if (this.header !== "" && !isNullOrUndefined(this.header)) {
          this.setHeader();
        }
        this.renderCloseIcon();
        this.setContent();
        if (this.footerTemplate !== "" && !isNullOrUndefined(this.footerTemplate)) {
          this.setFooterTemplate();
        } else if (!isNullOrUndefined(this.buttons[0].buttonModel)) {
          this.setButton();
        }
      }
      if (this.isBlazorServerRender()) {
        if (!isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === "") {
          this.setButton();
        }
      }
      if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
        this.setAllowDragging();
      }
      if (!this.isBlazorServerRender()) {
        attributes(this.element, { "aria-modal": this.isModal ? "true" : "false" });
        if (this.isModal) {
          this.setIsModal();
        }
      }
      if (this.isBlazorServerRender() && isNullOrUndefined(this.dlgContainer)) {
        this.dlgContainer = this.element.parentElement;
        for (var i = 0, childNodes = this.dlgContainer.children; i < childNodes.length; i++) {
          if (childNodes[i].classList.contains("e-dlg-overlay")) {
            this.dlgOverlay = childNodes[i];
          }
        }
      }
      if (this.element.classList.contains(DLG_UTIL_ALERT) !== true && this.element.classList.contains(DLG_UTIL_CONFIRM) !== true && !isNullOrUndefined(this.element.parentElement)) {
        var parentEle = this.isModal ? this.dlgContainer.parentElement : this.element.parentElement;
        this.refElement = this.createElement("div", { className: DLG_REF_ELEMENT });
        parentEle.insertBefore(this.refElement, this.isModal ? this.dlgContainer : this.element);
      }
      if (!isNullOrUndefined(this.targetEle)) {
        this.isModal ? this.targetEle.appendChild(this.dlgContainer) : this.targetEle.appendChild(this.element);
      }
      this.popupObj = new Popup(this.element, {
        height: this.height,
        width: this.width,
        zIndex: this.zIndex,
        relateTo: this.target,
        actionOnScroll: "none",
        enableRtl: this.enableRtl,
        // eslint-disable-next-line
        open: function(event) {
          var eventArgs = {
            container: _this.isModal ? _this.dlgContainer : _this.element,
            element: _this.element,
            target: _this.target,
            preventFocus: false
          };
          if (_this.enableResize) {
            _this.resetResizeIcon();
          }
          _this.trigger("open", eventArgs, function(openEventArgs) {
            if (!openEventArgs.preventFocus) {
              _this.focusContent();
            }
          });
        },
        // eslint-disable-next-line
        close: function(event) {
          if (_this.isModal) {
            addClass([_this.dlgOverlay], "e-fade");
          }
          _this.unBindEvent(_this.element);
          if (_this.isModal) {
            _this.dlgContainer.style.display = "none";
          }
          _this.trigger("close", _this.closeArgs);
          var activeEle = document.activeElement;
          if (!isNullOrUndefined(activeEle) && !isNullOrUndefined(activeEle.blur)) {
            activeEle.blur();
          }
          if (!isNullOrUndefined(_this.storeActiveElement) && !isNullOrUndefined(_this.storeActiveElement.focus)) {
            _this.storeActiveElement.focus();
          }
        }
      });
      this.positionChange();
      this.setEnableRTL();
      if (!this.isBlazorServerRender()) {
        addClass([this.element], DLG_HIDE);
        if (this.isModal) {
          this.setOverlayZindex();
        }
      }
      if (this.visible) {
        this.show();
      } else {
        if (this.isModal) {
          this.dlgOverlay.style.display = "none";
        }
      }
      this.initialRender = false;
    };
    Dialog2.prototype.resetResizeIcon = function() {
      var dialogConHeight = this.getMinHeight();
      if (this.targetEle.offsetHeight < dialogConHeight) {
        var className = this.enableRtl ? "e-south-west" : "e-south-east";
        var resizeIcon = this.element.querySelector("." + className);
        if (!isNullOrUndefined(resizeIcon)) {
          resizeIcon.style.bottom = "-" + dialogConHeight.toString() + "px";
        }
      }
    };
    Dialog2.prototype.setOverlayZindex = function(zIndexValue) {
      var zIndex;
      if (isNullOrUndefined(zIndexValue)) {
        zIndex = parseInt(this.element.style.zIndex, 10) ? parseInt(this.element.style.zIndex, 10) : this.zIndex;
      } else {
        zIndex = zIndexValue;
      }
      this.dlgOverlay.style.zIndex = (zIndex - 1).toString();
      this.dlgContainer.style.zIndex = zIndex.toString();
    };
    Dialog2.prototype.positionChange = function() {
      if (this.isModal) {
        if (!isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else if (!isNaN(parseFloat(this.position.X)) && isNaN(parseFloat(this.position.Y)) || isNaN(parseFloat(this.position.X)) && !isNaN(parseFloat(this.position.Y))) {
          this.setPopupPosition();
        } else {
          this.element.style.top = "0px";
          this.element.style.left = "0px";
          this.dlgContainer.classList.add("e-dlg-" + this.position.X + "-" + this.position.Y);
        }
      } else {
        this.setPopupPosition();
      }
    };
    Dialog2.prototype.setPopupPosition = function() {
      this.popupObj.setProperties({
        position: {
          X: this.position.X,
          Y: this.position.Y
        }
      });
    };
    Dialog2.prototype.setAllowDragging = function() {
      var _this = this;
      var handleContent = "." + DLG_HEADER_CONTENT;
      this.dragObj = new Draggable(this.element, {
        clone: false,
        isDragScroll: true,
        abort: ".e-dlg-closeicon-btn",
        handle: handleContent,
        // eslint-disable-next-line
        dragStart: function(event) {
          _this.trigger("dragStart", event, function(dragEventArgs) {
            if (isBlazor()) {
              dragEventArgs.bindEvents(event.dragElement);
            }
          });
        },
        // eslint-disable-next-line
        dragStop: function(event) {
          if (_this.isModal) {
            if (!isNullOrUndefined(_this.position)) {
              _this.dlgContainer.classList.remove("e-dlg-" + _this.position.X + "-" + _this.position.Y);
            }
            _this.element.style.position = "relative";
          }
          _this.trigger("dragStop", event);
          _this.element.classList.remove(DLG_RESTRICT_LEFT_VALUE);
        },
        // eslint-disable-next-line
        drag: function(event) {
          _this.trigger("drag", event);
        }
      });
      if (!isNullOrUndefined(this.targetEle)) {
        this.dragObj.dragArea = this.targetEle;
      }
    };
    Dialog2.prototype.setButton = function() {
      if (!this.isBlazorServerRender()) {
        this.buttonContent = [];
        this.btnObj = [];
        var primaryBtnFlag = true;
        for (var i = 0; i < this.buttons.length; i++) {
          var buttonType = !isNullOrUndefined(this.buttons[i].type) ? this.buttons[i].type.toLowerCase() : "button";
          var btn = this.createElement("button", { attrs: { type: buttonType } });
          this.buttonContent.push(btn.outerHTML);
        }
        this.setFooterTemplate();
      }
      var footerBtn;
      for (var i = 0, childNodes = this.element.children; i < childNodes.length; i++) {
        if (childNodes[i].classList.contains(DLG_FOOTER_CONTENT)) {
          footerBtn = childNodes[i].querySelectorAll("button");
        }
      }
      for (var i = 0; i < this.buttons.length; i++) {
        if (!this.isBlazorServerRender()) {
          this.btnObj[i] = new Button(this.buttons[i].buttonModel);
        }
        if (this.isBlazorServerRender()) {
          this.ftrTemplateContent = this.element.querySelector("." + DLG_FOOTER_CONTENT);
        }
        if (!isNullOrUndefined(this.ftrTemplateContent) && footerBtn.length > 0) {
          if (typeof this.buttons[i].click === "function") {
            EventHandler.add(footerBtn[i], "click", this.buttons[i].click, this);
          }
          if (typeof this.buttons[i].click === "object") {
            EventHandler.add(footerBtn[i], "click", this.buttonClickHandler.bind(this, i), this);
          }
        }
        if (!this.isBlazorServerRender() && !isNullOrUndefined(this.ftrTemplateContent)) {
          this.btnObj[i].appendTo(this.ftrTemplateContent.children[i]);
          if (this.buttons[i].isFlat) {
            this.btnObj[i].element.classList.add("e-flat");
          }
          this.primaryButtonEle = this.element.getElementsByClassName("e-primary")[0];
        }
      }
    };
    Dialog2.prototype.buttonClickHandler = function(index) {
      this.trigger("buttons[" + index + "].click", {});
    };
    ;
    Dialog2.prototype.setContent = function() {
      attributes(this.element, { "aria-describedby": this.element.id + "_dialog-content" });
      this.contentEle = this.createElement("div", { className: DLG_CONTENT, id: this.element.id + "_dialog-content" });
      if (this.innerContentElement) {
        this.contentEle.appendChild(this.innerContentElement);
      } else if (!isNullOrUndefined(this.content) && this.content !== "" || !this.initialRender) {
        var blazorContain = Object.keys(window);
        if (typeof this.content === "string" && !isBlazor()) {
          this.contentEle.innerHTML = this.sanitizeHelper(this.content);
        } else if (this.content instanceof HTMLElement) {
          this.contentEle.appendChild(this.content);
        } else {
          this.setTemplate(this.content, this.contentEle, "content");
        }
      }
      if (!isNullOrUndefined(this.headerContent)) {
        this.element.insertBefore(this.contentEle, this.element.children[1]);
      } else {
        this.element.insertBefore(this.contentEle, this.element.children[0]);
      }
      if (this.height === "auto") {
        if (!this.isBlazorServerRender() && Browser.isIE && this.element.style.width === "" && !isNullOrUndefined(this.width)) {
          this.element.style.width = formatUnit(this.width);
        }
        this.setMaxHeight();
      }
    };
    Dialog2.prototype.setTemplate = function(template, toElement, prop) {
      var templateFn;
      var templateProps;
      var blazorContain = Object.keys(window);
      if (toElement.classList.contains(DLG_HEADER)) {
        templateProps = this.element.id + "header";
      } else if (toElement.classList.contains(DLG_FOOTER_CONTENT)) {
        templateProps = this.element.id + "footerTemplate";
      } else {
        templateProps = this.element.id + "content";
      }
      var templateValue;
      if (!isNullOrUndefined(template.outerHTML)) {
        toElement.appendChild(template);
      } else if (typeof template !== "string" || isBlazor() && !this.isStringTemplate) {
        templateFn = compile2(template);
        templateValue = template;
      } else {
        toElement.innerHTML = this.sanitizeHelper(template);
      }
      var fromElements = [];
      if (!isNullOrUndefined(templateFn)) {
        var isString = isBlazor() && !this.isStringTemplate && templateValue.indexOf("<div>Blazor") === 0 ? this.isStringTemplate : true;
        for (var _i = 0, _a = templateFn({}, this, prop, templateProps, isString); _i < _a.length; _i++) {
          var item = _a[_i];
          fromElements.push(item);
        }
        append([].slice.call(fromElements), toElement);
      }
    };
    Dialog2.prototype.sanitizeHelper = function(value) {
      if (this.enableHtmlSanitizer) {
        var dialogItem = SanitizeHtmlHelper.beforeSanitize();
        var beforeEvent = {
          cancel: false,
          helper: null
        };
        extend(dialogItem, dialogItem, beforeEvent);
        this.trigger("beforeSanitizeHtml", dialogItem);
        if (dialogItem.cancel && !isNullOrUndefined(dialogItem.helper)) {
          value = dialogItem.helper(value);
        } else if (!dialogItem.cancel) {
          value = SanitizeHtmlHelper.serializeValue(dialogItem, value);
        }
      }
      return value;
    };
    Dialog2.prototype.setMaxHeight = function() {
      if (!this.allowMaxHeight) {
        return;
      }
      var display = this.element.style.display;
      this.element.style.display = "none";
      this.element.style.maxHeight = !isNullOrUndefined(this.target) && this.targetEle.offsetHeight < window.innerHeight ? this.targetEle.offsetHeight - 20 + "px" : window.innerHeight - 20 + "px";
      this.element.style.display = display;
      if (Browser.isIE && this.height === "auto" && !isNullOrUndefined(this.contentEle) && this.element.offsetHeight < this.contentEle.offsetHeight) {
        this.element.style.height = "inherit";
      }
    };
    Dialog2.prototype.setEnableRTL = function() {
      if (!this.isBlazorServerRender()) {
        this.enableRtl ? addClass([this.element], RTL5) : removeClass([this.element], RTL5);
      }
      if (!isNullOrUndefined(this.element.querySelector(".e-resize-handle"))) {
        removeResize();
        this.setResize();
      }
    };
    Dialog2.prototype.setTargetContent = function() {
      var _this = this;
      if (isNullOrUndefined(this.content) || this.content === "") {
        var isContent = this.element.innerHTML.replace(/\s|<(\/?|\/?)(!--!--)>/g, "") !== "";
        if (this.element.children.length > 0 || isContent) {
          this.innerContentElement = document.createDocumentFragment();
          [].slice.call(this.element.childNodes).forEach(function(el) {
            if (el.nodeType !== 8) {
              _this.innerContentElement.appendChild(el);
            }
          });
        }
      }
    };
    Dialog2.prototype.setHeader = function() {
      if (this.headerEle) {
        this.headerEle.innerHTML = "";
      } else {
        this.headerEle = this.createElement("div", { id: this.element.id + "_title", className: DLG_HEADER });
      }
      this.createHeaderContent();
      this.headerContent.appendChild(this.headerEle);
      this.setTemplate(this.header, this.headerEle, "header");
      attributes(this.element, { "aria-labelledby": this.element.id });
      this.element.insertBefore(this.headerContent, this.element.children[0]);
    };
    Dialog2.prototype.setFooterTemplate = function() {
      if (this.ftrTemplateContent) {
        this.ftrTemplateContent.innerHTML = "";
      } else {
        this.ftrTemplateContent = this.createElement("div", {
          className: DLG_FOOTER_CONTENT
        });
      }
      if (this.footerTemplate !== "" && !isNullOrUndefined(this.footerTemplate)) {
        this.setTemplate(this.footerTemplate, this.ftrTemplateContent, "footerTemplate");
      } else {
        this.ftrTemplateContent.innerHTML = this.buttonContent.join("");
      }
      this.element.appendChild(this.ftrTemplateContent);
    };
    Dialog2.prototype.createHeaderContent = function() {
      if (isNullOrUndefined(this.headerContent)) {
        this.headerContent = this.createElement("div", { id: this.element.id + "_dialog-header", className: DLG_HEADER_CONTENT });
      }
    };
    Dialog2.prototype.renderCloseIcon = function() {
      if (this.showCloseIcon) {
        this.closeIcon = this.createElement("button", { className: DLG_CLOSE_ICON_BTN, attrs: { type: "button" } });
        this.closeIconBtnObj = new Button({ cssClass: "e-flat", iconCss: DLG_CLOSE_ICON + " " + ICON2 });
        this.closeIconTitle();
        if (!isNullOrUndefined(this.headerContent)) {
          prepend([this.closeIcon], this.headerContent);
        } else {
          this.createHeaderContent();
          prepend([this.closeIcon], this.headerContent);
          this.element.insertBefore(this.headerContent, this.element.children[0]);
        }
        this.closeIconBtnObj.appendTo(this.closeIcon);
      }
    };
    Dialog2.prototype.closeIconTitle = function() {
      this.l10n.setLocale(this.locale);
      var closeIconTitle = this.l10n.getConstant("close");
      this.closeIcon.setAttribute("title", closeIconTitle);
      this.closeIcon.setAttribute("aria-label", closeIconTitle);
    };
    Dialog2.prototype.setCSSClass = function(oldCSSClass) {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" "));
      }
    };
    Dialog2.prototype.setIsModal = function() {
      this.dlgContainer = this.createElement("div", { className: DLG_CONTAINER });
      this.element.classList.remove(DLG_SHOW);
      this.element.parentNode.insertBefore(this.dlgContainer, this.element);
      this.dlgContainer.appendChild(this.element);
      addClass([this.element], MODAL_DLG);
      this.dlgOverlay = this.createElement("div", { className: DLG_OVERLAY });
      this.dlgOverlay.style.zIndex = (this.zIndex - 1).toString();
      this.dlgContainer.appendChild(this.dlgOverlay);
    };
    Dialog2.prototype.getValidFocusNode = function(items) {
      var node;
      for (var u = 0; u < items.length; u++) {
        node = items[u];
        if ((node.clientHeight > 0 || node.tagName.toLowerCase() === "a" && node.hasAttribute("href")) && node.tabIndex > -1 && !node.disabled && !this.disableElement(node, '[disabled],[aria-disabled="true"],[type="hidden"]')) {
          return node;
        } else {
          node = null;
        }
      }
      return node;
    };
    Dialog2.prototype.focusableElements = function(content) {
      if (!isNullOrUndefined(content)) {
        var value = 'input,select,textarea,button,a,[contenteditable="true"],[tabindex]';
        var items = content.querySelectorAll(value);
        return this.getValidFocusNode(items);
      }
      return null;
    };
    Dialog2.prototype.getAutoFocusNode = function(container) {
      var node = container.querySelector("." + DLG_CLOSE_ICON_BTN);
      var value = "[autofocus]";
      var items = container.querySelectorAll(value);
      var validNode = this.getValidFocusNode(items);
      if (isBlazor()) {
        this.primaryButtonEle = this.element.getElementsByClassName("e-primary")[0];
      }
      if (!isNullOrUndefined(validNode)) {
        node = validNode;
      } else {
        validNode = this.focusableElements(this.contentEle);
        if (!isNullOrUndefined(validNode)) {
          return node = validNode;
        } else if (!isNullOrUndefined(this.primaryButtonEle)) {
          return this.element.querySelector("." + DLG_PRIMARY_BUTTON);
        }
      }
      return node;
    };
    Dialog2.prototype.disableElement = function(element2, t) {
      var elementMatch = element2 ? element2.matches || element2.webkitMatchesSelector || element2.msGetRegionContent : null;
      if (elementMatch) {
        for (; element2; element2 = element2.parentNode) {
          if (element2 instanceof Element && elementMatch.call(element2, t)) {
            return element2;
          }
        }
      }
      return null;
    };
    Dialog2.prototype.focusContent = function() {
      var element2 = this.getAutoFocusNode(this.element);
      var node = !isNullOrUndefined(element2) ? element2 : this.element;
      var userAgent = Browser.userAgent;
      if (userAgent.indexOf("MSIE ") > 0 || userAgent.indexOf("Trident/") > 0) {
        this.element.focus();
      }
      node.focus();
      this.bindEvent(this.element);
    };
    Dialog2.prototype.bindEvent = function(element2) {
      EventHandler.add(element2, "keydown", this.keyDown, this);
    };
    Dialog2.prototype.unBindEvent = function(element2) {
      EventHandler.remove(element2, "keydown", this.keyDown);
    };
    Dialog2.prototype.updateSanitizeContent = function() {
      if (!this.isBlazorServerRender()) {
        this.contentEle.innerHTML = this.sanitizeHelper(this.content);
      }
    };
    Dialog2.prototype.isBlazorServerRender = function() {
      return isBlazor() && this.isServerRendered;
    };
    Dialog2.prototype.getModuleName = function() {
      return "dialog";
    };
    Dialog2.prototype.onPropertyChanged = function(newProp, oldProp) {
      if (!this.element.classList.contains(ROOT2)) {
        return;
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "content":
            if (!isNullOrUndefined(this.content) && this.content !== "") {
              if (this.isBlazorServerRender()) {
                this.contentEle = this.element.querySelector(".e-dlg-content");
              }
              if (!isNullOrUndefined(this.contentEle) && this.contentEle.getAttribute("role") !== "dialog") {
                if (!this.isBlazorServerRender()) {
                  this.contentEle.innerHTML = "";
                }
                if (typeof this.content === "function") {
                  this.clearTemplate(["content"]);
                  detach(this.contentEle);
                  this.contentEle = null;
                  this.setContent();
                } else {
                  typeof this.content === "string" ? this.isBlazorServerRender() && this.contentEle.innerText === "" ? this.contentEle.insertAdjacentHTML("beforeend", this.sanitizeHelper(this.content)) : this.updateSanitizeContent() : this.contentEle.appendChild(this.content);
                }
                this.setMaxHeight();
              } else {
                if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector(".e-dlg-content"))) {
                  this.setContent();
                }
              }
            } else if (!isNullOrUndefined(this.contentEle)) {
              detach(this.contentEle);
              this.contentEle = null;
            }
            break;
          case "header":
            if (this.header === "" || isNullOrUndefined(this.header)) {
              if (this.headerEle) {
                detach(this.headerEle);
                this.headerEle = null;
              }
            } else {
              if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector(".e-dlg-header-content"))) {
                this.setHeader();
              }
            }
            break;
          case "footerTemplate":
            if (this.footerTemplate === "" || isNullOrUndefined(this.footerTemplate)) {
              if (!this.ftrTemplateContent) {
                return;
              }
              detach(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
              this.buttons = [{}];
            } else {
              if (!this.isBlazorServerRender() || isNullOrUndefined(this.element.querySelector(".e-footer-content"))) {
                this.setFooterTemplate();
              }
              this.buttons = [{}];
            }
            break;
          case "showCloseIcon":
            if (this.element.getElementsByClassName(DLG_CLOSE_ICON).length > 0) {
              if (!this.showCloseIcon && (this.header === "" || isNullOrUndefined(this.header))) {
                detach(this.headerContent);
                this.headerContent = null;
              } else if (!this.showCloseIcon) {
                detach(this.closeIcon);
              } else {
                if (this.isBlazorServerRender()) {
                  this.wireEvents();
                }
              }
            } else {
              if (!this.isBlazorServerRender()) {
                this.renderCloseIcon();
              }
              this.wireEvents();
            }
            break;
          case "locale":
            if (this.showCloseIcon) {
              this.closeIconTitle();
            }
            break;
          case "visible":
            this.visible ? this.show() : this.hide();
            break;
          case "isModal":
            this.updateIsModal();
            break;
          case "height":
            setStyleAttribute(this.element, { "height": formatUnit(newProp.height) });
            break;
          case "width":
            setStyleAttribute(this.element, { "width": formatUnit(newProp.width) });
            break;
          case "zIndex":
            this.popupObj.zIndex = this.zIndex;
            if (this.isModal) {
              this.setOverlayZindex(this.zIndex);
            }
            if (this.element.style.zIndex !== this.zIndex.toString()) {
              this.calculatezIndex = false;
            }
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "buttons": {
            var buttonCount = this.buttons.length;
            if (!isNullOrUndefined(this.ftrTemplateContent) && !this.isBlazorServerRender()) {
              detach(this.ftrTemplateContent);
              this.ftrTemplateContent = null;
            }
            for (var i = 0; i < buttonCount; i++) {
              if (!isNullOrUndefined(this.buttons[i].buttonModel)) {
                this.footerTemplate = "";
                this.setButton();
              }
            }
            break;
          }
          case "allowDragging":
            if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
              this.setAllowDragging();
            } else {
              this.dragObj.destroy();
            }
            break;
          case "target":
            this.setTarget(newProp.target);
            break;
          case "position":
            this.checkPositionData();
            if (this.isModal) {
              var positionX = isNullOrUndefined(oldProp.position.X) ? this.position.X : oldProp.position.X;
              var positionY = isNullOrUndefined(oldProp.position.Y) ? this.position.Y : oldProp.position.Y;
              if (this.dlgContainer.classList.contains("e-dlg-" + positionX + "-" + positionY)) {
                this.dlgContainer.classList.remove("e-dlg-" + positionX + "-" + positionY);
              }
            }
            this.positionChange();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
          case "enableResize":
            this.setResize();
            break;
        }
      }
    };
    Dialog2.prototype.setTarget = function(target) {
      this.popupObj.relateTo = target;
      this.target = target;
      this.targetEle = typeof this.target === "string" ? document.querySelector(this.target) : this.target;
      if (this.dragObj) {
        this.dragObj.dragArea = this.targetEle;
      }
      this.setMaxHeight();
      if (this.isModal) {
        this.updateIsModal();
      }
      if (this.enableResize) {
        this.setResize();
      }
    };
    Dialog2.prototype.updateIsModal = function() {
      this.element.setAttribute("aria-modal", this.isModal ? "true" : "false");
      if (this.isModal) {
        if (isNullOrUndefined(this.dlgOverlay)) {
          this.setIsModal();
          this.element.style.top = "0px";
          this.element.style.left = "0px";
          if (!isNullOrUndefined(this.targetEle)) {
            this.targetEle.appendChild(this.dlgContainer);
          }
        }
      } else {
        removeClass([this.element], MODAL_DLG);
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        detach(this.dlgOverlay);
        while (this.dlgContainer.firstChild) {
          this.dlgContainer.parentElement.insertBefore(this.dlgContainer.firstChild, this.dlgContainer);
        }
        this.dlgContainer.parentElement.removeChild(this.dlgContainer);
      }
      if (this.visible) {
        this.show();
      }
      this.positionChange();
      if (this.isModal && this.dlgOverlay) {
        EventHandler.add(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler, this);
      }
    };
    Dialog2.prototype.setzIndex = function(zIndexElement, setPopupZindex) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.zIndex = getZindexPartial(zIndexElement);
      this.isProtectedOnChange = prevOnChange;
      if (setPopupZindex) {
        this.popupObj.zIndex = this.zIndex;
      }
    };
    Dialog2.prototype.windowResizeHandler = function() {
      setMaxWidth(this.targetEle.clientWidth);
      setMaxHeight(this.targetEle.clientHeight);
      this.setMaxHeight();
    };
    Dialog2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Dialog2.prototype.destroy = function() {
      if (this.isDestroyed) {
        return;
      }
      var classArray = [RTL5, MODAL_DLG, DLG_RESIZABLE, DLG_RESTRICT_LEFT_VALUE, FULLSCREEN, DEVICE2];
      var attrs = ["role", "aria-modal", "aria-labelledby", "aria-describedby", "aria-grabbed", "tabindex", "style"];
      removeClass([this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
      if (!isNullOrUndefined(this.element) && this.element.classList.contains(FULLSCREEN)) {
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
      }
      if (this.isModal) {
        removeClass([!isNullOrUndefined(this.targetEle) ? this.targetEle : document.body], SCROLL_DISABLED);
      }
      this.unWireEvents();
      if (!isNullOrUndefined(this.btnObj)) {
        for (var i = 0; i < this.btnObj.length; i++) {
          this.btnObj[i].destroy();
        }
      }
      if (!isNullOrUndefined(this.dragObj)) {
        this.dragObj.destroy();
      }
      if (!isNullOrUndefined(this.popupObj.element) && this.popupObj.element.classList.contains(POPUP_ROOT)) {
        this.popupObj.destroy();
      }
      removeClass([this.element], classArray);
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        removeClass([this.element], this.cssClass.split(" "));
      }
      if (!isNullOrUndefined(this.refElement) && !isNullOrUndefined(this.refElement.parentElement)) {
        this.refElement.parentElement.insertBefore(this.isModal ? this.dlgContainer : this.element, this.refElement);
        detach(this.refElement);
        this.refElement = void 0;
      }
      if (this.isModal && !this.isBlazorServerRender()) {
        detach(this.dlgOverlay);
        this.dlgContainer.parentNode.insertBefore(this.element, this.dlgContainer);
        detach(this.dlgContainer);
      }
      if (!this.isBlazorServerRender()) {
        this.element.innerHTML = this.clonedEle.innerHTML;
      }
      if (this.isBlazorServerRender()) {
        if (!isNullOrUndefined(this.element.children)) {
          for (var i = 0; i <= this.element.children.length; i++) {
            i = i - i;
            detach(this.element.children[i]);
          }
        }
      }
      for (var i = 0; i < attrs.length; i++) {
        this.element.removeAttribute(attrs[i]);
      }
      if (!this.isBlazorServerRender()) {
        _super.prototype.destroy.call(this);
      } else {
        this.isDestroyed = true;
      }
      if (this.isReact) {
        this.clearTemplate();
      }
    };
    Dialog2.prototype.wireWindowResizeEvent = function() {
      window.addEventListener("resize", this.windowResizeHandler.bind(this));
    };
    Dialog2.prototype.unWireWindowResizeEvent = function() {
      window.removeEventListener("resize", this.windowResizeHandler.bind(this));
    };
    Dialog2.prototype.wireEvents = function() {
      if (this.isBlazorServerRender() && this.showCloseIcon) {
        this.closeIcon = this.element.getElementsByClassName("e-dlg-closeicon-btn")[0];
      }
      if (this.showCloseIcon) {
        EventHandler.add(this.closeIcon, "click", this.closeIconClickEventHandler, this);
      }
      if (this.isModal && this.dlgOverlay) {
        EventHandler.add(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler, this);
      }
    };
    Dialog2.prototype.unWireEvents = function() {
      if (this.showCloseIcon) {
        EventHandler.remove(this.closeIcon, "click", this.closeIconClickEventHandler);
      }
      if (this.isModal) {
        EventHandler.remove(this.dlgOverlay, "click", this.dlgOverlayClickEventHandler);
      }
      if (this.buttons.length > 0 && !isNullOrUndefined(this.buttons[0].buttonModel) && this.footerTemplate === "") {
        for (var i = 0; i < this.buttons.length; i++) {
          if (typeof this.buttons[i].click === "function") {
            EventHandler.remove(this.ftrTemplateContent.children[i], "click", this.buttons[i].click);
          }
        }
      }
    };
    Dialog2.prototype.refreshPosition = function() {
      this.popupObj.refreshPosition();
    };
    Dialog2.prototype.getDimension = function() {
      var dialogWidth = this.element.offsetWidth;
      var dialogHeight = this.element.offsetHeight;
      return { width: dialogWidth, height: dialogHeight };
    };
    Dialog2.prototype.show = function(isFullScreen) {
      var _this = this;
      if (!this.element.classList.contains(ROOT2)) {
        return;
      }
      if (!this.element.classList.contains(DLG_SHOW) || !isNullOrUndefined(isFullScreen)) {
        if (!isNullOrUndefined(isFullScreen)) {
          this.fullScreen(isFullScreen);
        }
        var eventArgs_1 = isBlazor() ? {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          maxHeight: this.element.style.maxHeight
        } : {
          cancel: false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          target: this.target,
          maxHeight: this.element.style.maxHeight
        };
        this.trigger("beforeOpen", eventArgs_1, function(beforeOpenArgs) {
          if (!beforeOpenArgs.cancel) {
            if (_this.element.style.maxHeight !== eventArgs_1.maxHeight) {
              _this.allowMaxHeight = false;
              _this.element.style.maxHeight = eventArgs_1.maxHeight;
            }
            _this.storeActiveElement = document.activeElement;
            _this.element.tabIndex = -1;
            if (_this.isModal && !isNullOrUndefined(_this.dlgOverlay)) {
              _this.dlgOverlay.style.display = "block";
              _this.dlgContainer.style.display = "flex";
              removeClass([_this.dlgOverlay], "e-fade");
              if (!isNullOrUndefined(_this.targetEle)) {
                if (_this.targetEle === document.body) {
                  _this.dlgContainer.style.position = "fixed";
                } else {
                  _this.dlgContainer.style.position = "absolute";
                }
                _this.dlgOverlay.style.position = "absolute";
                _this.element.style.position = "relative";
                addClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
              } else {
                addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
              }
            }
            var openAnimation = {
              name: _this.animationSettings.effect + "In",
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            var zIndexElement = _this.isModal ? _this.element.parentElement : _this.element;
            if (_this.calculatezIndex) {
              _this.setzIndex(zIndexElement, true);
              setStyleAttribute(_this.element, { "zIndex": _this.zIndex });
              if (_this.isModal) {
                _this.setOverlayZindex(_this.zIndex);
              }
            }
            _this.animationSettings.effect === "None" ? _this.popupObj.show() : _this.popupObj.show(openAnimation);
            _this.dialogOpen = true;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = true;
            _this.preventVisibility = true;
            _this.isProtectedOnChange = prevOnChange;
          }
        });
      }
      if (this.isReact) {
        this.renderReactTemplates();
      }
    };
    Dialog2.prototype.hide = function(event) {
      var _this = this;
      if (!this.element.classList.contains(ROOT2)) {
        return;
      }
      if (this.preventVisibility) {
        var eventArgs = isBlazor() ? {
          cancel: false,
          isInteracted: event ? true : false,
          element: this.element,
          container: this.isModal ? this.dlgContainer : this.element,
          event
        } : {
          cancel: false,
          isInteracted: event ? true : false,
          element: this.element,
          target: this.target,
          container: this.isModal ? this.dlgContainer : this.element,
          event,
          closedBy: this.dlgClosedBy
        };
        this.closeArgs = eventArgs;
        this.trigger("beforeClose", eventArgs, function(beforeCloseArgs) {
          if (!beforeCloseArgs.cancel) {
            if (_this.isModal) {
              if (!isNullOrUndefined(_this.targetEle)) {
                removeClass([_this.targetEle], [DLG_TARGET, SCROLL_DISABLED]);
              }
            }
            if (document.body.classList.contains(DLG_TARGET) && document.body.classList.contains(SCROLL_DISABLED)) {
              removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
            }
            var closeAnimation = {
              name: _this.animationSettings.effect + "Out",
              duration: _this.animationSettings.duration,
              delay: _this.animationSettings.delay
            };
            _this.animationSettings.effect === "None" ? _this.popupObj.hide() : _this.popupObj.hide(closeAnimation);
            _this.dialogOpen = false;
            var prevOnChange = _this.isProtectedOnChange;
            _this.isProtectedOnChange = true;
            _this.visible = false;
            _this.preventVisibility = false;
            _this.isProtectedOnChange = prevOnChange;
          }
          _this.dlgClosedBy = DLG_USER_ACTION_CLOSED;
        });
      }
    };
    Dialog2.prototype.fullScreen = function(args) {
      var top = this.element.offsetTop;
      var left = this.element.offsetLeft;
      if (args) {
        addClass([this.element], FULLSCREEN);
        var display = this.element.style.display;
        this.element.style.display = "none";
        this.element.style.maxHeight = !isNullOrUndefined(this.target) ? this.targetEle.offsetHeight + "px" : window.innerHeight + "px";
        this.element.style.display = display;
        addClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        if (this.allowDragging && !isNullOrUndefined(this.dragObj)) {
          this.dragObj.destroy();
        }
      } else {
        removeClass([this.element], FULLSCREEN);
        removeClass([document.body], [DLG_TARGET, SCROLL_DISABLED]);
        if (this.allowDragging && !isNullOrUndefined(this.headerContent)) {
          this.setAllowDragging();
        }
      }
      return args;
    };
    Dialog2.prototype.getButtons = function(index) {
      if (!isNullOrUndefined(index)) {
        return this.btnObj[index];
      }
      return this.btnObj;
    };
    __decorate14([
      Property("")
    ], Dialog2.prototype, "content", void 0);
    __decorate14([
      Property(true)
    ], Dialog2.prototype, "enableHtmlSanitizer", void 0);
    __decorate14([
      Property(false)
    ], Dialog2.prototype, "showCloseIcon", void 0);
    __decorate14([
      Property(false)
    ], Dialog2.prototype, "isModal", void 0);
    __decorate14([
      Property("")
    ], Dialog2.prototype, "header", void 0);
    __decorate14([
      Property(true)
    ], Dialog2.prototype, "visible", void 0);
    __decorate14([
      Property(false)
    ], Dialog2.prototype, "enableResize", void 0);
    __decorate14([
      Property(["South-East"])
    ], Dialog2.prototype, "resizeHandles", void 0);
    __decorate14([
      Property("auto")
    ], Dialog2.prototype, "height", void 0);
    __decorate14([
      Property("")
    ], Dialog2.prototype, "minHeight", void 0);
    __decorate14([
      Property("100%")
    ], Dialog2.prototype, "width", void 0);
    __decorate14([
      Property("")
    ], Dialog2.prototype, "cssClass", void 0);
    __decorate14([
      Property(1e3)
    ], Dialog2.prototype, "zIndex", void 0);
    __decorate14([
      Property(null)
    ], Dialog2.prototype, "target", void 0);
    __decorate14([
      Property("")
    ], Dialog2.prototype, "footerTemplate", void 0);
    __decorate14([
      Property(false)
    ], Dialog2.prototype, "allowDragging", void 0);
    __decorate14([
      Collection([{}], ButtonProps)
    ], Dialog2.prototype, "buttons", void 0);
    __decorate14([
      Property(true)
    ], Dialog2.prototype, "closeOnEscape", void 0);
    __decorate14([
      Complex({}, AnimationSettings)
    ], Dialog2.prototype, "animationSettings", void 0);
    __decorate14([
      Complex({ X: "center", Y: "center" }, PositionData)
    ], Dialog2.prototype, "position", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "created", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "open", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "beforeSanitizeHtml", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "beforeOpen", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "close", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "beforeClose", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "dragStart", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "dragStop", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "drag", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "overlayClick", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "resizeStart", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "resizing", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "resizeStop", void 0);
    __decorate14([
      Event2()
    ], Dialog2.prototype, "destroyed", void 0);
    Dialog2 = __decorate14([
      NotifyPropertyChanges
    ], Dialog2);
    return Dialog2;
  }(Component)
);
var DialogUtility;
(function(DialogUtility2) {
  function alert(args) {
    var dialogComponent;
    var dialogElement = createElement("div", { "className": DLG_UTIL_ALERT });
    document.body.appendChild(dialogElement);
    var alertDialogObj;
    var okButtonModel = [{
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    }];
    if (typeof args === "string") {
      alertDialogObj = createDialog({
        content: args,
        position: { X: "center", Y: "top" },
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okButtonModel
      }, dialogElement);
    } else {
      alertDialogObj = createDialog(alertOptions(args), dialogElement);
    }
    alertDialogObj.close = function() {
      if (args && args.close) {
        args.close.apply(alertDialogObj);
      }
      alertDialogObj.destroy();
      if (alertDialogObj.element.classList.contains("e-dlg-modal")) {
        alertDialogObj.element.parentElement.remove();
        alertDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        alertDialogObj.element.remove();
      }
    };
    return alertDialogObj;
  }
  DialogUtility2.alert = alert;
  function confirm(args) {
    var dialogComponent;
    var dialogElement = createElement("div", { "className": DLG_UTIL_CONFIRM });
    document.body.appendChild(dialogElement);
    var confirmDialogObj;
    var okCancelButtonModel = [{
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    }, {
      buttonModel: { content: "Cancel" },
      click: function() {
        this.hide();
      }
    }];
    if (typeof args === "string") {
      confirmDialogObj = createDialog({
        position: { X: "center", Y: "top" },
        content: args,
        isModal: true,
        header: DLG_UTIL_DEFAULT_TITLE,
        buttons: okCancelButtonModel
      }, dialogElement);
    } else {
      confirmDialogObj = createDialog(confirmOptions(args), dialogElement);
    }
    confirmDialogObj.close = function() {
      if (args && args.close) {
        args.close.apply(confirmDialogObj);
      }
      confirmDialogObj.destroy();
      if (confirmDialogObj.element.classList.contains("e-dlg-modal")) {
        confirmDialogObj.element.parentElement.remove();
        confirmDialogObj.target.classList.remove(DLG_UTIL_ROOT);
      } else {
        confirmDialogObj.element.remove();
      }
    };
    return confirmDialogObj;
  }
  DialogUtility2.confirm = confirm;
  function createDialog(options, element2) {
    var dialogObject = new Dialog(options);
    dialogObject.appendTo(element2);
    return dialogObject;
  }
  function alertOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setAlertButtonModel(options, option);
    return options;
  }
  function confirmOptions(option) {
    var options = {};
    options.buttons = [];
    options = formOptions(options, option);
    options = setConfirmButtonModel(options, option);
    return options;
  }
  function formOptions(options, option) {
    options.header = !isNullOrUndefined(option.title) ? option.title : DLG_UTIL_DEFAULT_TITLE;
    options.content = !isNullOrUndefined(option.content) ? option.content : "";
    options.isModal = !isNullOrUndefined(option.isModal) ? option.isModal : true;
    options.showCloseIcon = !isNullOrUndefined(option.showCloseIcon) ? option.showCloseIcon : false;
    options.allowDragging = !isNullOrUndefined(option.isDraggable) ? option.isDraggable : false;
    options.closeOnEscape = !isNullOrUndefined(option.closeOnEscape) ? option.closeOnEscape : false;
    options.position = !isNullOrUndefined(option.position) ? option.position : { X: "center", Y: "top" };
    options.animationSettings = !isNullOrUndefined(option.animationSettings) ? option.animationSettings : { effect: "Fade", duration: 400, delay: 0 };
    options.cssClass = !isNullOrUndefined(option.cssClass) ? option.cssClass : "";
    options.zIndex = !isNullOrUndefined(option.zIndex) ? option.zIndex : 1e3;
    options.open = !isNullOrUndefined(option.open) ? option.open : null;
    return options;
  }
  function setAlertButtonModel(options, option) {
    var alertButtonModel = [{
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    }];
    if (!isNullOrUndefined(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, alertButtonModel[0]);
    } else {
      options.buttons = alertButtonModel;
    }
    return options;
  }
  function setConfirmButtonModel(options, option) {
    var okButtonModel = {
      buttonModel: { isPrimary: true, content: "OK" },
      click: function() {
        this.hide();
      }
    };
    var cancelButtonModel = {
      buttonModel: { content: "Cancel" },
      click: function() {
        this.hide();
      }
    };
    if (!isNullOrUndefined(option.okButton)) {
      options.buttons[0] = formButtonModel(options.buttons[0], option.okButton, okButtonModel);
    } else {
      options.buttons[0] = okButtonModel;
    }
    if (!isNullOrUndefined(option.cancelButton)) {
      options.buttons[1] = formButtonModel(options.buttons[1], option.cancelButton, cancelButtonModel);
    } else {
      options.buttons[1] = cancelButtonModel;
    }
    return options;
  }
  function formButtonModel(buttonModel, option, buttonPropModel) {
    var buttonProps = buttonPropModel;
    if (!isNullOrUndefined(option.text)) {
      buttonProps.buttonModel.content = option.text;
    }
    if (!isNullOrUndefined(option.icon)) {
      buttonProps.buttonModel.iconCss = option.icon;
    }
    if (!isNullOrUndefined(option.cssClass)) {
      buttonProps.buttonModel.cssClass = option.cssClass;
    }
    if (!isNullOrUndefined(option.click)) {
      buttonProps.click = option.click;
    }
    return buttonProps;
  }
})(DialogUtility || (DialogUtility = {}));

// node_modules/@syncfusion/ej2-popups/src/tooltip/tooltip.js
var __extends15 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate15 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TOUCHEND_HIDE_DELAY = 1500;
var TAPHOLD_THRESHOLD = 500;
var SHOW_POINTER_TIP_GAP = 0;
var HIDE_POINTER_TIP_GAP = 8;
var MOUSE_TRAIL_GAP = 2;
var POINTER_ADJUST = 2;
var ROOT3 = "e-tooltip";
var RTL6 = "e-rtl";
var DEVICE3 = "e-bigger";
var ICON3 = "e-icons";
var CLOSE = "e-tooltip-close";
var TOOLTIP_WRAP = "e-tooltip-wrap";
var CONTENT2 = "e-tip-content";
var ARROW_TIP = "e-arrow-tip";
var ARROW_TIP_OUTER = "e-arrow-tip-outer";
var ARROW_TIP_INNER = "e-arrow-tip-inner";
var TIP_BOTTOM = "e-tip-bottom";
var TIP_TOP = "e-tip-top";
var TIP_LEFT = "e-tip-left";
var TIP_RIGHT = "e-tip-right";
var POPUP_ROOT2 = "e-popup";
var POPUP_OPEN = "e-popup-open";
var POPUP_CLOSE = "e-popup-close";
var POPUP_LIB = "e-lib";
var HIDE_POPUP = "e-hidden";
var POPUP_CONTAINER = "e-tooltip-popup-container";
var Animation2 = (
  /** @class */
  function(_super) {
    __extends15(Animation3, _super);
    function Animation3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate15([
      Property({ effect: "FadeIn", duration: 150, delay: 0 })
    ], Animation3.prototype, "open", void 0);
    __decorate15([
      Property({ effect: "FadeOut", duration: 150, delay: 0 })
    ], Animation3.prototype, "close", void 0);
    return Animation3;
  }(ChildProperty)
);
var Tooltip = (
  /** @class */
  function(_super) {
    __extends15(Tooltip2, _super);
    function Tooltip2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.mouseMoveEvent = null;
      _this.mouseMoveTarget = null;
      _this.containerElement = null;
      _this.isBodyContainer = true;
      return _this;
    }
    Tooltip2.prototype.initialize = function() {
      this.formatPosition();
      addClass([this.element], ROOT3);
    };
    Tooltip2.prototype.formatPosition = function() {
      var _a, _b;
      if (this.position.indexOf("Top") === 0 || this.position.indexOf("Bottom") === 0) {
        _a = this.position.split(/(?=[A-Z])/), this.tooltipPositionY = _a[0], this.tooltipPositionX = _a[1];
      } else {
        _b = this.position.split(/(?=[A-Z])/), this.tooltipPositionX = _b[0], this.tooltipPositionY = _b[1];
      }
    };
    Tooltip2.prototype.renderArrow = function() {
      this.setTipClass(this.position);
      var tip = this.createElement("div", { className: ARROW_TIP + " " + this.tipClass });
      tip.appendChild(this.createElement("div", { className: ARROW_TIP_OUTER + " " + this.tipClass }));
      tip.appendChild(this.createElement("div", { className: ARROW_TIP_INNER + " " + this.tipClass }));
      this.tooltipEle.appendChild(tip);
    };
    Tooltip2.prototype.setTipClass = function(position) {
      if (position.indexOf("Right") === 0) {
        this.tipClass = TIP_LEFT;
      } else if (position.indexOf("Bottom") === 0) {
        this.tipClass = TIP_TOP;
      } else if (position.indexOf("Left") === 0) {
        this.tipClass = TIP_RIGHT;
      } else {
        this.tipClass = TIP_BOTTOM;
      }
    };
    Tooltip2.prototype.renderPopup = function(target) {
      var elePos = this.mouseTrail ? { top: 0, left: 0 } : this.getTooltipPosition(target);
      this.tooltipEle.classList.remove(POPUP_LIB);
      this.popupObj = new Popup(this.tooltipEle, {
        height: this.height,
        width: this.width,
        position: { X: elePos.left, Y: elePos.top },
        enableRtl: this.enableRtl,
        open: this.openPopupHandler.bind(this),
        close: this.closePopupHandler.bind(this)
      });
    };
    Tooltip2.prototype.getTooltipPosition = function(target) {
      this.tooltipEle.style.display = "block";
      var pos = calculatePosition(target, this.tooltipPositionX, this.tooltipPositionY, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
      var offsetPos = this.calculateTooltipOffset(this.position);
      var collisionPosition = this.calculateElementPosition(pos, offsetPos);
      var collisionLeft = collisionPosition[0];
      var collisionTop = collisionPosition[1];
      var elePos = this.collisionFlipFit(target, collisionLeft, collisionTop);
      this.tooltipEle.style.display = "";
      return elePos;
    };
    Tooltip2.prototype.windowResize = function() {
      this.reposition(this.findTarget());
    };
    Tooltip2.prototype.reposition = function(target) {
      if (this.popupObj && target) {
        var elePos = this.getTooltipPosition(target);
        this.popupObj.position = { X: elePos.left, Y: elePos.top };
        this.popupObj.dataBind();
      }
    };
    Tooltip2.prototype.openPopupHandler = function() {
      if (!this.mouseTrail && this.needTemplateReposition()) {
        this.reposition(this.findTarget());
      }
      this.trigger("afterOpen", this.tooltipEventArgs);
    };
    Tooltip2.prototype.closePopupHandler = function() {
      this.clearTemplate(["content"]);
      this.clear();
      this.trigger("afterClose", this.tooltipEventArgs);
    };
    Tooltip2.prototype.calculateTooltipOffset = function(position) {
      var pos = { top: 0, left: 0 };
      var tooltipEleWidth = this.tooltipEle.offsetWidth;
      var tooltipEleHeight = this.tooltipEle.offsetHeight;
      var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
      var tipWidth = arrowEle ? arrowEle.offsetWidth : 0;
      var tipHeight = arrowEle ? arrowEle.offsetHeight : 0;
      var tipAdjust = this.showTipPointer ? SHOW_POINTER_TIP_GAP : HIDE_POINTER_TIP_GAP;
      var tipHeightAdjust = tipHeight / 2 + POINTER_ADJUST + (this.tooltipEle.offsetHeight - this.tooltipEle.clientHeight);
      var tipWidthAdjust = tipWidth / 2 + POINTER_ADJUST + (this.tooltipEle.offsetWidth - this.tooltipEle.clientWidth);
      if (this.mouseTrail) {
        tipAdjust += MOUSE_TRAIL_GAP;
      }
      switch (position) {
        case "RightTop":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;
        case "RightCenter":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;
        case "RightBottom":
          pos.left += tipWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case "BottomRight":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        case "BottomCenter":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;
        case "BottomLeft":
          pos.top += tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;
        case "LeftBottom":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tipHeightAdjust;
          break;
        case "LeftCenter":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight / 2;
          break;
        case "LeftTop":
          pos.left -= tipWidth + tooltipEleWidth + tipAdjust;
          pos.top -= tooltipEleHeight - tipHeightAdjust;
          break;
        case "TopLeft":
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth - tipWidthAdjust;
          break;
        case "TopRight":
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tipWidthAdjust;
          break;
        default:
          pos.top -= tooltipEleHeight + tipHeight + tipAdjust;
          pos.left -= tooltipEleWidth / 2;
          break;
      }
      pos.left += this.offsetX;
      pos.top += this.offsetY;
      return pos;
    };
    Tooltip2.prototype.updateTipPosition = function(position) {
      var selEle = selectAll("." + ARROW_TIP + ",." + ARROW_TIP_OUTER + ",." + ARROW_TIP_INNER, this.tooltipEle);
      var removeList = [TIP_BOTTOM, TIP_TOP, TIP_LEFT, TIP_RIGHT];
      removeClass(selEle, removeList);
      this.setTipClass(position);
      addClass(selEle, this.tipClass);
    };
    Tooltip2.prototype.adjustArrow = function(target, position, tooltipPositionX, tooltipPositionY) {
      if (this.showTipPointer === false) {
        return;
      }
      this.updateTipPosition(position);
      var leftValue;
      var topValue;
      this.tooltipEle.style.display = "block";
      var tooltipWidth = this.tooltipEle.clientWidth;
      var tooltipHeight = this.tooltipEle.clientHeight;
      var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
      var arrowInnerELe = select("." + ARROW_TIP_INNER, this.tooltipEle);
      var tipWidth = arrowEle.offsetWidth;
      var tipHeight = arrowEle.offsetHeight;
      this.tooltipEle.style.display = "";
      if (this.tipClass === TIP_BOTTOM || this.tipClass === TIP_TOP) {
        if (this.tipClass === TIP_BOTTOM) {
          topValue = "99.9%";
          arrowInnerELe.style.top = "-" + (tipHeight - 2) + "px";
        } else {
          topValue = -(tipHeight - 1) + "px";
          arrowInnerELe.style.top = "-" + (tipHeight - 6) + "px";
        }
        if (target) {
          var tipPosExclude = tooltipPositionX !== "Center" || tooltipWidth > target.offsetWidth || this.mouseTrail;
          if (tipPosExclude && tooltipPositionX === "Left" || !tipPosExclude && this.tipPointerPosition === "End") {
            leftValue = tooltipWidth - tipWidth - POINTER_ADJUST + "px";
          } else if (tipPosExclude && tooltipPositionX === "Right" || !tipPosExclude && this.tipPointerPosition === "Start") {
            leftValue = POINTER_ADJUST + "px";
          } else {
            leftValue = tooltipWidth / 2 - tipWidth / 2 + "px";
          }
        }
      } else {
        if (this.tipClass === TIP_RIGHT) {
          leftValue = "99.9%";
          arrowInnerELe.style.left = "-" + (tipWidth - 2) + "px";
        } else {
          leftValue = -(tipWidth - 1) + "px";
          arrowInnerELe.style.left = -tipWidth + (tipWidth - 2) + "px";
        }
        var tipPosExclude = tooltipPositionY !== "Center" || tooltipHeight > target.offsetHeight || this.mouseTrail;
        if (tipPosExclude && tooltipPositionY === "Top" || !tipPosExclude && this.tipPointerPosition === "End") {
          topValue = tooltipHeight - tipHeight - POINTER_ADJUST + "px";
        } else if (tipPosExclude && tooltipPositionY === "Bottom" || !tipPosExclude && this.tipPointerPosition === "Start") {
          topValue = POINTER_ADJUST + "px";
        } else {
          topValue = tooltipHeight / 2 - tipHeight / 2 + "px";
        }
      }
      arrowEle.style.top = topValue;
      arrowEle.style.left = leftValue;
    };
    Tooltip2.prototype.renderContent = function(target) {
      var tooltipContent = select("." + CONTENT2, this.tooltipEle);
      if (this.cssClass) {
        addClass([this.tooltipEle], this.cssClass.split(" "));
      }
      if (target && !isNullOrUndefined(target.getAttribute("title"))) {
        target.setAttribute("data-content", target.getAttribute("title"));
        target.removeAttribute("title");
      }
      if (!isNullOrUndefined(this.content)) {
        tooltipContent.innerHTML = "";
        if (this.content instanceof HTMLElement) {
          tooltipContent.appendChild(this.content);
        } else if (typeof this.content === "string") {
          if (this.enableHtmlSanitizer) {
            this.setProperties({ content: SanitizeHtmlHelper.sanitize(this.content) }, true);
          }
          tooltipContent[this.enableHtmlParse ? "innerHTML" : "textContent"] = this.content;
        } else {
          var templateFunction = compile2(this.content);
          var tempArr = templateFunction({}, this, "content", this.element.id + "content", void 0, void 0, tooltipContent);
          if (tempArr) {
            append(tempArr, tooltipContent);
          }
          this.renderReactTemplates();
        }
      } else {
        if (target && !isNullOrUndefined(target.getAttribute("data-content"))) {
          tooltipContent.innerHTML = target.getAttribute("data-content");
        }
      }
    };
    Tooltip2.prototype.renderCloseIcon = function() {
      if (!this.isSticky) {
        return;
      }
      var tipClose = this.createElement("div", { className: ICON3 + " " + CLOSE });
      this.tooltipEle.appendChild(tipClose);
      EventHandler.add(tipClose, Browser.touchStartEvent, this.onStickyClose, this);
    };
    Tooltip2.prototype.addDescribedBy = function(target, id) {
      var describedby = (target.getAttribute("aria-describedby") || "").split(/\s+/);
      if (describedby.indexOf(id) < 0) {
        describedby.push(id);
      }
      attributes(target, { "aria-describedby": describedby.join(" ").trim(), "data-tooltip-id": id });
    };
    Tooltip2.prototype.removeDescribedBy = function(target) {
      var id = target.getAttribute("data-tooltip-id");
      var describedby = (target.getAttribute("aria-describedby") || "").split(/\s+/);
      var index = describedby.indexOf(id);
      if (index !== -1) {
        describedby.splice(index, 1);
      }
      target.removeAttribute("data-tooltip-id");
      var orgdescribedby = describedby.join(" ").trim();
      if (orgdescribedby) {
        target.setAttribute("aria-describedby", orgdescribedby);
      } else {
        target.removeAttribute("aria-describedby");
      }
    };
    Tooltip2.prototype.tapHoldHandler = function(evt) {
      clearTimeout(this.autoCloseTimer);
      this.targetHover(evt.originalEvent);
    };
    Tooltip2.prototype.touchEndHandler = function(e) {
      var _this = this;
      if (this.isSticky) {
        return;
      }
      var close = function() {
        _this.close();
      };
      this.autoCloseTimer = setTimeout(close, TOUCHEND_HIDE_DELAY);
    };
    Tooltip2.prototype.targetClick = function(e) {
      var target;
      if (this.target) {
        target = closest(e.target, this.target);
      } else {
        target = this.element;
      }
      if (isNullOrUndefined(target)) {
        return;
      }
      if (target.getAttribute("data-tooltip-id") === null) {
        this.targetHover(e);
      } else if (!this.isSticky) {
        this.hideTooltip(this.animation.close, e, target);
      }
    };
    Tooltip2.prototype.targetHover = function(e) {
      var target;
      if (this.target) {
        target = closest(e.target, this.target);
      } else {
        target = this.element;
      }
      if (isNullOrUndefined(target) || target.getAttribute("data-tooltip-id") !== null && this.closeDelay === 0) {
        return;
      }
      var targetList = [].slice.call(selectAll('[data-tooltip-id= "' + this.ctrlId + '_content"]', document));
      for (var _i = 0, targetList_1 = targetList; _i < targetList_1.length; _i++) {
        var target_1 = targetList_1[_i];
        this.restoreElement(target_1);
      }
      this.showTooltip(target, this.animation.open, e);
    };
    Tooltip2.prototype.mouseMoveBeforeOpen = function(e) {
      this.mouseMoveEvent = e;
    };
    Tooltip2.prototype.mouseMoveBeforeRemove = function() {
      if (this.mouseMoveTarget) {
        EventHandler.remove(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen);
      }
    };
    Tooltip2.prototype.showTooltip = function(target, showAnimation, e) {
      var _this = this;
      clearTimeout(this.showTimer);
      clearTimeout(this.hideTimer);
      if (this.openDelay && this.mouseTrail) {
        this.mouseMoveBeforeRemove();
        this.mouseMoveTarget = target;
        EventHandler.add(this.mouseMoveTarget, "mousemove touchstart", this.mouseMoveBeforeOpen, this);
      }
      this.tooltipEventArgs = {
        type: e ? e.type : null,
        cancel: false,
        target,
        event: e ? e : null,
        element: this.tooltipEle,
        isInteracted: !isNullOrUndefined(e)
      };
      var observeCallback = function(beforeRenderArgs) {
        _this.beforeRenderCallback(beforeRenderArgs, target, e, showAnimation);
      };
      this.trigger("beforeRender", this.tooltipEventArgs, observeCallback.bind(this));
    };
    Tooltip2.prototype.beforeRenderCallback = function(beforeRenderArgs, target, e, showAnimation) {
      if (beforeRenderArgs.cancel) {
        this.isHidden = true;
        this.clear();
        this.mouseMoveBeforeRemove();
      } else {
        this.isHidden = false;
        if (isNullOrUndefined(this.tooltipEle)) {
          this.ctrlId = this.element.getAttribute("id") ? getUniqueID(this.element.getAttribute("id")) : getUniqueID("tooltip");
          this.tooltipEle = this.createElement("div", {
            className: TOOLTIP_WRAP + " " + POPUP_ROOT2 + " " + POPUP_LIB,
            attrs: {
              role: "tooltip",
              "aria-hidden": "false",
              "id": this.ctrlId + "_content"
            },
            styles: "width:" + formatUnit(this.width) + ";height:" + formatUnit(this.height) + ";position:absolute;"
          });
          this.tooltipBeforeRender(target, this);
          this.tooltipAfterRender(target, e, showAnimation, this);
        } else {
          if (target) {
            this.adjustArrow(target, this.position, this.tooltipPositionX, this.tooltipPositionY);
            this.addDescribedBy(target, this.ctrlId + "_content");
            this.renderContent(target);
            Animation.stop(this.tooltipEle);
            this.reposition(target);
            this.tooltipAfterRender(target, e, showAnimation, this);
          }
        }
      }
    };
    Tooltip2.prototype.appendContainer = function(ctrlObj) {
      if (typeof this.container == "string") {
        if (this.container === "body") {
          this.containerElement = document.body;
        } else {
          this.isBodyContainer = false;
          this.containerElement = select(this.container, document);
        }
      } else if (this.container instanceof HTMLElement) {
        this.containerElement = this.container;
        this.isBodyContainer = this.containerElement.tagName === "BODY";
      }
      if (!this.isBodyContainer) {
        addClass([this.containerElement], POPUP_CONTAINER);
      }
      this.containerElement.appendChild(ctrlObj.tooltipEle);
    };
    Tooltip2.prototype.tooltipBeforeRender = function(target, ctrlObj) {
      if (target) {
        if (Browser.isDevice) {
          addClass([ctrlObj.tooltipEle], DEVICE3);
        }
        if (ctrlObj.width !== "auto") {
          ctrlObj.tooltipEle.style.maxWidth = formatUnit(ctrlObj.width);
        }
        ctrlObj.tooltipEle.appendChild(ctrlObj.createElement("div", { className: CONTENT2 }));
        this.appendContainer(ctrlObj);
        removeClass([ctrlObj.tooltipEle], HIDE_POPUP);
        ctrlObj.addDescribedBy(target, ctrlObj.ctrlId + "_content");
        ctrlObj.renderContent(target);
        addClass([ctrlObj.tooltipEle], POPUP_OPEN);
        if (ctrlObj.showTipPointer) {
          ctrlObj.renderArrow();
        }
        ctrlObj.renderCloseIcon();
        ctrlObj.renderPopup(target);
        ctrlObj.adjustArrow(target, ctrlObj.position, ctrlObj.tooltipPositionX, ctrlObj.tooltipPositionY);
        Animation.stop(ctrlObj.tooltipEle);
        ctrlObj.reposition(target);
      }
    };
    Tooltip2.prototype.tooltipAfterRender = function(target, e, showAnimation, ctrlObj) {
      if (target) {
        removeClass([ctrlObj.tooltipEle], POPUP_OPEN);
        addClass([ctrlObj.tooltipEle], POPUP_CLOSE);
        ctrlObj.tooltipEventArgs = {
          type: e ? e.type : null,
          cancel: false,
          target,
          event: e ? e : null,
          element: ctrlObj.tooltipEle,
          isInteracted: !isNullOrUndefined(e)
        };
        if (ctrlObj.needTemplateReposition() && !ctrlObj.mouseTrail) {
          ctrlObj.tooltipEle.style.display = "none";
        }
        var observeCallback = function(observedArgs) {
          ctrlObj.beforeOpenCallback(observedArgs, target, showAnimation, e);
        };
        ctrlObj.trigger("beforeOpen", ctrlObj.tooltipEventArgs, observeCallback.bind(ctrlObj));
      }
    };
    Tooltip2.prototype.beforeOpenCallback = function(observedArgs, target, showAnimation, e) {
      var _this = this;
      if (observedArgs.cancel) {
        this.isHidden = true;
        this.clear();
        this.mouseMoveBeforeRemove();
        this.restoreElement(target);
      } else {
        var openAnimation_1 = {
          name: showAnimation.effect,
          duration: showAnimation.duration,
          delay: showAnimation.delay,
          timingFunction: "easeOut"
        };
        if (showAnimation.effect === "None") {
          openAnimation_1 = void 0;
        }
        if (this.openDelay > 0) {
          var show = function() {
            if (_this.mouseTrail) {
              EventHandler.add(target, "mousemove touchstart mouseenter", _this.onMouseMove, _this);
            }
            if (_this.popupObj) {
              _this.popupObj.show(openAnimation_1, target);
              if (_this.mouseMoveEvent && _this.mouseTrail) {
                _this.onMouseMove(_this.mouseMoveEvent);
              }
            }
          };
          this.showTimer = setTimeout(show, this.openDelay);
        } else {
          if (this.popupObj) {
            this.popupObj.show(openAnimation_1, target);
          }
        }
      }
      if (e) {
        this.wireMouseEvents(e, target);
      }
    };
    Tooltip2.prototype.needTemplateReposition = function() {
      var tooltip = this;
      return !isNullOrUndefined(tooltip.viewContainerRef) && typeof tooltip.viewContainerRef !== "string";
    };
    Tooltip2.prototype.checkCollision = function(target, x, y) {
      var elePos = {
        left: x,
        top: y,
        position: this.position,
        horizontal: this.tooltipPositionX,
        vertical: this.tooltipPositionY
      };
      var affectedPos = isCollide(this.tooltipEle, this.checkCollideTarget(), x, y);
      if (affectedPos.length > 0) {
        elePos.horizontal = affectedPos.indexOf("left") >= 0 ? "Right" : affectedPos.indexOf("right") >= 0 ? "Left" : this.tooltipPositionX;
        elePos.vertical = affectedPos.indexOf("top") >= 0 ? "Bottom" : affectedPos.indexOf("bottom") >= 0 ? "Top" : this.tooltipPositionY;
      }
      return elePos;
    };
    Tooltip2.prototype.calculateElementPosition = function(pos, offsetPos) {
      return [
        this.isBodyContainer ? pos.left + offsetPos.left : pos.left - this.containerElement.offsetLeft + offsetPos.left + window.pageXOffset + this.containerElement.scrollLeft,
        this.isBodyContainer ? pos.top + offsetPos.top : pos.top - this.containerElement.offsetTop + offsetPos.top + window.pageYOffset + this.containerElement.scrollTop
      ];
    };
    Tooltip2.prototype.collisionFlipFit = function(target, x, y) {
      var elePos = this.checkCollision(target, x, y);
      var newpos = elePos.position;
      if (this.tooltipPositionY !== elePos.vertical) {
        newpos = this.position.indexOf("Bottom") === 0 || this.position.indexOf("Top") === 0 ? elePos.vertical + this.tooltipPositionX : this.tooltipPositionX + elePos.vertical;
      }
      if (this.tooltipPositionX !== elePos.horizontal) {
        if (newpos.indexOf("Left") === 0) {
          elePos.vertical = newpos === "LeftTop" || newpos === "LeftCenter" ? "Top" : "Bottom";
          newpos = elePos.vertical + "Left";
        }
        if (newpos.indexOf("Right") === 0) {
          elePos.vertical = newpos === "RightTop" || newpos === "RightCenter" ? "Top" : "Bottom";
          newpos = elePos.vertical + "Right";
        }
        elePos.horizontal = this.tooltipPositionX;
      }
      this.tooltipEventArgs = {
        type: null,
        cancel: false,
        target,
        event: null,
        element: this.tooltipEle,
        collidedPosition: newpos
      };
      this.trigger("beforeCollision", this.tooltipEventArgs);
      var elePosVertical = elePos.vertical;
      var elePosHorizontal = elePos.horizontal;
      if (elePos.position !== newpos) {
        var pos = calculatePosition(target, elePosHorizontal, elePosVertical, !this.isBodyContainer, this.isBodyContainer ? null : this.containerElement.getBoundingClientRect());
        this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
        var offsetPos = this.calculateTooltipOffset(newpos);
        offsetPos.top -= this.getOffSetPosition("TopBottom", newpos, this.offsetY);
        offsetPos.left -= this.getOffSetPosition("RightLeft", newpos, this.offsetX);
        elePos.position = newpos;
        var elePosition = this.calculateElementPosition(pos, offsetPos);
        elePos.left = elePosition[0];
        elePos.top = elePosition[1];
      } else {
        this.adjustArrow(target, newpos, elePosHorizontal, elePosVertical);
      }
      var eleOffset = { left: elePos.left, top: elePos.top };
      var left = this.isBodyContainer ? fit(this.tooltipEle, this.checkCollideTarget(), { X: true, Y: false }, eleOffset).left : eleOffset.left;
      this.tooltipEle.style.display = "block";
      if (this.showTipPointer && (newpos.indexOf("Bottom") === 0 || newpos.indexOf("Top") === 0)) {
        var arrowEle = select("." + ARROW_TIP, this.tooltipEle);
        var arrowleft = parseInt(arrowEle.style.left, 10) - (left - elePos.left);
        if (arrowleft < 0) {
          arrowleft = 0;
        } else if (arrowleft + arrowEle.offsetWidth > this.tooltipEle.clientWidth) {
          arrowleft = this.tooltipEle.clientWidth - arrowEle.offsetWidth;
        }
        arrowEle.style.left = arrowleft.toString() + "px";
      }
      this.tooltipEle.style.display = "";
      eleOffset.left = left;
      return eleOffset;
    };
    Tooltip2.prototype.getOffSetPosition = function(positionString, newPos, offsetType) {
      return positionString.indexOf(this.position.split(/(?=[A-Z])/)[0]) !== -1 && positionString.indexOf(newPos.split(/(?=[A-Z])/)[0]) !== -1 ? 2 * offsetType : 0;
    };
    Tooltip2.prototype.checkCollideTarget = function() {
      return !this.windowCollision && this.target ? this.element : null;
    };
    Tooltip2.prototype.hideTooltip = function(hideAnimation, e, targetElement2) {
      var _this = this;
      if (this.closeDelay > 0) {
        clearTimeout(this.hideTimer);
        clearTimeout(this.showTimer);
        var hide = function() {
          if (_this.closeDelay && _this.tooltipEle && _this.isTooltipOpen) {
            return;
          }
          _this.tooltipHide(hideAnimation, e, targetElement2);
        };
        this.hideTimer = setTimeout(hide, this.closeDelay);
      } else {
        this.tooltipHide(hideAnimation, e, targetElement2);
      }
    };
    Tooltip2.prototype.tooltipHide = function(hideAnimation, e, targetElement2) {
      var _this = this;
      var target;
      if (e) {
        target = this.target ? targetElement2 || e.target : this.element;
      } else {
        target = select('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
      }
      this.tooltipEventArgs = {
        type: e ? e.type : null,
        cancel: false,
        target,
        event: e ? e : null,
        element: this.tooltipEle,
        isInteracted: !isNullOrUndefined(e)
      };
      this.trigger("beforeClose", this.tooltipEventArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.mouseMoveBeforeRemove();
          _this.popupHide(hideAnimation, target);
        } else {
          _this.isHidden = false;
        }
      });
    };
    Tooltip2.prototype.popupHide = function(hideAnimation, target) {
      if (target) {
        this.restoreElement(target);
      }
      this.isHidden = true;
      var closeAnimation = {
        name: hideAnimation.effect,
        duration: hideAnimation.duration,
        delay: hideAnimation.delay,
        timingFunction: "easeIn"
      };
      if (hideAnimation.effect === "None") {
        closeAnimation = void 0;
      }
      if (this.popupObj) {
        this.popupObj.hide(closeAnimation);
      }
    };
    Tooltip2.prototype.restoreElement = function(target) {
      this.unwireMouseEvents(target);
      if (!isNullOrUndefined(target.getAttribute("data-content"))) {
        target.setAttribute("title", target.getAttribute("data-content"));
        target.removeAttribute("data-content");
      }
      this.removeDescribedBy(target);
    };
    Tooltip2.prototype.clear = function() {
      if (this.tooltipEle) {
        removeClass([this.tooltipEle], POPUP_CLOSE);
        addClass([this.tooltipEle], POPUP_OPEN);
      }
      if (this.isHidden) {
        if (this.popupObj) {
          this.popupObj.destroy();
        }
        if (this.tooltipEle) {
          remove(this.tooltipEle);
        }
        this.tooltipEle = null;
        this.popupObj = null;
      }
    };
    Tooltip2.prototype.tooltipHover = function(e) {
      if (this.tooltipEle) {
        this.isTooltipOpen = true;
      }
    };
    Tooltip2.prototype.tooltipMouseOut = function(e) {
      this.isTooltipOpen = false;
      this.hideTooltip(this.animation.close, e, this.findTarget());
    };
    Tooltip2.prototype.onMouseOut = function(e) {
      var enteredElement = e.relatedTarget;
      if (enteredElement && !this.mouseTrail) {
        var checkForTooltipElement = closest(enteredElement, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT2);
        if (checkForTooltipElement) {
          EventHandler.add(checkForTooltipElement, "mouseleave", this.tooltipElementMouseOut, this);
        } else {
          this.hideTooltip(this.animation.close, e, this.findTarget());
          if (this.closeDelay === 0) {
            this.clear();
          }
        }
      } else {
        this.hideTooltip(this.animation.close, e, this.findTarget());
        this.clear();
      }
    };
    Tooltip2.prototype.tooltipElementMouseOut = function(e) {
      this.hideTooltip(this.animation.close, e, this.findTarget());
      EventHandler.remove(this.element, "mouseleave", this.tooltipElementMouseOut);
      this.clear();
    };
    Tooltip2.prototype.onStickyClose = function(e) {
      this.close();
    };
    Tooltip2.prototype.onMouseMove = function(event) {
      var eventPageX = 0;
      var eventPageY = 0;
      if (event.type.indexOf("touch") > -1) {
        event.preventDefault();
        eventPageX = event.touches[0].pageX;
        eventPageY = event.touches[0].pageY;
      } else {
        eventPageX = event.pageX;
        eventPageY = event.pageY;
      }
      Animation.stop(this.tooltipEle);
      removeClass([this.tooltipEle], POPUP_CLOSE);
      addClass([this.tooltipEle], POPUP_OPEN);
      this.adjustArrow(event.target, this.position, this.tooltipPositionX, this.tooltipPositionY);
      var pos = this.calculateTooltipOffset(this.position);
      var x = eventPageX + pos.left + this.offsetX;
      var y = eventPageY + pos.top + this.offsetY;
      var elePos = this.checkCollision(event.target, x, y);
      if (this.tooltipPositionX !== elePos.horizontal || this.tooltipPositionY !== elePos.vertical) {
        var newpos = this.position.indexOf("Bottom") === 0 || this.position.indexOf("Top") === 0 ? elePos.vertical + elePos.horizontal : elePos.horizontal + elePos.vertical;
        elePos.position = newpos;
        this.adjustArrow(event.target, elePos.position, elePos.horizontal, elePos.vertical);
        var colpos = this.calculateTooltipOffset(elePos.position);
        elePos.left = eventPageX + colpos.left - this.offsetX;
        elePos.top = eventPageY + colpos.top - this.offsetY;
      }
      this.tooltipEle.style.left = elePos.left + "px";
      this.tooltipEle.style.top = elePos.top + "px";
    };
    Tooltip2.prototype.keyDown = function(event) {
      if (this.tooltipEle && event.keyCode === 27) {
        this.close();
      }
    };
    Tooltip2.prototype.touchEnd = function(e) {
      if (this.tooltipEle && closest(e.target, "." + ROOT3) === null && !this.isSticky) {
        this.close();
      }
    };
    Tooltip2.prototype.scrollHandler = function(e) {
      if (this.tooltipEle) {
        if (!closest(e.target, "." + TOOLTIP_WRAP + "." + POPUP_LIB + "." + POPUP_ROOT2)) {
          this.close();
        }
      }
    };
    Tooltip2.prototype.render = function() {
      this.initialize();
      this.wireEvents(this.opensOn);
      this.renderComplete();
    };
    Tooltip2.prototype.preRender = function() {
      this.tipClass = TIP_BOTTOM;
      this.tooltipPositionX = "Center";
      this.tooltipPositionY = "Top";
      this.isHidden = true;
    };
    Tooltip2.prototype.wireEvents = function(trigger) {
      var triggerList = this.getTriggerList(trigger);
      for (var _i = 0, triggerList_1 = triggerList; _i < triggerList_1.length; _i++) {
        var opensOn = triggerList_1[_i];
        if (opensOn === "Custom") {
          return;
        }
        if (opensOn === "Focus") {
          this.wireFocusEvents();
        }
        if (opensOn === "Click") {
          EventHandler.add(this.element, Browser.touchStartEvent, this.targetClick, this);
        }
        if (opensOn === "Hover") {
          if (Browser.isDevice) {
            this.touchModule = new Touch(this.element, {
              tapHoldThreshold: TAPHOLD_THRESHOLD,
              tapHold: this.tapHoldHandler.bind(this)
            });
            EventHandler.add(this.element, Browser.touchEndEvent, this.touchEndHandler, this);
          } else {
            EventHandler.add(this.element, "mouseover", this.targetHover, this);
          }
        }
      }
      EventHandler.add(document, "touchend", this.touchEnd, this);
      EventHandler.add(document, "scroll wheel", this.scrollHandler, this);
      EventHandler.add(window, "resize", this.windowResize, this);
      EventHandler.add(document, "keydown", this.keyDown, this);
    };
    Tooltip2.prototype.getTriggerList = function(trigger) {
      if (trigger === "Auto") {
        trigger = Browser.isDevice ? "Hover" : "Hover Focus";
      }
      return trigger.split(" ");
    };
    Tooltip2.prototype.wireFocusEvents = function() {
      if (!isNullOrUndefined(this.target)) {
        var targetList = [].slice.call(selectAll(this.target, this.element));
        for (var _i = 0, targetList_2 = targetList; _i < targetList_2.length; _i++) {
          var target = targetList_2[_i];
          EventHandler.add(target, "focus", this.targetHover, this);
        }
      } else {
        EventHandler.add(this.element, "focus", this.targetHover, this);
      }
    };
    Tooltip2.prototype.wireMouseEvents = function(e, target) {
      if (this.tooltipEle) {
        if (!this.isSticky) {
          if (e.type === "focus") {
            EventHandler.add(target, "blur", this.onMouseOut, this);
          }
          if (e.type === "mouseover") {
            EventHandler.add(target, "mouseleave", this.onMouseOut, this);
          }
          if (this.closeDelay) {
            EventHandler.add(this.tooltipEle, "mouseenter", this.tooltipHover, this);
            EventHandler.add(this.tooltipEle, "mouseleave", this.tooltipMouseOut, this);
          }
        }
        if (this.mouseTrail && this.openDelay === 0) {
          EventHandler.add(target, "mousemove touchstart mouseenter", this.onMouseMove, this);
        }
      }
    };
    Tooltip2.prototype.unwireEvents = function(trigger) {
      var triggerList = this.getTriggerList(trigger);
      for (var _i = 0, triggerList_2 = triggerList; _i < triggerList_2.length; _i++) {
        var opensOn = triggerList_2[_i];
        if (opensOn === "Custom") {
          return;
        }
        if (opensOn === "Focus") {
          this.unwireFocusEvents();
        }
        if (opensOn === "Click") {
          EventHandler.remove(this.element, Browser.touchStartEvent, this.targetClick);
        }
        if (opensOn === "Hover") {
          if (Browser.isDevice) {
            if (this.touchModule) {
              this.touchModule.destroy();
            }
            EventHandler.remove(this.element, Browser.touchEndEvent, this.touchEndHandler);
          } else {
            EventHandler.remove(this.element, "mouseover", this.targetHover);
          }
        }
      }
      EventHandler.remove(document, "touchend", this.touchEnd);
      EventHandler.remove(document, "scroll wheel", this.scrollHandler);
      EventHandler.remove(window, "resize", this.windowResize);
      EventHandler.remove(document, "keydown", this.keyDown);
    };
    Tooltip2.prototype.unwireFocusEvents = function() {
      if (!isNullOrUndefined(this.target)) {
        var targetList = [].slice.call(selectAll(this.target, this.element));
        for (var _i = 0, targetList_3 = targetList; _i < targetList_3.length; _i++) {
          var target = targetList_3[_i];
          EventHandler.remove(target, "focus", this.targetHover);
        }
      } else {
        EventHandler.remove(this.element, "focus", this.targetHover);
      }
    };
    Tooltip2.prototype.unwireMouseEvents = function(target) {
      if (!this.isSticky) {
        var triggerList = this.getTriggerList(this.opensOn);
        for (var _i = 0, triggerList_3 = triggerList; _i < triggerList_3.length; _i++) {
          var opensOn = triggerList_3[_i];
          if (opensOn === "Focus") {
            EventHandler.remove(target, "blur", this.onMouseOut);
          }
          if (opensOn === "Hover" && !Browser.isDevice) {
            EventHandler.remove(target, "mouseleave", this.onMouseOut);
          }
        }
        if (this.closeDelay) {
          EventHandler.remove(target, "mouseenter", this.tooltipHover);
          EventHandler.remove(target, "mouseleave", this.tooltipMouseOut);
        }
      }
      if (this.mouseTrail) {
        EventHandler.remove(target, "mousemove touchstart mouseenter", this.onMouseMove);
      }
    };
    Tooltip2.prototype.findTarget = function() {
      var target = select('[data-tooltip-id= "' + this.ctrlId + '_content"]', document);
      return target;
    };
    Tooltip2.prototype.getModuleName = function() {
      return "tooltip";
    };
    Tooltip2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    Tooltip2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var targetElement2 = this.findTarget();
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            if (this.tooltipEle && targetElement2) {
              this.tooltipEle.style.width = this.tooltipEle.style.maxWidth = formatUnit(newProp.width);
              this.reposition(targetElement2);
            }
            break;
          case "height":
            if (this.tooltipEle && targetElement2) {
              this.tooltipEle.style.height = formatUnit(newProp.height);
              this.reposition(targetElement2);
            }
            break;
          case "content":
            if (this.tooltipEle) {
              this.renderContent();
            }
            break;
          case "opensOn":
            this.unwireEvents(oldProp.opensOn);
            this.wireEvents(newProp.opensOn);
            break;
          case "position":
            this.formatPosition();
            if (this.tooltipEle && targetElement2) {
              var arrowInnerELe = select("." + ARROW_TIP_INNER, this.tooltipEle);
              arrowInnerELe.style.top = arrowInnerELe.style.left = null;
              this.reposition(targetElement2);
            }
            break;
          case "tipPointerPosition":
            if (this.tooltipEle && targetElement2) {
              this.reposition(targetElement2);
            }
            break;
          case "offsetX":
            if (this.tooltipEle) {
              var x = newProp.offsetX - oldProp.offsetX;
              this.tooltipEle.style.left = (parseInt(this.tooltipEle.style.left, 10) + x).toString() + "px";
            }
            break;
          case "offsetY":
            if (this.tooltipEle) {
              var y = newProp.offsetY - oldProp.offsetY;
              this.tooltipEle.style.top = (parseInt(this.tooltipEle.style.top, 10) + y).toString() + "px";
            }
            break;
          case "cssClass":
            if (this.tooltipEle) {
              if (oldProp.cssClass) {
                removeClass([this.tooltipEle], oldProp.cssClass.split(" "));
              }
              if (newProp.cssClass) {
                addClass([this.tooltipEle], newProp.cssClass.split(" "));
              }
            }
            break;
          case "enableRtl":
            if (this.tooltipEle) {
              if (this.enableRtl) {
                addClass([this.tooltipEle], RTL6);
              } else {
                removeClass([this.tooltipEle], RTL6);
              }
            }
            break;
          case "container":
            if (!isNullOrUndefined(this.containerElement)) {
              removeClass([this.containerElement], POPUP_CONTAINER);
            }
            this.container = newProp.container;
            if (this.tooltipEle && targetElement2) {
              this.appendContainer(this);
              this.reposition(targetElement2);
            }
        }
      }
    };
    Tooltip2.prototype.open = function(element2, animation) {
      if (isNullOrUndefined(animation)) {
        animation = this.animation.open;
      }
      if (isNullOrUndefined(element2)) {
        element2 = this.element;
      }
      if (element2.style.display === "none") {
        return;
      }
      this.showTooltip(element2, animation);
    };
    Tooltip2.prototype.close = function(animation) {
      if (!animation) {
        animation = this.animation.close;
      }
      this.hideTooltip(animation);
    };
    Tooltip2.prototype.refresh = function(target) {
      if (this.tooltipEle) {
        this.renderContent(target);
      }
      if (this.popupObj && target) {
        this.reposition(target);
      }
    };
    Tooltip2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.tooltipEle) {
        remove(this.tooltipEle);
      }
      if (this.popupObj) {
        this.popupObj.destroy();
      }
      removeClass([this.element], ROOT3);
      this.unwireEvents(this.opensOn);
      this.unwireMouseEvents(this.element);
      this.tooltipEle = null;
      this.popupObj = null;
    };
    __decorate15([
      Property("auto")
    ], Tooltip2.prototype, "width", void 0);
    __decorate15([
      Property("auto")
    ], Tooltip2.prototype, "height", void 0);
    __decorate15([
      Property()
    ], Tooltip2.prototype, "content", void 0);
    __decorate15([
      Property("body")
    ], Tooltip2.prototype, "container", void 0);
    __decorate15([
      Property()
    ], Tooltip2.prototype, "target", void 0);
    __decorate15([
      Property("TopCenter")
    ], Tooltip2.prototype, "position", void 0);
    __decorate15([
      Property(0)
    ], Tooltip2.prototype, "offsetX", void 0);
    __decorate15([
      Property(0)
    ], Tooltip2.prototype, "offsetY", void 0);
    __decorate15([
      Property(true)
    ], Tooltip2.prototype, "showTipPointer", void 0);
    __decorate15([
      Property(true)
    ], Tooltip2.prototype, "enableHtmlParse", void 0);
    __decorate15([
      Property(false)
    ], Tooltip2.prototype, "windowCollision", void 0);
    __decorate15([
      Property("Auto")
    ], Tooltip2.prototype, "tipPointerPosition", void 0);
    __decorate15([
      Property("Auto")
    ], Tooltip2.prototype, "opensOn", void 0);
    __decorate15([
      Property(false)
    ], Tooltip2.prototype, "mouseTrail", void 0);
    __decorate15([
      Property(false)
    ], Tooltip2.prototype, "isSticky", void 0);
    __decorate15([
      Complex({}, Animation2)
    ], Tooltip2.prototype, "animation", void 0);
    __decorate15([
      Property(0)
    ], Tooltip2.prototype, "openDelay", void 0);
    __decorate15([
      Property(0)
    ], Tooltip2.prototype, "closeDelay", void 0);
    __decorate15([
      Property()
    ], Tooltip2.prototype, "cssClass", void 0);
    __decorate15([
      Property(false)
    ], Tooltip2.prototype, "enableHtmlSanitizer", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "beforeRender", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "beforeOpen", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "afterOpen", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "beforeClose", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "afterClose", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "beforeCollision", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "created", void 0);
    __decorate15([
      Event2()
    ], Tooltip2.prototype, "destroyed", void 0);
    Tooltip2 = __decorate15([
      NotifyPropertyChanges
    ], Tooltip2);
    return Tooltip2;
  }(Component)
);

// node_modules/@syncfusion/ej2-popups/src/spinner/spinner.js
var globalTimeOut = {};
var DEFT_MAT_WIDTH = 30;
var DEFT_FAB_WIDTH = 30;
var DEFT_BOOT_WIDTH = 30;
var DEFT_BOOT4_WIDTH = 36;
var DEFT_BOOT5_WIDTH = 36;
var CLS_SHOWSPIN = "e-spin-show";
var CLS_HIDESPIN = "e-spin-hide";
var CLS_MATERIALSPIN = "e-spin-material";
var CLS_FABRICSPIN = "e-spin-fabric";
var CLS_TAILWINDSPIN = "e-spin-tailwind";
var CLS_BOOTSPIN = "e-spin-bootstrap";
var CLS_BOOT4SPIN = "e-spin-bootstrap4";
var CLS_BOOT5SPIN = "e-spin-bootstrap5";
var CLS_HIGHCONTRASTSPIN = "e-spin-high-contrast";
var CLS_SPINWRAP = "e-spinner-pane";
var CLS_SPININWRAP = "e-spinner-inner";
var CLS_SPINCIRCLE = "e-path-circle";
var CLS_SPINARC = "e-path-arc";
var CLS_SPINLABEL = "e-spin-label";
var CLS_SPINTEMPLATE = "e-spin-template";
var spinTemplate = null;
var spinCSSClass = null;
function createSpinner(args, internalCreateElement) {
  if (!args.target) {
    return;
  }
  var radius;
  var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
  var container = create_spinner_container(args.target, makeElement);
  if (!isNullOrUndefined(args.cssClass)) {
    container.wrap.classList.add(args.cssClass);
  }
  if (!isNullOrUndefined(args.template) || !isNullOrUndefined(spinTemplate)) {
    var template = !isNullOrUndefined(args.template) ? args.template : spinTemplate;
    container.wrap.classList.add(CLS_SPINTEMPLATE);
    replaceContent(container.wrap, template, spinCSSClass);
  } else {
    var theme = !isNullOrUndefined(args.type) ? args.type : getTheme(container.wrap);
    var width = !isNullOrUndefined(args.width) ? args.width : void 0;
    radius = calculateRadius(width, theme);
    setTheme(theme, container.wrap, radius, makeElement);
    if (!isNullOrUndefined(args.label)) {
      createLabel(container.inner_wrap, args.label, makeElement);
    }
  }
  container.wrap.classList.add(CLS_HIDESPIN);
  container = null;
}
function createLabel(container, label, makeElement) {
  var labelEle = makeElement("div", {});
  labelEle.classList.add(CLS_SPINLABEL);
  labelEle.innerHTML = label;
  container.appendChild(labelEle);
  return labelEle;
}
function createMaterialSpinner(container, radius, makeElement) {
  var uniqueID2 = random_generator();
  globalTimeOut[uniqueID2] = { timeOut: 0, type: "Material", radius };
  create_material_element(container, uniqueID2, makeElement, CLS_MATERIALSPIN);
  mat_calculate_attributes(radius, container, "Material", CLS_MATERIALSPIN);
}
function createBootstrap4Spinner(container, radius, makeElement) {
  var uniqueID2 = random_generator();
  globalTimeOut[uniqueID2] = { timeOut: 0, type: "Bootstrap4", radius };
  create_material_element(container, uniqueID2, makeElement, CLS_BOOT4SPIN);
  mat_calculate_attributes(radius, container, "Bootstrap4", CLS_BOOT4SPIN);
}
function createBootstrap5Spinner(container, radius, makeElement) {
  var uniqueID2 = random_generator();
  globalTimeOut[uniqueID2] = { timeOut: 0, type: "Bootstrap5", radius };
  create_material_element(container, uniqueID2, makeElement, CLS_BOOT5SPIN);
  mat_calculate_attributes(radius, container, "Bootstrap5", CLS_BOOT5SPIN);
}
function startMatAnimate(container, uniqueID2, radius) {
  var globalObject = {};
  var timeOutVar = 0;
  globalTimeOut[uniqueID2].timeOut = 0;
  globalObject[uniqueID2] = globalVariables(uniqueID2, radius, 0, 0);
  var spinnerInfo = { uniqueID: uniqueID2, container, globalInfo: globalObject, timeOutVar };
  animateMaterial(spinnerInfo);
}
function createFabricSpinner(container, radius, makeElement) {
  var uniqueID2 = random_generator();
  globalTimeOut[uniqueID2] = { timeOut: 0, type: "Fabric", radius };
  create_fabric_element(container, uniqueID2, CLS_FABRICSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_FABRICSPIN);
}
function createTailwindSpinner(container, radius, makeElement) {
  var uniqueID2 = random_generator();
  globalTimeOut[uniqueID2] = { timeOut: 0, type: "Tailwind", radius };
  create_fabric_element(container, uniqueID2, CLS_TAILWINDSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_TAILWINDSPIN);
}
function createHighContrastSpinner(container, radius, makeElement) {
  var uniqueID2 = random_generator();
  globalTimeOut[uniqueID2] = { timeOut: 0, type: "HighContrast", radius };
  create_fabric_element(container, uniqueID2, CLS_HIGHCONTRASTSPIN, makeElement);
  fb_calculate_attributes(radius, container, CLS_HIGHCONTRASTSPIN);
}
function getTheme(container) {
  var theme = window.getComputedStyle(container, ":after").getPropertyValue("content");
  return theme.replace(/['"]+/g, "");
}
function setTheme(theme, container, radius, makeElement) {
  var innerContainer = container.querySelector("." + CLS_SPININWRAP);
  var svg = innerContainer.querySelector("svg");
  if (!isNullOrUndefined(svg)) {
    innerContainer.removeChild(svg);
  }
  switch (theme) {
    case "Material":
      createMaterialSpinner(innerContainer, radius, makeElement);
      break;
    case "Fabric":
      createFabricSpinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap":
      createBootstrapSpinner(innerContainer, radius, makeElement);
      break;
    case "HighContrast":
      createHighContrastSpinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap4":
      createBootstrap4Spinner(innerContainer, radius, makeElement);
      break;
    case "Bootstrap5":
      createBootstrap5Spinner(innerContainer, radius, makeElement);
      break;
    case "Tailwind":
    case "Tailwind-dark":
      createTailwindSpinner(innerContainer, radius, makeElement);
      break;
  }
}
function createBootstrapSpinner(innerContainer, radius, makeElement) {
  var uniqueID2 = random_generator();
  globalTimeOut[uniqueID2] = { timeOut: 0, type: "Bootstrap", radius };
  create_bootstrap_element(innerContainer, uniqueID2, makeElement);
  boot_calculate_attributes(innerContainer, radius);
}
function create_bootstrap_element(innerContainer, uniqueID2, makeElement) {
  var svgBoot = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var viewBoxValue = 64;
  var trans = 32;
  var defaultRadius = 2;
  svgBoot.setAttribute("id", uniqueID2);
  svgBoot.setAttribute("class", CLS_BOOTSPIN);
  svgBoot.setAttribute("viewBox", "0 0 " + viewBoxValue + " " + viewBoxValue);
  innerContainer.insertBefore(svgBoot, innerContainer.firstChild);
  for (var item = 0; item <= 7; item++) {
    var bootCircle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
    bootCircle.setAttribute("class", CLS_SPINCIRCLE + "_" + item);
    bootCircle.setAttribute("r", defaultRadius + "");
    bootCircle.setAttribute("transform", "translate(" + trans + "," + trans + ")");
    svgBoot.appendChild(bootCircle);
  }
}
function boot_calculate_attributes(innerContainer, radius) {
  var svg = innerContainer.querySelector("svg.e-spin-bootstrap");
  var x = 0;
  var y = 0;
  var rad = 24;
  svg.style.width = svg.style.height = radius + "px";
  var startArc = 90;
  for (var item = 0; item <= 7; item++) {
    var start = defineArcPoints(x, y, rad, startArc);
    var circleEle = svg.querySelector("." + CLS_SPINCIRCLE + "_" + item);
    circleEle.setAttribute("cx", start.x + "");
    circleEle.setAttribute("cy", start.y + "");
    startArc = startArc >= 360 ? 0 : startArc;
    startArc = startArc + 45;
  }
}
function generateSeries(begin, stop) {
  var series = [];
  var start = begin;
  var end = stop;
  var increment = false, count = 1;
  formSeries(start);
  function formSeries(i) {
    series.push(i);
    if (i !== end || count === 1) {
      if (i <= start && i > 1 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      } else if (i === 1) {
        i = 7;
        i = parseFloat((i + 0.2).toFixed(2));
        increment = true;
      } else if (i < 8 && increment) {
        i = parseFloat((i + 0.2).toFixed(2));
        if (i === 8) {
          increment = false;
        }
      } else if (i <= 8 && !increment) {
        i = parseFloat((i - 0.2).toFixed(2));
      }
      ++count;
      formSeries(i);
    }
  }
  return series;
}
function animateBootstrap(innerContainer) {
  var svg = innerContainer.querySelector("svg.e-spin-bootstrap");
  var id = svg.getAttribute("id");
  for (var i = 1; i <= 8; i++) {
    var circleEle = innerContainer.getElementsByClassName("e-path-circle_" + (i === 8 ? 0 : i))[0];
    rotation(circleEle, i, i, generateSeries(i, i), id);
  }
  function rotation(circle, start, end, series, id2) {
    var count = 0;
    boot_animate(start);
    function boot_animate(radius) {
      if (globalTimeOut[id2].isAnimate) {
        ++count;
        circle.setAttribute("r", radius + "");
        if (count >= series.length) {
          count = 0;
        }
        globalTimeOut[id2].timeOut = setTimeout(boot_animate.bind(null, series[count]), 18);
      }
    }
  }
}
function replaceContent(container, template, cssClass2) {
  if (!isNullOrUndefined(cssClass2)) {
    container.classList.add(cssClass2);
  }
  var inner = container.querySelector(".e-spinner-inner");
  inner.innerHTML = template;
}
function calculateRadius(width, theme) {
  var defaultSize;
  switch (theme) {
    case "Material":
      defaultSize = DEFT_MAT_WIDTH;
      break;
    case "Fabric":
      defaultSize = DEFT_FAB_WIDTH;
      break;
    case "Tailwind":
    case "Tailwind-dark":
      defaultSize = DEFT_FAB_WIDTH;
      break;
    case "Bootstrap4":
      defaultSize = DEFT_BOOT4_WIDTH;
      break;
    case "Bootstrap5":
      defaultSize = DEFT_BOOT5_WIDTH;
      break;
    default:
      defaultSize = DEFT_BOOT_WIDTH;
  }
  width = width ? parseFloat(width + "") : defaultSize;
  return theme === "Bootstrap" ? width : width / 2;
}
function globalVariables(id, radius, count, previousId) {
  return {
    radius,
    count,
    previousId
  };
}
function random_generator() {
  var random = "";
  var combine = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (var i = 0; i < 5; i++) {
    random += combine.charAt(Math.floor(Math.random() * combine.length));
  }
  return random;
}
function create_fabric_element(innerCon, uniqueID2, themeClass, makeElement) {
  var svgFabric = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  svgFabric.setAttribute("id", uniqueID2);
  svgFabric.setAttribute("class", themeClass);
  var fabricCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
  fabricCirclePath.setAttribute("class", CLS_SPINCIRCLE);
  var fabricCircleArc = document.createElementNS("http://www.w3.org/2000/svg", "path");
  fabricCircleArc.setAttribute("class", CLS_SPINARC);
  innerCon.insertBefore(svgFabric, innerCon.firstChild);
  svgFabric.appendChild(fabricCirclePath);
  svgFabric.appendChild(fabricCircleArc);
}
function create_material_element(innerContainer, uniqueID2, makeElement, cls) {
  var svgMaterial = document.createElementNS("http://www.w3.org/2000/svg", "svg");
  var matCirclePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
  svgMaterial.setAttribute("class", cls);
  svgMaterial.setAttribute("id", uniqueID2);
  matCirclePath.setAttribute("class", CLS_SPINCIRCLE);
  innerContainer.insertBefore(svgMaterial, innerContainer.firstChild);
  svgMaterial.appendChild(matCirclePath);
}
function create_spinner_container(target, makeElement) {
  var spinnerContainer = makeElement("div", {});
  var spinnerInnerContainer = makeElement("div", {});
  spinnerContainer.classList.add(CLS_SPINWRAP);
  spinnerInnerContainer.classList.add(CLS_SPININWRAP);
  target.appendChild(spinnerContainer);
  spinnerContainer.appendChild(spinnerInnerContainer);
  return { wrap: spinnerContainer, inner_wrap: spinnerInnerContainer };
}
function animateMaterial(spinnerInfo) {
  var start = 1;
  var end = 149;
  var duration = 1333;
  var max = 75;
  createCircle(start, end, easeAnimation, duration, spinnerInfo.globalInfo[spinnerInfo.uniqueID].count, max, spinnerInfo);
  spinnerInfo.globalInfo[spinnerInfo.uniqueID].count = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].count % 4;
}
function createCircle(start, end, easing, duration, count, max, spinnerInfo) {
  var id = ++spinnerInfo.globalInfo[spinnerInfo.uniqueID].previousId;
  var startTime = (/* @__PURE__ */ new Date()).getTime();
  var change = end - start;
  var diameter = getSize(spinnerInfo.globalInfo[spinnerInfo.uniqueID].radius * 2 + "");
  var strokeSize = getStrokeSize(diameter);
  var rotate = -90 * (spinnerInfo.globalInfo[spinnerInfo.uniqueID].count || 0);
  mat_animation(spinnerInfo);
  function mat_animation(spinnerInfo2) {
    var currentTime = Math.max(0, Math.min((/* @__PURE__ */ new Date()).getTime() - startTime, duration));
    updatePath(easing(currentTime, start, change, duration), spinnerInfo2.container);
    if (id === spinnerInfo2.globalInfo[spinnerInfo2.uniqueID].previousId && currentTime < duration) {
      globalTimeOut[spinnerInfo2.uniqueID].timeOut = setTimeout(mat_animation.bind(null, spinnerInfo2), 1);
    } else {
      animateMaterial(spinnerInfo2);
    }
  }
  function updatePath(value, container) {
    if (!isNullOrUndefined(container.querySelector("svg.e-spin-material")) && !isNullOrUndefined(container.querySelector("svg.e-spin-material").querySelector("path.e-path-circle"))) {
      var svg = container.querySelector("svg.e-spin-material");
      var path = svg.querySelector("path.e-path-circle");
      path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, value, max) + "");
      path.setAttribute("transform", "rotate(" + rotate + " " + diameter / 2 + " " + diameter / 2 + ")");
    }
  }
}
function mat_calculate_attributes(radius, container, type, cls) {
  var diameter = radius * 2;
  var svg = container.querySelector("svg." + cls);
  var path = svg.querySelector("path.e-path-circle");
  var strokeSize = getStrokeSize(diameter);
  var transformOrigin = diameter / 2 + "px";
  svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter);
  svg.style.width = svg.style.height = diameter + "px";
  svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin;
  path.setAttribute("d", drawArc(diameter, strokeSize));
  if (type === "Material") {
    path.setAttribute("stroke-width", strokeSize + "");
    path.setAttribute("stroke-dasharray", (diameter - strokeSize) * Math.PI * 0.75 + "");
    path.setAttribute("stroke-dashoffset", getDashOffset(diameter, strokeSize, 1, 75) + "");
  }
}
function getSize(value) {
  var parsed = parseFloat(value);
  return parsed;
}
function drawArc(diameter, strokeSize) {
  var radius = diameter / 2;
  var offset = strokeSize / 2;
  return "M" + radius + "," + offset + "A" + (radius - offset) + "," + (radius - offset) + " 0 1 1 " + offset + "," + radius;
}
function getStrokeSize(diameter) {
  return 10 / 100 * diameter;
}
function getDashOffset(diameter, strokeSize, value, max) {
  return (diameter - strokeSize) * Math.PI * (3 * max / 100 - value / 100);
}
function easeAnimation(current, start, change, duration) {
  var timestamp = (current /= duration) * current;
  var timecount = timestamp * current;
  return start + change * (6 * timecount * timestamp + -15 * timestamp * timestamp + 10 * timecount);
}
function fb_calculate_attributes(radius, innerConainer, trgClass) {
  var centerX = radius;
  var centerY = radius;
  var diameter = radius * 2;
  var startArc = 315, endArc = 45;
  var svg = innerConainer.querySelector("." + trgClass);
  var circle = svg.querySelector(".e-path-circle");
  var path = svg.querySelector(".e-path-arc");
  var transformOrigin = diameter / 2 + "px";
  circle.setAttribute("d", defineCircle(centerX, centerY, radius));
  path.setAttribute("d", defineArc(centerX, centerY, radius, startArc, endArc));
  svg.setAttribute("viewBox", "0 0 " + diameter + " " + diameter);
  svg.style.transformOrigin = transformOrigin + " " + transformOrigin + " " + transformOrigin;
  svg.style.width = svg.style.height = diameter + "px";
}
function defineArcPoints(centerX, centerY, radius, angle) {
  var radians = (angle - 90) * Math.PI / 180;
  return {
    x: centerX + radius * Math.cos(radians),
    y: centerY + radius * Math.sin(radians)
  };
}
function defineArc(x, y, radius, startArc, endArc) {
  var start = defineArcPoints(x, y, radius, endArc);
  var end = defineArcPoints(x, y, radius, startArc);
  var d = [
    "M",
    start.x,
    start.y,
    "A",
    radius,
    radius,
    0,
    0,
    0,
    end.x,
    end.y
  ].join(" ");
  return d;
}
function defineCircle(x, y, radius) {
  var d = [
    "M",
    x,
    y,
    "m",
    -radius,
    0,
    "a",
    radius,
    radius,
    0,
    1,
    0,
    radius * 2,
    0,
    "a",
    radius,
    radius,
    0,
    1,
    0,
    -radius * 2,
    0
  ].join(" ");
  return d;
}
function showSpinner(container) {
  showHideSpinner(container, false);
  container = null;
}
function showHideSpinner(container, isHide) {
  var spinnerWrap;
  if (container) {
    spinnerWrap = container.classList.contains(CLS_SPINWRAP) ? container : container.querySelector("." + CLS_SPINWRAP);
  }
  if (container && spinnerWrap) {
    var inner = spinnerWrap.querySelector("." + CLS_SPININWRAP);
    var spinCheck = void 0;
    spinCheck = isHide ? !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_HIDESPIN) : !spinnerWrap.classList.contains(CLS_SPINTEMPLATE) && !spinnerWrap.classList.contains(CLS_SHOWSPIN);
    if (spinCheck) {
      var svgEle = spinnerWrap.querySelector("svg");
      if (isNullOrUndefined(svgEle)) {
        return;
      }
      var id = svgEle.getAttribute("id");
      globalTimeOut[id].isAnimate = !isHide;
      switch (globalTimeOut[id].type) {
        case "Material":
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : startMatAnimate(inner, id, globalTimeOut[id].radius);
          break;
        case "Bootstrap":
          isHide ? clearTimeout(globalTimeOut[id].timeOut) : animateBootstrap(inner);
          break;
      }
    }
    isHide ? classList(spinnerWrap, [CLS_HIDESPIN], [CLS_SHOWSPIN]) : classList(spinnerWrap, [CLS_SHOWSPIN], [CLS_HIDESPIN]);
    container = null;
  }
}
function hideSpinner(container) {
  showHideSpinner(container, true);
  container = null;
}

// node_modules/@syncfusion/ej2-inputs/src/input/input.js
var CLASSNAMES2 = {
  RTL: "e-rtl",
  DISABLE: "e-disabled",
  INPUT: "e-input",
  TEXTAREA: "e-multi-line-input",
  INPUTGROUP: "e-input-group",
  FLOATINPUT: "e-float-input",
  FLOATLINE: "e-float-line",
  FLOATTEXT: "e-float-text",
  CLEARICON: "e-clear-icon",
  CLEARICONHIDE: "e-clear-icon-hide",
  LABELTOP: "e-label-top",
  LABELBOTTOM: "e-label-bottom",
  NOFLOATLABEL: "e-no-float-label",
  INPUTCUSTOMTAG: "e-input-custom-tag",
  FLOATCUSTOMTAG: "e-float-custom-tag"
};
var Input;
(function(Input2) {
  var privateInputObj = {
    container: null,
    buttons: [],
    clearButton: null
  };
  var floatType;
  var isBindClearAction = true;
  function createInput(args, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var inputObject = { container: null, buttons: [], clearButton: null };
    floatType = args.floatLabelType;
    isBindClearAction = args.bindClearAction;
    if (isNullOrUndefined(args.floatLabelType) || args.floatLabelType === "Never") {
      inputObject.container = createInputContainer(args, CLASSNAMES2.INPUTGROUP, CLASSNAMES2.INPUTCUSTOMTAG, "span", makeElement);
      args.element.parentNode.insertBefore(inputObject.container, args.element);
      addClass([args.element], CLASSNAMES2.INPUT);
      inputObject.container.appendChild(args.element);
    } else {
      createFloatingInput(args, inputObject, makeElement);
    }
    bindInitialEvent(args);
    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.showClearButton) && args.properties.showClearButton && args.element.tagName !== "TEXTAREA") {
      setClearButton(args.properties.showClearButton, args.element, inputObject, true, makeElement);
      inputObject.clearButton.setAttribute("role", "button");
      if (inputObject.container.classList.contains(CLASSNAMES2.FLOATINPUT)) {
        addClass([inputObject.container], CLASSNAMES2.INPUTGROUP);
      }
    }
    if (!isNullOrUndefined(args.buttons) && args.element.tagName !== "TEXTAREA") {
      for (var i = 0; i < args.buttons.length; i++) {
        inputObject.buttons.push(appendSpan(args.buttons[i], inputObject.container, makeElement));
      }
    }
    if (!isNullOrUndefined(args.element) && args.element.tagName === "TEXTAREA") {
      addClass([inputObject.container], CLASSNAMES2.TEXTAREA);
    }
    validateInputType(inputObject.container, args.element);
    inputObject = setPropertyValue(args, inputObject);
    privateInputObj = inputObject;
    return inputObject;
  }
  Input2.createInput = createInput;
  function bindInitialEvent(args) {
    checkInputValue(args.floatLabelType, args.element);
    args.element.addEventListener("focus", function() {
      var parent = getParentNode(this);
      if (parent.classList.contains("e-input-group") || parent.classList.contains("e-outline") || parent.classList.contains("e-filled")) {
        parent.classList.add("e-input-focus");
      }
    });
    args.element.addEventListener("blur", function() {
      var parent = getParentNode(this);
      if (parent.classList.contains("e-input-group") || parent.classList.contains("e-outline") || parent.classList.contains("e-filled")) {
        parent.classList.remove("e-input-focus");
      }
    });
    args.element.addEventListener("input", function() {
      checkInputValue(floatType, args.element);
    });
  }
  Input2.bindInitialEvent = bindInitialEvent;
  function checkInputValue(floatLabelType, inputElement) {
    var inputValue = inputElement.value;
    if (inputValue !== "" && !isNullOrUndefined(inputValue) && inputElement.parentElement) {
      inputElement.parentElement.classList.add("e-valid-input");
    } else if (floatLabelType !== "Always" && inputElement.parentElement) {
      inputElement.parentElement.classList.remove("e-valid-input");
    }
  }
  function _focusFn() {
    var label = getParentNode(this).getElementsByClassName("e-float-text")[0];
    if (!isNullOrUndefined(label)) {
      addClass([label], CLASSNAMES2.LABELTOP);
      if (label.classList.contains(CLASSNAMES2.LABELBOTTOM)) {
        removeClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    }
  }
  function _blurFn() {
    var parent = getParentNode(this);
    if (parent.getElementsByTagName("textarea")[0] ? parent.getElementsByTagName("textarea")[0].value === "" : parent.getElementsByTagName("input")[0].value === "") {
      var label = parent.getElementsByClassName("e-float-text")[0];
      if (!isNullOrUndefined(label)) {
        if (label.classList.contains(CLASSNAMES2.LABELTOP)) {
          removeClass([label], CLASSNAMES2.LABELTOP);
        }
        addClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    }
  }
  function wireFloatingEvents(element2) {
    element2.addEventListener("focus", _focusFn);
    element2.addEventListener("blur", _blurFn);
  }
  Input2.wireFloatingEvents = wireFloatingEvents;
  function unwireFloatingEvents(element2) {
    element2.removeEventListener("focus", _focusFn);
    element2.removeEventListener("blur", _blurFn);
  }
  function createFloatingInput(args, inputObject, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    if (args.floatLabelType === "Auto") {
      wireFloatingEvents(args.element);
    }
    if (isNullOrUndefined(inputObject.container)) {
      inputObject.container = createInputContainer(args, CLASSNAMES2.FLOATINPUT, CLASSNAMES2.FLOATCUSTOMTAG, "div", makeElement);
      if (args.element.parentNode) {
        args.element.parentNode.insertBefore(inputObject.container, args.element);
      }
    } else {
      if (!isNullOrUndefined(args.customTag)) {
        inputObject.container.classList.add(CLASSNAMES2.FLOATCUSTOMTAG);
      }
      inputObject.container.classList.add(CLASSNAMES2.FLOATINPUT);
    }
    var floatLinelement = makeElement("span", { className: CLASSNAMES2.FLOATLINE });
    var floatLabelElement = makeElement("label", { className: CLASSNAMES2.FLOATTEXT });
    if (!isNullOrUndefined(args.element.id) && args.element.id !== "") {
      floatLabelElement.id = "label_" + args.element.id.replace(/ /g, "_");
      attributes(args.element, { "aria-labelledby": floatLabelElement.id });
    }
    if (!isNullOrUndefined(args.element.placeholder) && args.element.placeholder !== "") {
      floatLabelElement.innerText = encodePlaceHolder(args.element.placeholder);
      args.element.removeAttribute("placeholder");
    }
    if (!isNullOrUndefined(args.properties) && !isNullOrUndefined(args.properties.placeholder) && args.properties.placeholder !== "") {
      floatLabelElement.innerText = encodePlaceHolder(args.properties.placeholder);
    }
    if (!floatLabelElement.innerText) {
      inputObject.container.classList.add(CLASSNAMES2.NOFLOATLABEL);
    }
    if (inputObject.container.classList.contains("e-float-icon-left")) {
      var inputWrap = inputObject.container.querySelector(".e-input-in-wrap");
      inputWrap.appendChild(args.element);
      inputWrap.appendChild(floatLinelement);
      inputWrap.appendChild(floatLabelElement);
    } else {
      inputObject.container.appendChild(args.element);
      inputObject.container.appendChild(floatLinelement);
      inputObject.container.appendChild(floatLabelElement);
    }
    updateLabelState(args.element.value, floatLabelElement);
    if (args.floatLabelType === "Always") {
      if (floatLabelElement.classList.contains(CLASSNAMES2.LABELBOTTOM)) {
        removeClass([floatLabelElement], CLASSNAMES2.LABELBOTTOM);
      }
      addClass([floatLabelElement], CLASSNAMES2.LABELTOP);
    }
    if (args.floatLabelType === "Auto") {
      args.element.addEventListener("input", function(event) {
        updateLabelState(args.element.value, floatLabelElement, args.element);
      });
      args.element.addEventListener("blur", function(event) {
        updateLabelState(args.element.value, floatLabelElement);
      });
    }
    if (!isNullOrUndefined(args.element.getAttribute("id"))) {
      floatLabelElement.setAttribute("for", args.element.getAttribute("id"));
    }
  }
  function checkFloatLabelType(type, container) {
    if (type === "Always" && container.classList.contains("e-outline")) {
      container.classList.add("e-valid-input");
    }
  }
  function setPropertyValue(args, inputObject) {
    if (!isNullOrUndefined(args.properties)) {
      for (var _i = 0, _a = Object.keys(args.properties); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            setCssClass(args.properties.cssClass, [inputObject.container]);
            checkFloatLabelType(args.floatLabelType, inputObject.container);
            break;
          case "enabled":
            setEnabled(args.properties.enabled, args.element, args.floatLabelType, inputObject.container);
            break;
          case "enableRtl":
            setEnableRtl(args.properties.enableRtl, [inputObject.container]);
            break;
          case "placeholder":
            setPlaceholder(args.properties.placeholder, args.element);
            break;
          case "readonly":
            setReadonly(args.properties.readonly, args.element);
            break;
        }
      }
    }
    return inputObject;
  }
  function updateIconState(value, button) {
    if (value) {
      removeClass([button], CLASSNAMES2.CLEARICONHIDE);
    } else {
      addClass([button], CLASSNAMES2.CLEARICONHIDE);
    }
  }
  function updateLabelState(value, label, element2) {
    if (element2 === void 0) {
      element2 = null;
    }
    if (value) {
      addClass([label], CLASSNAMES2.LABELTOP);
      if (label.classList.contains(CLASSNAMES2.LABELBOTTOM)) {
        removeClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    } else {
      var isNotFocused = element2 != null ? element2 !== document.activeElement : true;
      if (isNotFocused) {
        if (label.classList.contains(CLASSNAMES2.LABELTOP)) {
          removeClass([label], CLASSNAMES2.LABELTOP);
        }
        addClass([label], CLASSNAMES2.LABELBOTTOM);
      }
    }
  }
  function getParentNode(element2) {
    var parentNode = isNullOrUndefined(element2.parentNode) ? element2 : element2.parentNode;
    if (parentNode && parentNode.classList.contains("e-input-in-wrap")) {
      parentNode = parentNode.parentNode;
    }
    return parentNode;
  }
  function createClearButton(element2, inputObject, initial, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var button = makeElement("span", { className: CLASSNAMES2.CLEARICON });
    var container = inputObject.container;
    if (!isNullOrUndefined(initial)) {
      container.appendChild(button);
    } else {
      var baseElement = inputObject.container.classList.contains(CLASSNAMES2.FLOATINPUT) ? inputObject.container.querySelector("." + CLASSNAMES2.FLOATTEXT) : element2;
      baseElement.insertAdjacentElement("afterend", button);
    }
    if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES2.FLOATINPUT)) {
      addClass([container], CLASSNAMES2.INPUTGROUP);
    }
    addClass([button], CLASSNAMES2.CLEARICONHIDE);
    wireClearBtnEvents(element2, button, container);
    button.setAttribute("aria-label", "close");
    return button;
  }
  function wireClearBtnEvents(element2, button, container) {
    if (isBindClearAction == void 0 || isBindClearAction) {
      button.addEventListener("click", function(event) {
        if (!(element2.classList.contains(CLASSNAMES2.DISABLE) || element2.readOnly)) {
          event.preventDefault();
          if (element2 !== document.activeElement) {
            element2.focus();
          }
          element2.value = "";
          addClass([button], CLASSNAMES2.CLEARICONHIDE);
        }
      });
    }
    element2.addEventListener("input", function(event) {
      updateIconState(element2.value, button);
    });
    element2.addEventListener("focus", function(event) {
      updateIconState(element2.value, button);
    });
    element2.addEventListener("blur", function(event) {
      setTimeout(function() {
        addClass([button], CLASSNAMES2.CLEARICONHIDE);
      }, 200);
    });
  }
  Input2.wireClearBtnEvents = wireClearBtnEvents;
  function validateLabel(element2, floatLabelType) {
    var parent = getParentNode(element2);
    if (parent.classList.contains(CLASSNAMES2.FLOATINPUT) && floatLabelType === "Auto") {
      var label = getParentNode(element2).getElementsByClassName("e-float-text")[0];
      updateLabelState(element2.value, label, element2);
    }
  }
  function createInputContainer(args, className, tagClass, tag, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var container;
    if (!isNullOrUndefined(args.customTag)) {
      container = makeElement(args.customTag, { className });
      container.classList.add(tagClass);
    } else {
      container = makeElement(tag, { className });
    }
    container.classList.add("e-control-wrapper");
    return container;
  }
  function encodePlaceHolder(placeholder) {
    var result = "";
    if (!isNullOrUndefined(placeholder) && placeholder !== "") {
      var spanEle = document.createElement("span");
      spanEle.innerHTML = '<input  placeholder="' + placeholder + '"/>';
      var hiddenInput = spanEle.children[0];
      result = hiddenInput.placeholder;
    }
    return result;
  }
  function setValue2(value, element2, floatLabelType, clearButton) {
    element2.value = value;
    if (!isNullOrUndefined(floatLabelType) && floatLabelType === "Auto") {
      validateLabel(element2, floatLabelType);
    }
    if (!isNullOrUndefined(clearButton) && clearButton) {
      var parentElement = getParentNode(element2);
      if (!isNullOrUndefined(parentElement)) {
        var button = parentElement.getElementsByClassName(CLASSNAMES2.CLEARICON)[0];
        if (!isNullOrUndefined(button)) {
          if (element2.value && parentElement.classList.contains("e-input-focus")) {
            removeClass([button], CLASSNAMES2.CLEARICONHIDE);
          } else {
            addClass([button], CLASSNAMES2.CLEARICONHIDE);
          }
        }
      }
    }
    checkInputValue(floatLabelType, element2);
  }
  Input2.setValue = setValue2;
  function setCssClass(cssClass2, elements, oldClass) {
    if (!isNullOrUndefined(oldClass) && oldClass !== "") {
      removeClass(elements, oldClass.split(" "));
    }
    if (!isNullOrUndefined(cssClass2) && cssClass2 !== "") {
      addClass(elements, cssClass2.split(" "));
    }
  }
  Input2.setCssClass = setCssClass;
  function setWidth2(width, container) {
    if (typeof width === "number") {
      container.style.width = formatUnit(width);
    } else if (typeof width === "string") {
      container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
    }
  }
  Input2.setWidth = setWidth2;
  function setPlaceholder(placeholder, element2) {
    placeholder = encodePlaceHolder(placeholder);
    var parentElement = getParentNode(element2);
    if (parentElement.classList.contains(CLASSNAMES2.FLOATINPUT)) {
      if (!isNullOrUndefined(placeholder) && placeholder !== "") {
        parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0].textContent = placeholder;
        parentElement.classList.remove(CLASSNAMES2.NOFLOATLABEL);
        element2.removeAttribute("placeholder");
      } else {
        parentElement.classList.add(CLASSNAMES2.NOFLOATLABEL);
        parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0].textContent = "";
      }
    } else {
      if (!isNullOrUndefined(placeholder) && placeholder !== "") {
        attributes(element2, { "placeholder": placeholder, "aria-placeholder": placeholder });
      } else {
        element2.removeAttribute("placeholder");
        element2.removeAttribute("aria-placeholder");
      }
    }
  }
  Input2.setPlaceholder = setPlaceholder;
  function setReadonly(isReadonly, element2, floatLabelType) {
    if (isReadonly) {
      attributes(element2, { readonly: "" });
    } else {
      element2.removeAttribute("readonly");
    }
    if (!isNullOrUndefined(floatLabelType)) {
      validateLabel(element2, floatLabelType);
    }
  }
  Input2.setReadonly = setReadonly;
  function setEnableRtl(isRtl, elements) {
    if (isRtl) {
      addClass(elements, CLASSNAMES2.RTL);
    } else {
      removeClass(elements, CLASSNAMES2.RTL);
    }
  }
  Input2.setEnableRtl = setEnableRtl;
  function setEnabled(isEnable, element2, floatLabelType, inputContainer) {
    var disabledAttrs = { "disabled": "disabled", "aria-disabled": "true" };
    var considerWrapper = isNullOrUndefined(inputContainer) ? false : true;
    if (isEnable) {
      element2.classList.remove(CLASSNAMES2.DISABLE);
      removeAttributes(disabledAttrs, element2);
      if (considerWrapper) {
        removeClass([inputContainer], CLASSNAMES2.DISABLE);
      }
    } else {
      element2.classList.add(CLASSNAMES2.DISABLE);
      addAttributes(disabledAttrs, element2);
      if (considerWrapper) {
        addClass([inputContainer], CLASSNAMES2.DISABLE);
      }
    }
    if (!isNullOrUndefined(floatLabelType)) {
      validateLabel(element2, floatLabelType);
    }
  }
  Input2.setEnabled = setEnabled;
  function setClearButton(isClear, element2, inputObject, initial, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    if (isClear) {
      inputObject.clearButton = createClearButton(element2, inputObject, initial, makeElement);
    } else {
      remove(inputObject.clearButton);
      inputObject.clearButton = null;
    }
  }
  Input2.setClearButton = setClearButton;
  function removeAttributes(attrs, element2) {
    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
      var key = _a[_i];
      var parentElement = getParentNode(element2);
      if (key === "disabled") {
        element2.classList.remove(CLASSNAMES2.DISABLE);
      }
      if (key === "disabled" && parentElement.classList.contains(CLASSNAMES2.INPUTGROUP)) {
        parentElement.classList.remove(CLASSNAMES2.DISABLE);
      }
      if (key === "placeholder" && parentElement.classList.contains(CLASSNAMES2.FLOATINPUT)) {
        parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0].textContent = "";
      } else {
        element2.removeAttribute(key);
      }
    }
  }
  Input2.removeAttributes = removeAttributes;
  function addAttributes(attrs, element2) {
    for (var _i = 0, _a = Object.keys(attrs); _i < _a.length; _i++) {
      var key = _a[_i];
      var parentElement = getParentNode(element2);
      if (key === "disabled") {
        element2.classList.add(CLASSNAMES2.DISABLE);
      }
      if (key === "disabled" && parentElement.classList.contains(CLASSNAMES2.INPUTGROUP)) {
        parentElement.classList.add(CLASSNAMES2.DISABLE);
      }
      if (key === "placeholder" && parentElement.classList.contains(CLASSNAMES2.FLOATINPUT)) {
        parentElement.getElementsByClassName(CLASSNAMES2.FLOATTEXT)[0].textContent = attrs[key];
      } else {
        element2.setAttribute(key, attrs[key]);
      }
    }
  }
  Input2.addAttributes = addAttributes;
  function removeFloating(input) {
    var container = input.container;
    if (!isNullOrUndefined(container) && container.classList.contains(CLASSNAMES2.FLOATINPUT)) {
      var inputEle = container.querySelector("textarea") ? container.querySelector("textarea") : container.querySelector("input");
      var placeholder = container.querySelector("." + CLASSNAMES2.FLOATTEXT).textContent;
      var clearButton = container.querySelector(".e-clear-icon") !== null;
      detach(container.querySelector("." + CLASSNAMES2.FLOATLINE));
      detach(container.querySelector("." + CLASSNAMES2.FLOATTEXT));
      classList(container, [CLASSNAMES2.INPUTGROUP], [CLASSNAMES2.FLOATINPUT]);
      unwireFloatingEvents(inputEle);
      attributes(inputEle, { "placeholder": placeholder });
      inputEle.classList.add(CLASSNAMES2.INPUT);
      if (!clearButton && inputEle.tagName === "INPUT") {
        inputEle.removeAttribute("required");
      }
    }
  }
  Input2.removeFloating = removeFloating;
  function addFloating(input, type, placeholder, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var container = closest(input, "." + CLASSNAMES2.INPUTGROUP);
    floatType = type;
    if (type !== "Never") {
      var customTag = container.tagName;
      customTag = customTag !== "DIV" && customTag !== "SPAN" ? customTag : null;
      var args = {
        element: input,
        floatLabelType: type,
        customTag,
        properties: { placeholder }
      };
      var iconEle = container.querySelector(".e-clear-icon");
      var inputObj = { container };
      input.classList.remove(CLASSNAMES2.INPUT);
      createFloatingInput(args, inputObj, makeElement);
      var isPrependIcon = container.classList.contains("e-float-icon-left");
      if (isNullOrUndefined(iconEle)) {
        if (isPrependIcon) {
          var inputWrap = container.querySelector(".e-input-in-wrap");
          iconEle = inputWrap.querySelector(".e-input-group-icon");
        } else {
          iconEle = container.querySelector(".e-input-group-icon");
        }
      }
      if (isNullOrUndefined(iconEle)) {
        if (isPrependIcon) {
          iconEle = container.querySelector(".e-input-group-icon");
        }
        if (isNullOrUndefined(iconEle)) {
          container.classList.remove(CLASSNAMES2.INPUTGROUP);
        }
      } else {
        var floatLine = container.querySelector("." + CLASSNAMES2.FLOATLINE);
        var floatText = container.querySelector("." + CLASSNAMES2.FLOATTEXT);
        var wrapper = isPrependIcon ? container.querySelector(".e-input-in-wrap") : container;
        wrapper.insertBefore(input, iconEle);
        wrapper.insertBefore(floatLine, iconEle);
        wrapper.insertBefore(floatText, iconEle);
      }
    }
    checkFloatLabelType(type, input.parentElement);
  }
  Input2.addFloating = addFloating;
  function setRipple(isRipple, inputObj) {
    for (var i = 0; i < inputObj.length; i++) {
      _internalRipple(isRipple, inputObj[i].container);
    }
  }
  Input2.setRipple = setRipple;
  function _internalRipple(isRipple, container, button) {
    var argsButton = [];
    argsButton.push(button);
    var buttons = isNullOrUndefined(button) ? container.querySelectorAll(".e-input-group-icon") : argsButton;
    if (isRipple && buttons.length > 0) {
      for (var index = 0; index < buttons.length; index++) {
        buttons[index].addEventListener("mousedown", _onMouseDownRipple, false);
        buttons[index].addEventListener("mouseup", _onMouseUpRipple, false);
      }
    } else if (buttons.length > 0) {
      for (var index = 0; index < buttons.length; index++) {
        buttons[index].removeEventListener("mousedown", _onMouseDownRipple, this);
        buttons[index].removeEventListener("mouseup", _onMouseUpRipple, this);
      }
    }
  }
  function _onMouseRipple(container, button) {
    if (!container.classList.contains("e-disabled") && !container.querySelector("input").readOnly) {
      button.classList.add("e-input-btn-ripple");
    }
  }
  function _onMouseDownRipple() {
    var ele = this;
    var parentEle = this.parentElement;
    while (!parentEle.classList.contains("e-input-group")) {
      parentEle = parentEle.parentElement;
    }
    _onMouseRipple(parentEle, ele);
  }
  function _onMouseUpRipple() {
    var ele = this;
    setTimeout(function() {
      ele.classList.remove("e-input-btn-ripple");
    }, 500);
  }
  function createIconEle(iconClass, makeElement) {
    var button = makeElement("span", { className: iconClass });
    button.classList.add("e-input-group-icon");
    return button;
  }
  function addIcon(position, icons, container, input, internalCreate) {
    var result = typeof icons === "string" ? icons.split(",") : icons;
    if (position.toLowerCase() === "append") {
      for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
        var icon = result_1[_i];
        appendSpan(icon, container, internalCreate);
      }
    } else {
      for (var _a = 0, result_2 = result; _a < result_2.length; _a++) {
        var icon = result_2[_a];
        prependSpan(icon, container, input, internalCreate);
      }
    }
  }
  Input2.addIcon = addIcon;
  function prependSpan(iconClass, container, inputElement, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var button = createIconEle(iconClass, makeElement);
    container.classList.add("e-float-icon-left");
    var innerWrapper = container.querySelector(".e-input-in-wrap");
    if (isNullOrUndefined(innerWrapper)) {
      innerWrapper = makeElement("span", { className: "e-input-in-wrap" });
      inputElement.parentNode.insertBefore(innerWrapper, inputElement);
      var result = container.querySelectorAll(inputElement.tagName + " ~ *");
      innerWrapper.appendChild(inputElement);
      for (var i = 0; i < result.length; i++) {
        innerWrapper.appendChild(result[i]);
      }
    }
    innerWrapper.parentNode.insertBefore(button, innerWrapper);
    if (!container.classList.contains(CLASSNAMES2.INPUTGROUP)) {
      container.classList.add(CLASSNAMES2.INPUTGROUP);
    }
    _internalRipple(true, container, button);
    return button;
  }
  Input2.prependSpan = prependSpan;
  function appendSpan(iconClass, container, internalCreateElement) {
    var makeElement = !isNullOrUndefined(internalCreateElement) ? internalCreateElement : createElement;
    var button = createIconEle(iconClass, makeElement);
    if (!container.classList.contains(CLASSNAMES2.INPUTGROUP)) {
      container.classList.add(CLASSNAMES2.INPUTGROUP);
    }
    var wrap = container.classList.contains("e-float-icon-left") ? container.querySelector(".e-input-in-wrap") : container;
    wrap.appendChild(button);
    _internalRipple(true, container, button);
    return button;
  }
  Input2.appendSpan = appendSpan;
  function validateInputType(containerElement2, input) {
    if (input.type === "hidden") {
      containerElement2.classList.add("e-hidden");
    } else if (containerElement2.classList.contains("e-hidden")) {
      containerElement2.classList.remove("e-hidden");
    }
  }
  Input2.validateInputType = validateInputType;
})(Input || (Input = {}));

// node_modules/@syncfusion/ej2-inputs/src/numerictextbox/numerictextbox.js
var __extends16 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate16 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT4 = "e-control-wrapper e-numeric";
var SPINICON = "e-input-group-icon";
var SPINUP = "e-spin-up";
var SPINDOWN = "e-spin-down";
var ERROR = "e-error";
var INCREMENT = "increment";
var DECREMENT = "decrement";
var INTREGEXP = new RegExp("^(-)?(\\d*)$");
var DECIMALSEPARATOR = ".";
var COMPONENT = "e-numerictextbox";
var CONTROL = "e-control";
var NUMERIC_FOCUS = "e-input-focus";
var HIDDENELEMENT = "e-numeric-hidden";
var wrapperAttributes = ["title", "style", "class"];
var NumericTextBox = (
  /** @class */
  function(_super) {
    __extends16(NumericTextBox2, _super);
    function NumericTextBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isVue = false;
      _this.preventChange = false;
      _this.isAngular = false;
      _this.isDynamicChange = false;
      _this.numericOptions = options;
      return _this;
    }
    NumericTextBox2.prototype.preRender = function() {
      this.isPrevFocused = false;
      this.decimalSeparator = ".";
      this.intRegExp = new RegExp("/^(-)?(d*)$/");
      this.isCalled = false;
      var ejInstance = getValue("ej2_instances", this.element);
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [CONTROL, COMPONENT, "e-lib"]);
      this.angularTagName = null;
      this.formEle = closest(this.element, "form");
      if (this.element.tagName === "EJS-NUMERICTEXTBOX") {
        this.angularTagName = this.element.tagName;
        var input = this.createElement("input");
        var index = 0;
        for (index; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;
          if (attributeName !== "id") {
            input.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
            input.innerHTML = this.element.innerHTML;
          }
        }
        if (this.element.hasAttribute("name")) {
          this.element.removeAttribute("name");
        }
        this.element.classList.remove("e-control", "e-numerictextbox");
        this.element.appendChild(input);
        this.element = input;
        setValue("ej2_instances", ejInstance, this.element);
      }
      attributes(this.element, { "role": "spinbutton", "tabindex": "0", "autocomplete": "off", "aria-live": "assertive" });
      var localeText = {
        incrementTitle: "Increment value",
        decrementTitle: "Decrement value",
        placeholder: this.placeholder
      };
      this.l10n = new L10n("numerictextbox", localeText, this.locale);
      if (this.l10n.getConstant("placeholder") !== "") {
        this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      }
      this.isValidState = true;
      this.inputStyle = null;
      this.inputName = null;
      this.cultureInfo = {};
      this.initCultureInfo();
      this.initCultureFunc();
      this.prevValue = this.value;
      this.updateHTMLAttrToElement();
      this.checkAttributes(false);
      if (this.formEle) {
        this.inputEleValue = this.value;
      }
      this.validateMinMax();
      this.validateStep();
      if (this.placeholder === null) {
        this.updatePlaceholder();
      }
    };
    NumericTextBox2.prototype.render = function() {
      if (this.element.tagName.toLowerCase() === "input") {
        this.createWrapper();
        if (this.showSpinButton) {
          this.spinBtnCreation();
        }
        this.setElementWidth(this.width);
        if (!this.container.classList.contains("e-input-group")) {
          this.container.classList.add("e-input-group");
        }
        this.changeValue(this.value === null || isNaN(this.value) ? null : this.strictMode ? this.trimValue(this.value) : this.value);
        this.wireEvents();
        if (this.value !== null && !isNaN(this.value)) {
          if (this.decimals) {
            this.setProperties({ value: this.roundNumber(this.value, this.decimals) }, true);
          }
        }
        if (this.element.getAttribute("value") || this.value) {
          this.element.setAttribute("value", this.element.value);
          this.hiddenInput.setAttribute("value", this.hiddenInput.value);
        }
        this.elementPrevValue = this.element.value;
        if (this.element.hasAttribute("data-val")) {
          this.element.setAttribute("data-val", "false");
        }
        this.renderComplete();
      }
    };
    NumericTextBox2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["value", "min", "max", "step", "disabled", "readonly", "style", "name", "placeholder"];
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.element.getAttribute(prop) === "disabled" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? false : true;
                this.setProperties({ enabled }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.element.getAttribute(prop) === "readonly" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["value"] === void 0 || isDynamic) {
                var setNumber = this.instance.getNumberParser({ format: "n" })(this.element.getAttribute(prop));
                this.setProperties(setValue(prop, setNumber, {}), !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["min"] === void 0 || isDynamic) {
                var minValue = this.instance.getNumberParser({ format: "n" })(this.element.getAttribute(prop));
                if (minValue !== null && !isNaN(minValue)) {
                  this.setProperties(setValue(prop, minValue, {}), !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["max"] === void 0 || isDynamic) {
                var maxValue = this.instance.getNumberParser({ format: "n" })(this.element.getAttribute(prop));
                if (maxValue !== null && !isNaN(maxValue)) {
                  this.setProperties(setValue(prop, maxValue, {}), !isDynamic);
                }
              }
              break;
            case "step":
              if (isNullOrUndefined(this.numericOptions) || this.numericOptions["step"] === void 0 || isDynamic) {
                var stepValue = this.instance.getNumberParser({ format: "n" })(this.element.getAttribute(prop));
                if (stepValue !== null && !isNaN(stepValue)) {
                  this.setProperties(setValue(prop, stepValue, {}), !isDynamic);
                }
              }
              break;
            case "style":
              this.inputStyle = this.element.getAttribute(prop);
              break;
            case "name":
              this.inputName = this.element.getAttribute(prop);
              break;
            default:
              {
                var value = this.instance.getNumberParser({ format: "n" })(this.element.getAttribute(prop));
                if (value !== null && !isNaN(value) || prop === "value") {
                  this.setProperties(setValue(prop, value, {}), true);
                }
              }
              break;
          }
        }
      }
    };
    NumericTextBox2.prototype.updatePlaceholder = function() {
      this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
    };
    NumericTextBox2.prototype.initCultureFunc = function() {
      this.instance = new Internationalization(this.locale);
    };
    NumericTextBox2.prototype.initCultureInfo = function() {
      this.cultureInfo.format = this.format;
      if (getValue("currency", this) !== null) {
        setValue("currency", this.currency, this.cultureInfo);
        this.setProperties({ currencyCode: this.currency }, true);
      }
    };
    NumericTextBox2.prototype.createWrapper = function() {
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.getNumericValidClassList(this.cssClass);
      }
      var inputObj = Input.createInput({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValue,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton,
          enabled: this.enabled
        }
      }, this.createElement);
      this.inputWrapper = inputObj;
      this.container = inputObj.container;
      this.container.setAttribute("class", ROOT4 + " " + this.container.getAttribute("class"));
      this.updateHTMLAttrToWrapper();
      if (this.readonly) {
        attributes(this.element, { "aria-readonly": "true" });
      }
      this.hiddenInput = this.createElement("input", { attrs: {
        type: "text",
        "validateHidden": "true",
        "class": HIDDENELEMENT
      } });
      this.inputName = this.inputName !== null ? this.inputName : this.element.id;
      this.element.removeAttribute("name");
      attributes(this.hiddenInput, { "name": this.inputName });
      this.container.insertBefore(this.hiddenInput, this.container.childNodes[1]);
      this.updateDataAttribute(false);
      if (this.inputStyle !== null) {
        attributes(this.container, { "style": this.inputStyle });
      }
    };
    NumericTextBox2.prototype.updateDataAttribute = function(isDynamic) {
      var attr = {};
      if (!isDynamic) {
        for (var a = 0; a < this.element.attributes.length; a++) {
          attr[this.element.attributes[a].name] = this.element.getAttribute(this.element.attributes[a].name);
        }
      } else {
        attr = this.htmlAttributes;
      }
      for (var _i = 0, _a = Object.keys(attr); _i < _a.length; _i++) {
        var key = _a[_i];
        if (key.indexOf("data") === 0) {
          this.hiddenInput.setAttribute(key, attr[key]);
        }
      }
    };
    NumericTextBox2.prototype.updateHTMLAttrToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttributes.indexOf(pro) < 0) {
            this.element.setAttribute(pro, this.htmlAttributes[pro]);
          }
        }
      }
    };
    NumericTextBox2.prototype.updateCssClass = function(newClass, oldClass) {
      Input.setCssClass(this.getNumericValidClassList(newClass), [this.container], this.getNumericValidClassList(oldClass));
    };
    NumericTextBox2.prototype.getNumericValidClassList = function(numericClassName) {
      var result = numericClassName;
      if (!isNullOrUndefined(numericClassName) && numericClassName !== "") {
        result = numericClassName.replace(/\s+/g, " ").trim();
      }
      return result;
    };
    NumericTextBox2.prototype.updateHTMLAttrToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttributes.indexOf(pro) > -1) {
            if (pro === "class") {
              var updatedClassValue = this.getNumericValidClassList(this.htmlAttributes[pro]);
              if (updatedClassValue !== "") {
                addClass([this.container], updatedClassValue.split(" "));
              }
            } else if (pro === "style") {
              var numericStyle = this.container.getAttribute(pro);
              numericStyle = !isNullOrUndefined(numericStyle) ? numericStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];
              this.container.setAttribute(pro, numericStyle);
            } else {
              this.container.setAttribute(pro, this.htmlAttributes[pro]);
            }
          }
        }
      }
    };
    NumericTextBox2.prototype.setElementWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.container.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.container.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    NumericTextBox2.prototype.spinBtnCreation = function() {
      this.spinDown = Input.appendSpan(SPINICON + " " + SPINDOWN, this.container, this.createElement);
      attributes(this.spinDown, {
        "title": this.l10n.getConstant("decrementTitle"),
        "aria-label": this.l10n.getConstant("decrementTitle")
      });
      this.spinUp = Input.appendSpan(SPINICON + " " + SPINUP, this.container, this.createElement);
      attributes(this.spinUp, {
        "title": this.l10n.getConstant("incrementTitle"),
        "aria-label": this.l10n.getConstant("incrementTitle")
      });
      this.wireSpinBtnEvents();
    };
    NumericTextBox2.prototype.validateMinMax = function() {
      if (!(typeof this.min === "number" && !isNaN(this.min))) {
        this.setProperties({ min: -Number.MAX_VALUE }, true);
      }
      if (!(typeof this.max === "number" && !isNaN(this.max))) {
        this.setProperties({ max: Number.MAX_VALUE }, true);
      }
      if (this.decimals !== null) {
        if (this.min !== -Number.MAX_VALUE) {
          this.setProperties({ min: this.instance.getNumberParser({ format: "n" })(this.formattedValue(this.decimals, this.min)) }, true);
        }
        if (this.max !== Number.MAX_VALUE) {
          this.setProperties({ max: this.instance.getNumberParser({ format: "n" })(this.formattedValue(this.decimals, this.max)) }, true);
        }
      }
      this.setProperties({ min: this.min > this.max ? this.max : this.min }, true);
      attributes(this.element, { "aria-valuemin": this.min.toString(), "aria-valuemax": this.max.toString() });
    };
    NumericTextBox2.prototype.formattedValue = function(decimals, value) {
      return this.instance.getNumberFormat({
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals,
        useGrouping: false
      })(value);
    };
    NumericTextBox2.prototype.validateStep = function() {
      if (this.decimals !== null) {
        this.setProperties({ step: this.instance.getNumberParser({ format: "n" })(this.formattedValue(this.decimals, this.step)) }, true);
      }
    };
    NumericTextBox2.prototype.action = function(operation, event) {
      this.isInteract = true;
      var value = this.isFocused ? this.instance.getNumberParser({ format: "n" })(this.element.value) : this.value;
      this.changeValue(this.performAction(value, this.step, operation));
      this.raiseChangeEvent(event);
    };
    NumericTextBox2.prototype.checkErrorClass = function() {
      if (this.isValidState) {
        removeClass([this.container], ERROR);
      } else {
        addClass([this.container], ERROR);
      }
      attributes(this.element, { "aria-invalid": this.isValidState ? "false" : "true" });
    };
    NumericTextBox2.prototype.bindClearEvent = function() {
      if (this.showClearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
    };
    NumericTextBox2.prototype.resetHandler = function(e) {
      e.preventDefault();
      if (!this.inputWrapper.clearButton.classList.contains("e-clear-icon-hide") || this.inputWrapper.container.classList.contains("e-static-clear")) {
        this.clear(e);
      }
      this.isInteract = true;
      this.raiseChangeEvent(e);
    };
    NumericTextBox2.prototype.clear = function(event) {
      this.setProperties({ value: null }, true);
      this.setElementValue("");
      this.hiddenInput.value = "";
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    NumericTextBox2.prototype.resetFormHandler = function() {
      if (this.element.tagName === "EJS-NUMERICTEXTBOX") {
        this.updateValue(null);
      } else {
        this.updateValue(this.inputEleValue);
      }
    };
    NumericTextBox2.prototype.setSpinButton = function() {
      if (!isNullOrUndefined(this.spinDown)) {
        attributes(this.spinDown, {
          "title": this.l10n.getConstant("decrementTitle"),
          "aria-label": this.l10n.getConstant("decrementTitle")
        });
      }
      if (!isNullOrUndefined(this.spinUp)) {
        attributes(this.spinUp, {
          "title": this.l10n.getConstant("incrementTitle"),
          "aria-label": this.l10n.getConstant("incrementTitle")
        });
      }
    };
    NumericTextBox2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "focus", this.focusHandler, this);
      EventHandler.add(this.element, "blur", this.focusOutHandler, this);
      EventHandler.add(this.element, "keydown", this.keyDownHandler, this);
      EventHandler.add(this.element, "keyup", this.keyUpHandler, this);
      EventHandler.add(this.element, "input", this.inputHandler, this);
      EventHandler.add(this.element, "keypress", this.keyPressHandler, this);
      EventHandler.add(this.element, "change", this.changeHandler, this);
      EventHandler.add(this.element, "paste", this.pasteHandler, this);
      if (this.enabled) {
        this.bindClearEvent();
        if (this.formEle) {
          EventHandler.add(this.formEle, "reset", this.resetFormHandler, this);
        }
      }
    };
    NumericTextBox2.prototype.wireSpinBtnEvents = function() {
      EventHandler.add(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner, this);
      EventHandler.add(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner, this);
      EventHandler.add(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner, this);
      EventHandler.add(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner, this);
      EventHandler.add(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
      EventHandler.add(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner, this);
    };
    NumericTextBox2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "focus", this.focusHandler);
      EventHandler.remove(this.element, "blur", this.focusOutHandler);
      EventHandler.remove(this.element, "keyup", this.keyUpHandler);
      EventHandler.remove(this.element, "input", this.inputHandler);
      EventHandler.remove(this.element, "keydown", this.keyDownHandler);
      EventHandler.remove(this.element, "keypress", this.keyPressHandler);
      EventHandler.remove(this.element, "change", this.changeHandler);
      EventHandler.remove(this.element, "paste", this.pasteHandler);
      if (this.formEle) {
        EventHandler.remove(this.formEle, "reset", this.resetFormHandler);
      }
    };
    NumericTextBox2.prototype.unwireSpinBtnEvents = function() {
      EventHandler.remove(this.spinUp, Browser.touchStartEvent, this.mouseDownOnSpinner);
      EventHandler.remove(this.spinDown, Browser.touchStartEvent, this.mouseDownOnSpinner);
      EventHandler.remove(this.spinUp, Browser.touchEndEvent, this.mouseUpOnSpinner);
      EventHandler.remove(this.spinDown, Browser.touchEndEvent, this.mouseUpOnSpinner);
      EventHandler.remove(this.spinUp, Browser.touchMoveEvent, this.touchMoveOnSpinner);
      EventHandler.remove(this.spinDown, Browser.touchMoveEvent, this.touchMoveOnSpinner);
    };
    NumericTextBox2.prototype.changeHandler = function(event) {
      event.stopPropagation();
      if (!this.element.value.length) {
        this.setProperties({ value: null }, true);
      }
      var parsedInput = this.instance.getNumberParser({ format: "n" })(this.element.value);
      this.updateValue(parsedInput, event);
    };
    NumericTextBox2.prototype.raiseChangeEvent = function(event) {
      if (this.prevValue !== this.value) {
        var eventArgs = {};
        this.changeEventArgs = {
          value: this.value,
          previousValue: this.prevValue,
          isInteracted: this.isInteract,
          isInteraction: this.isInteract,
          event
        };
        if (event) {
          this.changeEventArgs.event = event;
        }
        if (this.changeEventArgs.event === void 0) {
          this.changeEventArgs.isInteracted = false;
          this.changeEventArgs.isInteraction = false;
        }
        merge(eventArgs, this.changeEventArgs);
        this.prevValue = this.value;
        this.isInteract = false;
        this.elementPrevValue = this.element.value;
        this.preventChange = false;
        this.trigger("change", eventArgs);
      }
    };
    NumericTextBox2.prototype.pasteHandler = function() {
      var _this = this;
      if (!this.enabled || this.readonly) {
        return;
      }
      var beforeUpdate = this.element.value;
      setTimeout(function() {
        if (!_this.numericRegex().test(_this.element.value)) {
          _this.setElementValue(beforeUpdate);
        }
      });
    };
    NumericTextBox2.prototype.preventHandler = function() {
      var _this = this;
      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      setTimeout(function() {
        if (_this.element.selectionStart > 0) {
          var currentPos = _this.element.selectionStart;
          var prevPos = _this.element.selectionStart - 1;
          var start = 0;
          var valArray = _this.element.value.split("");
          var numericObject = getNumericObject(_this.locale);
          var decimalSeparator = getValue("decimal", numericObject);
          var ignoreKeyCode = decimalSeparator.charCodeAt(0);
          if (_this.element.value[prevPos] === " " && _this.element.selectionStart > 0 && !iOS) {
            if (isNullOrUndefined(_this.prevVal)) {
              _this.element.value = _this.element.value.trim();
            } else if (prevPos !== 0) {
              _this.element.value = _this.prevVal;
            } else if (prevPos === 0) {
              _this.element.value = _this.element.value.trim();
            }
            _this.element.setSelectionRange(prevPos, prevPos);
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 1]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 1]) && _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 1].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);
              _this.element.setSelectionRange(prevPos, prevPos);
              if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1])) && _this.element.selectionStart > 0 && _this.element.value.length) {
                _this.preventHandler();
              }
            }
          } else if (isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 2])) && _this.element.selectionStart > 1 && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== 45) {
            if (valArray.indexOf(_this.element.value[_this.element.selectionStart - 2]) !== valArray.lastIndexOf(_this.element.value[_this.element.selectionStart - 2]) && _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) === ignoreKeyCode || _this.element.value[_this.element.selectionStart - 2].charCodeAt(0) !== ignoreKeyCode) {
              _this.element.setSelectionRange(prevPos, prevPos);
              _this.nextEle = _this.element.value[_this.element.selectionStart];
              _this.cursorPosChanged = true;
              _this.preventHandler();
            }
          }
          if (_this.cursorPosChanged === true && _this.element.value[_this.element.selectionStart] === _this.nextEle && isNaN(parseFloat(_this.element.value[_this.element.selectionStart - 1]))) {
            _this.element.setSelectionRange(_this.element.selectionStart + 1, _this.element.selectionStart + 1);
            _this.cursorPosChanged = false;
            _this.nextEle = null;
          }
          if (_this.element.value.trim() === "") {
            _this.element.setSelectionRange(start, start);
          }
          if (_this.element.selectionStart > 0) {
            if (_this.element.value[_this.element.selectionStart - 1].charCodeAt(0) === 45 && _this.element.selectionStart > 1) {
              if (isNullOrUndefined(_this.prevVal)) {
                _this.element.value = _this.element.value;
              } else {
                _this.element.value = _this.prevVal;
              }
              _this.element.setSelectionRange(_this.element.selectionStart, _this.element.selectionStart);
            }
            if (_this.element.value[_this.element.selectionStart - 1] === decimalSeparator && _this.decimals === 0 && _this.validateDecimalOnType) {
              _this.element.value = _this.element.value.substring(0, prevPos) + _this.element.value.substring(currentPos, _this.element.value.length);
            }
          }
          _this.prevVal = _this.element.value;
        }
      });
    };
    NumericTextBox2.prototype.keyUpHandler = function() {
      if (!this.enabled || this.readonly) {
        return;
      }
      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      if (!iOS && Browser.isDevice) {
        this.preventHandler();
      }
      var parseValue = this.instance.getNumberParser({ format: "n" })(this.element.value);
      parseValue = parseValue === null || isNaN(parseValue) ? null : parseValue;
      this.hiddenInput.value = parseValue || parseValue === 0 ? parseValue.toString() : null;
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    NumericTextBox2.prototype.inputHandler = function(event) {
      var numerictextboxObj = this;
      if (!this.enabled || this.readonly) {
        return;
      }
      var iOS = !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);
      var fireFox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      if ((fireFox || iOS) && Browser.isDevice) {
        this.preventHandler();
      }
      if (this.isAngular && this.element.value !== getValue("decimal", getNumericObject(this.locale)) && this.element.value !== getValue("minusSign", getNumericObject(this.locale))) {
        var parsedValue = this.instance.getNumberParser({ format: "n" })(this.element.value);
        parsedValue = isNaN(parsedValue) ? null : parsedValue;
        numerictextboxObj.localChange({ value: parsedValue });
        this.preventChange = true;
      }
      if (this.isVue) {
        var current = this.instance.getNumberParser({ format: "n" })(this.element.value);
        var previous = this.instance.getNumberParser({ format: "n" })(this.elementPrevValue);
        var nonZeroRegex = new RegExp("[^1-9]+$");
        if (nonZeroRegex.test(this.element.value)) {
          current = this.value;
        }
        var eventArgs = {
          event,
          value: current === null || isNaN(current) ? null : current,
          previousValue: previous === null || isNaN(previous) ? null : previous
        };
        this.preventChange = true;
        this.elementPrevValue = this.element.value;
        this.trigger("input", eventArgs);
      }
    };
    NumericTextBox2.prototype.keyDownHandler = function(event) {
      if (!this.readonly) {
        switch (event.keyCode) {
          case 38:
            event.preventDefault();
            this.action(INCREMENT, event);
            break;
          case 40:
            event.preventDefault();
            this.action(DECREMENT, event);
            break;
          default:
            break;
        }
      }
    };
    NumericTextBox2.prototype.performAction = function(value, step, operation) {
      if (value === null || isNaN(value)) {
        value = 0;
      }
      var updatedValue = operation === INCREMENT ? value + step : value - step;
      updatedValue = this.correctRounding(value, step, updatedValue);
      return this.strictMode ? this.trimValue(updatedValue) : updatedValue;
    };
    NumericTextBox2.prototype.correctRounding = function(value, step, result) {
      var floatExp = new RegExp("[,.](.*)");
      var floatValue = floatExp.test(value.toString());
      var floatStep = floatExp.test(step.toString());
      if (floatValue || floatStep) {
        var valueCount = floatValue ? floatExp.exec(value.toString())[0].length : 0;
        var stepCount = floatStep ? floatExp.exec(step.toString())[0].length : 0;
        var max = Math.max(valueCount, stepCount);
        return value = this.roundValue(result, max);
      }
      return result;
    };
    NumericTextBox2.prototype.roundValue = function(result, precision) {
      precision = precision || 0;
      var divide = Math.pow(10, precision);
      return result *= divide, result = Math.round(result) / divide;
    };
    NumericTextBox2.prototype.updateValue = function(value, event) {
      if (event) {
        this.isInteract = true;
      }
      if (value !== null && !isNaN(value)) {
        if (this.decimals) {
          value = this.roundNumber(value, this.decimals);
        }
      }
      this.changeValue(value === null || isNaN(value) ? null : this.strictMode ? this.trimValue(value) : value);
      if (!this.isDynamicChange) {
        this.raiseChangeEvent(event);
      }
    };
    NumericTextBox2.prototype.updateCurrency = function(prop, propVal) {
      setValue(prop, propVal, this.cultureInfo);
      this.updateValue(this.value);
    };
    NumericTextBox2.prototype.changeValue = function(value) {
      if (!(value || value === 0)) {
        value = null;
        this.setProperties({ value }, true);
      } else {
        var numberOfDecimals = this.getNumberOfDecimals(value);
        this.setProperties({ value: this.roundNumber(value, numberOfDecimals) }, true);
      }
      this.modifyText();
      if (!this.strictMode) {
        this.validateState();
      }
    };
    NumericTextBox2.prototype.modifyText = function() {
      if (this.value || this.value === 0) {
        var value = this.formatNumber();
        var elementValue = this.isFocused ? value : this.instance.getNumberFormat(this.cultureInfo)(this.value);
        this.setElementValue(elementValue);
        attributes(this.element, { "aria-valuenow": value });
        this.hiddenInput.value = this.value.toString();
        if (this.value !== null && this.serverDecimalSeparator) {
          this.hiddenInput.value = this.hiddenInput.value.replace(".", this.serverDecimalSeparator);
        }
      } else {
        this.setElementValue("");
        this.element.removeAttribute("aria-valuenow");
        this.hiddenInput.value = null;
      }
    };
    NumericTextBox2.prototype.setElementValue = function(val, element2) {
      Input.setValue(val, element2 ? element2 : this.element, this.floatLabelType, this.showClearButton);
    };
    NumericTextBox2.prototype.validateState = function() {
      this.isValidState = true;
      if (this.value || this.value === 0) {
        this.isValidState = !(this.value > this.max || this.value < this.min);
      }
      this.checkErrorClass();
    };
    NumericTextBox2.prototype.getNumberOfDecimals = function(value) {
      var numberOfDecimals;
      var EXPREGEXP = new RegExp("[eE][-+]?([0-9]+)");
      var valueString = value.toString();
      if (EXPREGEXP.test(valueString)) {
        var result = EXPREGEXP.exec(valueString);
        if (!isNullOrUndefined(result)) {
          valueString = value.toFixed(Math.min(parseInt(result[1], 10), 20));
        }
      }
      var decimalPart = valueString.split(".")[1];
      numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;
      if (this.decimals !== null) {
        numberOfDecimals = numberOfDecimals < this.decimals ? numberOfDecimals : this.decimals;
      }
      return numberOfDecimals;
    };
    NumericTextBox2.prototype.formatNumber = function() {
      var numberOfDecimals = this.getNumberOfDecimals(this.value);
      return this.instance.getNumberFormat({
        maximumFractionDigits: numberOfDecimals,
        minimumFractionDigits: numberOfDecimals,
        useGrouping: false
      })(this.value);
    };
    NumericTextBox2.prototype.trimValue = function(value) {
      if (value > this.max) {
        return this.max;
      }
      if (value < this.min) {
        return this.min;
      }
      return value;
    };
    NumericTextBox2.prototype.roundNumber = function(value, precision) {
      var result = value;
      var decimals = precision || 0;
      var result1 = result.toString().split("e");
      result = Math.round(Number(result1[0] + "e" + (result1[1] ? Number(result1[1]) + decimals : decimals)));
      var result2 = result.toString().split("e");
      result = Number(result2[0] + "e" + (result2[1] ? Number(result2[1]) - decimals : -decimals));
      return Number(result.toFixed(decimals));
    };
    NumericTextBox2.prototype.cancelEvent = function(event) {
      event.preventDefault();
      return false;
    };
    NumericTextBox2.prototype.keyPressHandler = function(event) {
      if (!this.enabled || this.readonly) {
        return true;
      }
      if (!Browser.isDevice && Browser.info.version === "11.0" && event.keyCode === 13) {
        var parsedInput = this.instance.getNumberParser({ format: "n" })(this.element.value);
        this.updateValue(parsedInput, event);
        return true;
      }
      if (event.which === 0 || event.metaKey || event.ctrlKey || event.keyCode === 8 || event.keyCode === 13) {
        return true;
      }
      var currentChar = String.fromCharCode(event.which);
      var text = this.element.value;
      text = text.substring(0, this.element.selectionStart) + currentChar + text.substring(this.element.selectionEnd);
      if (!this.numericRegex().test(text)) {
        event.preventDefault();
        event.stopPropagation();
        return false;
      } else {
        return true;
      }
    };
    NumericTextBox2.prototype.numericRegex = function() {
      var numericObject = getNumericObject(this.locale);
      var decimalSeparator = getValue("decimal", numericObject);
      var fractionRule = "*";
      if (decimalSeparator === DECIMALSEPARATOR) {
        decimalSeparator = "\\" + decimalSeparator;
      }
      if (this.decimals === 0 && this.validateDecimalOnType) {
        return INTREGEXP;
      }
      if (this.decimals && this.validateDecimalOnType) {
        fractionRule = "{0," + this.decimals + "}";
      }
      return new RegExp("^(-)?(((\\d+(" + decimalSeparator + "\\d" + fractionRule + ")?)|(" + decimalSeparator + "\\d" + fractionRule + ")))?$");
    };
    NumericTextBox2.prototype.mouseWheel = function(event) {
      event.preventDefault();
      var delta;
      var rawEvent = event;
      if (rawEvent.wheelDelta) {
        delta = rawEvent.wheelDelta / 120;
      } else if (rawEvent.detail) {
        delta = -rawEvent.detail / 3;
      }
      if (delta > 0) {
        this.action(INCREMENT, event);
      } else if (delta < 0) {
        this.action(DECREMENT, event);
      }
      this.cancelEvent(event);
    };
    NumericTextBox2.prototype.focusHandler = function(event) {
      var _this = this;
      this.focusEventArgs = { event, value: this.value, container: this.container };
      this.trigger("focus", this.focusEventArgs);
      if (!this.enabled || this.readonly) {
        return;
      }
      this.isFocused = true;
      removeClass([this.container], ERROR);
      this.prevValue = this.value;
      if (this.value || this.value === 0) {
        var formatValue_1 = this.formatNumber();
        this.setElementValue(formatValue_1);
        if (!this.isPrevFocused) {
          if (!Browser.isDevice && Browser.info.version === "11.0") {
            this.element.setSelectionRange(0, formatValue_1.length);
          } else {
            var delay = Browser.isDevice && Browser.isIos ? 600 : 0;
            setTimeout(function() {
              _this.element.setSelectionRange(0, formatValue_1.length);
            }, delay);
          }
        }
      }
      if (!Browser.isDevice) {
        EventHandler.add(this.element, "mousewheel DOMMouseScroll", this.mouseWheel, this);
      }
    };
    NumericTextBox2.prototype.focusOutHandler = function(event) {
      var _this = this;
      this.blurEventArgs = { event, value: this.value, container: this.container };
      this.trigger("blur", this.blurEventArgs);
      if (!this.enabled || this.readonly) {
        return;
      }
      if (this.isPrevFocused) {
        event.preventDefault();
        if (Browser.isDevice) {
          var value_1 = this.element.value;
          this.element.focus();
          this.isPrevFocused = false;
          var ele_1 = this.element;
          setTimeout(function() {
            _this.setElementValue(value_1, ele_1);
          }, 200);
        }
      } else {
        this.isFocused = false;
        if (!this.element.value.length) {
          this.setProperties({ value: null }, true);
        }
        var parsedInput = this.instance.getNumberParser({ format: "n" })(this.element.value);
        this.updateValue(parsedInput);
        if (!Browser.isDevice) {
          EventHandler.remove(this.element, "mousewheel DOMMouseScroll", this.mouseWheel);
        }
      }
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var focusEvent = document.createEvent("FocusEvent");
        focusEvent.initEvent("focusout", false, true);
        element2.dispatchEvent(focusEvent);
      }
    };
    NumericTextBox2.prototype.mouseDownOnSpinner = function(event) {
      var _this = this;
      if (this.isFocused) {
        this.isPrevFocused = true;
        event.preventDefault();
      }
      if (!this.getElementData(event)) {
        return;
      }
      var result = this.getElementData(event);
      var target = event.currentTarget;
      var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
      EventHandler.add(target, "mouseleave", this.mouseUpClick, this);
      this.timeOut = setInterval(function() {
        _this.isCalled = true;
        _this.action(action, event);
      }, 150);
      EventHandler.add(document, "mouseup", this.mouseUpClick, this);
    };
    NumericTextBox2.prototype.touchMoveOnSpinner = function(event) {
      var target;
      if (event.type === "touchmove") {
        var touchEvent = event.touches;
        target = touchEvent.length && document.elementFromPoint(touchEvent[0].pageX, touchEvent[0].pageY);
      } else {
        target = document.elementFromPoint(event.clientX, event.clientY);
      }
      if (!target.classList.contains(SPINICON)) {
        clearInterval(this.timeOut);
      }
    };
    NumericTextBox2.prototype.mouseUpOnSpinner = function(event) {
      this.prevValue = this.value;
      if (this.isPrevFocused) {
        this.element.focus();
        if (!Browser.isDevice) {
          this.isPrevFocused = false;
        }
      }
      if (!Browser.isDevice) {
        event.preventDefault();
      }
      if (!this.getElementData(event)) {
        return;
      }
      var target = event.currentTarget;
      var action = target.classList.contains(SPINUP) ? INCREMENT : DECREMENT;
      EventHandler.remove(target, "mouseleave", this.mouseUpClick);
      if (!this.isCalled) {
        this.action(action, event);
      }
      this.isCalled = false;
      EventHandler.remove(document, "mouseup", this.mouseUpClick);
      var formElement = closest(this.element, "form");
      if (formElement) {
        var element2 = this.element.nextElementSibling;
        var keyupEvent = document.createEvent("KeyboardEvent");
        keyupEvent.initEvent("keyup", false, true);
        element2.dispatchEvent(keyupEvent);
      }
    };
    NumericTextBox2.prototype.getElementData = function(event) {
      if (event.which && event.which === 3 || event.button && event.button === 2 || !this.enabled || this.readonly) {
        return false;
      }
      clearInterval(this.timeOut);
      return true;
    };
    NumericTextBox2.prototype.floatLabelTypeUpdate = function() {
      Input.removeFloating(this.inputWrapper);
      var hiddenInput = this.hiddenInput;
      this.hiddenInput.remove();
      Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
      this.container.insertBefore(hiddenInput, this.container.childNodes[1]);
    };
    NumericTextBox2.prototype.mouseUpClick = function(event) {
      event.stopPropagation();
      clearInterval(this.timeOut);
      this.isCalled = false;
      EventHandler.remove(this.spinUp, "mouseleave", this.mouseUpClick);
      EventHandler.remove(this.spinDown, "mouseleave", this.mouseUpClick);
    };
    NumericTextBox2.prototype.increment = function(step) {
      if (step === void 0) {
        step = this.step;
      }
      this.isInteract = false;
      this.changeValue(this.performAction(this.value, step, INCREMENT));
      this.raiseChangeEvent();
    };
    NumericTextBox2.prototype.decrement = function(step) {
      if (step === void 0) {
        step = this.step;
      }
      this.isInteract = false;
      this.changeValue(this.performAction(this.value, step, DECREMENT));
      this.raiseChangeEvent();
    };
    NumericTextBox2.prototype.destroy = function() {
      this.unwireEvents();
      detach(this.hiddenInput);
      if (this.showSpinButton) {
        this.unwireSpinBtnEvents();
        detach(this.spinUp);
        detach(this.spinDown);
      }
      var attrArray = [
        "aria-labelledby",
        "role",
        "autocomplete",
        "aria-readonly",
        "autocorrect",
        "aria-disabled",
        "aria-placeholder",
        "autocapitalize",
        "spellcheck",
        "aria-autocomplete",
        "tabindex",
        "aria-valuemin",
        "aria-valuemax",
        "aria-live",
        "aria-valuenow",
        "aria-invalid"
      ];
      for (var i = 0; i < attrArray.length; i++) {
        this.element.removeAttribute(attrArray[i]);
      }
      this.element.classList.remove("e-input");
      this.container.insertAdjacentElement("afterend", this.element);
      detach(this.container);
      _super.prototype.destroy.call(this);
    };
    NumericTextBox2.prototype.getText = function() {
      return this.element.value;
    };
    NumericTextBox2.prototype.focusIn = function() {
      if (document.activeElement !== this.element && this.enabled) {
        this.element.focus();
        addClass([this.container], [NUMERIC_FOCUS]);
      }
    };
    NumericTextBox2.prototype.focusOut = function() {
      if (document.activeElement === this.element && this.enabled) {
        this.element.blur();
        removeClass([this.container], [NUMERIC_FOCUS]);
      }
    };
    NumericTextBox2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    NumericTextBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "width":
            this.setElementWidth(newProp.width);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            Input.setEnabled(newProp.enabled, this.element);
            break;
          case "enableRtl":
            Input.setEnableRtl(newProp.enableRtl, [this.container]);
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.element);
            if (this.readonly) {
              attributes(this.element, { "aria-readonly": "true" });
            } else {
              this.element.removeAttribute("aria-readonly");
            }
            break;
          case "htmlAttributes":
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.updateDataAttribute(true);
            this.checkAttributes(true);
            Input.validateInputType(this.container, this.element);
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.element);
            break;
          case "step":
            this.step = newProp.step;
            this.validateStep();
            break;
          case "showSpinButton":
            this.updateSpinButton(newProp);
            break;
          case "showClearButton":
            this.updateClearButton(newProp);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            this.floatLabelTypeUpdate();
            break;
          case "value":
            this.isDynamicChange = (this.isAngular || this.isVue) && this.preventChange;
            this.updateValue(newProp.value);
            if (this.isDynamicChange) {
              this.preventChange = false;
              this.isDynamicChange = false;
            }
            break;
          case "min":
          case "max":
            setValue(prop, getValue(prop, newProp), this);
            this.validateMinMax();
            this.updateValue(this.value);
            break;
          case "strictMode":
            this.strictMode = newProp.strictMode;
            this.updateValue(this.value);
            this.validateState();
            break;
          case "locale":
            this.initCultureFunc();
            this.l10n.setLocale(this.locale);
            this.setSpinButton();
            this.updatePlaceholder();
            Input.setPlaceholder(this.placeholder, this.element);
            this.updateValue(this.value);
            break;
          case "currency":
            {
              var propVal = getValue(prop, newProp);
              this.setProperties({ currencyCode: propVal }, true);
              this.updateCurrency(prop, propVal);
            }
            break;
          case "currencyCode":
            {
              var propValue = getValue(prop, newProp);
              this.setProperties({ currency: propValue }, true);
              this.updateCurrency("currency", propValue);
            }
            break;
          case "format":
            setValue(prop, getValue(prop, newProp), this);
            this.initCultureInfo();
            this.updateValue(this.value);
            break;
          case "decimals":
            this.decimals = newProp.decimals;
            this.updateValue(this.value);
        }
      }
    };
    NumericTextBox2.prototype.updateClearButton = function(newProp) {
      Input.setClearButton(newProp.showClearButton, this.element, this.inputWrapper, void 0, this.createElement);
      this.bindClearEvent();
    };
    NumericTextBox2.prototype.updateSpinButton = function(newProp) {
      if (newProp.showSpinButton) {
        this.spinBtnCreation();
      } else {
        detach(this.spinUp);
        detach(this.spinDown);
      }
    };
    NumericTextBox2.prototype.getModuleName = function() {
      return "numerictextbox";
    };
    __decorate16([
      Property("")
    ], NumericTextBox2.prototype, "cssClass", void 0);
    __decorate16([
      Property(null)
    ], NumericTextBox2.prototype, "value", void 0);
    __decorate16([
      Property(-Number.MAX_VALUE)
    ], NumericTextBox2.prototype, "min", void 0);
    __decorate16([
      Property(Number.MAX_VALUE)
    ], NumericTextBox2.prototype, "max", void 0);
    __decorate16([
      Property(1)
    ], NumericTextBox2.prototype, "step", void 0);
    __decorate16([
      Property(null)
    ], NumericTextBox2.prototype, "width", void 0);
    __decorate16([
      Property(null)
    ], NumericTextBox2.prototype, "placeholder", void 0);
    __decorate16([
      Property({})
    ], NumericTextBox2.prototype, "htmlAttributes", void 0);
    __decorate16([
      Property(true)
    ], NumericTextBox2.prototype, "showSpinButton", void 0);
    __decorate16([
      Property(false)
    ], NumericTextBox2.prototype, "readonly", void 0);
    __decorate16([
      Property(true)
    ], NumericTextBox2.prototype, "enabled", void 0);
    __decorate16([
      Property(false)
    ], NumericTextBox2.prototype, "showClearButton", void 0);
    __decorate16([
      Property(false)
    ], NumericTextBox2.prototype, "enablePersistence", void 0);
    __decorate16([
      Property("n2")
    ], NumericTextBox2.prototype, "format", void 0);
    __decorate16([
      Property(null)
    ], NumericTextBox2.prototype, "decimals", void 0);
    __decorate16([
      Property(null)
    ], NumericTextBox2.prototype, "currency", void 0);
    __decorate16([
      Property(null)
    ], NumericTextBox2.prototype, "currencyCode", void 0);
    __decorate16([
      Property(true)
    ], NumericTextBox2.prototype, "strictMode", void 0);
    __decorate16([
      Property(false)
    ], NumericTextBox2.prototype, "validateDecimalOnType", void 0);
    __decorate16([
      Property("Never")
    ], NumericTextBox2.prototype, "floatLabelType", void 0);
    __decorate16([
      Event2()
    ], NumericTextBox2.prototype, "created", void 0);
    __decorate16([
      Event2()
    ], NumericTextBox2.prototype, "destroyed", void 0);
    __decorate16([
      Event2()
    ], NumericTextBox2.prototype, "change", void 0);
    __decorate16([
      Event2()
    ], NumericTextBox2.prototype, "focus", void 0);
    __decorate16([
      Event2()
    ], NumericTextBox2.prototype, "blur", void 0);
    NumericTextBox2 = __decorate16([
      NotifyPropertyChanges
    ], NumericTextBox2);
    return NumericTextBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/base/mask-base.js
var ERROR2 = "e-error";
var INPUTGROUP = "e-input-group";
var FLOATINPUT = "e-float-input";
var TOPLABEL = "e-label-top";
var BOTTOMLABEL = "e-label-bottom";
var regularExpressions = {
  "0": "[0-9]",
  "9": "[0-9 ]",
  "#": "[0-9 +-]",
  "L": "[A-Za-z]",
  "?": "[A-Za-z ]",
  "&": "[^ ]+",
  "C": "[^]+",
  "A": "[A-Za-z0-9]",
  "a": "[A-Za-z0-9 ]"
};
function createMask() {
  attributes(this.element, {
    "role": "textbox",
    "autocomplete": "off",
    "autocorrect": "off",
    "autocapitalize": "off",
    "spellcheck": "false",
    "aria-live": "assertive",
    "aria-valuenow": ""
  });
  if (this.mask) {
    var splitMask = this.mask.split("]");
    for (var i = 0; i < splitMask.length; i++) {
      if (splitMask[i][splitMask[i].length - 1] === "\\") {
        splitMask[i] = splitMask[i] + "]";
        var splitInnerMask = splitMask[i].split("[");
        for (var j = 0; j < splitInnerMask.length; j++) {
          if (splitInnerMask[j][splitInnerMask[j].length - 1] === "\\") {
            splitInnerMask[j] = splitInnerMask[j] + "[";
          }
          pushIntoRegExpCollec.call(this, splitInnerMask[j]);
        }
      } else {
        var splitInnerMask = splitMask[i].split("[");
        if (splitInnerMask.length > 1) {
          var chkSpace = false;
          for (var j = 0; j < splitInnerMask.length; j++) {
            if (splitInnerMask[j] === "\\") {
              this.customRegExpCollec.push("[");
              this.hiddenMask += splitInnerMask[j] + "[";
            } else if (splitInnerMask[j] === "") {
              chkSpace = true;
            } else if (splitInnerMask[j] !== "" && chkSpace || j === splitInnerMask.length - 1) {
              this.customRegExpCollec.push("[" + splitInnerMask[j] + "]");
              this.hiddenMask += this.promptChar;
              chkSpace = false;
            } else {
              pushIntoRegExpCollec.call(this, splitInnerMask[j]);
            }
          }
        } else {
          pushIntoRegExpCollec.call(this, splitInnerMask[0]);
        }
      }
    }
    this.escapeMaskValue = this.hiddenMask;
    this.promptMask = this.hiddenMask.replace(/[09?LCAa#&]/g, this.promptChar);
    if (!isNullOrUndefined(this.customCharacters)) {
      for (var i = 0; i < this.promptMask.length; i++) {
        if (!isNullOrUndefined(this.customCharacters[this.promptMask[i]])) {
          this.promptMask = this.promptMask.replace(new RegExp(this.promptMask[i], "g"), this.promptChar);
        }
      }
    }
    var escapeNumber = 0;
    if (this.hiddenMask.match(new RegExp(/\\/))) {
      for (var i = 0; i < this.hiddenMask.length; i++) {
        var j = 0;
        if (i >= 1) {
          j = i;
        }
        escapeNumber = this.hiddenMask.length - this.promptMask.length;
        j = j - escapeNumber;
        if (i > 0 && this.hiddenMask[i - 1] !== "\\" && (this.hiddenMask[i] === ">" || this.hiddenMask[i] === "<" || this.hiddenMask[i] === "|")) {
          this.promptMask = this.promptMask.substring(0, j) + this.promptMask.substring(i + 1 - escapeNumber, this.promptMask.length);
          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue.substring(i + 1 - escapeNumber, this.escapeMaskValue.length);
        }
        if (this.hiddenMask[i] === "\\") {
          this.promptMask = this.promptMask.substring(0, j) + this.hiddenMask[i + 1] + this.promptMask.substring(i + 2 - escapeNumber, this.promptMask.length);
          this.escapeMaskValue = this.escapeMaskValue.substring(0, j) + this.escapeMaskValue[i + 1] + this.escapeMaskValue.substring(i + 2 - escapeNumber, this.escapeMaskValue.length);
        }
      }
    } else {
      this.promptMask = this.promptMask.replace(/[>|<]/g, "");
      this.escapeMaskValue = this.hiddenMask.replace(/[>|<]/g, "");
    }
    attributes(this.element, { "aria-invalid": "false" });
  }
}
function applyMask() {
  setElementValue.call(this, this.promptMask);
  setMaskValue.call(this, this.value);
}
function wireEvents2() {
  EventHandler.add(this.element, "keydown", maskInputKeyDownHandler, this);
  EventHandler.add(this.element, "keypress", maskInputKeyPressHandler, this);
  EventHandler.add(this.element, "keyup", maskInputKeyUpHandler, this);
  EventHandler.add(this.element, "input", maskInputHandler, this);
  EventHandler.add(this.element, "focus", maskInputFocusHandler, this);
  EventHandler.add(this.element, "blur", maskInputBlurHandler, this);
  EventHandler.add(this.element, "paste", maskInputPasteHandler, this);
  EventHandler.add(this.element, "cut", maskInputCutHandler, this);
  EventHandler.add(this.element, "drop", maskInputDropHandler, this);
  EventHandler.add(this.element, "mousedown", maskInputMouseDownHandler, this);
  EventHandler.add(this.element, "mouseup", maskInputMouseUpHandler, this);
  if (this.enabled) {
    bindClearEvent.call(this);
    if (this.formElement) {
      EventHandler.add(this.formElement, "reset", resetFormHandler, this);
    }
  }
}
function unwireEvents() {
  EventHandler.remove(this.element, "keydown", maskInputKeyDownHandler);
  EventHandler.remove(this.element, "keypress", maskInputKeyPressHandler);
  EventHandler.remove(this.element, "keyup", maskInputKeyUpHandler);
  EventHandler.remove(this.element, "input", maskInputHandler);
  EventHandler.remove(this.element, "focus", maskInputFocusHandler);
  EventHandler.remove(this.element, "blur", maskInputBlurHandler);
  EventHandler.remove(this.element, "paste", maskInputPasteHandler);
  EventHandler.remove(this.element, "cut", maskInputCutHandler);
  EventHandler.remove(this.element, "mousedown", maskInputMouseDownHandler);
  EventHandler.remove(this.element, "mouseup", maskInputMouseUpHandler);
  if (this.formElement) {
    EventHandler.remove(this.formElement, "reset", resetFormHandler);
  }
}
function bindClearEvent() {
  if (this.showClearButton) {
    EventHandler.add(this.inputObj.clearButton, "mousedown touchstart", resetHandler, this);
  }
}
function resetHandler(e) {
  e.preventDefault();
  if (!this.inputObj.clearButton.classList.contains("e-clear-icon-hide") || this.inputObj.container.classList.contains("e-static-clear")) {
    clear.call(this, e);
    this.value = "";
  }
}
function clear(event) {
  var value = this.element.value;
  setElementValue.call(this, this.promptMask);
  this.redoCollec.unshift({
    value: this.promptMask,
    startIndex: this.element.selectionStart,
    endIndex: this.element.selectionEnd
  });
  triggerMaskChangeEvent.call(this, event, value);
  this.element.setSelectionRange(0, 0);
}
function resetFormHandler() {
  if (this.element.tagName === "EJS-MASKEDTEXTBOX") {
    setElementValue.call(this, this.promptMask);
  } else {
    this.value = this.initInputValue;
  }
}
function unstrippedValue(element2) {
  return element2.value;
}
function strippedValue(element2, maskValues) {
  var value = "";
  var k = 0;
  var checkMask = false;
  var maskValue = !isNullOrUndefined(maskValues) ? maskValues : !isNullOrUndefined(element2) && !isNullOrUndefined(this) ? element2.value : maskValues;
  if (maskValue !== this.promptMask) {
    for (var i = 0; i < this.customRegExpCollec.length; i++) {
      if (checkMask) {
        checkMask = false;
      }
      if (this.customRegExpCollec[k] === ">" || this.customRegExpCollec[k] === "<" || this.customRegExpCollec[k] === "|" || this.customRegExpCollec[k] === "\\") {
        --i;
        checkMask = true;
      }
      if (!checkMask) {
        if (maskValue[i] !== this.promptChar && (!isNullOrUndefined(this.customRegExpCollec[k]) && (this._callPasteHandler || !isNullOrUndefined(this.regExpCollec[this.customRegExpCollec[k]]) || this.customRegExpCollec[k].length > 2 && this.customRegExpCollec[k][0] === "[" && this.customRegExpCollec[k][this.customRegExpCollec[k].length - 1] === "]" || !isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[this.customRegExpCollec[k]]))) && maskValue !== "") {
          value += maskValue[i];
        }
      }
      ++k;
    }
  }
  if (this.mask === null || this.mask === "" && this.value !== void 0) {
    value = maskValue;
  }
  return value;
}
function pushIntoRegExpCollec(value) {
  for (var k = 0; k < value.length; k++) {
    this.hiddenMask += value[k];
    if (value[k] !== "\\") {
      this.customRegExpCollec.push(value[k]);
    }
  }
}
function maskInputMouseDownHandler() {
  this.isClicked = true;
}
function maskInputMouseUpHandler() {
  this.isClicked = false;
}
function maskInputFocusHandler(event) {
  var _this = this;
  var inputElement = this.element;
  var startIndex = 0;
  var modelValue = strippedValue.call(this, inputElement);
  var toAllowForward = false;
  var toAllowBackward = false;
  var eventArgs = {
    selectionStart: inputElement.selectionStart,
    event,
    value: this.value,
    maskedValue: inputElement.value,
    container: this.inputObj.container,
    selectionEnd: inputElement.selectionEnd
  };
  if (!this.isClicked) {
    triggerFocus.call(this, eventArgs, inputElement);
  }
  if (this.mask) {
    if (!(!(modelValue === null || modelValue === "") || this.floatLabelType === "Always" || this.placeholder === null || this.placeholder === "")) {
      inputElement.value = this.promptMask;
    }
    setTimeout(function() {
      if (inputElement.selectionStart === _this.promptMask.length || inputElement.value[inputElement.selectionStart] === _this.promptChar) {
        toAllowForward = true;
      } else {
        for (var i = inputElement.selectionStart; i < _this.promptMask.length; i++) {
          if (inputElement.value[i] !== _this.promptChar) {
            if (inputElement.value[i] !== _this.promptMask[i]) {
              toAllowForward = false;
              break;
            }
          } else {
            toAllowForward = true;
            break;
          }
        }
      }
    });
    setTimeout(function() {
      var backSelectionStart = inputElement.selectionStart - 1;
      if (backSelectionStart === _this.promptMask.length - 1 || inputElement.value[backSelectionStart] === _this.promptChar) {
        toAllowBackward = true;
      } else {
        for (var i = backSelectionStart; i >= 0; i--) {
          if (inputElement.value[i] !== _this.promptChar) {
            if (inputElement.value[i] !== _this.promptMask[i]) {
              toAllowBackward = false;
              break;
            }
          } else {
            toAllowBackward = true;
            break;
          }
        }
      }
    });
    if (this.isClicked || this.floatLabelType !== "Always" && ((modelValue === null || modelValue === "") && (this.placeholder !== null && this.placeholder !== ""))) {
      for (startIndex = 0; startIndex < this.promptMask.length; startIndex++) {
        if (inputElement.value[startIndex] === this.promptChar) {
          setTimeout(function() {
            if (toAllowForward || toAllowBackward) {
              inputElement.selectionEnd = startIndex;
              inputElement.selectionStart = startIndex;
            }
            eventArgs = {
              selectionStart: inputElement.selectionStart,
              event,
              value: _this.value,
              maskedValue: inputElement.value,
              container: _this.inputObj.container,
              selectionEnd: inputElement.selectionEnd
            };
            triggerFocus.call(_this, eventArgs, inputElement);
          });
          break;
        }
      }
      if (isNullOrUndefined(inputElement.value.match(this.promptChar))) {
        eventArgs = {
          selectionStart: inputElement.selectionStart,
          event,
          value: this.value,
          maskedValue: inputElement.value,
          container: this.inputObj.container,
          selectionEnd: inputElement.selectionEnd
        };
        triggerFocus.call(this, eventArgs, inputElement);
      }
      this.isClicked = false;
    }
  }
}
function triggerFocus(eventArgs, inputElement) {
  this.trigger("focus", eventArgs, function(eventArgs2) {
    inputElement.selectionStart = eventArgs2.selectionStart;
    inputElement.selectionEnd = eventArgs2.selectionEnd;
  });
}
function maskInputBlurHandler(event) {
  this.blurEventArgs = {
    event,
    value: this.value,
    maskedValue: this.element.value,
    container: this.inputObj.container
  };
  this.trigger("blur", this.blurEventArgs);
  if (this.mask) {
    this.isFocus = false;
    if (this.placeholder && this.element.value === this.promptMask && this.floatLabelType !== "Always") {
      setElementValue.call(this, "");
      var labelElement = this.element.parentNode.querySelector(".e-float-text");
      if (this.floatLabelType === "Auto" && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL)) {
        removeClass([labelElement], TOPLABEL);
      }
    }
  }
}
function maskInputPasteHandler(event) {
  var _this = this;
  if (this.mask && !this.readonly) {
    var sIndex_1 = this.element.selectionStart;
    var eIndex_1 = this.element.selectionEnd;
    var oldValue_1 = this.element.value;
    setElementValue.call(this, "");
    this._callPasteHandler = true;
    setTimeout(function() {
      var value = _this.element.value.replace(/ /g, "");
      if (_this.redoCollec.length > 0 && _this.redoCollec[0].value === _this.element.value) {
        value = strippedValue.call(_this, _this.element);
      }
      setElementValue.call(_this, oldValue_1);
      _this.element.selectionStart = sIndex_1;
      _this.element.selectionEnd = eIndex_1;
      var i = 0;
      _this.maskKeyPress = true;
      do {
        validateValue.call(_this, value[i], false, null);
        ++i;
      } while (i < value.length);
      _this.maskKeyPress = false;
      _this._callPasteHandler = false;
      if (_this.element.value === oldValue_1) {
        var i_1 = 0;
        _this.maskKeyPress = true;
        do {
          validateValue.call(_this, value[i_1], false, null);
          ++i_1;
        } while (i_1 < value.length);
        _this.maskKeyPress = false;
      } else {
        triggerMaskChangeEvent.call(_this, event, oldValue_1);
      }
    }, 1);
  }
}
function maskInputCutHandler(event) {
  var _this = this;
  if (this.mask && !this.readonly) {
    var preValue_1 = this.element.value;
    var sIndex_2 = this.element.selectionStart;
    var eIndex = this.element.selectionEnd;
    this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex: this.element.selectionEnd });
    var value_1 = this.element.value.substring(0, sIndex_2) + this.promptMask.substring(sIndex_2, eIndex) + this.element.value.substring(eIndex);
    setTimeout(function() {
      setElementValue.call(_this, value_1);
      _this.element.selectionStart = _this.element.selectionEnd = sIndex_2;
      if (_this.element.value !== preValue_1) {
        triggerMaskChangeEvent.call(_this, event, null);
      }
    }, 0);
  }
}
function maskInputDropHandler(event) {
  event.preventDefault();
}
function maskInputHandler(event) {
  if (Browser.isIE === true && this.element.value === "" && this.floatLabelType === "Never") {
    return;
  }
  var eventArgs = { ctrlKey: false, keyCode: 229 };
  extend(event, eventArgs);
  if (this.mask) {
    if (this.element.value === "") {
      this.redoCollec.unshift({
        value: this.promptMask,
        startIndex: this.element.selectionStart,
        endIndex: this.element.selectionEnd
      });
    }
    if (this.element.value.length === 1) {
      this.element.value = this.element.value + this.promptMask;
      this.element.setSelectionRange(1, 1);
    }
    if (!this._callPasteHandler) {
      removeMaskInputValues.call(this, event);
    }
    if (this.element.value.length > this.promptMask.length) {
      var startIndex = this.element.selectionStart;
      var addedValues = this.element.value.length - this.promptMask.length;
      var value = this.element.value.substring(startIndex - addedValues, startIndex);
      this.maskKeyPress = false;
      var i = 0;
      do {
        validateValue.call(this, value[i], event.ctrlKey, event);
        ++i;
      } while (i < value.length);
      if (this.element.value !== this.preEleVal) {
        triggerMaskChangeEvent.call(this, event, null);
      }
    }
    var val = strippedValue.call(this, this.element);
    this.prevValue = val;
    this.value = val;
    if (val === "") {
      setElementValue.call(this, this.promptMask);
      this.element.setSelectionRange(0, 0);
    }
  }
}
function maskInputKeyDownHandler(event) {
  if (this.mask && !this.readonly) {
    if (event.keyCode !== 229) {
      if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
        event.preventDefault();
      }
      removeMaskInputValues.call(this, event);
    }
    var startValue = this.element.value;
    if (event.ctrlKey && (event.keyCode === 89 || event.keyCode === 90)) {
      var collec = void 0;
      if (event.keyCode === 90 && this.undoCollec.length > 0 && startValue !== this.undoCollec[this.undoCollec.length - 1].value) {
        collec = this.undoCollec[this.undoCollec.length - 1];
        this.redoCollec.unshift({
          value: this.element.value,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
        setElementValue.call(this, collec.value);
        this.element.selectionStart = collec.startIndex;
        this.element.selectionEnd = collec.endIndex;
        this.undoCollec.splice(this.undoCollec.length - 1, 1);
      } else if (event.keyCode === 89 && this.redoCollec.length > 0 && startValue !== this.redoCollec[0].value) {
        collec = this.redoCollec[0];
        this.undoCollec.push({
          value: this.element.value,
          startIndex: this.element.selectionStart,
          endIndex: this.element.selectionEnd
        });
        setElementValue.call(this, collec.value);
        this.element.selectionStart = collec.startIndex;
        this.element.selectionEnd = collec.endIndex;
        this.redoCollec.splice(0, 1);
      }
    }
  }
}
function mobileRemoveFunction() {
  var collec;
  var sIndex = this.element.selectionStart;
  var eIndex = this.element.selectionEnd;
  if (this.redoCollec.length > 0) {
    collec = this.redoCollec[0];
    setElementValue.call(this, collec.value);
    if (collec.startIndex - sIndex === 1) {
      this.element.selectionStart = collec.startIndex;
      this.element.selectionEnd = collec.endIndex;
    } else {
      this.element.selectionStart = sIndex + 1;
      this.element.selectionEnd = eIndex + 1;
    }
  } else {
    setElementValue.call(this, this.promptMask);
    this.element.selectionStart = this.element.selectionEnd = sIndex;
  }
}
function autoFillMaskInputValues(isRemove, oldEventVal, event) {
  if (event.type === "input") {
    isRemove = false;
    oldEventVal = this.element.value;
    setElementValue.call(this, this.promptMask);
    setMaskValue.call(this, oldEventVal);
  }
  return isRemove;
}
function removeMaskInputValues(event) {
  var isRemove = false;
  var oldEventVal;
  var isDeleted = false;
  if (this.element.value.length < this.promptMask.length) {
    isRemove = true;
    oldEventVal = this.element.value;
    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
    mobileRemoveFunction.call(this);
  }
  if (this.element.value.length >= this.promptMask.length && event.type === "input") {
    isRemove = autoFillMaskInputValues.call(this, isRemove, oldEventVal, event);
  }
  var initStartIndex = this.element.selectionStart;
  var initEndIndex = this.element.selectionEnd;
  var startIndex = this.element.selectionStart;
  var endIndex = this.element.selectionEnd;
  var maskValue = this.hiddenMask.replace(/[>|\\<]/g, "");
  var curMask = maskValue[startIndex - 1];
  var deleteEndIndex = this.element.selectionEnd;
  if (isRemove || event.keyCode === 8 || event.keyCode === 46) {
    this.undoCollec.push({ value: this.element.value, startIndex: this.element.selectionStart, endIndex });
    var multipleDel = false;
    var preValue = this.element.value;
    if (startIndex > 0 || (event.keyCode === 8 || event.keyCode === 46) && startIndex < this.element.value.length && this.element.selectionEnd - startIndex !== this.element.value.length) {
      var index = startIndex;
      if (startIndex !== endIndex) {
        startIndex = endIndex;
        if (event.keyCode === 46) {
          multipleDel = true;
        }
      } else if (event.keyCode === 46) {
        ++index;
      } else {
        --index;
      }
      for (var k = startIndex; event.keyCode === 8 || isRemove || multipleDel ? k > index : k < index; event.keyCode === 8 || isRemove || multipleDel ? k-- : k++) {
        for (var i = startIndex; event.keyCode === 8 || isRemove || multipleDel ? i > 0 : i < this.element.value.length; event.keyCode === 8 || isRemove || multipleDel ? i-- : i++) {
          var sIndex = void 0;
          if ((event.keyCode === 8 || multipleDel) && (initStartIndex !== initEndIndex && initStartIndex !== startIndex || initStartIndex === initEndIndex) || isRemove) {
            curMask = maskValue[i - 1];
            sIndex = startIndex - 1;
          } else {
            curMask = maskValue[i];
            sIndex = startIndex;
            ++startIndex;
          }
          var oldValue = this.element.value[sIndex];
          if (isNullOrUndefined(this.regExpCollec[curMask]) && (!isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])) && (this.hiddenMask[sIndex] !== this.promptChar && this.customRegExpCollec[sIndex][0] !== "[" && this.customRegExpCollec[sIndex][this.customRegExpCollec[sIndex].length - 1] !== "]") || this.promptMask[sIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters)) {
            this.element.selectionStart = this.element.selectionEnd = sIndex;
            event.preventDefault();
            if (event.keyCode === 46 && !multipleDel) {
              ++this.element.selectionStart;
            }
          } else {
            var value = this.element.value;
            var prompt_1 = this.promptChar;
            var elementValue = value.substring(0, sIndex) + prompt_1 + value.substring(startIndex, value.length);
            setElementValue.call(this, elementValue);
            event.preventDefault();
            if (event.keyCode === 46 && !multipleDel) {
              sIndex++;
            }
            this.element.selectionStart = this.element.selectionEnd = sIndex;
            isDeleted = true;
          }
          startIndex = this.element.selectionStart;
          if (!isDeleted && event.keyCode === 8 || multipleDel || !isDeleted && !(event.keyCode === 46)) {
            sIndex = startIndex - 1;
          } else {
            sIndex = startIndex;
            isDeleted = false;
          }
          oldValue = this.element.value[sIndex];
          if (initStartIndex !== initEndIndex && this.element.selectionStart === initStartIndex || this.promptMask[sIndex] === this.promptChar || oldValue !== this.promptMask[sIndex] && this.promptMask[sIndex] !== this.promptChar && !isNullOrUndefined(this.customCharacters)) {
            break;
          }
        }
      }
    }
    if (event.keyCode === 46 && multipleDel && isDeleted) {
      this.element.selectionStart = this.element.selectionEnd = deleteEndIndex;
    }
    if (this.element.selectionStart === 0 && this.element.selectionEnd === this.element.value.length) {
      setElementValue.call(this, this.promptMask);
      event.preventDefault();
      this.element.selectionStart = this.element.selectionEnd = startIndex;
    }
    this.redoCollec.unshift({
      value: this.element.value,
      startIndex: this.element.selectionStart,
      endIndex: this.element.selectionEnd
    });
    if (this.element.value !== preValue) {
      triggerMaskChangeEvent.call(this, event, oldEventVal);
    }
  }
}
function maskInputKeyPressHandler(event) {
  if (this.mask && !this.readonly) {
    var oldValue = this.element.value;
    if (!event.ctrlKey || event.ctrlKey && event.code !== "KeyA" && event.code !== "KeyY" && event.code !== "KeyZ" && event.code !== "KeyX" && event.code !== "KeyC" && event.code !== "KeyV") {
      this.maskKeyPress = true;
      var key = event.key;
      if (key === "Spacebar") {
        key = String.fromCharCode(event.keyCode);
      }
      if (!key) {
        this.isIosInvalid = true;
        validateValue.call(this, String.fromCharCode(event.keyCode), event.ctrlKey, event);
        event.preventDefault();
        this.isIosInvalid = false;
      } else if (key && key.length === 1) {
        validateValue.call(this, key, event.ctrlKey, event);
        event.preventDefault();
      }
      if (event.keyCode === 32 && key === " " && this.promptChar === " ") {
        this.element.selectionStart = this.element.selectionEnd = this.element.selectionStart - key.length;
      }
    }
    if (this.element.value !== oldValue) {
      triggerMaskChangeEvent.call(this, event, oldValue);
    }
  }
}
function triggerMaskChangeEvent(event, oldValue) {
  var prevOnChange = this.isProtectedOnChange;
  if (!isNullOrUndefined(this.changeEventArgs) && !this.isInitial) {
    var eventArgs = {};
    this.changeEventArgs = { value: this.element.value, maskedValue: this.element.value, isInteraction: false, isInteracted: false };
    if (this.mask) {
      this.changeEventArgs.value = strippedValue.call(this, this.element);
    }
    if (!isNullOrUndefined(event)) {
      this.changeEventArgs.isInteracted = true;
      this.changeEventArgs.isInteraction = true;
      this.changeEventArgs.event = event;
    }
    this.isProtectedOnChange = true;
    this.value = this.changeEventArgs.value;
    this.isProtectedOnChange = prevOnChange;
    merge(eventArgs, this.changeEventArgs);
    if (this.isAngular && this.preventChange) {
      this.preventChange = false;
    } else {
      this.trigger("change", eventArgs);
    }
  }
  this.preEleVal = this.element.value;
  this.prevValue = strippedValue.call(this, this.element);
  attributes(this.element, { "aria-valuenow": this.element.value });
}
function maskInputKeyUpHandler(event) {
  if (this.mask && !this.readonly) {
    var collec = void 0;
    if (!this.maskKeyPress && event.keyCode === 229) {
      var oldEventVal = void 0;
      if (this.element.value.length === 1) {
        this.element.value = this.element.value + this.promptMask;
        this.element.setSelectionRange(1, 1);
      }
      if (this.element.value.length > this.promptMask.length) {
        var startIndex = this.element.selectionStart;
        var addedValues = this.element.value.length - this.promptMask.length;
        var val_1 = this.element.value.substring(startIndex - addedValues, startIndex);
        if (this.undoCollec.length > 0) {
          collec = this.undoCollec[this.undoCollec.length - 1];
          var startIndex_1 = this.element.selectionStart;
          oldEventVal = collec.value;
          var oldVal = collec.value.substring(startIndex_1 - addedValues, startIndex_1);
          collec = this.redoCollec[0];
          val_1 = val_1.trim();
          var isSpace = Browser.isAndroid && val_1 === "";
          if (!isSpace && oldVal !== val_1 && collec.value.substring(startIndex_1 - addedValues, startIndex_1) !== val_1) {
            validateValue.call(this, val_1, event.ctrlKey, event);
          } else if (isSpace) {
            preventUnsupportedValues.call(this, event, startIndex_1 - 1, this.element.selectionEnd - 1, val_1, event.ctrlKey, false);
          }
        } else {
          oldEventVal = this.promptMask;
          validateValue.call(this, val_1, event.ctrlKey, event);
        }
        this.maskKeyPress = false;
        triggerMaskChangeEvent.call(this, event, oldEventVal);
      }
    } else {
      removeMaskError.call(this);
    }
    var val = strippedValue.call(this, this.element);
    if (!(this.element.selectionStart === 0 && this.promptMask === this.element.value && val === "") || val === "" && this.value !== val) {
      this.prevValue = val;
      this.value = val;
    }
  } else {
    triggerMaskChangeEvent.call(this, event);
  }
  if (this.element.selectionStart === 0 && this.element.selectionEnd === 0) {
    var temp_1 = this.element;
    setTimeout(function() {
      temp_1.setSelectionRange(0, 0);
    }, 0);
  }
}
function mobileSwipeCheck(key) {
  if (key.length > 1 && this.promptMask.length + key.length < this.element.value.length) {
    var elementValue = this.redoCollec[0].value.substring(0, this.redoCollec[0].startIndex) + key + this.redoCollec[0].value.substring(this.redoCollec[0].startIndex, this.redoCollec[0].value.length);
    setElementValue.call(this, elementValue);
    this.element.selectionStart = this.element.selectionEnd = this.redoCollec[0].startIndex + key.length;
  }
  this.element.selectionStart = this.element.selectionStart - key.length;
  this.element.selectionEnd = this.element.selectionEnd - key.length;
}
function mobileValidation(key) {
  if (!this.maskKeyPress) {
    mobileSwipeCheck.call(this, key);
  }
}
function validateValue(key, isCtrlKey, event) {
  mobileValidation.call(this, key);
  if (isNullOrUndefined(this) || isNullOrUndefined(key)) {
    return;
  }
  var startIndex = this.element.selectionStart;
  var initStartIndex = startIndex;
  var curMask;
  var allowText = false;
  var value = this.element.value;
  var eventOldVal;
  var prevSupport = false;
  var isEqualVal = false;
  for (var k = 0; k < key.length; k++) {
    var keyValue = key[k];
    startIndex = this.element.selectionStart;
    if (!this.maskKeyPress && initStartIndex === startIndex) {
      startIndex = startIndex + k;
    }
    if (!this.maskKeyPress || startIndex < this.promptMask.length) {
      for (var i = startIndex; i < this.promptMask.length; i++) {
        var maskValue = this.escapeMaskValue;
        curMask = maskValue[startIndex];
        if (this.hiddenMask[startIndex] === "\\" && this.hiddenMask[startIndex + 1] === key) {
          isEqualVal = true;
        }
        if (isNullOrUndefined(this.regExpCollec[curMask]) && (isNullOrUndefined(this.customCharacters) || !isNullOrUndefined(this.customCharacters) && isNullOrUndefined(this.customCharacters[curMask])) && (this.hiddenMask[startIndex] !== this.promptChar && this.customRegExpCollec[startIndex][0] !== "[" && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] !== "]") || this.promptMask[startIndex] !== this.promptChar && isNullOrUndefined(this.customCharacters) || this.promptChar === curMask && this.escapeMaskValue === this.mask) {
          this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
          startIndex = this.element.selectionStart;
          curMask = this.hiddenMask[startIndex];
        }
      }
      if (!isNullOrUndefined(this.customCharacters) && !isNullOrUndefined(this.customCharacters[curMask])) {
        var customValStr = this.customCharacters[curMask];
        var customValArr = customValStr.split(",");
        for (var i = 0; i < customValArr.length; i++) {
          if (keyValue.match(new RegExp("[" + customValArr[i] + "]"))) {
            allowText = true;
            break;
          }
        }
      } else if (!isNullOrUndefined(this.regExpCollec[curMask]) && keyValue.match(new RegExp(this.regExpCollec[curMask])) && this.promptMask[startIndex] === this.promptChar) {
        allowText = true;
      } else if (this.promptMask[startIndex] === this.promptChar && this.customRegExpCollec[startIndex][0] === "[" && this.customRegExpCollec[startIndex][this.customRegExpCollec[startIndex].length - 1] === "]" && keyValue.match(new RegExp(this.customRegExpCollec[startIndex]))) {
        allowText = true;
      }
      if ((!this.maskKeyPress || startIndex < this.hiddenMask.length) && allowText) {
        if (k === 0) {
          if (this.maskKeyPress) {
            this.undoCollec.push({ value, startIndex, endIndex: startIndex });
          } else {
            var sIndex = this.element.selectionStart;
            var eIndex = this.element.selectionEnd;
            if (this.redoCollec.length > 0) {
              eventOldVal = this.redoCollec[0].value;
              setElementValue.call(this, eventOldVal);
              this.undoCollec.push(this.redoCollec[0]);
            } else {
              this.undoCollec.push({ value: this.promptMask, startIndex, endIndex: startIndex });
              eventOldVal = this.promptMask;
              setElementValue.call(this, eventOldVal);
            }
            this.element.selectionStart = sIndex;
            this.element.selectionEnd = eIndex;
          }
        }
        startIndex = this.element.selectionStart;
        applySupportedValues.call(this, event, startIndex, keyValue, eventOldVal, isEqualVal);
        prevSupport = true;
        if (k === key.length - 1) {
          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
        }
        allowText = false;
      } else {
        startIndex = this.element.selectionStart;
        preventUnsupportedValues.call(this, event, startIndex, initStartIndex, key, isCtrlKey, prevSupport);
      }
      if (k === key.length - 1 && !allowText) {
        if (!Browser.isAndroid || Browser.isAndroid && startIndex < this.promptMask.length) {
          this.redoCollec.unshift({
            value: this.element.value,
            startIndex: this.element.selectionStart,
            endIndex: this.element.selectionEnd
          });
        }
      }
    } else {
      if (key.length === 1 && !isCtrlKey && !isNullOrUndefined(event)) {
        addMaskErrorClass.call(this);
      }
    }
  }
}
function applySupportedValues(event, startIndex, keyValue, eventOldVal, isEqualVal) {
  if (this.hiddenMask.length > this.promptMask.length) {
    keyValue = changeToLowerUpperCase.call(this, keyValue, this.element.value);
  }
  if (!isEqualVal) {
    var value = this.element.value;
    var elementValue = value.substring(0, startIndex) + keyValue + value.substring(startIndex + 1, value.length);
    setElementValue.call(this, elementValue);
    this.element.selectionStart = this.element.selectionEnd = startIndex + 1;
  }
}
function preventUnsupportedValues(event, sIdx, idx, key, ctrl, chkSupport) {
  if (!this.maskKeyPress) {
    var value = this.element.value;
    if (sIdx >= this.promptMask.length) {
      setElementValue.call(this, value.substring(0, sIdx));
    } else {
      if (idx === sIdx) {
        setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx + 1, value.length));
      } else {
        if (this.promptMask.length === this.element.value.length) {
          setElementValue.call(this, value.substring(0, sIdx) + value.substring(sIdx, value.length));
        } else {
          setElementValue.call(this, value.substring(0, idx) + value.substring(idx + 1, value.length));
        }
      }
      this.element.selectionStart = this.element.selectionEnd = chkSupport || this.element.value[idx] !== this.promptChar ? sIdx : idx;
    }
    addMaskErrorClass.call(this);
  }
  if (key.length === 1 && !ctrl && !isNullOrUndefined(event)) {
    addMaskErrorClass.call(this);
  }
}
function addMaskErrorClass() {
  var _this = this;
  var parentElement = this.element.parentNode;
  var timer = 200;
  if (parentElement.classList.contains(INPUTGROUP) || parentElement.classList.contains(FLOATINPUT)) {
    addClass([parentElement], ERROR2);
  } else {
    addClass([this.element], ERROR2);
  }
  if (this.isIosInvalid === true) {
    timer = 400;
  }
  attributes(this.element, { "aria-invalid": "true" });
  setTimeout(function() {
    if (!_this.maskKeyPress) {
      removeMaskError.call(_this);
    }
  }, timer);
}
function removeMaskError() {
  var parentElement = this.element.parentNode;
  if (!isNullOrUndefined(parentElement)) {
    removeClass([parentElement], ERROR2);
  }
  removeClass([this.element], ERROR2);
  attributes(this.element, { "aria-invalid": "false" });
}
function changeToLowerUpperCase(key, value) {
  var promptMask;
  var i;
  var curVal = value;
  var caseCount = 0;
  for (i = 0; i < this.hiddenMask.length; i++) {
    if (this.hiddenMask[i] === "\\") {
      promptMask = curVal.substring(0, i) + "\\" + curVal.substring(i, curVal.length);
    }
    if (this.hiddenMask[i] === ">" || this.hiddenMask[i] === "<" || this.hiddenMask[i] === "|") {
      if (this.hiddenMask[i] !== curVal[i]) {
        promptMask = curVal.substring(0, i) + this.hiddenMask[i] + curVal.substring(i, curVal.length);
      }
      ++caseCount;
    }
    if (promptMask) {
      if (promptMask[i] === this.promptChar && i > this.element.selectionStart || this.element.value.indexOf(this.promptChar) < 0 && this.element.selectionStart + caseCount === i) {
        caseCount = 0;
        break;
      }
      curVal = promptMask;
    }
  }
  while (i >= 0 && promptMask) {
    if (i === 0 || promptMask[i - 1] !== "\\") {
      if (promptMask[i] === ">") {
        key = key.toUpperCase();
        break;
      } else if (promptMask[i] === "<") {
        key = key.toLowerCase();
        break;
      } else if (promptMask[i] === "|") {
        break;
      }
    }
    --i;
  }
  return key;
}
function setMaskValue(val) {
  if (this.mask && val !== void 0 && (this.prevValue === void 0 || this.prevValue !== val)) {
    this.maskKeyPress = true;
    setElementValue.call(this, this.promptMask);
    if (val !== "" && !(val === null && this.floatLabelType === "Never" && this.placeholder)) {
      this.element.selectionStart = 0;
      this.element.selectionEnd = 0;
    }
    if (val !== null) {
      for (var i = 0; i < val.length; i++) {
        validateValue.call(this, val[i], false, null);
      }
    }
    var newVal = strippedValue.call(this, this.element);
    this.prevValue = newVal;
    this.value = newVal;
    triggerMaskChangeEvent.call(this, null, null);
    this.maskKeyPress = false;
    var labelElement = this.element.parentNode.querySelector(".e-float-text");
    if (this.element.value === this.promptMask && this.floatLabelType === "Auto" && this.placeholder && !isNullOrUndefined(labelElement) && labelElement.classList.contains(TOPLABEL) && !this.isFocus) {
      removeClass([labelElement], TOPLABEL);
      addClass([labelElement], BOTTOMLABEL);
      setElementValue.call(this, "");
    }
  }
  if (this.mask === null || this.mask === "" && this.value !== void 0) {
    setElementValue.call(this, this.value);
  }
}
function setElementValue(val, element2) {
  if (!this.isFocus && this.floatLabelType === "Auto" && this.placeholder && isNullOrUndefined(this.value)) {
    val = "";
  }
  var value = strippedValue.call(this, element2 ? element2 : this.element, val);
  if (value === null || value === "") {
    Input.setValue(val, element2 ? element2 : this.element, this.floatLabelType, false);
    if (this.showClearButton) {
      this.inputObj.clearButton.classList.add("e-clear-icon-hide");
    }
  } else {
    Input.setValue(val, element2 ? element2 : this.element, this.floatLabelType, this.showClearButton);
  }
}
var MaskUndo = (
  /** @class */
  /* @__PURE__ */ function() {
    function MaskUndo2() {
    }
    return MaskUndo2;
  }()
);
var maskUndo = new MaskUndo();

// node_modules/@syncfusion/ej2-inputs/src/maskedtextbox/maskedtextbox/maskedtextbox.js
var __extends17 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate17 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ROOT5 = "e-control-wrapper e-mask";
var INPUT = "e-input";
var COMPONENT2 = "e-maskedtextbox";
var CONTROL2 = "e-control";
var MASKINPUT_FOCUS = "e-input-focus";
var wrapperAttr = ["title", "style", "class"];
var MaskedTextBox = (
  /** @class */
  function(_super) {
    __extends17(MaskedTextBox2, _super);
    function MaskedTextBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.initInputValue = "";
      _this.isAngular = false;
      _this.preventChange = false;
      _this.isClicked = false;
      _this.maskOptions = options;
      return _this;
    }
    MaskedTextBox2.prototype.getModuleName = function() {
      return "maskedtextbox";
    };
    MaskedTextBox2.prototype.preRender = function() {
      this.promptMask = "";
      this.hiddenMask = "";
      this.escapeMaskValue = "";
      this.regExpCollec = regularExpressions;
      this.customRegExpCollec = [];
      this.undoCollec = [];
      this.redoCollec = [];
      this.changeEventArgs = {};
      this.focusEventArgs = {};
      this.blurEventArgs = {};
      this.maskKeyPress = false;
      this.isFocus = false;
      this.isInitial = false;
      this.isIosInvalid = false;
      var ejInstance = getValue("ej2_instances", this.element);
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [CONTROL2, COMPONENT2, "e-lib"]);
      this.angularTagName = null;
      this.formElement = closest(this.element, "form");
      if (this.element.tagName === "EJS-MASKEDTEXTBOX") {
        this.angularTagName = this.element.tagName;
        var input = this.createElement("input");
        for (var i = 0; i < this.element.attributes.length; i++) {
          input.setAttribute(this.element.attributes[i].nodeName, this.element.attributes[i].nodeValue);
          input.innerHTML = this.element.innerHTML;
        }
        if (this.element.hasAttribute("id")) {
          this.element.removeAttribute("id");
        }
        this.element.classList.remove("e-control", "e-maskedtextbox");
        this.element.classList.add("e-mask-container");
        this.element.appendChild(input);
        this.element = input;
        setValue("ej2_instances", ejInstance, this.element);
      }
      this.updateHTMLAttrToElement();
      this.checkHtmlAttributes(false);
      if (this.formElement) {
        this.initInputValue = this.value;
      }
    };
    MaskedTextBox2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    MaskedTextBox2.prototype.render = function() {
      if (this.element.tagName.toLowerCase() === "input") {
        if (this.floatLabelType === "Never") {
          addClass([this.element], INPUT);
        }
        this.createWrapper();
        this.updateHTMLAttrToWrapper();
        if (this.element.name === "") {
          this.element.setAttribute("name", this.element.id);
        }
        this.isInitial = true;
        this.resetMaskedTextBox();
        this.isInitial = false;
        this.setMaskPlaceholder(true, false);
        this.setWidth(this.width);
        this.preEleVal = this.element.value;
        if (!Browser.isDevice && (Browser.info.version === "11.0" || Browser.info.name === "edge")) {
          this.element.blur();
        }
        if (Browser.isDevice && Browser.isIos) {
          this.element.blur();
        }
        if (this.element.getAttribute("value") || this.value) {
          this.element.setAttribute("value", this.element.value);
        }
        this.renderComplete();
      }
    };
    MaskedTextBox2.prototype.updateHTMLAttrToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) < 0) {
            this.element.setAttribute(key, this.htmlAttributes[key]);
          }
        }
      }
    };
    MaskedTextBox2.prototype.updateCssClass = function(newClass, oldClass) {
      Input.setCssClass(this.getValidClassList(newClass), [this.inputObj.container], this.getValidClassList(oldClass));
    };
    MaskedTextBox2.prototype.getValidClassList = function(maskClassName) {
      var result = maskClassName;
      if (!isNullOrUndefined(maskClassName) && maskClassName !== "") {
        result = maskClassName.replace(/\s+/g, " ").trim();
      }
      return result;
    };
    MaskedTextBox2.prototype.updateHTMLAttrToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassValues = this.htmlAttributes[key].replace(/\s+/g, " ").trim();
              if (updatedClassValues !== "") {
                addClass([this.inputObj.container], updatedClassValues.split(" "));
              }
            } else if (key === "style") {
              var maskStyle = this.inputObj.container.getAttribute(key);
              maskStyle = !isNullOrUndefined(maskStyle) ? maskStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
              this.inputObj.container.setAttribute(key, maskStyle);
            } else {
              this.inputObj.container.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };
    MaskedTextBox2.prototype.resetMaskedTextBox = function() {
      this.promptMask = "";
      this.hiddenMask = "";
      this.escapeMaskValue = "";
      this.customRegExpCollec = [];
      this.undoCollec = [];
      this.redoCollec = [];
      if (this.promptChar.length > 1) {
        this.promptChar = this.promptChar[0];
      }
      createMask.call(this);
      applyMask.call(this);
      if (this.mask === null || this.mask === "" && this.value !== void 0) {
        setElementValue.call(this, this.value);
      }
      var val = strippedValue.call(this, this.element);
      this.prevValue = val;
      this.value = val;
      if (!this.isInitial) {
        unwireEvents.call(this);
      }
      wireEvents2.call(this);
    };
    MaskedTextBox2.prototype.setMaskPlaceholder = function(setVal, dynamicPlaceholder) {
      if (dynamicPlaceholder || this.placeholder) {
        Input.setPlaceholder(this.placeholder, this.element);
        if (this.element.value === this.promptMask && setVal && this.floatLabelType !== "Always" || this.element.value === this.promptMask && this.floatLabelType === "Never") {
          setElementValue.call(this, "");
        }
      }
    };
    MaskedTextBox2.prototype.setWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.inputObj.container.style.width = formatUnit(width);
          this.element.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          var elementWidth = width.match(/px|%|em/) ? width : formatUnit(width);
          this.inputObj.container.style.width = elementWidth;
          this.element.style.width = elementWidth;
        }
      }
    };
    MaskedTextBox2.prototype.checkHtmlAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["placeholder", "disabled", "value", "readonly"];
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var key = attributes_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(key))) {
          switch (key) {
            case "placeholder":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["enabled"] === void 0 || isDynamic) {
                var isEnabled = this.element.getAttribute(key) === "disabled" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? false : true;
                this.setProperties({ enabled: isEnabled }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["value"] === void 0 || isDynamic) {
                this.setProperties({ value: this.element.value }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.maskOptions) || this.maskOptions["readonly"] === void 0 || isDynamic) {
                var isReadonly = this.element.getAttribute(key) === "readonly" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? true : false;
                this.setProperties({ readonly: isReadonly }, !isDynamic);
              }
              break;
          }
        }
      }
    };
    MaskedTextBox2.prototype.createWrapper = function() {
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.getValidClassList(this.cssClass);
      }
      this.inputObj = Input.createInput({
        element: this.element,
        floatLabelType: this.floatLabelType,
        properties: {
          enableRtl: this.enableRtl,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          readonly: this.readonly,
          placeholder: this.placeholder,
          showClearButton: this.showClearButton
        }
      }, this.createElement);
      this.inputObj.container.setAttribute("class", ROOT5 + " " + this.inputObj.container.getAttribute("class"));
    };
    MaskedTextBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            setMaskValue.call(this, this.value);
            if (this.placeholder) {
              this.setMaskPlaceholder(false, false);
            }
            break;
          case "placeholder":
            this.setMaskPlaceholder(true, true);
            break;
          case "width":
            this.setWidth(newProp.width);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            Input.setEnabled(newProp.enabled, this.element, this.floatLabelType, this.inputObj.container);
            break;
          case "readonly":
            Input.setReadonly(newProp.readonly, this.element);
            break;
          case "enableRtl":
            Input.setEnableRtl(newProp.enableRtl, [this.inputObj.container]);
            break;
          case "customCharacters":
            this.customCharacters = newProp.customCharacters;
            this.resetMaskedTextBox();
            break;
          case "showClearButton":
            Input.setClearButton(newProp.showClearButton, this.element, this.inputObj, void 0, this.createElement);
            bindClearEvent.call(this);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputObj);
            Input.addFloating(this.element, this.floatLabelType, this.placeholder, this.createElement);
            break;
          case "htmlAttributes":
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.checkHtmlAttributes(true);
            break;
          case "mask":
            {
              var strippedValue_1 = this.value;
              this.mask = newProp.mask;
              this.updateValue(strippedValue_1);
            }
            break;
          case "promptChar": {
            if (newProp.promptChar.length > 1) {
              newProp.promptChar = newProp.promptChar[0];
            }
            if (newProp.promptChar) {
              this.promptChar = newProp.promptChar;
            } else {
              this.promptChar = "_";
            }
            var value = this.element.value.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar);
            if (this.promptMask === this.element.value) {
              value = this.promptMask.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar);
            }
            this.promptMask = this.promptMask.replace(new RegExp("[" + oldProp.promptChar + "]", "g"), this.promptChar);
            this.undoCollec = this.redoCollec = [];
            setElementValue.call(this, value);
            break;
          }
        }
      }
      this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
    };
    MaskedTextBox2.prototype.updateValue = function(strippedVal) {
      this.resetMaskedTextBox();
      setMaskValue.call(this, strippedVal);
    };
    MaskedTextBox2.prototype.getMaskedValue = function() {
      return unstrippedValue.call(this, this.element);
    };
    MaskedTextBox2.prototype.focusIn = function() {
      if (document.activeElement !== this.element && this.enabled) {
        this.element.focus();
        addClass([this.inputObj.container], [MASKINPUT_FOCUS]);
      }
    };
    MaskedTextBox2.prototype.focusOut = function() {
      if (document.activeElement === this.element && this.enabled) {
        this.element.blur();
        removeClass([this.inputObj.container], [MASKINPUT_FOCUS]);
      }
    };
    MaskedTextBox2.prototype.destroy = function() {
      unwireEvents.call(this);
      var attrArray = [
        "aria-labelledby",
        "role",
        "autocomplete",
        "aria-readonly",
        "autocorrect",
        "aria-disabled",
        "aria-placeholder",
        "autocapitalize",
        "spellcheck",
        "aria-autocomplete",
        "aria-live",
        "aria-valuenow",
        "aria-invalid"
      ];
      for (var i = 0; i < attrArray.length; i++) {
        this.element.removeAttribute(attrArray[i]);
      }
      this.element.classList.remove("e-input");
      this.inputObj.container.insertAdjacentElement("afterend", this.element);
      detach(this.inputObj.container);
      _super.prototype.destroy.call(this);
    };
    __decorate17([
      Property(null)
    ], MaskedTextBox2.prototype, "cssClass", void 0);
    __decorate17([
      Property(null)
    ], MaskedTextBox2.prototype, "width", void 0);
    __decorate17([
      Property(null)
    ], MaskedTextBox2.prototype, "placeholder", void 0);
    __decorate17([
      Property("Never")
    ], MaskedTextBox2.prototype, "floatLabelType", void 0);
    __decorate17([
      Property({})
    ], MaskedTextBox2.prototype, "htmlAttributes", void 0);
    __decorate17([
      Property(true)
    ], MaskedTextBox2.prototype, "enabled", void 0);
    __decorate17([
      Property(false)
    ], MaskedTextBox2.prototype, "readonly", void 0);
    __decorate17([
      Property(false)
    ], MaskedTextBox2.prototype, "showClearButton", void 0);
    __decorate17([
      Property(false)
    ], MaskedTextBox2.prototype, "enablePersistence", void 0);
    __decorate17([
      Property(null)
    ], MaskedTextBox2.prototype, "mask", void 0);
    __decorate17([
      Property("_")
    ], MaskedTextBox2.prototype, "promptChar", void 0);
    __decorate17([
      Property(null)
    ], MaskedTextBox2.prototype, "value", void 0);
    __decorate17([
      Property(null)
    ], MaskedTextBox2.prototype, "customCharacters", void 0);
    __decorate17([
      Event2()
    ], MaskedTextBox2.prototype, "created", void 0);
    __decorate17([
      Event2()
    ], MaskedTextBox2.prototype, "destroyed", void 0);
    __decorate17([
      Event2()
    ], MaskedTextBox2.prototype, "change", void 0);
    __decorate17([
      Event2()
    ], MaskedTextBox2.prototype, "focus", void 0);
    __decorate17([
      Event2()
    ], MaskedTextBox2.prototype, "blur", void 0);
    MaskedTextBox2 = __decorate17([
      NotifyPropertyChanges
    ], MaskedTextBox2);
    return MaskedTextBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/slider/slider.js
var __extends18 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate18 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var TicksData = (
  /** @class */
  function(_super) {
    __extends18(TicksData2, _super);
    function TicksData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate18([
      Property("None")
    ], TicksData2.prototype, "placement", void 0);
    __decorate18([
      Property(10)
    ], TicksData2.prototype, "largeStep", void 0);
    __decorate18([
      Property(1)
    ], TicksData2.prototype, "smallStep", void 0);
    __decorate18([
      Property(false)
    ], TicksData2.prototype, "showSmallTicks", void 0);
    __decorate18([
      Property(null)
    ], TicksData2.prototype, "format", void 0);
    return TicksData2;
  }(ChildProperty)
);
var ColorRangeData = (
  /** @class */
  function(_super) {
    __extends18(ColorRangeData2, _super);
    function ColorRangeData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate18([
      Property(null)
    ], ColorRangeData2.prototype, "color", void 0);
    __decorate18([
      Property(null)
    ], ColorRangeData2.prototype, "start", void 0);
    __decorate18([
      Property(null)
    ], ColorRangeData2.prototype, "end", void 0);
    return ColorRangeData2;
  }(ChildProperty)
);
var LimitData = (
  /** @class */
  function(_super) {
    __extends18(LimitData2, _super);
    function LimitData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate18([
      Property(false)
    ], LimitData2.prototype, "enabled", void 0);
    __decorate18([
      Property(null)
    ], LimitData2.prototype, "minStart", void 0);
    __decorate18([
      Property(null)
    ], LimitData2.prototype, "minEnd", void 0);
    __decorate18([
      Property(null)
    ], LimitData2.prototype, "maxStart", void 0);
    __decorate18([
      Property(null)
    ], LimitData2.prototype, "maxEnd", void 0);
    __decorate18([
      Property(false)
    ], LimitData2.prototype, "startHandleFixed", void 0);
    __decorate18([
      Property(false)
    ], LimitData2.prototype, "endHandleFixed", void 0);
    return LimitData2;
  }(ChildProperty)
);
var TooltipData = (
  /** @class */
  function(_super) {
    __extends18(TooltipData2, _super);
    function TooltipData2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate18([
      Property("")
    ], TooltipData2.prototype, "cssClass", void 0);
    __decorate18([
      Property("Before")
    ], TooltipData2.prototype, "placement", void 0);
    __decorate18([
      Property("Focus")
    ], TooltipData2.prototype, "showOn", void 0);
    __decorate18([
      Property(false)
    ], TooltipData2.prototype, "isVisible", void 0);
    __decorate18([
      Property(null)
    ], TooltipData2.prototype, "format", void 0);
    return TooltipData2;
  }(ChildProperty)
);
var bootstrapTooltipOffset = 6;
var bootstrap4TooltipOffset = 3;
var classNames2 = {
  root: "e-slider",
  rtl: "e-rtl",
  sliderHiddenInput: "e-slider-input",
  controlWrapper: "e-control-wrapper",
  sliderHandle: "e-handle",
  rangeBar: "e-range",
  sliderButton: "e-slider-button",
  firstButton: "e-first-button",
  secondButton: "e-second-button",
  scale: "e-scale",
  tick: "e-tick",
  large: "e-large",
  tickValue: "e-tick-value",
  sliderTooltip: "e-slider-tooltip",
  sliderHover: "e-slider-hover",
  sliderFirstHandle: "e-handle-first",
  sliderSecondHandle: "e-handle-second",
  sliderDisabled: "e-disabled",
  sliderContainer: "e-slider-container",
  horizontalTooltipBefore: "e-slider-horizontal-before",
  horizontalTooltipAfter: "e-slider-horizontal-after",
  verticalTooltipBefore: "e-slider-vertical-before",
  verticalTooltipAfter: "e-slider-vertical-after",
  materialTooltip: "e-material-tooltip",
  materialTooltipOpen: "e-material-tooltip-open",
  materialTooltipActive: "e-tooltip-active",
  materialSlider: "e-material-slider",
  sliderTrack: "e-slider-track",
  sliderHorizantalColor: "e-slider-horizantal-color",
  sliderVerticalColor: "e-slider-vertical-color",
  sliderHandleFocused: "e-handle-focused",
  verticalSlider: "e-vertical",
  horizontalSlider: "e-horizontal",
  sliderHandleStart: "e-handle-start",
  sliderTooltipStart: "e-material-tooltip-start",
  sliderTabHandle: "e-tab-handle",
  sliderButtonIcon: "e-button-icon",
  sliderSmallSize: "e-small-size",
  sliderTickPosition: "e-tick-pos",
  sliderFirstTick: "e-first-tick",
  sliderLastTick: "e-last-tick",
  sliderButtonClass: "e-slider-btn",
  sliderTooltipWrapper: "e-tooltip-wrap",
  sliderTabTrack: "e-tab-track",
  sliderTabRange: "e-tab-range",
  sliderActiveHandle: "e-handle-active",
  sliderMaterialHandle: "e-material-handle",
  sliderMaterialRange: "e-material-range",
  sliderMaterialDefault: "e-material-default",
  materialTooltipShow: "e-material-tooltip-show",
  materialTooltipHide: "e-material-tooltip-hide",
  readonly: "e-read-only",
  limits: "e-limits",
  limitBarDefault: "e-limit-bar",
  limitBarFirst: "e-limit-first",
  limitBarSecond: "e-limit-second",
  dragHorizontal: "e-drag-horizontal",
  dragVertical: "e-drag-vertical"
};
var Slider = (
  /** @class */
  function(_super) {
    __extends18(Slider2, _super);
    function Slider2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.horDir = "left";
      _this.verDir = "bottom";
      _this.transition = {
        handle: "left .4s cubic-bezier(.25, .8, .25, 1), right .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1) , bottom .4s cubic-bezier(.25, .8, .25, 1)",
        rangeBar: "all .4s cubic-bezier(.25, .8, .25, 1)"
      };
      _this.transitionOnMaterialTooltip = {
        handle: "left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, top 1ms ease-out",
        rangeBar: "left 1ms ease-out, right 1ms ease-out, bottom 1ms ease-out, width 1ms ease-out, height 1ms ease-out"
      };
      _this.scaleTransform = "transform .4s cubic-bezier(.25, .8, .25, 1)";
      _this.customAriaText = null;
      _this.drag = true;
      _this.isDragComplete = false;
      _this.initialTooltip = true;
      return _this;
    }
    Slider2.prototype.preRender = function() {
      var localeText = { incrementTitle: "Increase", decrementTitle: "Decrease" };
      this.l10n = new L10n("slider", localeText, this.locale);
      this.isElementFocused = false;
      this.tickElementCollection = [];
      this.tooltipFormatInfo = {};
      this.ticksFormatInfo = {};
      this.initCultureInfo();
      this.initCultureFunc();
      this.formChecker();
    };
    Slider2.prototype.formChecker = function() {
      var formElement = closest(this.element, "form");
      if (formElement) {
        this.isForm = true;
        if (!isNullOrUndefined(this.formResetValue)) {
          this.setProperties({ "value": this.formResetValue }, true);
        }
        this.formResetValue = this.value;
        if (this.type === "Range" && (isNullOrUndefined(this.formResetValue) || typeof this.formResetValue !== "object")) {
          this.formResetValue = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];
        } else if (isNullOrUndefined(this.formResetValue)) {
          this.formResetValue = parseFloat(formatUnit(this.min));
        }
        this.formElement = formElement;
      } else {
        this.isForm = false;
      }
    };
    Slider2.prototype.initCultureFunc = function() {
      this.internationalization = new Internationalization(this.locale);
    };
    Slider2.prototype.initCultureInfo = function() {
      this.tooltipFormatInfo.format = !isNullOrUndefined(this.tooltip.format) ? this.tooltip.format : null;
      this.ticksFormatInfo.format = !isNullOrUndefined(this.ticks.format) ? this.ticks.format : null;
    };
    Slider2.prototype.formatString = function(value, formatInfo) {
      var formatValue = null;
      var formatString = null;
      if (value || value === 0) {
        formatValue = this.formatNumber(value);
        var numberOfDecimals = this.numberOfDecimals(value);
        formatString = this.internationalization.getNumberFormat(formatInfo)(this.makeRoundNumber(value, numberOfDecimals));
      }
      return { elementVal: formatValue, formatString };
    };
    Slider2.prototype.formatNumber = function(value) {
      var numberOfDecimals = this.numberOfDecimals(value);
      return this.internationalization.getNumberFormat({
        maximumFractionDigits: numberOfDecimals,
        minimumFractionDigits: numberOfDecimals,
        useGrouping: false
      })(value);
    };
    Slider2.prototype.numberOfDecimals = function(value) {
      var decimalPart = value.toString().split(".")[1];
      var numberOfDecimals = !decimalPart || !decimalPart.length ? 0 : decimalPart.length;
      return numberOfDecimals;
    };
    Slider2.prototype.makeRoundNumber = function(value, precision) {
      var decimals = precision || 0;
      return Number(value.toFixed(decimals));
    };
    Slider2.prototype.fractionalToInteger = function(value) {
      value = this.numberOfDecimals(value) === 0 ? Number(value).toFixed(this.noOfDecimals) : value;
      var tens = 1;
      for (var i = 0; i < this.noOfDecimals; i++) {
        tens *= 10;
      }
      value = Number((value * tens).toFixed(0));
      return value;
    };
    Slider2.prototype.render = function() {
      var _this = this;
      this.initialize();
      this.initRender();
      this.wireEvents();
      this.setZindex();
      this.renderComplete();
      if (this.element.tagName === "EJS-SLIDER") {
        if (this.getTheme(this.sliderContainer) == "none") {
          setTimeout(function() {
            _this.refresh();
          }, 0);
        }
      }
    };
    Slider2.prototype.initialize = function() {
      addClass([this.element], classNames2.root);
      this.setCSSClass();
    };
    Slider2.prototype.setElementWidth = function(width) {
      if (!isNullOrUndefined(width)) {
        if (typeof width === "number") {
          this.sliderContainer.style.width = formatUnit(width);
        } else if (typeof width === "string") {
          this.sliderContainer.style.width = width.match(/px|%|em/) ? width : formatUnit(width);
        }
      }
    };
    Slider2.prototype.setCSSClass = function(oldCSSClass) {
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" "));
      }
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" "));
      }
    };
    Slider2.prototype.setEnabled = function() {
      if (!this.enabled) {
        addClass([this.sliderContainer], [classNames2.sliderDisabled]);
        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === "Always") {
          this.tooltipElement.classList.add(classNames2.sliderDisabled);
        }
        this.unwireEvents();
      } else {
        removeClass([this.sliderContainer], [classNames2.sliderDisabled]);
        if (this.tooltip.isVisible && this.tooltipElement && this.tooltip.showOn === "Always") {
          this.tooltipElement.classList.remove(classNames2.sliderDisabled);
        }
        this.wireEvents();
      }
    };
    Slider2.prototype.getTheme = function(container) {
      var theme = window.getComputedStyle(container, ":after").getPropertyValue("content");
      return theme.replace(/['"]+/g, "");
    };
    Slider2.prototype.initRender = function() {
      this.sliderContainer = this.createElement("div", { className: classNames2.sliderContainer + " " + classNames2.controlWrapper });
      this.element.parentNode.insertBefore(this.sliderContainer, this.element);
      this.sliderContainer.appendChild(this.element);
      this.sliderTrack = this.createElement("div", { className: classNames2.sliderTrack });
      this.element.appendChild(this.sliderTrack);
      this.setElementWidth(this.width);
      this.element.tabIndex = -1;
      this.getThemeInitialization();
      this.setHandler();
      this.createRangeBar();
      if (this.limits.enabled) {
        this.createLimitBar();
      }
      this.setOrientClass();
      this.hiddenInput = this.createElement("input", {
        attrs: {
          type: "hidden",
          value: isNullOrUndefined(this.value) ? this.min.toString() : this.value.toString(),
          name: this.element.getAttribute("name") || this.element.getAttribute("id") || "_" + (Math.random() * 1e3).toFixed(0) + "slider",
          class: classNames2.sliderHiddenInput
        }
      });
      this.hiddenInput.tabIndex = -1;
      this.sliderContainer.appendChild(this.hiddenInput);
      if (this.showButtons) {
        this.setButtons();
      }
      this.setEnableRTL();
      if (this.type === "Range") {
        this.rangeValueUpdate();
      } else {
        this.value = isNullOrUndefined(this.value) ? parseFloat(formatUnit(this.min.toString())) : this.value;
      }
      this.previousVal = this.type !== "Range" ? this.checkHandleValue(parseFloat(formatUnit(this.value.toString()))) : [
        this.checkHandleValue(parseFloat(formatUnit(this.value[0].toString()))),
        this.checkHandleValue(parseFloat(formatUnit(this.value[1].toString())))
      ];
      this.previousChanged = this.previousVal;
      if (!isNullOrUndefined(this.element.hasAttribute("name"))) {
        this.element.removeAttribute("name");
      }
      this.setValue();
      if (this.limits.enabled) {
        this.setLimitBar();
      }
      if (this.ticks.placement !== "None") {
        this.renderScale();
      }
      if (this.tooltip.isVisible) {
        this.renderTooltip();
      }
      if (!this.enabled) {
        addClass([this.sliderContainer], [classNames2.sliderDisabled]);
      } else {
        removeClass([this.sliderContainer], [classNames2.sliderDisabled]);
      }
      if (this.readonly) {
        addClass([this.sliderContainer], [classNames2.readonly]);
      } else {
        removeClass([this.sliderContainer], [classNames2.readonly]);
      }
    };
    Slider2.prototype.getThemeInitialization = function() {
      this.isMaterial = this.getTheme(this.sliderContainer) === "material" || this.getTheme(this.sliderContainer) === "material-dark";
      this.isBootstrap = this.getTheme(this.sliderContainer) === "bootstrap" || this.getTheme(this.sliderContainer) === "bootstrap-dark";
      this.isBootstrap4 = this.getTheme(this.sliderContainer) === "bootstrap4";
      this.isTailwind = this.getTheme(this.sliderContainer) === "tailwind" || this.getTheme(this.sliderContainer) === "tailwind-dark";
      this.isBootstrap5 = this.getTheme(this.sliderContainer) === "bootstrap5";
      this.isMaterialTooltip = this.isMaterial && this.type !== "Range" && this.tooltip.isVisible;
    };
    Slider2.prototype.createRangeBar = function() {
      if (this.type !== "Default") {
        this.rangeBar = this.createElement("div", { attrs: { class: classNames2.rangeBar } });
        this.element.appendChild(this.rangeBar);
        if (this.drag && this.type === "Range") {
          if (this.orientation === "Horizontal") {
            this.rangeBar.classList.add(classNames2.dragHorizontal);
          } else {
            this.rangeBar.classList.add(classNames2.dragVertical);
          }
        }
      }
    };
    Slider2.prototype.createLimitBar = function() {
      var firstElementClassName = this.type !== "Range" ? classNames2.limitBarDefault : classNames2.limitBarFirst;
      firstElementClassName += " " + classNames2.limits;
      this.limitBarFirst = this.createElement("div", {
        attrs: { class: firstElementClassName }
      });
      this.element.appendChild(this.limitBarFirst);
      if (this.type === "Range") {
        this.limitBarSecond = this.createElement("div", {
          attrs: {
            class: classNames2.limitBarSecond + " " + classNames2.limits
          }
        });
        this.element.appendChild(this.limitBarSecond);
      }
    };
    Slider2.prototype.setOrientClass = function() {
      if (this.orientation !== "Vertical") {
        this.sliderContainer.classList.remove(classNames2.verticalSlider);
        this.sliderContainer.classList.add(classNames2.horizontalSlider);
        this.firstHandle.setAttribute("aria-orientation", "horizontal");
        if (this.type === "Range") {
          this.secondHandle.setAttribute("aria-orientation", "horizontal");
        }
      } else {
        this.sliderContainer.classList.remove(classNames2.horizontalSlider);
        this.sliderContainer.classList.add(classNames2.verticalSlider);
        this.firstHandle.setAttribute("aria-orientation", "vertical");
        if (this.type === "Range") {
          this.secondHandle.setAttribute("aria-orientation", "vertical");
        }
      }
    };
    Slider2.prototype.setAriaAttributes = function(element2) {
      var _this = this;
      var min = this.min;
      var max = this.max;
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        min = this.customValues[0];
        max = this.customValues[this.customValues.length - 1];
      }
      if (this.type !== "Range") {
        attributes(element2, {
          "aria-valuemin": min.toString(),
          "aria-valuemax": max.toString()
        });
      } else {
        var range = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? [
          [min.toString(), this.customValues[this.value[1]].toString()],
          [this.customValues[this.value[0]].toString(), max.toString()]
        ] : [[min.toString(), this.value[1].toString()], [this.value[0].toString(), max.toString()]];
        range.forEach(function(range2, index) {
          var element3 = index === 0 ? _this.firstHandle : _this.secondHandle;
          if (element3) {
            attributes(element3, {
              "aria-valuemin": range2[0],
              "aria-valuemax": range2[1]
            });
          }
        });
      }
    };
    Slider2.prototype.createSecondHandle = function() {
      this.secondHandle = this.createElement("div", {
        attrs: {
          class: classNames2.sliderHandle,
          "role": "slider",
          tabIndex: "0"
        }
      });
      this.secondHandle.classList.add(classNames2.sliderSecondHandle);
      this.element.appendChild(this.secondHandle);
    };
    Slider2.prototype.createFirstHandle = function() {
      this.firstHandle = this.createElement("div", {
        attrs: {
          class: classNames2.sliderHandle,
          "role": "slider",
          tabIndex: "0"
        }
      });
      this.firstHandle.classList.add(classNames2.sliderFirstHandle);
      this.element.appendChild(this.firstHandle);
      if (this.isMaterialTooltip) {
        this.materialHandle = this.createElement("div", {
          attrs: {
            class: classNames2.sliderHandle + " " + classNames2.sliderMaterialHandle
          }
        });
        this.element.appendChild(this.materialHandle);
      }
    };
    Slider2.prototype.wireFirstHandleEvt = function(destroy2) {
      if (!destroy2) {
        EventHandler.add(this.firstHandle, "mousedown touchstart", this.handleFocus, this);
        EventHandler.add(this.firstHandle, "transitionend", this.transitionEnd, this);
        EventHandler.add(this.firstHandle, "mouseenter touchenter", this.handleOver, this);
        EventHandler.add(this.firstHandle, "mouseleave touchend", this.handleLeave, this);
      } else {
        EventHandler.remove(this.firstHandle, "mousedown touchstart", this.handleFocus);
        EventHandler.remove(this.firstHandle, "transitionend", this.transitionEnd);
        EventHandler.remove(this.firstHandle, "mouseenter touchenter", this.handleOver);
        EventHandler.remove(this.firstHandle, "mouseleave touchend", this.handleLeave);
      }
    };
    Slider2.prototype.wireSecondHandleEvt = function(destroy2) {
      if (!destroy2) {
        EventHandler.add(this.secondHandle, "mousedown touchstart", this.handleFocus, this);
        EventHandler.add(this.secondHandle, "transitionend", this.transitionEnd, this);
        EventHandler.add(this.secondHandle, "mouseenter touchenter", this.handleOver, this);
        EventHandler.add(this.secondHandle, "mouseleave touchend", this.handleLeave, this);
      } else {
        EventHandler.remove(this.secondHandle, "mousedown touchstart", this.handleFocus);
        EventHandler.remove(this.secondHandle, "transitionend", this.transitionEnd);
        EventHandler.remove(this.secondHandle, "mouseenter touchenter", this.handleOver);
        EventHandler.remove(this.secondHandle, "mouseleave touchend", this.handleLeave);
      }
    };
    Slider2.prototype.handleStart = function() {
      if (this.type !== "Range") {
        this.firstHandle.classList[this.handlePos1 === 0 ? "add" : "remove"](classNames2.sliderHandleStart);
        if (this.isMaterialTooltip) {
          this.materialHandle.classList[this.handlePos1 === 0 ? "add" : "remove"](classNames2.sliderHandleStart);
          if (this.tooltipElement) {
            this.tooltipElement.classList[this.handlePos1 === 0 ? "add" : "remove"](classNames2.sliderTooltipStart);
          }
        }
      }
    };
    Slider2.prototype.transitionEnd = function(e) {
      if (e.propertyName !== "transform") {
        this.handleStart();
        this.getHandle().style.transition = "none";
        if (this.type !== "Default") {
          this.rangeBar.style.transition = "none";
        }
        if (this.isMaterial && this.tooltip.isVisible && this.type === "Default") {
          this.tooltipElement.style.transition = this.transition.handle;
        }
        this.tooltipToggle(this.getHandle());
        this.closeTooltip();
      }
    };
    Slider2.prototype.handleFocusOut = function() {
      if (this.firstHandle.classList.contains(classNames2.sliderHandleFocused)) {
        this.firstHandle.classList.remove(classNames2.sliderHandleFocused);
      }
      if (this.type === "Range") {
        if (this.secondHandle.classList.contains(classNames2.sliderHandleFocused)) {
          this.secondHandle.classList.remove(classNames2.sliderHandleFocused);
        }
      }
    };
    Slider2.prototype.handleFocus = function(e) {
      this.focusSliderElement();
      this.sliderBarClick(e);
      if (e.currentTarget === this.firstHandle) {
        this.firstHandle.classList.add(classNames2.sliderHandleFocused);
        this.firstHandle.classList.add(classNames2.sliderTabHandle);
      } else {
        this.secondHandle.classList.add(classNames2.sliderHandleFocused);
        this.secondHandle.classList.add(classNames2.sliderTabHandle);
      }
      EventHandler.add(document, "mousemove touchmove", this.sliderBarMove, this);
      EventHandler.add(document, "mouseup touchend", this.sliderBarUp, this);
    };
    Slider2.prototype.handleOver = function(e) {
      if (this.tooltip.isVisible && this.tooltip.showOn === "Hover") {
        this.tooltipToggle(e.currentTarget);
      }
      if (this.type === "Default") {
        this.tooltipToggle(this.getHandle());
      }
    };
    Slider2.prototype.handleLeave = function(e) {
      if (this.tooltip.isVisible && this.tooltip.showOn === "Hover" && !e.currentTarget.classList.contains(classNames2.sliderHandleFocused) && !e.currentTarget.classList.contains(classNames2.sliderTabHandle)) {
        this.closeTooltip();
      }
    };
    Slider2.prototype.setHandler = function() {
      if (this.min > this.max) {
        this.min = this.max;
      }
      this.createFirstHandle();
      if (this.type === "Range") {
        this.createSecondHandle();
      }
    };
    Slider2.prototype.setEnableRTL = function() {
      this.enableRtl && this.orientation !== "Vertical" ? addClass([this.sliderContainer], classNames2.rtl) : removeClass([this.sliderContainer], classNames2.rtl);
      var preDir = this.orientation !== "Vertical" ? this.horDir : this.verDir;
      if (this.enableRtl) {
        this.horDir = "right";
        this.verDir = "bottom";
      } else {
        this.horDir = "left";
        this.verDir = "bottom";
      }
      var currDir = this.orientation !== "Vertical" ? this.horDir : this.verDir;
      if (preDir !== currDir) {
        if (this.orientation === "Horizontal") {
          setStyleAttribute(this.firstHandle, { "right": "", "left": "auto" });
          if (this.type === "Range") {
            setStyleAttribute(this.secondHandle, { "top": "", "left": "auto" });
          }
        }
      }
      this.setBarColor();
    };
    Slider2.prototype.tooltipValue = function() {
      var _this = this;
      var text;
      var args = {
        value: this.value,
        text: ""
      };
      if (this.initialTooltip) {
        this.initialTooltip = false;
        this.setTooltipContent();
        args.text = text = this.tooltipObj.content;
        this.trigger("tooltipChange", args, function(observedArgs) {
          _this.addTooltipClass(observedArgs.text);
          if (text !== observedArgs.text) {
            _this.customAriaText = observedArgs.text;
            _this.tooltipObj.content = observedArgs.text;
            _this.setAriaAttrValue(_this.firstHandle);
            if (_this.type === "Range") {
              _this.setAriaAttrValue(_this.secondHandle);
            }
          }
        });
        if (this.isMaterialTooltip) {
          this.setPreviousVal("change", this.value);
        }
      }
    };
    Slider2.prototype.setTooltipContent = function() {
      var content;
      content = this.formatContent(this.tooltipFormatInfo, false);
      this.tooltipObj.content = content;
    };
    Slider2.prototype.formatContent = function(formatInfo, ariaContent) {
      var content = "";
      var handle1 = this.handleVal1;
      var handle2 = this.handleVal2;
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        handle1 = this.customValues[this.handleVal1];
        handle2 = this.customValues[this.handleVal2];
      }
      if (!ariaContent) {
        if (this.type === "Range") {
          if (this.enableRtl && this.orientation !== "Vertical") {
            content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle2, formatInfo).formatString + " - " + this.formatString(handle1, formatInfo).formatString : handle2.toString() + " - " + handle1.toString();
          } else {
            content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString + " - " + this.formatString(handle2, formatInfo).formatString : handle1.toString() + " - " + handle2.toString();
          }
        } else {
          if (!isNullOrUndefined(handle1)) {
            content = !isNullOrUndefined(formatInfo.format) ? this.formatString(handle1, formatInfo).formatString : handle1.toString();
          }
        }
        return content;
      } else {
        if (this.type === "Range") {
          if (this.enableRtl && this.orientation !== "Vertical") {
            content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle2, formatInfo).elementVal + " - " + this.formatString(handle1, formatInfo).elementVal : handle2.toString() + " - " + handle1.toString();
          } else {
            content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal + " - " + this.formatString(handle2, formatInfo).elementVal : handle1.toString() + " - " + handle2.toString();
          }
        } else {
          if (!isNullOrUndefined(handle1)) {
            content = !isNullOrUndefined(this.tooltip) && !isNullOrUndefined(this.tooltip.format) ? this.formatString(handle1, formatInfo).elementVal : handle1.toString();
          }
        }
        return content;
      }
    };
    Slider2.prototype.addTooltipClass = function(content) {
      if (this.isMaterialTooltip) {
        var count = content.toString().length;
        if (!this.tooltipElement) {
          var cssClass2 = count > 4 ? classNames2.sliderMaterialRange : classNames2.sliderMaterialDefault;
          this.tooltipObj.cssClass = classNames2.sliderTooltip + " " + cssClass2;
        } else {
          var cssClass2 = count > 4 ? { oldCss: classNames2.sliderMaterialDefault, newCss: classNames2.sliderMaterialRange } : { oldCss: classNames2.sliderMaterialRange, newCss: classNames2.sliderMaterialDefault };
          this.tooltipElement.classList.remove(cssClass2.oldCss);
          if (!this.tooltipElement.classList.contains(cssClass2.newCss)) {
            this.tooltipElement.classList.add(cssClass2.newCss);
            this.tooltipElement.style.transform = count > 4 ? "scale(1)" : this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
          }
        }
      }
    };
    Slider2.prototype.tooltipPlacement = function() {
      return this.orientation === "Horizontal" ? this.tooltip.placement === "Before" ? "TopCenter" : "BottomCenter" : this.tooltip.placement === "Before" ? "LeftCenter" : "RightCenter";
    };
    Slider2.prototype.tooltipBeforeOpen = function(args) {
      this.tooltipElement = args.element;
      if (this.tooltip.cssClass) {
        addClass([this.tooltipElement], this.tooltip.cssClass.split(" ").filter(function(css) {
          return css;
        }));
      }
      args.target.removeAttribute("aria-describedby");
      if (this.isMaterialTooltip) {
        this.tooltipElement.firstElementChild.classList.add(classNames2.materialTooltipHide);
        this.handleStart();
        this.setTooltipTransform();
      }
    };
    Slider2.prototype.tooltipCollision = function(position) {
      if (this.isBootstrap || this.isBootstrap4 || this.isMaterial && !this.isMaterialTooltip) {
        var tooltipOffsetValue = this.isBootstrap4 ? bootstrap4TooltipOffset : bootstrapTooltipOffset;
        switch (position) {
          case "TopCenter":
            this.tooltipObj.setProperties({ "offsetY": -tooltipOffsetValue }, false);
            break;
          case "BottomCenter":
            this.tooltipObj.setProperties({ "offsetY": tooltipOffsetValue }, false);
            break;
          case "LeftCenter":
            this.tooltipObj.setProperties({ "offsetX": -tooltipOffsetValue }, false);
            break;
          case "RightCenter":
            this.tooltipObj.setProperties({ "offsetX": tooltipOffsetValue }, false);
            break;
        }
      }
    };
    Slider2.prototype.materialTooltipEventCallBack = function(event) {
      this.sliderBarClick(event);
      EventHandler.add(document, "mousemove touchmove", this.sliderBarMove, this);
      EventHandler.add(document, "mouseup touchend", this.sliderBarUp, this);
    };
    Slider2.prototype.wireMaterialTooltipEvent = function(destroy2) {
      if (this.isMaterialTooltip) {
        if (!destroy2) {
          EventHandler.add(this.tooltipElement, "mousedown touchstart", this.materialTooltipEventCallBack, this);
        } else {
          EventHandler.remove(this.tooltipElement, "mousedown touchstart", this.materialTooltipEventCallBack);
        }
      }
    };
    Slider2.prototype.tooltipPositionCalculation = function(position) {
      var cssClass2;
      switch (position) {
        case "TopCenter":
          cssClass2 = classNames2.horizontalTooltipBefore;
          break;
        case "BottomCenter":
          cssClass2 = classNames2.horizontalTooltipAfter;
          break;
        case "LeftCenter":
          cssClass2 = classNames2.verticalTooltipBefore;
          break;
        case "RightCenter":
          cssClass2 = classNames2.verticalTooltipAfter;
          break;
      }
      return cssClass2;
    };
    Slider2.prototype.getTooltipTransformProperties = function(className) {
      var transformProperties;
      if (this.tooltipElement) {
        var position = this.orientation === "Horizontal" ? this.tooltipElement.clientHeight + 14 - this.tooltipElement.clientHeight / 2 : this.tooltipElement.clientWidth + 14 - this.tooltipElement.clientWidth / 2;
        transformProperties = this.orientation === "Horizontal" ? className === classNames2.horizontalTooltipBefore ? { rotate: "rotate(45deg)", translate: "translateY(" + position + "px)" } : { rotate: "rotate(225deg)", translate: "translateY(" + -position + "px)" } : className === classNames2.verticalTooltipBefore ? { rotate: "rotate(-45deg)", translate: "translateX(" + position + "px)" } : { rotate: "rotate(-225deg)", translate: "translateX(" + -position + "px)" };
      }
      return transformProperties;
    };
    Slider2.prototype.openMaterialTooltip = function() {
      var _this = this;
      if (this.isMaterialTooltip) {
        this.refreshTooltip(this.firstHandle);
        var tooltipContentElement = this.tooltipElement.firstElementChild;
        tooltipContentElement.classList.remove(classNames2.materialTooltipHide);
        tooltipContentElement.classList.add(classNames2.materialTooltipShow);
        this.firstHandle.style.cursor = "default";
        this.tooltipElement.style.transition = this.scaleTransform;
        this.tooltipElement.classList.add(classNames2.materialTooltipOpen);
        this.materialHandle.style.transform = "scale(0)";
        if (tooltipContentElement.innerText.length > 4) {
          this.tooltipElement.style.transform = "scale(1)";
        } else {
          this.tooltipElement.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
        }
        if (this.type === "Default") {
          setTimeout(function() {
            _this.tooltipElement.style.transition = _this.transition.handle;
          }, 2500);
        } else {
          setTimeout(function() {
            _this.tooltipElement.style.transition = "none";
          }, 2500);
        }
      }
    };
    Slider2.prototype.closeMaterialTooltip = function() {
      var _this = this;
      if (this.isMaterialTooltip) {
        var tooltipContentElement = this.tooltipElement.firstElementChild;
        this.tooltipElement.style.transition = this.scaleTransform;
        tooltipContentElement.classList.remove(classNames2.materialTooltipShow);
        tooltipContentElement.classList.add(classNames2.materialTooltipHide);
        this.firstHandle.style.cursor = "-webkit-grab";
        this.firstHandle.style.cursor = "grab";
        if (this.materialHandle) {
          this.materialHandle.style.transform = "scale(1)";
        }
        this.tooltipElement.classList.remove(classNames2.materialTooltipOpen);
        this.setTooltipTransform();
        this.tooltipTarget = void 0;
        setTimeout(function() {
          _this.tooltipElement.style.transition = "none";
        }, 2500);
      }
    };
    Slider2.prototype.checkTooltipPosition = function(args) {
      var tooltipClass = this.tooltipPositionCalculation(args.collidedPosition);
      if (this.tooltipCollidedPosition === void 0 || this.tooltipCollidedPosition !== args.collidedPosition || !args.element.classList.contains(tooltipClass)) {
        if (this.isMaterialTooltip) {
          if (tooltipClass !== void 0) {
            args.element.classList.remove(this.previousTooltipClass);
            args.element.classList.add(tooltipClass);
            this.previousTooltipClass = tooltipClass;
          }
          if (args.element.style.transform && args.element.classList.contains(classNames2.materialTooltipOpen) && args.element.firstElementChild.innerText.length <= 4) {
            args.element.style.transform = this.getTooltipTransformProperties(this.previousTooltipClass).rotate;
          }
        }
        this.tooltipCollidedPosition = args.collidedPosition;
      }
      if (this.isMaterialTooltip && this.tooltipElement && this.tooltipElement.style.transform.indexOf("translate") !== -1) {
        this.setTooltipTransform();
      }
    };
    Slider2.prototype.setTooltipTransform = function() {
      var transformProperties = this.getTooltipTransformProperties(this.previousTooltipClass);
      if (this.tooltipElement.firstElementChild.innerText.length > 4) {
        this.tooltipElement.style.transform = transformProperties.translate + " scale(0.01)";
      } else {
        this.tooltipElement.style.transform = transformProperties.translate + " " + transformProperties.rotate + " scale(0.01)";
      }
    };
    Slider2.prototype.renderTooltip = function() {
      this.tooltipObj = new Tooltip({
        showTipPointer: this.isBootstrap || this.isMaterial || this.isBootstrap4 || this.isTailwind || this.isBootstrap5,
        cssClass: classNames2.sliderTooltip,
        height: this.isMaterial ? 30 : "auto",
        animation: { open: { effect: "None" }, close: { effect: "FadeOut", duration: 500 } },
        opensOn: "Custom",
        beforeOpen: this.tooltipBeforeOpen.bind(this),
        beforeCollision: this.checkTooltipPosition.bind(this),
        beforeClose: this.tooltipBeforeClose.bind(this),
        enableHtmlSanitizer: this.enableHtmlSanitizer
      });
      this.tooltipObj.appendTo(this.firstHandle);
      this.initializeTooltipProps();
    };
    Slider2.prototype.initializeTooltipProps = function() {
      var tooltipShowOn = this.tooltip.showOn === "Auto" ? "Hover" : this.tooltip.showOn;
      this.setProperties({ tooltip: { showOn: tooltipShowOn } }, true);
      this.tooltipObj.position = this.tooltipPlacement();
      this.tooltipCollision(this.tooltipObj.position);
      [this.firstHandle, this.rangeBar, this.secondHandle].forEach(function(handle) {
        if (!isNullOrUndefined(handle)) {
          handle.style.transition = "none";
        }
      });
      if (this.isMaterialTooltip) {
        this.sliderContainer.classList.add(classNames2.materialSlider);
        this.tooltipValue();
        this.tooltipObj.animation.close.effect = "None";
        this.tooltipObj.open(this.firstHandle);
      }
    };
    Slider2.prototype.tooltipBeforeClose = function() {
      this.tooltipElement = void 0;
      this.tooltipCollidedPosition = void 0;
    };
    Slider2.prototype.setButtons = function() {
      this.firstBtn = this.createElement("div", { className: classNames2.sliderButton + " " + classNames2.firstButton });
      this.firstBtn.appendChild(this.createElement("span", { className: classNames2.sliderButtonIcon }));
      if (this.isTailwind) {
        this.firstBtn.querySelector("span").classList.add("e-icons");
      }
      this.firstBtn.tabIndex = -1;
      this.secondBtn = this.createElement("div", { className: classNames2.sliderButton + " " + classNames2.secondButton });
      this.secondBtn.appendChild(this.createElement("span", { className: classNames2.sliderButtonIcon }));
      if (this.isTailwind) {
        this.secondBtn.querySelector("span").classList.add("e-icons");
      }
      this.secondBtn.tabIndex = -1;
      this.sliderContainer.classList.add(classNames2.sliderButtonClass);
      this.sliderContainer.appendChild(this.firstBtn);
      this.sliderContainer.appendChild(this.secondBtn);
      this.sliderContainer.appendChild(this.element);
      this.buttonTitle();
    };
    Slider2.prototype.buttonTitle = function() {
      var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
      this.l10n.setLocale(this.locale);
      var decrementTitle = this.l10n.getConstant("decrementTitle");
      var incrementTitle = this.l10n.getConstant("incrementTitle");
      attributes(enabledRTL ? this.secondBtn : this.firstBtn, { "aria-label": decrementTitle, title: decrementTitle });
      attributes(enabledRTL ? this.firstBtn : this.secondBtn, { "aria-label": incrementTitle, title: incrementTitle });
    };
    Slider2.prototype.buttonFocusOut = function() {
      if (this.isMaterial) {
        this.getHandle().classList.remove("e-large-thumb-size");
      }
    };
    Slider2.prototype.repeatButton = function(args) {
      var hVal = this.handleValueUpdate();
      var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
      var value;
      if (args.target.parentElement.classList.contains(classNames2.firstButton) || args.target.classList.contains(classNames2.firstButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
      } else if (args.target.parentElement.classList.contains(classNames2.secondButton) || args.target.classList.contains(classNames2.secondButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
      }
      if (this.limits.enabled) {
        value = this.getLimitCorrectedValues(value);
      }
      if (value >= this.min && value <= this.max) {
        this.changeHandleValue(value);
        this.tooltipToggle(this.getHandle());
      }
    };
    Slider2.prototype.repeatHandlerMouse = function(args) {
      args.preventDefault();
      if (args.type === "mousedown" || args.type === "touchstart") {
        this.buttonClick(args);
        this.repeatInterval = setInterval(this.repeatButton.bind(this), 180, args);
      }
    };
    Slider2.prototype.materialChange = function() {
      if (!this.getHandle().classList.contains("e-large-thumb-size")) {
        this.getHandle().classList.add("e-large-thumb-size");
      }
    };
    Slider2.prototype.focusHandle = function() {
      if (!this.getHandle().classList.contains(classNames2.sliderTabHandle)) {
        this.getHandle().classList.add(classNames2.sliderTabHandle);
      }
    };
    Slider2.prototype.repeatHandlerUp = function(e) {
      this.changeEvent("changed", e);
      this.closeTooltip();
      clearInterval(this.repeatInterval);
      this.getHandle().focus();
    };
    Slider2.prototype.customTickCounter = function(bigNum) {
      var tickCount = 4;
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        if (bigNum > 4) {
          tickCount = 3;
        }
        if (bigNum > 7) {
          tickCount = 2;
        }
        if (bigNum > 14) {
          tickCount = 1;
        }
        if (bigNum > 28) {
          tickCount = 0;
        }
      }
      return tickCount;
    };
    Slider2.prototype.renderScale = function() {
      var liElementPosition = 0;
      var orien = this.orientation === "Vertical" ? "v" : "h";
      var spanText;
      this.noOfDecimals = this.numberOfDecimals(this.step);
      this.ul = this.createElement("ul", {
        className: classNames2.scale + " e-" + orien + "-scale " + classNames2.tick + "-" + this.ticks.placement.toLowerCase(),
        attrs: { role: "presentation", tabIndex: "-1", "aria-hidden": "true" }
      });
      this.ul.style.zIndex = "-1";
      if (Browser.isAndroid && orien === "h") {
        this.ul.classList.add(classNames2.sliderTickPosition);
      }
      var smallStep = this.ticks.smallStep;
      if (!this.ticks.showSmallTicks) {
        this.ticks.largeStep > 0 ? smallStep = this.ticks.largeStep : smallStep = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));
      } else if (smallStep <= 0) {
        smallStep = parseFloat(formatUnit(this.step));
      }
      var min = this.fractionalToInteger(this.min);
      var max = this.fractionalToInteger(this.max);
      var steps = this.fractionalToInteger(smallStep);
      var bigNum = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 && this.customValues.length - 1;
      var customStep = this.customTickCounter(bigNum);
      var count = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? bigNum * customStep + bigNum : Math.abs((max - min) / steps);
      this.element.appendChild(this.ul);
      var li;
      var start = parseFloat(this.min.toString());
      if (orien === "v") {
        start = parseFloat(this.max.toString());
      }
      var left = 0;
      var islargeTick;
      var tickWidth = 100 / count;
      if (tickWidth === Infinity) {
        tickWidth = 5;
      }
      for (var i = 0, y = !isNullOrUndefined(this.customValues) && this.customValues.length > 0 ? this.customValues.length - 1 : 0, k = 0; i <= count; i++) {
        li = this.createElement("li", {
          attrs: {
            class: classNames2.tick,
            role: "presentation",
            tabIndex: "-1",
            "aria-hidden": "true"
          }
        });
        if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
          islargeTick = i % (customStep + 1) === 0;
          if (islargeTick) {
            if (orien === "h") {
              start = this.customValues[k];
              k++;
            } else {
              start = this.customValues[y];
              y--;
            }
            li.setAttribute("title", start.toString());
          }
        } else {
          li.setAttribute("title", start.toString());
          if (this.numberOfDecimals(this.max) === 0 && this.numberOfDecimals(this.min) === 0 && this.numberOfDecimals(this.step) === 0) {
            if (orien === "h") {
              islargeTick = (start - parseFloat(this.min.toString())) % this.ticks.largeStep === 0 ? true : false;
            } else {
              islargeTick = Math.abs(start - parseFloat(this.max.toString())) % this.ticks.largeStep === 0 ? true : false;
            }
          } else {
            var largestep = this.fractionalToInteger(this.ticks.largeStep);
            var startValue = this.fractionalToInteger(start);
            if (orien === "h") {
              islargeTick = (startValue - min) % largestep === 0 ? true : false;
            } else {
              islargeTick = Math.abs(startValue - parseFloat(max.toString())) % largestep === 0 ? true : false;
            }
          }
        }
        if (islargeTick) {
          li.classList.add(classNames2.large);
        }
        orien === "h" ? li.style.width = tickWidth + "%" : li.style.height = tickWidth + "%";
        var repeat = islargeTick ? this.ticks.placement === "Both" ? 2 : 1 : 0;
        if (islargeTick) {
          for (var j = 0; j < repeat; j++) {
            this.createTick(li, start, tickWidth);
          }
        } else if (isNullOrUndefined(this.customValues)) {
          this.formatTicksValue(li, start);
        }
        this.ul.appendChild(li);
        this.tickElementCollection.push(li);
        var decimalPoints = void 0;
        if (isNullOrUndefined(this.customValues)) {
          if (this.numberOfDecimals(smallStep) > this.numberOfDecimals(start)) {
            decimalPoints = this.numberOfDecimals(smallStep);
          } else {
            decimalPoints = this.numberOfDecimals(start);
          }
          if (orien === "h") {
            start = this.makeRoundNumber(start + smallStep, decimalPoints);
          } else {
            start = this.makeRoundNumber(start - smallStep, decimalPoints);
          }
          left = this.makeRoundNumber(left + smallStep, decimalPoints);
        }
      }
      this.ticksAlignment(orien, tickWidth);
    };
    Slider2.prototype.ticksAlignment = function(orien, tickWidth, triggerEvent) {
      if (triggerEvent === void 0) {
        triggerEvent = true;
      }
      this.firstChild = this.ul.firstElementChild;
      this.lastChild = this.ul.lastElementChild;
      this.firstChild.classList.add(classNames2.sliderFirstTick);
      this.lastChild.classList.add(classNames2.sliderLastTick);
      this.sliderContainer.classList.add(classNames2.scale + "-" + this.ticks.placement.toLowerCase());
      if (orien === "h") {
        this.firstChild.style.width = tickWidth / 2 + "%";
        this.lastChild.style.width = tickWidth / 2 + "%";
      } else {
        this.firstChild.style.height = tickWidth / 2 + "%";
        this.lastChild.style.height = tickWidth / 2 + "%";
      }
      var eventArgs = { ticksWrapper: this.ul, tickElements: this.tickElementCollection };
      if (triggerEvent) {
        this.trigger("renderedTicks", eventArgs);
      }
      this.scaleAlignment();
    };
    Slider2.prototype.createTick = function(li, start, tickWidth) {
      var span = this.createElement("span", {
        className: classNames2.tickValue + " " + classNames2.tick + "-" + this.ticks.placement.toLowerCase(),
        attrs: { role: "presentation", tabIndex: "-1", "aria-hidden": "true" }
      });
      li.appendChild(span);
      if (isNullOrUndefined(this.customValues)) {
        this.formatTicksValue(li, start, span, tickWidth);
      } else {
        if (this.enableHtmlSanitizer) {
          span.innerHTML = SanitizeHtmlHelper.sanitize(start.toString());
        } else {
          span.innerHTML = start.toString();
        }
      }
    };
    Slider2.prototype.formatTicksValue = function(li, start, spanElement, tickWidth) {
      var _this = this;
      var tickText = this.formatNumber(start);
      var text = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? this.formatString(start, this.ticksFormatInfo).formatString : tickText;
      var eventArgs = { value: start, text, tickElement: li };
      this.trigger("renderingTicks", eventArgs, function(observedArgs) {
        li.setAttribute("title", observedArgs.text.toString());
        if (spanElement) {
          if (_this.enableHtmlSanitizer) {
            spanElement.innerHTML = SanitizeHtmlHelper.sanitize(observedArgs.text.toString());
          } else {
            spanElement.innerHTML = observedArgs.text.toString();
          }
        }
      });
    };
    Slider2.prototype.scaleAlignment = function() {
      this.tickValuePosition();
      var smallTick = 12;
      var largeTick = 20;
      var half = largeTick / 2;
      var orien = this.orientation === "Vertical" ? "v" : "h";
      if (this.orientation === "Vertical") {
        this.element.getBoundingClientRect().width <= 15 ? this.sliderContainer.classList.add(classNames2.sliderSmallSize) : this.sliderContainer.classList.remove(classNames2.sliderSmallSize);
      } else {
        this.element.getBoundingClientRect().height <= 15 ? this.sliderContainer.classList.add(classNames2.sliderSmallSize) : this.sliderContainer.classList.remove(classNames2.sliderSmallSize);
      }
    };
    Slider2.prototype.tickValuePosition = function() {
      this.firstChild = this.element.querySelector("ul").children[0];
      var first = this.firstChild.getBoundingClientRect();
      var firstChild;
      var otherChild;
      var smallStep = this.ticks.smallStep;
      var count = Math.abs(parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / smallStep;
      if (this.firstChild.children.length > 0) {
        firstChild = this.firstChild.children[0].getBoundingClientRect();
      }
      var tickElements = [this.sliderContainer.querySelectorAll("." + classNames2.tick + "." + classNames2.large + " ." + classNames2.tickValue)];
      var other;
      if (this.ticks.placement === "Both") {
        other = [].slice.call(tickElements[0], 2);
      } else {
        other = [].slice.call(tickElements[0], 1);
      }
      var tickWidth = this.orientation === "Vertical" ? first.height * 2 : first.width * 2;
      for (var i = 0; i < this.firstChild.children.length; i++) {
        if (this.orientation === "Vertical") {
          this.firstChild.children[i].style.top = -(firstChild.height / 2) + "px";
        } else {
          if (!this.enableRtl) {
            this.firstChild.children[i].style.left = -(firstChild.width / 2) + "px";
          } else {
            this.firstChild.children[i].style.left = (tickWidth - this.firstChild.children[i].getBoundingClientRect().width) / 2 + "px";
          }
        }
      }
      for (var i = 0; i < other.length; i++) {
        otherChild = other[i].getBoundingClientRect();
        if (this.orientation === "Vertical") {
          setStyleAttribute(other[i], { top: (tickWidth - otherChild.height) / 2 + "px" });
        } else {
          setStyleAttribute(other[i], { left: (tickWidth - otherChild.width) / 2 + "px" });
        }
      }
      if (this.enableRtl && this.lastChild.children.length && count !== 0) {
        this.lastChild.children[0].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + "px";
        if (this.ticks.placement === "Both") {
          this.lastChild.children[1].style.left = -(this.lastChild.getBoundingClientRect().width / 2) + "px";
        }
      }
      if (count === 0) {
        if (this.orientation === "Horizontal") {
          if (!this.enableRtl) {
            this.firstChild.classList.remove(classNames2.sliderLastTick);
            this.firstChild.style.left = this.firstHandle.style.left;
          } else {
            this.firstChild.classList.remove(classNames2.sliderLastTick);
            this.firstChild.style.right = this.firstHandle.style.right;
            this.firstChild.children[0].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + "px";
            if (this.ticks.placement === "Both") {
              this.firstChild.children[1].style.left = this.firstChild.getBoundingClientRect().width / 2 + 2 + "px";
            }
          }
        }
        if (this.orientation === "Vertical") {
          this.firstChild.classList.remove(classNames2.sliderLastTick);
        }
      }
    };
    Slider2.prototype.setAriaAttrValue = function(element2) {
      var ariaValueText;
      var isTickFormatted = !isNullOrUndefined(this.ticks) && !isNullOrUndefined(this.ticks.format) ? true : false;
      var text = !isTickFormatted ? this.formatContent(this.ticksFormatInfo, false) : this.formatContent(this.tooltipFormatInfo, false);
      var valuenow = isTickFormatted ? this.formatContent(this.ticksFormatInfo, true) : this.formatContent(this.tooltipFormatInfo, true);
      text = !this.customAriaText ? text : this.customAriaText;
      if (text.split(" - ").length === 2) {
        ariaValueText = text.split(" - ");
      } else {
        ariaValueText = [text, text];
      }
      this.setAriaAttributes(element2);
      if (this.type !== "Range") {
        attributes(element2, { "aria-valuenow": valuenow, "aria-valuetext": text });
      } else {
        !this.enableRtl ? element2 === this.firstHandle ? attributes(element2, { "aria-valuenow": valuenow.split(" - ")[0], "aria-valuetext": ariaValueText[0] }) : attributes(element2, { "aria-valuenow": valuenow.split(" - ")[1], "aria-valuetext": ariaValueText[1] }) : element2 === this.firstHandle ? attributes(element2, { "aria-valuenow": valuenow.split(" - ")[1], "aria-valuetext": ariaValueText[1] }) : attributes(element2, { "aria-valuenow": valuenow.split(" - ")[0], "aria-valuetext": ariaValueText[0] });
      }
    };
    Slider2.prototype.handleValueUpdate = function() {
      var hVal;
      if (this.type === "Range") {
        if (this.activeHandle === 1) {
          hVal = this.handleVal1;
        } else {
          hVal = this.handleVal2;
        }
      } else {
        hVal = this.handleVal1;
      }
      return hVal;
    };
    Slider2.prototype.getLimitCorrectedValues = function(value) {
      if (this.type === "MinRange" || this.type === "Default") {
        value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
      } else {
        if (this.activeHandle === 1) {
          value = this.getLimitValueAndPosition(value, this.limits.minStart, this.limits.minEnd)[0];
        } else {
          value = this.getLimitValueAndPosition(value, this.limits.maxStart, this.limits.maxEnd)[0];
        }
      }
      return value;
    };
    Slider2.prototype.focusSliderElement = function() {
      if (!this.isElementFocused) {
        this.element.focus();
        this.isElementFocused = true;
      }
    };
    Slider2.prototype.buttonClick = function(args) {
      this.focusSliderElement();
      var value;
      var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
      var hVal = this.handleValueUpdate();
      if (args.keyCode === 40 || args.keyCode === 37 || args.currentTarget.classList.contains(classNames2.firstButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), true) : value = this.add(hVal, parseFloat(this.step.toString()), false);
      } else if (args.keyCode === 38 || args.keyCode === 39 || args.currentTarget.classList.contains(classNames2.secondButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.step.toString()), false) : value = this.add(hVal, parseFloat(this.step.toString()), true);
      } else if (args.keyCode === 33 || args.currentTarget.classList.contains(classNames2.firstButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true);
      } else if (args.keyCode === 34 || args.currentTarget.classList.contains(classNames2.secondButton)) {
        enabledRTL ? value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), true) : value = this.add(hVal, parseFloat(this.ticks.largeStep.toString()), false);
      } else if (args.keyCode === 36) {
        value = parseFloat(this.min.toString());
      } else if (args.keyCode === 35) {
        value = parseFloat(this.max.toString());
      }
      if (this.limits.enabled) {
        value = this.getLimitCorrectedValues(value);
      }
      this.changeHandleValue(value);
      if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames2.sliderTabHandle)) {
        this.materialChange();
      }
      this.tooltipToggle(this.getHandle());
      this.getHandle().focus();
      this.focusHandle();
      if (args.currentTarget.classList.contains(classNames2.firstButton)) {
        EventHandler.add(this.firstBtn, "mouseup touchend", this.buttonUp, this);
      }
      if (args.currentTarget.classList.contains(classNames2.secondButton)) {
        EventHandler.add(this.secondBtn, "mouseup touchend", this.buttonUp, this);
      }
    };
    Slider2.prototype.tooltipToggle = function(target) {
      if (this.isMaterialTooltip) {
        !this.tooltipElement.classList.contains(classNames2.materialTooltipOpen) ? this.openMaterialTooltip() : this.refreshTooltip(this.firstHandle);
      } else {
        !this.tooltipElement ? this.openTooltip(target) : this.refreshTooltip(target);
      }
    };
    Slider2.prototype.buttonUp = function(args) {
      if (args.currentTarget.classList.contains(classNames2.firstButton)) {
        EventHandler.remove(this.firstBtn, "mouseup touchend", this.buttonUp);
      }
      if (args.currentTarget.classList.contains(classNames2.secondButton)) {
        EventHandler.remove(this.secondBtn, "mouseup touchend", this.buttonUp);
      }
    };
    Slider2.prototype.setRangeBar = function() {
      if (this.orientation === "Horizontal") {
        if (this.type === "MinRange") {
          this.enableRtl ? this.rangeBar.style.right = "0px" : this.rangeBar.style.left = "0px";
          setStyleAttribute(this.rangeBar, { "width": isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px" });
        } else {
          this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + "px" : this.rangeBar.style.left = this.handlePos1 + "px";
          setStyleAttribute(this.rangeBar, { "width": this.handlePos2 - this.handlePos1 + "px" });
        }
      } else {
        if (this.type === "MinRange") {
          this.rangeBar.style.bottom = "0px";
          setStyleAttribute(this.rangeBar, { "height": isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px" });
        } else {
          this.rangeBar.style.bottom = this.handlePos1 + "px";
          setStyleAttribute(this.rangeBar, { "height": this.handlePos2 - this.handlePos1 + "px" });
        }
      }
    };
    Slider2.prototype.checkValidValueAndPos = function(value) {
      value = this.checkHandleValue(value);
      value = this.checkHandlePosition(value);
      return value;
    };
    Slider2.prototype.setLimitBarPositions = function(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion) {
      if (this.orientation === "Horizontal") {
        if (!this.enableRtl) {
          this.limitBarFirst.style.left = fromMinPostion + "px";
          this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + "px";
        } else {
          this.limitBarFirst.style.right = fromMinPostion + "px";
          this.limitBarFirst.style.width = fromMaxpostion - fromMinPostion + "px";
        }
      } else {
        this.limitBarFirst.style.bottom = fromMinPostion + "px";
        this.limitBarFirst.style.height = fromMaxpostion - fromMinPostion + "px";
      }
      if (this.type === "Range") {
        if (this.orientation === "Horizontal") {
          if (!this.enableRtl) {
            this.limitBarSecond.style.left = toMinPostion + "px";
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + "px";
          } else {
            this.limitBarSecond.style.right = toMinPostion + "px";
            this.limitBarSecond.style.width = toMaxpostion - toMinPostion + "px";
          }
        } else {
          this.limitBarSecond.style.bottom = toMinPostion + "px";
          this.limitBarSecond.style.height = toMaxpostion - toMinPostion + "px";
        }
      }
    };
    Slider2.prototype.setLimitBar = function() {
      if (this.type === "Default" || this.type === "MinRange") {
        var fromPosition = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
        fromPosition = this.checkValidValueAndPos(fromPosition);
        var toPosition = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
        toPosition = this.checkValidValueAndPos(toPosition);
        this.setLimitBarPositions(fromPosition, toPosition);
      } else if (this.type === "Range") {
        var fromMinPostion = this.getLimitValueAndPosition(this.limits.minStart, this.limits.minStart, this.limits.minEnd, true)[0];
        fromMinPostion = this.checkValidValueAndPos(fromMinPostion);
        var fromMaxpostion = this.getLimitValueAndPosition(this.limits.minEnd, this.limits.minStart, this.limits.minEnd, true)[0];
        fromMaxpostion = this.checkValidValueAndPos(fromMaxpostion);
        var toMinPostion = this.getLimitValueAndPosition(this.limits.maxStart, this.limits.maxStart, this.limits.maxEnd, true)[0];
        toMinPostion = this.checkValidValueAndPos(toMinPostion);
        var toMaxpostion = this.getLimitValueAndPosition(this.limits.maxEnd, this.limits.maxStart, this.limits.maxEnd, true)[0];
        toMaxpostion = this.checkValidValueAndPos(toMaxpostion);
        this.setLimitBarPositions(fromMinPostion, fromMaxpostion, toMinPostion, toMaxpostion);
      }
    };
    Slider2.prototype.getLimitValueAndPosition = function(currentValue, minValue, maxValue, limitBar) {
      if (isNullOrUndefined(minValue)) {
        minValue = this.min;
        if (isNullOrUndefined(currentValue) && limitBar) {
          currentValue = minValue;
        }
      }
      if (isNullOrUndefined(maxValue)) {
        maxValue = this.max;
        if (isNullOrUndefined(currentValue) && limitBar) {
          currentValue = maxValue;
        }
      }
      if (currentValue < minValue) {
        currentValue = minValue;
      }
      if (currentValue > maxValue) {
        currentValue = maxValue;
      }
      return [currentValue, this.checkHandlePosition(currentValue)];
    };
    Slider2.prototype.setValue = function() {
      if (!isNullOrUndefined(this.customValues) && this.customValues.length > 0) {
        this.min = 0;
        this.max = this.customValues.length - 1;
        this.setBarColor();
      }
      this.setAriaAttributes(this.firstHandle);
      this.handleVal1 = isNullOrUndefined(this.value) ? this.checkHandleValue(parseFloat(this.min.toString())) : this.checkHandleValue(parseFloat(this.value.toString()));
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.preHandlePos1 = this.handlePos1;
      isNullOrUndefined(this.activeHandle) ? this.type === "Range" ? this.activeHandle = 2 : this.activeHandle = 1 : (
        // eslint-disable-next-line no-self-assign
        this.activeHandle = this.activeHandle
      );
      if (this.type === "Default" || this.type === "MinRange") {
        if (this.limits.enabled) {
          var values = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
          this.handleVal1 = values[0];
          this.handlePos1 = values[1];
          this.preHandlePos1 = this.handlePos1;
        }
        this.setHandlePosition(null);
        this.handleStart();
        this.value = this.handleVal1;
        this.setAriaAttrValue(this.firstHandle);
        this.changeEvent("changed", null);
      } else {
        this.validateRangeValue();
      }
      if (this.type !== "Default") {
        this.setRangeBar();
      }
      if (this.limits.enabled) {
        this.setLimitBar();
      }
    };
    Slider2.prototype.rangeValueUpdate = function() {
      if (this.value === null || typeof this.value !== "object") {
        this.value = [parseFloat(formatUnit(this.min)), parseFloat(formatUnit(this.max))];
      }
    };
    Slider2.prototype.validateRangeValue = function() {
      this.rangeValueUpdate();
      this.setRangeValue();
    };
    Slider2.prototype.modifyZindex = function() {
      if (this.type === "Range") {
        if (this.activeHandle === 1) {
          this.firstHandle.style.zIndex = this.zIndex + 4 + "";
          this.secondHandle.style.zIndex = this.zIndex + 3 + "";
        } else {
          this.firstHandle.style.zIndex = this.zIndex + 3 + "";
          this.secondHandle.style.zIndex = this.zIndex + 4 + "";
        }
      } else if (this.isMaterialTooltip && this.tooltipElement) {
        this.tooltipElement.style.zIndex = getZindexPartial(this.element) + "";
      }
    };
    Slider2.prototype.setHandlePosition = function(event) {
      var _this = this;
      var handle;
      var pos = this.activeHandle === 1 ? this.handlePos1 : this.handlePos2;
      if (this.isMaterialTooltip) {
        handle = [this.firstHandle, this.materialHandle];
      } else {
        handle = [this.getHandle()];
      }
      this.handleStart();
      handle.forEach(function(handle2) {
        if (_this.orientation === "Horizontal") {
          _this.enableRtl ? handle2.style.right = pos + "px" : handle2.style.left = pos + "px";
        } else {
          handle2.style.bottom = pos + "px";
        }
      });
      this.changeEvent("change", event);
    };
    Slider2.prototype.getHandle = function() {
      return this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
    };
    Slider2.prototype.setRangeValue = function() {
      this.updateRangeValue();
      this.activeHandle = 1;
      this.setHandlePosition(null);
      this.activeHandle = 2;
      this.setHandlePosition(null);
      this.activeHandle = 1;
    };
    Slider2.prototype.changeEvent = function(eventName, e) {
      var previous = eventName === "change" ? this.previousVal : this.previousChanged;
      if (this.type !== "Range") {
        this.setProperties({ "value": this.handleVal1 }, true);
        if (previous !== this.value && (!this.isMaterialTooltip || !this.initialTooltip)) {
          this.trigger(eventName, this.changeEventArgs(eventName, e));
          this.initialTooltip = true;
          this.setPreviousVal(eventName, this.value);
        }
        this.setAriaAttrValue(this.firstHandle);
      } else {
        var value = this.value = [this.handleVal1, this.handleVal2];
        this.setProperties({ "value": value }, true);
        if (previous.length === this.value.length && this.value[0] !== previous[0] || this.value[1] !== previous[1]) {
          this.initialTooltip = false;
          this.trigger(eventName, this.changeEventArgs(eventName, e));
          this.initialTooltip = true;
          this.setPreviousVal(eventName, this.value);
        }
        this.setAriaAttrValue(this.getHandle());
      }
      this.hiddenInput.value = this.value.toString();
    };
    Slider2.prototype.changeEventArgs = function(eventName, e) {
      var eventArgs;
      if (this.tooltip.isVisible && this.tooltipObj && this.initialTooltip) {
        this.tooltipValue();
        eventArgs = {
          value: this.value,
          previousValue: eventName === "change" ? this.previousVal : this.previousChanged,
          action: eventName,
          text: this.tooltipObj.content,
          isInteracted: isNullOrUndefined(e) ? false : true
        };
      } else {
        eventArgs = {
          value: this.value,
          previousValue: eventName === "change" ? this.previousVal : this.previousChanged,
          action: eventName,
          text: isNullOrUndefined(this.ticksFormatInfo.format) ? this.value.toString() : this.type !== "Range" ? this.formatString(this.value, this.ticksFormatInfo).formatString : this.formatString(this.value[0], this.ticksFormatInfo).formatString + " - " + this.formatString(this.value[1], this.ticksFormatInfo).formatString,
          isInteracted: isNullOrUndefined(e) ? false : true
        };
      }
      return eventArgs;
    };
    Slider2.prototype.setPreviousVal = function(eventName, value) {
      if (eventName === "change") {
        this.previousVal = value;
      } else {
        this.previousChanged = value;
      }
    };
    Slider2.prototype.updateRangeValue = function() {
      var values = this.value.toString().split(",").map(Number);
      if (this.enableRtl && this.orientation !== "Vertical" || this.rtl) {
        this.value = [values[1], values[0]];
      } else {
        this.value = [values[0], values[1]];
      }
      if (this.enableRtl && this.orientation !== "Vertical") {
        this.handleVal1 = this.checkHandleValue(this.value[1]);
        this.handleVal2 = this.checkHandleValue(this.value[0]);
      } else {
        this.handleVal1 = this.checkHandleValue(this.value[0]);
        this.handleVal2 = this.checkHandleValue(this.value[1]);
      }
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.handlePos2 = this.checkHandlePosition(this.handleVal2);
      if (this.handlePos1 > this.handlePos2) {
        this.handlePos1 = this.handlePos2;
        this.handleVal1 = this.handleVal2;
      }
      this.preHandlePos1 = this.handlePos1;
      this.preHandlePos2 = this.handlePos2;
      if (this.limits.enabled) {
        this.activeHandle = 1;
        var values_1 = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
        this.handleVal1 = values_1[0];
        this.handlePos1 = values_1[1];
        this.preHandlePos1 = this.handlePos1;
        this.activeHandle = 2;
        values_1 = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
        this.handleVal2 = values_1[0];
        this.handlePos2 = values_1[1];
        this.preHandlePos2 = this.handlePos2;
      }
    };
    Slider2.prototype.checkHandlePosition = function(value) {
      var pos;
      value = 100 * (value - parseFloat(formatUnit(this.min))) / (parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min)));
      if (this.orientation === "Horizontal") {
        pos = this.element.getBoundingClientRect().width * (value / 100);
      } else {
        pos = this.element.getBoundingClientRect().height * (value / 100);
      }
      if (parseFloat(formatUnit(this.max)) === parseFloat(formatUnit(this.min))) {
        if (this.orientation === "Horizontal") {
          pos = this.element.getBoundingClientRect().width;
        } else {
          pos = this.element.getBoundingClientRect().height;
        }
      }
      return pos;
    };
    Slider2.prototype.checkHandleValue = function(value) {
      if (this.min > this.max) {
        this.min = this.max;
      }
      if (this.min === this.max) {
        return parseFloat(formatUnit(this.max));
      }
      var handle = this.tempStartEnd();
      if (value < handle.start) {
        value = handle.start;
      } else if (value > handle.end) {
        value = handle.end;
      }
      return value;
    };
    Slider2.prototype.reposition = function() {
      var _this = this;
      this.firstHandle.style.transition = "none";
      if (this.type !== "Default") {
        this.rangeBar.style.transition = "none";
      }
      if (this.type === "Range") {
        this.secondHandle.style.transition = "none";
      }
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      if (this.handleVal2) {
        this.handlePos2 = this.checkHandlePosition(this.handleVal2);
      }
      if (this.orientation === "Horizontal") {
        this.enableRtl ? this.firstHandle.style.right = this.handlePos1 + "px" : this.firstHandle.style.left = this.handlePos1 + "px";
        if (this.isMaterialTooltip) {
          this.enableRtl ? this.materialHandle.style.right = this.handlePos1 + "px" : this.materialHandle.style.left = this.handlePos1 + "px";
        }
        if (this.type === "MinRange") {
          this.enableRtl ? this.rangeBar.style.right = "0px" : this.rangeBar.style.left = "0px";
          setStyleAttribute(this.rangeBar, { "width": isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px" });
        } else if (this.type === "Range") {
          this.enableRtl ? this.secondHandle.style.right = this.handlePos2 + "px" : this.secondHandle.style.left = this.handlePos2 + "px";
          this.enableRtl ? this.rangeBar.style.right = this.handlePos1 + "px" : this.rangeBar.style.left = this.handlePos1 + "px";
          setStyleAttribute(this.rangeBar, { "width": this.handlePos2 - this.handlePos1 + "px" });
        }
      } else {
        this.firstHandle.style.bottom = this.handlePos1 + "px";
        if (this.isMaterialTooltip) {
          this.materialHandle.style.bottom = this.handlePos1 + "px";
        }
        if (this.type === "MinRange") {
          this.rangeBar.style.bottom = "0px";
          setStyleAttribute(this.rangeBar, { "height": isNullOrUndefined(this.handlePos1) ? 0 : this.handlePos1 + "px" });
        } else if (this.type === "Range") {
          this.secondHandle.style.bottom = this.handlePos2 + "px";
          this.rangeBar.style.bottom = this.handlePos1 + "px";
          setStyleAttribute(this.rangeBar, { "height": this.handlePos2 - this.handlePos1 + "px" });
        }
      }
      if (this.limits.enabled) {
        this.setLimitBar();
      }
      if (this.ticks.placement !== "None" && this.ul) {
        this.removeElement(this.ul);
        this.ul = void 0;
        this.renderScale();
      }
      this.handleStart();
      if (!this.tooltip.isVisible) {
        setTimeout(function() {
          _this.firstHandle.style.transition = _this.scaleTransform;
          if (_this.type === "Range") {
            _this.secondHandle.style.transition = _this.scaleTransform;
          }
        });
      }
      this.refreshTooltip(this.tooltipTarget);
      this.setBarColor();
    };
    Slider2.prototype.changeHandleValue = function(value) {
      var position = null;
      if (this.activeHandle === 1) {
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          this.handleVal1 = this.checkHandleValue(value);
          this.handlePos1 = this.checkHandlePosition(this.handleVal1);
          if (this.type === "Range" && this.handlePos1 > this.handlePos2) {
            this.handlePos1 = this.handlePos2;
            this.handleVal1 = this.handleVal2;
          }
          if (this.handlePos1 !== this.preHandlePos1) {
            position = this.preHandlePos1 = this.handlePos1;
          }
        }
        this.modifyZindex();
      } else {
        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
          this.handleVal2 = this.checkHandleValue(value);
          this.handlePos2 = this.checkHandlePosition(this.handleVal2);
          if (this.type === "Range" && this.handlePos2 < this.handlePos1) {
            this.handlePos2 = this.handlePos1;
            this.handleVal2 = this.handleVal1;
          }
          if (this.handlePos2 !== this.preHandlePos2) {
            position = this.preHandlePos2 = this.handlePos2;
          }
        }
        this.modifyZindex();
      }
      if (position !== null) {
        if (this.type !== "Default") {
          this.setRangeBar();
        }
        this.setHandlePosition(null);
      }
    };
    Slider2.prototype.tempStartEnd = function() {
      if (this.min > this.max) {
        return {
          start: this.max,
          end: this.min
        };
      } else {
        return {
          start: this.min,
          end: this.max
        };
      }
    };
    Slider2.prototype.xyToPosition = function(position) {
      var pos;
      if (this.min === this.max) {
        return 100;
      }
      if (this.orientation === "Horizontal") {
        var left = position.x - this.element.getBoundingClientRect().left;
        var num = this.element.offsetWidth / 100;
        this.val = left / num;
      } else {
        var top_1 = position.y - this.element.getBoundingClientRect().top;
        var num = this.element.offsetHeight / 100;
        this.val = 100 - top_1 / num;
      }
      var val = this.stepValueCalculation(this.val);
      if (val < 0) {
        val = 0;
      } else if (val > 100) {
        val = 100;
      }
      if (this.enableRtl && this.orientation !== "Vertical") {
        val = 100 - val;
      }
      if (this.orientation === "Horizontal") {
        pos = this.element.getBoundingClientRect().width * (val / 100);
      } else {
        pos = this.element.getBoundingClientRect().height * (val / 100);
      }
      return pos;
    };
    Slider2.prototype.stepValueCalculation = function(value) {
      if (this.step === 0) {
        this.step = 1;
      }
      var percentStep = parseFloat(formatUnit(this.step)) / ((parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min))) / 100);
      var remain = value % Math.abs(percentStep);
      if (remain !== 0) {
        if (percentStep / 2 > remain) {
          value -= remain;
        } else {
          value += Math.abs(percentStep) - remain;
        }
      }
      return value;
    };
    Slider2.prototype.add = function(a, b, addition) {
      var precision;
      var x = Math.pow(10, precision || 3);
      var val;
      if (addition) {
        val = (Math.round(a * x) + Math.round(b * x)) / x;
      } else {
        val = (Math.round(a * x) - Math.round(b * x)) / x;
      }
      return val;
    };
    Slider2.prototype.positionToValue = function(pos) {
      var val;
      var diff = parseFloat(formatUnit(this.max)) - parseFloat(formatUnit(this.min));
      if (this.orientation === "Horizontal") {
        val = pos / this.element.getBoundingClientRect().width * diff;
      } else {
        val = pos / this.element.getBoundingClientRect().height * diff;
      }
      var total = this.add(val, parseFloat(this.min.toString()), true);
      return total;
    };
    Slider2.prototype.sliderBarClick = function(evt) {
      evt.preventDefault();
      var pos;
      if (evt.type === "mousedown" || evt.type === "mouseup" || evt.type === "click") {
        pos = { x: evt.clientX, y: evt.clientY };
      } else if (evt.type === "touchend" || evt.type === "touchstart") {
        pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };
      }
      var handlepos = this.xyToPosition(pos);
      var handleVal = this.positionToValue(handlepos);
      if (this.type === "Range" && this.handlePos2 - handlepos < handlepos - this.handlePos1) {
        this.activeHandle = 2;
        if (!(this.limits.enabled && this.limits.endHandleFixed)) {
          if (this.limits.enabled) {
            var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
            handleVal = value[0];
            handlepos = value[1];
          }
          this.secondHandle.classList.add(classNames2.sliderActiveHandle);
          this.handlePos2 = this.preHandlePos2 = handlepos;
          this.handleVal2 = handleVal;
        }
        this.modifyZindex();
        this.secondHandle.focus();
      } else {
        this.activeHandle = 1;
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          if (this.limits.enabled) {
            var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
            handleVal = value[0];
            handlepos = value[1];
          }
          this.firstHandle.classList.add(classNames2.sliderActiveHandle);
          this.handlePos1 = this.preHandlePos1 = handlepos;
          this.handleVal1 = handleVal;
        }
        this.modifyZindex();
        this.firstHandle.focus();
      }
      if (this.isMaterialTooltip) {
        this.tooltipElement.classList.add(classNames2.materialTooltipActive);
      }
      var focusedElement = this.element.querySelector("." + classNames2.sliderTabHandle);
      if (focusedElement && this.getHandle() !== focusedElement) {
        focusedElement.classList.remove(classNames2.sliderTabHandle);
      }
      var handle = this.activeHandle === 1 ? this.firstHandle : this.secondHandle;
      if (evt.target === handle) {
        if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames2.sliderTabHandle)) {
          this.materialChange();
        }
        this.sliderBarUp(evt);
        this.tooltipToggle(this.getHandle());
        return;
      }
      if (!this.checkRepeatedValue(handleVal)) {
        return;
      }
      var transition = this.isMaterial && this.tooltip.isVisible ? this.transitionOnMaterialTooltip : this.transition;
      this.getHandle().style.transition = transition.handle;
      if (this.type !== "Default") {
        this.rangeBar.style.transition = transition.rangeBar;
      }
      this.setHandlePosition(evt);
      if (this.isMaterialTooltip) {
        this.initialTooltip = false;
      }
      this.changeEvent("changed", evt);
      if (this.type !== "Default") {
        this.setRangeBar();
      }
    };
    Slider2.prototype.handleValueAdjust = function(handleValue, assignValue, handleNumber) {
      if (handleNumber === 1) {
        this.handleVal1 = assignValue;
        this.handleVal2 = this.handleVal1 + this.minDiff;
      } else if (handleNumber === 2) {
        this.handleVal2 = assignValue;
        this.handleVal1 = this.handleVal2 - this.minDiff;
      }
      this.handlePos1 = this.checkHandlePosition(this.handleVal1);
      this.handlePos2 = this.checkHandlePosition(this.handleVal2);
    };
    Slider2.prototype.dragRangeBarMove = function(event) {
      var _a, _b;
      if (event.type !== "touchmove") {
        event.preventDefault();
      }
      this.rangeBarDragged = true;
      var pos;
      this.rangeBar.style.transition = "none";
      this.firstHandle.style.transition = "none";
      this.secondHandle.style.transition = "none";
      var xPostion;
      var yPostion;
      if (event.type === "mousemove") {
        _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];
      } else {
        _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
      }
      if (!(this.limits.enabled && this.limits.startHandleFixed) && !(this.limits.enabled && this.limits.endHandleFixed)) {
        if (!this.enableRtl) {
          pos = { x: xPostion - this.firstPartRemain, y: yPostion + this.secondPartRemain };
        } else {
          pos = { x: xPostion + this.secondPartRemain, y: yPostion + this.secondPartRemain };
        }
        this.handlePos1 = this.xyToPosition(pos);
        this.handleVal1 = this.positionToValue(this.handlePos1);
        if (!this.enableRtl) {
          pos = { x: xPostion + this.secondPartRemain, y: yPostion - this.firstPartRemain };
        } else {
          pos = { x: xPostion - this.firstPartRemain, y: yPostion - this.firstPartRemain };
        }
        this.handlePos2 = this.xyToPosition(pos);
        this.handleVal2 = this.positionToValue(this.handlePos2);
        if (this.limits.enabled) {
          var value = this.getLimitValueAndPosition(this.handleVal1, this.limits.minStart, this.limits.minEnd);
          this.handleVal1 = value[0];
          this.handlePos1 = value[1];
          if (this.handleVal1 === this.limits.minEnd) {
            this.handleValueAdjust(this.handleVal1, this.limits.minEnd, 1);
          }
          if (this.handleVal1 === this.limits.minStart) {
            this.handleValueAdjust(this.handleVal1, this.limits.minStart, 1);
          }
          value = this.getLimitValueAndPosition(this.handleVal2, this.limits.maxStart, this.limits.maxEnd);
          this.handleVal2 = value[0];
          this.handlePos2 = value[1];
          if (this.handleVal2 === this.limits.maxStart) {
            this.handleValueAdjust(this.handleVal2, this.limits.maxStart, 2);
          }
          if (this.handleVal2 === this.limits.maxEnd) {
            this.handleValueAdjust(this.handleVal2, this.limits.maxEnd, 2);
          }
        }
        if (this.handleVal2 === this.max) {
          this.handleValueAdjust(this.handleVal2, this.max, 2);
        }
        if (this.handleVal1 === this.min) {
          this.handleValueAdjust(this.handleVal1, this.min, 1);
        }
      }
      this.activeHandle = 1;
      this.setHandlePosition(event);
      this.activeHandle = 2;
      this.setHandlePosition(event);
      this.tooltipToggle(this.rangeBar);
      this.setRangeBar();
    };
    Slider2.prototype.sliderBarUp = function(event) {
      this.changeEvent("changed", event);
      this.handleFocusOut();
      this.firstHandle.classList.remove(classNames2.sliderActiveHandle);
      if (this.type === "Range") {
        this.initialTooltip = false;
        this.secondHandle.classList.remove(classNames2.sliderActiveHandle);
      }
      this.closeTooltip();
      if (this.isMaterial) {
        this.getHandle().classList.remove("e-large-thumb-size");
        if (this.isMaterialTooltip) {
          this.tooltipElement.classList.remove(classNames2.materialTooltipActive);
        }
      }
      EventHandler.remove(document, "mousemove touchmove", this.sliderBarMove);
      EventHandler.remove(document, "mouseup touchend", this.sliderBarUp);
    };
    Slider2.prototype.sliderBarMove = function(evt) {
      if (evt.type !== "touchmove") {
        evt.preventDefault();
      }
      var pos;
      if (evt.type === "mousemove") {
        pos = { x: evt.clientX, y: evt.clientY };
      } else {
        pos = { x: evt.changedTouches[0].clientX, y: evt.changedTouches[0].clientY };
      }
      var handlepos = this.xyToPosition(pos);
      var handleVal = this.positionToValue(handlepos);
      handlepos = Math.round(handlepos);
      if (this.type !== "Range" && this.activeHandle === 1) {
        if (!(this.limits.enabled && this.limits.startHandleFixed)) {
          if (this.limits.enabled) {
            var valueAndPostion = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
            handlepos = valueAndPostion[1];
            handleVal = valueAndPostion[0];
          }
          this.handlePos1 = handlepos;
          this.handleVal1 = handleVal;
        }
        this.firstHandle.classList.add(classNames2.sliderActiveHandle);
      }
      if (this.type === "Range") {
        if (this.activeHandle === 1) {
          this.firstHandle.classList.add(classNames2.sliderActiveHandle);
          if (!(this.limits.enabled && this.limits.startHandleFixed)) {
            if (handlepos > this.handlePos2) {
              handlepos = this.handlePos2;
              handleVal = this.handleVal2;
            }
            if (handlepos !== this.preHandlePos1) {
              if (this.limits.enabled) {
                var value = this.getLimitValueAndPosition(handleVal, this.limits.minStart, this.limits.minEnd);
                handleVal = value[0];
                handlepos = value[1];
              }
              this.handlePos1 = this.preHandlePos1 = handlepos;
              this.handleVal1 = handleVal;
              this.activeHandle = 1;
            }
          }
        } else if (this.activeHandle === 2) {
          this.secondHandle.classList.add(classNames2.sliderActiveHandle);
          if (!(this.limits.enabled && this.limits.endHandleFixed)) {
            if (handlepos < this.handlePos1) {
              handlepos = this.handlePos1;
              handleVal = this.handleVal1;
            }
            if (handlepos !== this.preHandlePos2) {
              if (this.limits.enabled) {
                var value = this.getLimitValueAndPosition(handleVal, this.limits.maxStart, this.limits.maxEnd);
                handleVal = value[0];
                handlepos = value[1];
              }
              this.handlePos2 = this.preHandlePos2 = handlepos;
              this.handleVal2 = handleVal;
              this.activeHandle = 2;
            }
          }
        }
      }
      if (!this.checkRepeatedValue(handleVal)) {
        return;
      }
      this.getHandle().style.transition = this.scaleTransform;
      if (this.type !== "Default") {
        this.rangeBar.style.transition = "none";
      }
      this.setHandlePosition(evt);
      if (this.isMaterial && !this.tooltip.isVisible && !this.getHandle().classList.contains(classNames2.sliderTabHandle)) {
        this.materialChange();
      }
      this.tooltipToggle(this.getHandle());
      if (this.type !== "Default") {
        this.setRangeBar();
      }
    };
    Slider2.prototype.dragRangeBarUp = function(event) {
      if (!this.rangeBarDragged) {
        this.focusSliderElement();
        this.sliderBarClick(event);
      } else {
        this.isDragComplete = true;
      }
      this.changeEvent("changed", event);
      this.closeTooltip();
      EventHandler.remove(document, "mousemove touchmove", this.dragRangeBarMove);
      EventHandler.remove(document, "mouseup touchend", this.dragRangeBarUp);
      this.rangeBarDragged = false;
    };
    Slider2.prototype.checkRepeatedValue = function(currentValue) {
      if (this.type === "Range") {
        var previousVal = this.enableRtl && this.orientation !== "Vertical" ? this.activeHandle === 1 ? this.previousVal[1] : this.previousVal[0] : this.activeHandle === 1 ? this.previousVal[0] : this.previousVal[1];
        if (currentValue === previousVal) {
          return 0;
        }
      } else {
        if (currentValue === this.previousVal) {
          return 0;
        }
      }
      return 1;
    };
    Slider2.prototype.refreshTooltip = function(target) {
      if (this.tooltip.isVisible && this.tooltipObj) {
        this.tooltipValue();
        if (target) {
          this.tooltipObj.refresh(target);
          this.tooltipTarget = target;
        }
      }
    };
    Slider2.prototype.openTooltip = function(target) {
      if (this.tooltip.isVisible && this.tooltipObj && !this.isMaterialTooltip) {
        this.tooltipValue();
        this.tooltipObj.open(target);
        this.tooltipTarget = target;
      }
    };
    Slider2.prototype.closeTooltip = function() {
      if (this.tooltip.isVisible && this.tooltipObj && this.tooltip.showOn !== "Always" && !this.isMaterialTooltip) {
        this.tooltipValue();
        this.tooltipObj.close();
        this.tooltipTarget = void 0;
      }
    };
    Slider2.prototype.keyDown = function(event) {
      switch (event.keyCode) {
        case 37:
        case 38:
        case 39:
        case 40:
        case 33:
        case 34:
        case 36:
        case 35:
          event.preventDefault();
          this.buttonClick(event);
          break;
      }
    };
    Slider2.prototype.wireButtonEvt = function(destroy2) {
      if (!destroy2) {
        EventHandler.add(this.firstBtn, "mouseleave touchleave", this.buttonFocusOut, this);
        EventHandler.add(this.secondBtn, "mouseleave touchleave", this.buttonFocusOut, this);
        EventHandler.add(this.firstBtn, "mousedown touchstart", this.repeatHandlerMouse, this);
        EventHandler.add(this.firstBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp, this);
        EventHandler.add(this.secondBtn, "mousedown touchstart", this.repeatHandlerMouse, this);
        EventHandler.add(this.secondBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp, this);
        EventHandler.add(this.firstBtn, "focusout", this.sliderFocusOut, this);
        EventHandler.add(this.secondBtn, "focusout", this.sliderFocusOut, this);
      } else {
        EventHandler.remove(this.firstBtn, "mouseleave touchleave", this.buttonFocusOut);
        EventHandler.remove(this.secondBtn, "mouseleave touchleave", this.buttonFocusOut);
        EventHandler.remove(this.firstBtn, "mousedown touchstart", this.repeatHandlerMouse);
        EventHandler.remove(this.firstBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp);
        EventHandler.remove(this.secondBtn, "mousedown touchstart", this.repeatHandlerMouse);
        EventHandler.remove(this.secondBtn, "mouseup mouseleave touchup touchend", this.repeatHandlerUp);
        EventHandler.remove(this.firstBtn, "focusout", this.sliderFocusOut);
        EventHandler.remove(this.secondBtn, "focusout", this.sliderFocusOut);
      }
    };
    Slider2.prototype.rangeBarMousedown = function(event) {
      var _a, _b;
      event.preventDefault();
      this.focusSliderElement();
      if (this.type === "Range" && this.drag && event.target === this.rangeBar) {
        var xPostion = void 0;
        var yPostion = void 0;
        if (event.type === "mousedown") {
          _a = [event.clientX, event.clientY], xPostion = _a[0], yPostion = _a[1];
        } else if (event.type === "touchstart") {
          _b = [event.changedTouches[0].clientX, event.changedTouches[0].clientY], xPostion = _b[0], yPostion = _b[1];
        }
        if (this.orientation === "Horizontal") {
          this.firstPartRemain = xPostion - this.rangeBar.getBoundingClientRect().left;
          this.secondPartRemain = this.rangeBar.getBoundingClientRect().right - xPostion;
        } else {
          this.firstPartRemain = yPostion - this.rangeBar.getBoundingClientRect().top;
          this.secondPartRemain = this.rangeBar.getBoundingClientRect().bottom - yPostion;
        }
        this.minDiff = this.handleVal2 - this.handleVal1;
        this.tooltipToggle(this.rangeBar);
        var focusedElement = this.element.querySelector("." + classNames2.sliderTabHandle);
        if (focusedElement) {
          focusedElement.classList.remove(classNames2.sliderTabHandle);
        }
        EventHandler.add(document, "mousemove touchmove", this.dragRangeBarMove, this);
        EventHandler.add(document, "mouseup touchend", this.dragRangeBarUp, this);
      }
    };
    Slider2.prototype.elementClick = function(event) {
      if (this.isDragComplete) {
        this.isDragComplete = false;
        return;
      }
      event.preventDefault();
      this.focusSliderElement();
      this.sliderBarClick(event);
      this.focusHandle();
    };
    Slider2.prototype.wireEvents = function() {
      this.onresize = this.reposition.bind(this);
      window.addEventListener("resize", this.onresize);
      if (this.enabled && !this.readonly) {
        EventHandler.add(this.element, "click", this.elementClick, this);
        if (this.type === "Range" && this.drag) {
          EventHandler.add(this.rangeBar, "mousedown touchstart", this.rangeBarMousedown, this);
        }
        EventHandler.add(this.sliderContainer, "keydown", this.keyDown, this);
        EventHandler.add(this.sliderContainer, "keyup", this.keyUp, this);
        EventHandler.add(this.element, "focusout", this.sliderFocusOut, this);
        EventHandler.add(this.sliderContainer, "mouseover mouseout touchstart touchend", this.hover, this);
        this.wireFirstHandleEvt(false);
        if (this.type === "Range") {
          this.wireSecondHandleEvt(false);
        }
        if (this.showButtons) {
          this.wireButtonEvt(false);
        }
        this.wireMaterialTooltipEvent(false);
        if (this.isForm) {
          EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
        }
      }
    };
    Slider2.prototype.unwireEvents = function() {
      EventHandler.remove(this.element, "click", this.elementClick);
      if (this.type === "Range" && this.drag) {
        EventHandler.remove(this.rangeBar, "mousedown touchstart", this.rangeBarMousedown);
      }
      EventHandler.remove(this.sliderContainer, "keydown", this.keyDown);
      EventHandler.remove(this.sliderContainer, "keyup", this.keyUp);
      EventHandler.remove(this.element, "focusout", this.sliderFocusOut);
      EventHandler.remove(this.sliderContainer, "mouseover mouseout touchstart touchend", this.hover);
      this.wireFirstHandleEvt(true);
      if (this.type === "Range") {
        this.wireSecondHandleEvt(true);
      }
      if (this.showButtons) {
        this.wireButtonEvt(true);
      }
      this.wireMaterialTooltipEvent(true);
      EventHandler.remove(this.element, "reset", this.formResetHandler);
    };
    Slider2.prototype.formResetHandler = function() {
      this.setProperties({ "value": this.formResetValue }, true);
      this.setValue();
    };
    Slider2.prototype.keyUp = function(event) {
      if (event.keyCode === 9 && event.target.classList.contains(classNames2.sliderHandle)) {
        this.focusSliderElement();
        if (!event.target.classList.contains(classNames2.sliderTabHandle)) {
          if (this.element.querySelector("." + classNames2.sliderTabHandle)) {
            this.element.querySelector("." + classNames2.sliderTabHandle).classList.remove(classNames2.sliderTabHandle);
          }
          event.target.classList.add(classNames2.sliderTabHandle);
          var parentElement = event.target.parentElement;
          if (parentElement === this.element) {
            parentElement.querySelector("." + classNames2.sliderTrack).classList.add(classNames2.sliderTabTrack);
            if (this.type === "Range" || this.type === "MinRange") {
              parentElement.querySelector("." + classNames2.rangeBar).classList.add(classNames2.sliderTabRange);
            }
          }
          if (this.type === "Range") {
            event.target.previousSibling.classList.contains(classNames2.sliderHandle) ? this.activeHandle = 2 : this.activeHandle = 1;
          }
          this.getHandle().focus();
          this.tooltipToggle(this.getHandle());
        }
      }
      this.closeTooltip();
      this.changeEvent("changed", event);
    };
    Slider2.prototype.hover = function(event) {
      if (!isNullOrUndefined(event)) {
        if (event.type === "mouseover" || event.type === "touchmove" || event.type === "mousemove" || event.type === "pointermove" || event.type === "touchstart") {
          this.sliderContainer.classList.add(classNames2.sliderHover);
        } else {
          this.sliderContainer.classList.remove(classNames2.sliderHover);
          var curTarget = event.currentTarget;
          if (this.tooltip.isVisible && this.tooltip.showOn !== "Always" && this.tooltipObj && this.isMaterialTooltip && !curTarget.classList.contains(classNames2.sliderHandleFocused) && !curTarget.classList.contains(classNames2.sliderTabHandle)) {
            this.closeMaterialTooltip();
          }
        }
      }
    };
    Slider2.prototype.sliderFocusOut = function(event) {
      if (event.relatedTarget !== this.secondHandle && event.relatedTarget !== this.firstHandle && event.relatedTarget !== this.element && event.relatedTarget !== this.firstBtn && event.relatedTarget !== this.secondBtn) {
        this.closeMaterialTooltip();
        this.closeTooltip();
        if (this.element.querySelector("." + classNames2.sliderTabHandle)) {
          this.element.querySelector("." + classNames2.sliderTabHandle).classList.remove(classNames2.sliderTabHandle);
        }
        if (this.element.querySelector("." + classNames2.sliderTabTrack)) {
          this.element.querySelector("." + classNames2.sliderTabTrack).classList.remove(classNames2.sliderTabTrack);
          if ((this.type === "Range" || this.type === "MinRange") && this.element.querySelector("." + classNames2.sliderTabRange)) {
            this.element.querySelector("." + classNames2.sliderTabRange).classList.remove(classNames2.sliderTabRange);
          }
        }
        this.hiddenInput.focus();
        this.hiddenInput.blur();
        this.isElementFocused = false;
      }
    };
    Slider2.prototype.removeElement = function(element2) {
      if (element2.parentNode) {
        element2.parentNode.removeChild(element2);
      }
    };
    Slider2.prototype.changeSliderType = function(type, args) {
      if (this.isMaterialTooltip && this.materialHandle) {
        this.sliderContainer.classList.remove(classNames2.materialSlider);
        this.removeElement(this.materialHandle);
        this.materialHandle = void 0;
      }
      this.removeElement(this.firstHandle);
      this.firstHandle = void 0;
      if (type !== "Default") {
        if (type === "Range") {
          this.removeElement(this.secondHandle);
          this.secondHandle = void 0;
        }
        this.removeElement(this.rangeBar);
        this.rangeBar = void 0;
      }
      if (this.tooltip.isVisible && !isNullOrUndefined(this.tooltipObj)) {
        this.tooltipObj.destroy();
        this.tooltipElement = void 0;
        this.tooltipCollidedPosition = void 0;
      }
      if (this.limits.enabled) {
        if (type === "MinRange" || type === "Default") {
          if (!isNullOrUndefined(this.limitBarFirst)) {
            this.removeElement(this.limitBarFirst);
            this.limitBarFirst = void 0;
          }
        } else {
          if (!isNullOrUndefined(this.limitBarSecond)) {
            this.removeElement(this.limitBarSecond);
            this.limitBarSecond = void 0;
          }
        }
      }
      this.activeHandle = 1;
      this.getThemeInitialization();
      if (this.type === "Range") {
        this.rangeValueUpdate();
      }
      this.createRangeBar();
      if (this.limits.enabled) {
        this.createLimitBar();
      }
      this.setHandler();
      this.setOrientClass();
      this.wireFirstHandleEvt(false);
      if (this.type === "Range") {
        this.wireSecondHandleEvt(false);
      }
      this.setValue();
      if (this.tooltip.isVisible) {
        this.renderTooltip();
        this.wireMaterialTooltipEvent(false);
      }
      this.setBarColor();
      if (args !== "tooltip") {
        this.updateConfig();
      }
    };
    Slider2.prototype.changeRtl = function() {
      if (!this.enableRtl && this.type === "Range") {
        this.value = [this.handleVal2, this.handleVal1];
      }
      this.updateConfig();
      if (this.tooltip.isVisible) {
        this.tooltipObj.refresh(this.firstHandle);
      }
      if (this.showButtons) {
        var enabledRTL = this.enableRtl && this.orientation !== "Vertical";
        attributes(enabledRTL ? this.secondBtn : this.firstBtn, { "aria-label": "Decrease", title: "Decrease" });
        attributes(enabledRTL ? this.firstBtn : this.secondBtn, { "aria-label": "Increase", title: "Increase" });
      }
    };
    Slider2.prototype.changeOrientation = function() {
      this.changeSliderType(this.type, "null");
    };
    Slider2.prototype.updateConfig = function() {
      this.setEnableRTL();
      this.setValue();
      if (this.tooltip.isVisible) {
        this.refreshTooltip(this.tooltipTarget);
      }
      if (this.ticks.placement !== "None") {
        if (this.ul) {
          this.removeElement(this.ul);
          this.ul = void 0;
          this.renderScale();
        }
      }
      this.limitsPropertyChange();
    };
    Slider2.prototype.limitsPropertyChange = function() {
      if (this.limits.enabled) {
        if (isNullOrUndefined(this.limitBarFirst) && this.type !== "Range") {
          this.createLimitBar();
        }
        if (isNullOrUndefined(this.limitBarFirst) && isNullOrUndefined(this.limitBarSecond) && this.type === "Range") {
          this.createLimitBar();
        }
        this.setLimitBar();
        this.setValue();
      } else {
        if (!isNullOrUndefined(this.limitBarFirst)) {
          detach(this.limitBarFirst);
        }
        if (!isNullOrUndefined(this.limitBarSecond)) {
          detach(this.limitBarSecond);
        }
      }
    };
    Slider2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    Slider2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.unwireEvents();
      window.removeEventListener("resize", this.onresize);
      removeClass([this.sliderContainer], [classNames2.sliderDisabled]);
      this.firstHandle.removeAttribute("aria-orientation");
      if (this.type === "Range") {
        this.secondHandle.removeAttribute("aria-orientation");
      }
      this.sliderContainer.parentNode.insertBefore(this.element, this.sliderContainer);
      detach(this.sliderContainer);
      if (this.tooltip.isVisible) {
        this.tooltipObj.destroy();
      }
      this.element.innerHTML = "";
    };
    Slider2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "value":
            if (newProp && oldProp) {
              var value = isNullOrUndefined(newProp.value) ? this.type === "Range" ? [this.min, this.max] : this.min : newProp.value;
              this.setProperties({ "value": value }, true);
              if (!isNullOrUndefined(oldProp.value) && oldProp.value.toString() !== value.toString()) {
                this.setValue();
                this.refreshTooltip(this.tooltipTarget);
                if (this.type === "Range") {
                  if (isNullOrUndefined(newProp.value) || oldProp.value[1] === value[1]) {
                    this.activeHandle = 1;
                  } else {
                    this.activeHandle = 2;
                  }
                }
              }
            }
            break;
          case "min":
          case "step":
          case "max":
            this.setMinMaxValue();
            break;
          case "tooltip":
            if (!isNullOrUndefined(newProp.tooltip) && !isNullOrUndefined(oldProp.tooltip)) {
              this.setTooltip(prop);
            }
            break;
          case "type":
            if (!isNullOrUndefined(oldProp) && Object.keys(oldProp).length && !isNullOrUndefined(oldProp.type)) {
              this.changeSliderType(oldProp.type, prop);
              this.setZindex();
            }
            break;
          case "enableRtl":
            if (oldProp.enableRtl !== newProp.enableRtl && this.orientation !== "Vertical") {
              this.rtl = oldProp.enableRtl;
              this.changeRtl();
            }
            break;
          case "limits":
            this.limitsPropertyChange();
            break;
          case "orientation":
            this.changeOrientation();
            break;
          case "ticks":
            if (!isNullOrUndefined(this.sliderContainer.querySelector("." + classNames2.scale))) {
              detach(this.ul);
              Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
                if (className.match(/e-scale-/)) {
                  _this.sliderContainer.classList.remove(className);
                }
              });
            }
            if (this.ticks.placement !== "None") {
              this.renderScale();
              this.setZindex();
            }
            break;
          case "locale":
            if (this.showButtons) {
              this.buttonTitle();
            }
            break;
          case "showButtons":
            if (newProp.showButtons) {
              this.setButtons();
              this.reposition();
              if (this.enabled && !this.readonly) {
                this.wireButtonEvt(false);
              }
            } else {
              if (this.firstBtn && this.secondBtn) {
                this.sliderContainer.removeChild(this.firstBtn);
                this.sliderContainer.removeChild(this.secondBtn);
                this.sliderContainer.classList.remove(classNames2.sliderButtonClass);
                this.firstBtn = void 0;
                this.secondBtn = void 0;
                this.reposition();
              }
            }
            break;
          case "enabled":
            this.setEnabled();
            break;
          case "readonly":
            this.setReadOnly();
            break;
          case "customValues":
            this.setValue();
            this.reposition();
            break;
          case "colorRange":
            this.reposition();
            break;
          case "width":
            this.setElementWidth(newProp.width);
            this.setMinMaxValue();
            if (this.limits) {
              this.limitsPropertyChange();
            }
            break;
        }
      }
    };
    Slider2.prototype.setReadOnly = function() {
      if (this.readonly) {
        this.unwireEvents();
        this.sliderContainer.classList.add(classNames2.readonly);
      } else {
        this.wireEvents();
        this.sliderContainer.classList.remove(classNames2.readonly);
      }
    };
    Slider2.prototype.setMinMaxValue = function() {
      var _this = this;
      this.setValue();
      this.refreshTooltip(this.tooltipTarget);
      if (!isNullOrUndefined(this.sliderContainer.querySelector("." + classNames2.scale))) {
        if (this.ul) {
          detach(this.ul);
          Array.prototype.forEach.call(this.sliderContainer.classList, function(className) {
            if (className.match(/e-scale-/)) {
              _this.sliderContainer.classList.remove(className);
            }
          });
        }
      }
      if (this.ticks.placement !== "None") {
        this.renderScale();
        this.setZindex();
      }
    };
    Slider2.prototype.setZindex = function() {
      this.zIndex = 6;
      if (!isNullOrUndefined(this.ticks) && this.ticks.placement !== "None") {
        this.ul.style.zIndex = this.zIndex + -7 + "";
        this.element.style.zIndex = this.zIndex + 2 + "";
      }
      if (!this.isMaterial && !isNullOrUndefined(this.ticks) && this.ticks.placement === "Both") {
        this.element.style.zIndex = this.zIndex + 2 + "";
      }
      this.firstHandle.style.zIndex = this.zIndex + 3 + "";
      if (this.type === "Range") {
        this.secondHandle.style.zIndex = this.zIndex + 4 + "";
      }
    };
    Slider2.prototype.setTooltip = function(args) {
      this.changeSliderType(this.type, args);
    };
    Slider2.prototype.setBarColor = function() {
      var trackPosition;
      var trackClassName;
      var child = this.sliderTrack.lastElementChild;
      while (child) {
        this.sliderTrack.removeChild(child);
        child = this.sliderTrack.lastElementChild;
      }
      for (var i = 0; i < this.colorRange.length; i++) {
        if (!isNullOrUndefined(this.colorRange[i].start) && !isNullOrUndefined(this.colorRange[i].end)) {
          if (this.colorRange[i].end > this.colorRange[i].start) {
            if (this.colorRange[i].start < this.min) {
              this.colorRange[i].start = this.min;
            }
            if (this.colorRange[i].end > this.max) {
              this.colorRange[i].end = this.max;
            }
            var startingPosition = this.checkHandlePosition(this.colorRange[i].start);
            var endPosition = this.checkHandlePosition(this.colorRange[i].end);
            var trackContainer = this.createElement("div");
            trackContainer.style.backgroundColor = this.colorRange[i].color;
            trackContainer.style.border = "1px solid " + this.colorRange[i].color;
            if (this.orientation === "Horizontal") {
              trackClassName = classNames2.sliderHorizantalColor;
              if (this.enableRtl) {
                if (isNullOrUndefined(this.customValues)) {
                  trackPosition = this.checkHandlePosition(this.max) - this.checkHandlePosition(this.colorRange[i].end);
                } else {
                  trackPosition = this.checkHandlePosition(this.customValues.length - this.colorRange[i].end - 1);
                }
              } else {
                trackPosition = this.checkHandlePosition(this.colorRange[i].start);
              }
              trackContainer.style.width = endPosition - startingPosition + "px";
              trackContainer.style.left = trackPosition + "px";
            } else {
              trackClassName = classNames2.sliderVerticalColor;
              trackPosition = this.checkHandlePosition(this.colorRange[i].start);
              trackContainer.style.height = endPosition - startingPosition + "px";
              trackContainer.style.bottom = trackPosition + "px";
            }
            trackContainer.classList.add(trackClassName);
            this.sliderTrack.appendChild(trackContainer);
          }
        }
      }
    };
    Slider2.prototype.getModuleName = function() {
      return "slider";
    };
    __decorate18([
      Property(null)
    ], Slider2.prototype, "value", void 0);
    __decorate18([
      Property(null)
    ], Slider2.prototype, "customValues", void 0);
    __decorate18([
      Property(1)
    ], Slider2.prototype, "step", void 0);
    __decorate18([
      Property(null)
    ], Slider2.prototype, "width", void 0);
    __decorate18([
      Property(0)
    ], Slider2.prototype, "min", void 0);
    __decorate18([
      Property(100)
    ], Slider2.prototype, "max", void 0);
    __decorate18([
      Property(false)
    ], Slider2.prototype, "readonly", void 0);
    __decorate18([
      Property("Default")
    ], Slider2.prototype, "type", void 0);
    __decorate18([
      Collection([{}], ColorRangeData)
    ], Slider2.prototype, "colorRange", void 0);
    __decorate18([
      Complex({}, TicksData)
    ], Slider2.prototype, "ticks", void 0);
    __decorate18([
      Complex({}, LimitData)
    ], Slider2.prototype, "limits", void 0);
    __decorate18([
      Property(true)
    ], Slider2.prototype, "enabled", void 0);
    __decorate18([
      Complex({}, TooltipData)
    ], Slider2.prototype, "tooltip", void 0);
    __decorate18([
      Property(false)
    ], Slider2.prototype, "showButtons", void 0);
    __decorate18([
      Property(true)
    ], Slider2.prototype, "enableAnimation", void 0);
    __decorate18([
      Property("Horizontal")
    ], Slider2.prototype, "orientation", void 0);
    __decorate18([
      Property("")
    ], Slider2.prototype, "cssClass", void 0);
    __decorate18([
      Property(false)
    ], Slider2.prototype, "enableHtmlSanitizer", void 0);
    __decorate18([
      Event2()
    ], Slider2.prototype, "created", void 0);
    __decorate18([
      Event2()
    ], Slider2.prototype, "change", void 0);
    __decorate18([
      Event2()
    ], Slider2.prototype, "changed", void 0);
    __decorate18([
      Event2()
    ], Slider2.prototype, "renderingTicks", void 0);
    __decorate18([
      Event2()
    ], Slider2.prototype, "renderedTicks", void 0);
    __decorate18([
      Event2()
    ], Slider2.prototype, "tooltipChange", void 0);
    Slider2 = __decorate18([
      NotifyPropertyChanges
    ], Slider2);
    return Slider2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/form-validator/form-validator.js
var __extends19 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate19 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var regex = {
  /* eslint-disable no-useless-escape */
  EMAIL: new RegExp("^[A-Za-z0-9._%+-]{1,}@[A-Za-z0-9._%+-]{1,}([.]{1}[a-zA-Z0-9]{2,}|[.]{1}[a-zA-Z0-9]{2,4}[.]{1}[a-zA-Z0-9]{2,4})$"),
  URL: /^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w\.-]+)+[\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+$/m,
  DATE_ISO: new RegExp("^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$"),
  DIGITS: new RegExp("^[0-9]*$"),
  PHONE: new RegExp("^[+]?[0-9]{9,13}$"),
  CREDITCARD: new RegExp("^\\d{13,16}$")
  /* eslint-enable no-useless-escape */
};
var ErrorOption;
(function(ErrorOption2) {
  ErrorOption2[ErrorOption2["Message"] = 0] = "Message";
  ErrorOption2[ErrorOption2["Label"] = 1] = "Label";
})(ErrorOption || (ErrorOption = {}));
var FormValidator = (
  /** @class */
  function(_super) {
    __extends19(FormValidator2, _super);
    function FormValidator2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.validated = [];
      _this.errorRules = [];
      _this.allowSubmit = false;
      _this.required = "required";
      _this.infoElement = null;
      _this.inputElement = null;
      _this.selectQuery = "input:not([type=reset]):not([type=button]), select, textarea";
      _this.localyMessage = {};
      _this.defaultMessages = {
        required: "This field is required.",
        email: "Please enter a valid email address.",
        url: "Please enter a valid URL.",
        date: "Please enter a valid date.",
        dateIso: "Please enter a valid date ( ISO ).",
        creditcard: "Please enter valid card number",
        number: "Please enter a valid number.",
        digits: "Please enter only digits.",
        maxLength: "Please enter no more than {0} characters.",
        minLength: "Please enter at least {0} characters.",
        rangeLength: "Please enter a value between {0} and {1} characters long.",
        range: "Please enter a value between {0} and {1}.",
        max: "Please enter a value less than or equal to {0}.",
        min: "Please enter a value greater than or equal to {0}.",
        regex: "Please enter a correct value.",
        tel: "Please enter a valid phone number.",
        pattern: "Please enter a correct pattern value.",
        equalTo: "Please enter the valid match text"
      };
      if (typeof _this.rules === "undefined") {
        _this.rules = {};
      }
      _this.l10n = new L10n("formValidator", _this.defaultMessages, _this.locale);
      if (_this.locale) {
        _this.localeFunc();
      }
      onIntlChange.on("notifyExternalChange", _this.afterLocalization, _this);
      element2 = typeof element2 === "string" ? select(element2, document) : element2;
      if (_this.element != null) {
        _this.element.setAttribute("novalidate", "");
        _this.inputElements = selectAll(_this.selectQuery, _this.element);
        _this.createHTML5Rules();
        _this.wireEvents();
      } else {
        return void 0;
      }
      return _this;
    }
    FormValidator_1 = FormValidator2;
    FormValidator2.prototype.addRules = function(name, rules) {
      if (name) {
        if (this.rules.hasOwnProperty(name)) {
          extend(this.rules[name], rules, {});
        } else {
          this.rules[name] = rules;
        }
      }
    };
    FormValidator2.prototype.removeRules = function(name, rules) {
      if (!name && !rules) {
        this.rules = {};
      } else if (this.rules[name] && !rules) {
        delete this.rules[name];
      } else if (!isNullOrUndefined(this.rules[name] && rules)) {
        for (var i = 0; i < rules.length; i++) {
          delete this.rules[name][rules[i]];
        }
      } else {
        return;
      }
    };
    FormValidator2.prototype.validate = function(selected) {
      var rules = Object.keys(this.rules);
      if (selected && rules.length) {
        this.validateRules(selected);
        return rules.indexOf(selected) !== -1 && this.errorRules.filter(function(data) {
          return data.name === selected;
        }).length === 0;
      } else {
        this.errorRules = [];
        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
          var name_1 = rules_1[_i];
          this.validateRules(name_1);
        }
        return this.errorRules.length === 0;
      }
    };
    FormValidator2.prototype.reset = function() {
      this.element.reset();
      this.clearForm();
    };
    FormValidator2.prototype.getInputElement = function(name) {
      this.inputElement = select('[name="' + name + '"]', this.element);
      return this.inputElement;
    };
    FormValidator2.prototype.destroy = function() {
      this.reset();
      this.unwireEvents();
      this.rules = {};
      var elements = selectAll("." + this.errorClass + ", ." + this.validClass, this.element);
      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
        var element2 = elements_1[_i];
        detach(element2);
      }
      _super.prototype.destroy.call(this);
      onIntlChange.off("notifyExternalChange", this.afterLocalization);
    };
    FormValidator2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "locale":
            this.localeFunc();
            break;
        }
      }
    };
    FormValidator2.prototype.localeFunc = function() {
      for (var _i = 0, _a = Object.keys(this.defaultMessages); _i < _a.length; _i++) {
        var key = _a[_i];
        this.l10n.setLocale(this.locale);
        var value = this.l10n.getConstant(key);
        this.localyMessage[key] = value;
      }
    };
    FormValidator2.prototype.getModuleName = function() {
      return "formValidator";
    };
    FormValidator2.prototype.afterLocalization = function(args) {
      this.locale = args.locale;
      this.localeFunc();
    };
    FormValidator2.prototype.refresh = function() {
      this.unwireEvents();
      this.inputElements = selectAll(this.selectQuery, this.element);
      this.wireEvents();
    };
    FormValidator2.prototype.clearForm = function() {
      this.errorRules = [];
      this.validated = [];
      var elements = selectAll(this.selectQuery, this.element);
      for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {
        var element2 = elements_2[_i];
        var input = element2;
        input.removeAttribute("aria-invalid");
        input.classList.remove(this.errorClass);
        if (input.name.length > 0) {
          this.getInputElement(input.name);
          this.getErrorElement(input.name);
          this.hideMessage(input.name);
        }
        input.classList.remove(this.validClass);
      }
    };
    FormValidator2.prototype.createHTML5Rules = function() {
      var defRules = [
        "required",
        "validateHidden",
        "regex",
        "rangeLength",
        "maxLength",
        "minLength",
        "dateIso",
        "digits",
        "pattern",
        "data-val-required",
        "type",
        "data-validation",
        "min",
        "max",
        "range",
        "equalTo",
        "data-val-minlength-min",
        "data-val-equalto-other",
        "data-val-maxlength-max",
        "data-val-range-min",
        "data-val-regex-pattern",
        "data-val-length-max",
        "data-val-creditcard",
        "data-val-phone"
      ];
      var acceptedTypes = ["hidden", "email", "url", "date", "number", "tel"];
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];
        var allRule = {};
        for (var _b = 0, defRules_1 = defRules; _b < defRules_1.length; _b++) {
          var rule = defRules_1[_b];
          if (input.getAttribute(rule) !== null) {
            switch (rule) {
              case "required":
                this.defRule(input, allRule, rule, input.required);
                break;
              case "data-validation":
                rule = input.getAttribute(rule);
                this.defRule(input, allRule, rule, true);
                break;
              case "type":
                if (acceptedTypes.indexOf(input.type) !== -1) {
                  this.defRule(input, allRule, input.type, true);
                }
                break;
              case "rangeLength":
              case "range":
                this.defRule(input, allRule, rule, JSON.parse(input.getAttribute(rule)));
                break;
              case "equalTo":
                {
                  var id = input.getAttribute(rule);
                  this.defRule(input, allRule, rule, id);
                }
                break;
              default:
                if (input.getAttribute("data-val") === "true") {
                  this.annotationRule(input, allRule, rule, input.getAttribute(rule));
                } else {
                  this.defRule(input, allRule, rule, input.getAttribute(rule));
                }
            }
          }
        }
        if (Object.keys(allRule).length !== 0) {
          this.addRules(input.name, allRule);
        }
      }
    };
    FormValidator2.prototype.annotationRule = function(input, ruleCon, ruleName, value) {
      var annotationRule = ruleName.split("-");
      var rulesList = ["required", "creditcard", "phone", "maxlength", "minlength", "range", "regex", "equalto"];
      var ruleFirstName = annotationRule[annotationRule.length - 1];
      var ruleSecondName = annotationRule[annotationRule.length - 2];
      if (rulesList.indexOf(ruleFirstName) !== -1) {
        switch (ruleFirstName) {
          case "required":
            this.defRule(input, ruleCon, "required", value);
            break;
          case "creditcard":
            this.defRule(input, ruleCon, "creditcard", value);
            break;
          case "phone":
            this.defRule(input, ruleCon, "tel", value);
            break;
        }
      } else if (rulesList.indexOf(ruleSecondName) !== -1) {
        switch (ruleSecondName) {
          case "maxlength":
            this.defRule(input, ruleCon, "maxLength", value);
            break;
          case "minlength":
            this.defRule(input, ruleCon, "minLength", value);
            break;
          case "range":
            {
              var minvalue = input.getAttribute("data-val-range-min");
              var maxvalue = input.getAttribute("data-val-range-max");
              this.defRule(input, ruleCon, "range", [minvalue, maxvalue]);
            }
            break;
          case "equalto":
            {
              var id = input.getAttribute(ruleName).split(".");
              this.defRule(input, ruleCon, "equalTo", id[id.length - 1]);
            }
            break;
          case "regex":
            this.defRule(input, ruleCon, "regex", value);
            break;
        }
      }
    };
    FormValidator2.prototype.defRule = function(input, ruleCon, ruleName, value) {
      var message = input.getAttribute("data-" + ruleName + "-message");
      var annotationMessage = input.getAttribute("data-val-" + ruleName);
      var customMessage;
      if (this.rules[input.name] && ruleName !== "validateHidden" && ruleName !== "hidden") {
        this.getInputElement(input.name);
        customMessage = this.getErrorMessage(this.rules[input.name][ruleName], ruleName);
      }
      if (message) {
        value = [value, message];
      } else if (annotationMessage) {
        value = [value, annotationMessage];
      } else if (customMessage) {
        value = [value, customMessage];
      }
      ruleCon[ruleName] = value;
    };
    FormValidator2.prototype.wireEvents = function() {
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];
        if (FormValidator_1.isCheckable(input)) {
          EventHandler.add(input, "click", this.clickHandler, this);
        } else if (input.tagName === "SELECT") {
          EventHandler.add(input, "change", this.changeHandler, this);
        } else {
          EventHandler.add(input, "focusout", this.focusOutHandler, this);
          EventHandler.add(input, "keyup", this.keyUpHandler, this);
        }
      }
      EventHandler.add(this.element, "submit", this.submitHandler, this);
      EventHandler.add(this.element, "reset", this.resetHandler, this);
    };
    FormValidator2.prototype.unwireEvents = function() {
      for (var _i = 0, _a = this.inputElements; _i < _a.length; _i++) {
        var input = _a[_i];
        EventHandler.clearEvents(input);
      }
      EventHandler.remove(this.element, "submit", this.submitHandler);
      EventHandler.remove(this.element, "reset", this.resetHandler);
    };
    FormValidator2.prototype.focusOutHandler = function(e) {
      this.trigger("focusout", e);
      var element2 = e.target;
      if (this.rules[element2.name]) {
        if (this.rules[element2.name][this.required] || element2.value.length > 0) {
          this.validate(element2.name);
        } else if (this.validated.indexOf(element2.name) === -1) {
          this.validated.push(element2.name);
        }
      }
    };
    FormValidator2.prototype.keyUpHandler = function(e) {
      this.trigger("keyup", e);
      var element2 = e.target;
      var excludeKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];
      if (e.which === 9 && (!this.rules[element2.name] || this.rules[element2.name] && !this.rules[element2.name][this.required])) {
        return;
      }
      if (this.validated.indexOf(element2.name) !== -1 && this.rules[element2.name] && excludeKeys.indexOf(e.which) === -1) {
        this.validate(element2.name);
      }
    };
    FormValidator2.prototype.clickHandler = function(e) {
      this.trigger("click", e);
      var element2 = e.target;
      if (element2.type !== "submit") {
        this.validate(element2.name);
      } else if (element2.getAttribute("formnovalidate") !== null) {
        this.allowSubmit = true;
      }
    };
    FormValidator2.prototype.changeHandler = function(e) {
      this.trigger("change", e);
      var element2 = e.target;
      this.validate(element2.name);
    };
    FormValidator2.prototype.submitHandler = function(e) {
      this.trigger("submit", e);
      if (!this.allowSubmit && !this.validate()) {
        e.preventDefault();
      } else {
        this.allowSubmit = false;
      }
    };
    FormValidator2.prototype.resetHandler = function() {
      this.clearForm();
    };
    FormValidator2.prototype.validateRules = function(name) {
      if (!this.rules[name]) {
        return;
      }
      var rules = Object.keys(this.rules[name]);
      var hiddenType = false;
      var validateHiddenType = false;
      var vhPos = rules.indexOf("validateHidden");
      var hPos = rules.indexOf("hidden");
      this.getInputElement(name);
      if (hPos !== -1) {
        hiddenType = true;
      }
      if (vhPos !== -1) {
        validateHiddenType = true;
      }
      if (!hiddenType || hiddenType && validateHiddenType) {
        if (vhPos !== -1) {
          rules.splice(vhPos, 1);
        }
        if (hPos !== -1) {
          rules.splice(hPos - 1, 1);
        }
        this.getErrorElement(name);
        for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {
          var rule = rules_2[_i];
          var errorMessage = this.getErrorMessage(this.rules[name][rule], rule);
          var errorRule = { name, message: errorMessage };
          var eventArgs = {
            inputName: name,
            element: this.inputElement,
            message: errorMessage
          };
          if (!this.isValid(name, rule) && !this.inputElement.classList.contains(this.ignore)) {
            this.removeErrorRules(name);
            this.errorRules.push(errorRule);
            this.inputElement.setAttribute("aria-invalid", "true");
            this.inputElement.setAttribute("aria-describedby", this.inputElement.id + "-info");
            this.inputElement.classList.add(this.errorClass);
            this.inputElement.classList.remove(this.validClass);
            if (!this.infoElement) {
              this.createErrorElement(name, errorRule.message, this.inputElement);
            } else {
              this.showMessage(errorRule);
            }
            eventArgs.errorElement = this.infoElement;
            eventArgs.status = "failure";
            this.inputElement.classList.add(this.errorClass);
            this.inputElement.classList.remove(this.validClass);
            this.optionalValidationStatus(name, eventArgs);
            this.trigger("validationComplete", eventArgs);
            if (rule === "required") {
              this.inputElement.setAttribute("aria-required", "true");
            }
            break;
          } else {
            this.hideMessage(name);
            eventArgs.status = "success";
            this.trigger("validationComplete", eventArgs);
          }
        }
      } else {
        return;
      }
    };
    FormValidator2.prototype.optionalValidationStatus = function(name, refer) {
      if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {
        this.infoElement.innerHTML = this.inputElement.value;
        this.infoElement.setAttribute("aria-invalid", "false");
        refer.status = "";
        this.hideMessage(name);
      }
    };
    FormValidator2.prototype.isValid = function(name, rule) {
      var params = this.rules[name][rule];
      var param = params instanceof Array && typeof params[1] === "string" ? params[0] : params;
      var currentRule = this.rules[name][rule];
      var args = { value: this.inputElement.value, param, element: this.inputElement, formElement: this.element };
      this.trigger("validationBegin", args);
      if (!args.param && rule === "required") {
        return true;
      }
      if (currentRule && typeof currentRule[0] === "function") {
        var fn = currentRule[0];
        return fn.call(this, { element: this.inputElement, value: this.inputElement.value });
      } else if (FormValidator_1.isCheckable(this.inputElement)) {
        if (rule !== "required") {
          return true;
        }
        return selectAll('input[name="' + name + '"]:checked', this.element).length > 0;
      } else {
        return FormValidator_1.checkValidator[rule](args);
      }
    };
    FormValidator2.prototype.getErrorMessage = function(ruleValue, rule) {
      var message = this.inputElement.getAttribute("data-" + rule + "-message") ? this.inputElement.getAttribute("data-" + rule + "-message") : ruleValue instanceof Array && typeof ruleValue[1] === "string" ? ruleValue[1] : Object.keys(this.localyMessage).length !== 0 ? this.localyMessage[rule] : this.defaultMessages[rule];
      var formats = message.match(/{(\d)}/g);
      if (!isNullOrUndefined(formats)) {
        for (var i = 0; i < formats.length; i++) {
          var value = ruleValue instanceof Array ? ruleValue[i] : ruleValue;
          message = message.replace(formats[i], value);
        }
      }
      return message;
    };
    FormValidator2.prototype.createErrorElement = function(name, message, input) {
      var errorElement = createElement(this.errorElement, {
        className: this.errorClass,
        innerHTML: message,
        attrs: { for: name }
      });
      if (this.errorOption === ErrorOption.Message) {
        errorElement.classList.remove(this.errorClass);
        errorElement.classList.add("e-message");
        errorElement = createElement(this.errorContainer, { className: this.errorClass, innerHTML: errorElement.outerHTML });
      }
      errorElement.id = this.inputElement.name + "-info";
      if (this.element.querySelector('[data-valmsg-for="' + input.id + '"]')) {
        this.element.querySelector('[data-valmsg-for="' + input.id + '"]').appendChild(errorElement);
      } else if (input.hasAttribute("data-msg-containerid") === true) {
        var containerId = input.getAttribute("data-msg-containerid");
        var divElement = select("#" + containerId, this.element);
        divElement.appendChild(errorElement);
      } else if (this.customPlacement != null) {
        this.customPlacement.call(this, this.inputElement, errorElement);
      } else {
        this.inputElement.parentNode.insertBefore(errorElement, this.inputElement.nextSibling);
      }
      errorElement.style.display = "block";
      this.getErrorElement(name);
      this.validated.push(name);
      this.checkRequired(name);
    };
    FormValidator2.prototype.getErrorElement = function(name) {
      this.infoElement = select(this.errorElement + "." + this.errorClass, this.inputElement.parentElement);
      if (!this.infoElement) {
        this.infoElement = select(this.errorElement + "." + this.errorClass + '[for="' + name + '"]', this.element);
      }
      return this.infoElement;
    };
    FormValidator2.prototype.removeErrorRules = function(name) {
      for (var i = 0; i < this.errorRules.length; i++) {
        var rule = this.errorRules[i];
        if (rule.name === name) {
          this.errorRules.splice(i, 1);
        }
      }
    };
    FormValidator2.prototype.showMessage = function(errorRule) {
      this.infoElement.style.display = "block";
      this.infoElement.innerHTML = errorRule.message;
      this.checkRequired(errorRule.name);
    };
    FormValidator2.prototype.hideMessage = function(name) {
      if (this.infoElement) {
        this.infoElement.style.display = "none";
        this.removeErrorRules(name);
        this.inputElement.classList.add(this.validClass);
        this.inputElement.classList.remove(this.errorClass);
        this.inputElement.setAttribute("aria-invalid", "false");
      }
    };
    FormValidator2.prototype.checkRequired = function(name) {
      if (!this.rules[name][this.required] && !this.inputElement.value.length && !isNullOrUndefined(this.infoElement)) {
        this.infoElement.innerHTML = this.inputElement.value;
        this.infoElement.setAttribute("aria-invalid", "false");
        this.hideMessage(name);
      }
    };
    FormValidator2.isCheckable = function(input) {
      var inputType = input.getAttribute("type");
      return inputType && (inputType === "checkbox" || inputType === "radio" || inputType === "submit");
    };
    var FormValidator_1;
    FormValidator2.checkValidator = {
      required: function(option) {
        return !isNaN(Date.parse(option.value)) ? !isNaN(new Date(option.value).getTime()) : option.value.toString().length > 0;
      },
      email: function(option) {
        return regex.EMAIL.test(option.value);
      },
      url: function(option) {
        return regex.URL.test(option.value);
      },
      dateIso: function(option) {
        return regex.DATE_ISO.test(option.value);
      },
      tel: function(option) {
        return regex.PHONE.test(option.value);
      },
      creditcard: function(option) {
        return regex.CREDITCARD.test(option.value);
      },
      number: function(option) {
        return !isNaN(Number(option.value)) && option.value.indexOf(" ") === -1;
      },
      digits: function(option) {
        return regex.DIGITS.test(option.value);
      },
      maxLength: function(option) {
        return option.value.length <= option.param;
      },
      minLength: function(option) {
        return option.value.length >= option.param;
      },
      rangeLength: function(option) {
        var param = option.param;
        return option.value.length >= param[0] && option.value.length <= param[1];
      },
      range: function(option) {
        var param = option.param;
        return !isNaN(Number(option.value)) && Number(option.value) >= param[0] && Number(option.value) <= param[1];
      },
      date: function(option) {
        return !isNaN(new Date(option.value).getTime());
      },
      max: function(option) {
        if (!isNaN(Number(option.value))) {
          return +option.value <= option.param;
        }
        return new Date(option.value).getTime() <= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
      },
      min: function(option) {
        if (!isNaN(Number(option.value))) {
          return +option.value >= option.param;
        } else if (option.value.indexOf(",") !== -1) {
          var uNum = option.value.replace(/,/g, "");
          return parseFloat(uNum) >= option.param;
        } else {
          return new Date(option.value).getTime() >= new Date(JSON.parse(JSON.stringify(option.param))).getTime();
        }
      },
      regex: function(option) {
        return new RegExp(option.param).test(option.value);
      },
      equalTo: function(option) {
        var compareTo = option.formElement.querySelector("#" + option.param);
        option.param = compareTo.value;
        return option.param === option.value;
      }
    };
    __decorate19([
      Property("")
    ], FormValidator2.prototype, "locale", void 0);
    __decorate19([
      Property("e-hidden")
    ], FormValidator2.prototype, "ignore", void 0);
    __decorate19([
      Property()
    ], FormValidator2.prototype, "rules", void 0);
    __decorate19([
      Property("e-error")
    ], FormValidator2.prototype, "errorClass", void 0);
    __decorate19([
      Property("e-valid")
    ], FormValidator2.prototype, "validClass", void 0);
    __decorate19([
      Property("label")
    ], FormValidator2.prototype, "errorElement", void 0);
    __decorate19([
      Property("div")
    ], FormValidator2.prototype, "errorContainer", void 0);
    __decorate19([
      Property(ErrorOption.Label)
    ], FormValidator2.prototype, "errorOption", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "focusout", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "keyup", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "click", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "change", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "submit", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "validationBegin", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "validationComplete", void 0);
    __decorate19([
      Event2()
    ], FormValidator2.prototype, "customPlacement", void 0);
    FormValidator2 = FormValidator_1 = __decorate19([
      NotifyPropertyChanges
    ], FormValidator2);
    return FormValidator2;
  }(Base)
);

// node_modules/@syncfusion/ej2-inputs/src/uploader/uploader.js
var __extends20 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate20 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CONTROL_WRAPPER = "e-upload e-control-wrapper";
var INPUT_WRAPPER = "e-file-select";
var DROP_AREA = "e-file-drop";
var DROP_WRAPPER = "e-file-select-wrap";
var LIST_PARENT = "e-upload-files";
var FILE = "e-upload-file-list";
var STATUS = "e-file-status";
var ACTION_BUTTONS = "e-upload-actions";
var UPLOAD_BUTTONS = "e-file-upload-btn e-css e-btn e-flat e-primary";
var CLEAR_BUTTONS = "e-file-clear-btn e-css e-btn e-flat";
var FILE_NAME = "e-file-name";
var FILE_TYPE = "e-file-type";
var FILE_SIZE = "e-file-size";
var REMOVE_ICON = "e-file-remove-btn";
var DELETE_ICON = "e-file-delete-btn";
var SPINNER_PANE = "e-spinner-pane";
var ABORT_ICON = "e-file-abort-btn";
var RETRY_ICON = "e-file-reload-btn";
var DRAG_HOVER = "e-upload-drag-hover";
var PROGRESS_WRAPPER = "e-upload-progress-wrap";
var PROGRESSBAR = "e-upload-progress-bar";
var PROGRESSBAR_TEXT = "e-progress-bar-text";
var UPLOAD_INPROGRESS = "e-upload-progress";
var UPLOAD_SUCCESS = "e-upload-success";
var UPLOAD_FAILED = "e-upload-fails";
var TEXT_CONTAINER = "e-file-container";
var VALIDATION_FAILS = "e-validation-fails";
var RTL7 = "e-rtl";
var DISABLED5 = "e-disabled";
var RTL_CONTAINER = "e-rtl-container";
var ICON_FOCUSED = "e-clear-icon-focus";
var PROGRESS_INNER_WRAPPER = "e-progress-inner-wrap";
var PAUSE_UPLOAD = "e-file-pause-btn";
var RESUME_UPLOAD = "e-file-play-btn";
var RESTRICT_RETRY = "e-restrict-retry";
var wrapperAttr2 = ["title", "style", "class"];
var FORM_UPLOAD = "e-form-upload";
var HIDDEN_INPUT = "e-hidden-file-input";
var INVALID_FILE = "e-file-invalid";
var INFORMATION = "e-file-information";
var FilesProp = (
  /** @class */
  function(_super) {
    __extends20(FilesProp2, _super);
    function FilesProp2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate20([
      Property("")
    ], FilesProp2.prototype, "name", void 0);
    __decorate20([
      Property(null)
    ], FilesProp2.prototype, "size", void 0);
    __decorate20([
      Property("")
    ], FilesProp2.prototype, "type", void 0);
    return FilesProp2;
  }(ChildProperty)
);
var ButtonsProps = (
  /** @class */
  function(_super) {
    __extends20(ButtonsProps2, _super);
    function ButtonsProps2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate20([
      Property("Browse...")
    ], ButtonsProps2.prototype, "browse", void 0);
    __decorate20([
      Property("Upload")
    ], ButtonsProps2.prototype, "upload", void 0);
    __decorate20([
      Property("Clear")
    ], ButtonsProps2.prototype, "clear", void 0);
    return ButtonsProps2;
  }(ChildProperty)
);
var AsyncSettings = (
  /** @class */
  function(_super) {
    __extends20(AsyncSettings2, _super);
    function AsyncSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate20([
      Property("")
    ], AsyncSettings2.prototype, "saveUrl", void 0);
    __decorate20([
      Property("")
    ], AsyncSettings2.prototype, "removeUrl", void 0);
    __decorate20([
      Property(0)
    ], AsyncSettings2.prototype, "chunkSize", void 0);
    __decorate20([
      Property(3)
    ], AsyncSettings2.prototype, "retryCount", void 0);
    __decorate20([
      Property(500)
    ], AsyncSettings2.prototype, "retryAfterDelay", void 0);
    return AsyncSettings2;
  }(ChildProperty)
);
var Uploader = (
  /** @class */
  function(_super) {
    __extends20(Uploader2, _super);
    function Uploader2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.initialAttr = { accept: null, multiple: false, disabled: false };
      _this.uploadedFilesData = [];
      _this.base64String = [];
      _this.isForm = false;
      _this.allTypes = false;
      _this.pausedData = [];
      _this.uploadMetaData = [];
      _this.tabIndex = "0";
      _this.btnTabIndex = "0";
      _this.disableKeyboardNavigation = false;
      _this.count = -1;
      _this.actionCompleteCount = 0;
      _this.flag = true;
      _this.selectedFiles = [];
      _this.uploaderName = "UploadFiles";
      _this.fileStreams = [];
      _this.newFileRef = 0;
      _this.isFirstFileOnSelection = false;
      _this.dragCounter = 0;
      _this.fileList = [];
      _this.filesData = [];
      _this.uploaderOptions = options;
      return _this;
    }
    Uploader2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "allowedExtensions":
            this.setExtensions(this.allowedExtensions);
            this.clearAll();
            break;
          case "enabled":
            this.setControlStatus();
            break;
          case "multiple":
            this.setMultipleSelection();
            break;
          case "enableRtl":
            this.setRTL();
            this.reRenderFileList();
            break;
          case "buttons":
            this.buttons.browse = isNullOrUndefined(this.buttons.browse) ? "" : this.buttons.browse;
            this.buttons.clear = isNullOrUndefined(this.buttons.clear) ? "" : this.buttons.clear;
            this.buttons.upload = isNullOrUndefined(this.buttons.upload) ? "" : this.buttons.upload;
            this.renderButtonTemplates();
            break;
          case "dropArea":
            this.unBindDropEvents();
            this.updateDropArea();
            break;
          case "htmlAttributes":
            this.updateHTMLAttrToElement();
            this.updateHTMLAttrToWrapper();
            this.checkHTMLAttributes(true);
            break;
          case "files":
            this.renderPreLoadFiles();
            break;
          case "directoryUpload":
            this.updateDirectoryAttributes();
            break;
          case "template":
            this.clearAll();
            break;
          case "minFileSize":
          case "maxFileSize":
          case "autoUpload":
            this.clearAll();
            break;
          case "sequentialUpload":
            this.clearAll();
            break;
          case "locale":
            this.l10n.setLocale(this.locale);
            this.setLocalizedTexts();
            this.preLocaleObj = getValue("currentLocale", this.l10n);
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
        }
      }
    };
    Uploader2.prototype.setLocalizedTexts = function() {
      if (isNullOrUndefined(this.template)) {
        if (typeof this.buttons.browse === "string") {
          this.browseButton.innerText = this.buttons.browse === "Browse..." ? this.localizedTexts("Browse") : this.buttons.browse;
          this.browseButton.setAttribute("title", this.browseButton.innerText);
          if (this.uploadWrapper && !isNullOrUndefined(this.uploadWrapper.querySelector("." + DROP_AREA))) {
            this.uploadWrapper.querySelector("." + DROP_AREA).innerHTML = this.localizedTexts("dropFilesHint");
          }
        }
        this.updateFileList();
      }
    };
    Uploader2.prototype.getKeyValue = function(val) {
      var keyValue;
      for (var _i = 0, _a = Object.keys(this.preLocaleObj); _i < _a.length; _i++) {
        var key = _a[_i];
        if (this.preLocaleObj[key] === val) {
          keyValue = key;
        }
      }
      return keyValue;
    };
    Uploader2.prototype.updateFileList = function() {
      var element2;
      if (this.fileList.length > 0 && !isNullOrUndefined(this.uploadWrapper.querySelector("." + LIST_PARENT))) {
        for (var i = 0; i < this.fileList.length; i++) {
          element2 = this.fileList[i].querySelector(".e-file-status");
          element2.innerHTML = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
          this.filesData[i].status = this.localizedTexts(this.getKeyValue(this.filesData[i].status));
          if (this.fileList[i].classList.contains(UPLOAD_SUCCESS)) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("delete"));
          }
          if (this.fileList[i].querySelector(".e-file-play-btn")) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("resume"));
          }
          if (this.fileList[i].querySelector(".e-file-remove-btn")) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("remove"));
          }
          if (this.fileList[i].querySelector(".e-file-reload-btn")) {
            this.fileList[i].querySelector(".e-icons").setAttribute("title", this.localizedTexts("retry"));
          }
          if (!this.autoUpload) {
            this.uploadButton.innerText = this.buttons.upload === "Upload" ? this.localizedTexts("Upload") : this.buttons.upload;
            this.uploadButton.setAttribute("title", this.localizedTexts("Upload"));
            this.clearButton.innerText = this.buttons.clear === "Clear" ? this.localizedTexts("Clear") : this.buttons.clear;
            this.clearButton.setAttribute("title", this.localizedTexts("Clear"));
          }
        }
      }
    };
    Uploader2.prototype.reRenderFileList = function() {
      if (this.listParent) {
        detach(this.listParent);
        this.listParent = null;
        this.fileList = [];
        this.createFileList(this.filesData);
        if (this.actionButtons) {
          this.removeActionButtons();
          this.renderActionButtons();
          this.checkActionButtonStatus();
        }
      }
    };
    Uploader2.prototype.preRender = function() {
      this.localeText = {
        Browse: "Browse...",
        Clear: "Clear",
        Upload: "Upload",
        dropFilesHint: "Or drop files here",
        invalidMaxFileSize: "File size is too large",
        invalidMinFileSize: "File size is too small",
        invalidFileType: "File type is not allowed",
        uploadFailedMessage: "File failed to upload",
        uploadSuccessMessage: "File uploaded successfully",
        removedSuccessMessage: "File removed successfully",
        removedFailedMessage: "Unable to remove file",
        inProgress: "Uploading",
        readyToUploadMessage: "Ready to upload",
        abort: "Abort",
        remove: "Remove",
        cancel: "Cancel",
        delete: "Delete file",
        pauseUpload: "File upload paused",
        pause: "Pause",
        resume: "Resume",
        retry: "Retry",
        fileUploadCancel: "File upload canceled",
        invalidFileSelection: "Invalid files selected",
        totalFiles: "Total files",
        size: "Size"
      };
      this.l10n = new L10n("uploader", this.localeText, this.locale);
      this.preLocaleObj = getValue("currentLocale", this.l10n);
      this.formRendered();
      this.updateHTMLAttrToElement();
      this.checkHTMLAttributes(false);
      var ejInstance = getValue("ej2_instances", this.element);
      if (this.element.tagName === "EJS-UPLOADER") {
        var inputElement = this.createElement("input", { attrs: { type: "file" } });
        var index = 0;
        for (index; index < this.element.attributes.length; index++) {
          inputElement.setAttribute(this.element.attributes[index].nodeName, this.element.attributes[index].nodeValue);
          inputElement.innerHTML = this.element.innerHTML;
        }
        if (!inputElement.hasAttribute("name")) {
          inputElement.setAttribute("name", "UploadFiles");
        }
        this.element.appendChild(inputElement);
        this.element = inputElement;
        setValue("ej2_instances", ejInstance, this.element);
      }
      if (ejInstance[0].isPureReactComponent) {
        if (!isNullOrUndefined(ejInstance[0].props.name)) {
          this.element.setAttribute("name", ejInstance[0].props.name);
        } else if (!isNullOrUndefined(ejInstance[0].props.id) && isNullOrUndefined(ejInstance[0].props.name)) {
          this.element.setAttribute("name", ejInstance[0].props.id);
        } else {
          this.element.setAttribute("name", "UploadFiles");
        }
      }
      if (isNullOrUndefined(this.element.getAttribute("name"))) {
        this.element.setAttribute("name", this.element.getAttribute("id"));
      }
      if (!this.element.hasAttribute("type")) {
        this.element.setAttribute("type", "file");
      }
      this.updateDirectoryAttributes();
      this.keyConfigs = {
        enter: "enter"
      };
      if (this.element.hasAttribute("tabindex")) {
        this.tabIndex = this.element.getAttribute("tabindex");
      }
      this.browserName = Browser.info.name;
      this.uploaderName = this.element.getAttribute("name");
    };
    Uploader2.prototype.formRendered = function() {
      var parentEle = closest(this.element, "form");
      if (!isNullOrUndefined(parentEle)) {
        for (; parentEle && parentEle !== document.documentElement; parentEle = parentEle.parentElement) {
          if (parentEle.tagName === "FORM") {
            this.isForm = true;
            this.formElement = parentEle;
            parentEle.setAttribute("enctype", "multipart/form-data");
            parentEle.setAttribute("encoding", "multipart/form-data");
          }
        }
      }
    };
    Uploader2.prototype.getPersistData = function() {
      return this.addOnPersist(["filesData"]);
    };
    Uploader2.prototype.getModuleName = function() {
      return "uploader";
    };
    Uploader2.prototype.updateDirectoryAttributes = function() {
      if (this.directoryUpload) {
        this.element.setAttribute("directory", "true");
        this.element.setAttribute("webkitdirectory", "true");
      } else {
        this.element.removeAttribute("directory");
        this.element.removeAttribute("webkitdirectory");
      }
    };
    Uploader2.prototype.render = function() {
      this.renderBrowseButton();
      this.initializeUpload();
      this.updateHTMLAttrToWrapper();
      this.wireEvents();
      this.setMultipleSelection();
      this.setExtensions(this.allowedExtensions);
      this.setRTL();
      this.renderPreLoadFiles();
      this.setControlStatus();
      this.setCSSClass();
    };
    Uploader2.prototype.renderBrowseButton = function() {
      this.browseButton = this.createElement("button", { className: "e-css e-btn", attrs: { "type": "button" } });
      this.browseButton.setAttribute("tabindex", this.tabIndex);
      if (typeof this.buttons.browse === "string") {
        this.browseButton.textContent = this.buttons.browse === "Browse..." ? this.localizedTexts("Browse") : this.buttons.browse;
        this.browseButton.setAttribute("title", this.browseButton.innerText);
      } else {
        this.browseButton.appendChild(this.buttons.browse);
      }
      this.element.setAttribute("aria-label", "Uploader");
    };
    Uploader2.prototype.renderActionButtons = function() {
      this.element.setAttribute("tabindex", "-1");
      this.actionButtons = this.createElement("div", { className: ACTION_BUTTONS });
      this.uploadButton = this.createElement("button", {
        className: UPLOAD_BUTTONS,
        attrs: { "type": "button", "tabindex": this.btnTabIndex }
      });
      this.clearButton = this.createElement("button", {
        className: CLEAR_BUTTONS,
        attrs: { "type": "button", "tabindex": this.btnTabIndex }
      });
      this.actionButtons.appendChild(this.clearButton);
      this.actionButtons.appendChild(this.uploadButton);
      this.renderButtonTemplates();
      this.uploadWrapper.appendChild(this.actionButtons);
      this.browseButton.blur();
      if (!this.isPreloadFiles) {
        this.uploadButton.focus();
      }
      this.wireActionButtonEvents();
    };
    Uploader2.prototype.serverActionButtonsEventBind = function(element2) {
      if (element2 && !this.isForm) {
        this.browseButton.blur();
        this.actionButtons = element2;
        this.uploadButton = this.actionButtons.querySelector(".e-file-upload-btn");
        this.clearButton = this.actionButtons.querySelector(".e-file-clear-btn");
        this.uploadButton.focus();
        this.unwireActionButtonEvents();
        this.wireActionButtonEvents();
        this.checkActionButtonStatus();
      }
    };
    Uploader2.prototype.wireActionButtonEvents = function() {
      EventHandler.add(this.uploadButton, "click", this.uploadButtonClick, this);
      EventHandler.add(this.clearButton, "click", this.clearButtonClick, this);
    };
    Uploader2.prototype.unwireActionButtonEvents = function() {
      EventHandler.remove(this.uploadButton, "click", this.uploadButtonClick);
      EventHandler.remove(this.clearButton, "click", this.clearButtonClick);
    };
    Uploader2.prototype.removeActionButtons = function() {
      if (this.actionButtons) {
        this.unwireActionButtonEvents();
        detach(this.actionButtons);
        this.actionButtons = null;
      }
    };
    Uploader2.prototype.renderButtonTemplates = function() {
      if (typeof this.buttons.browse === "string") {
        this.browseButton.textContent = this.buttons.browse === "Browse..." ? this.localizedTexts("Browse") : this.buttons.browse;
        this.browseButton.setAttribute("title", this.browseButton.textContent);
      } else {
        this.browseButton.innerHTML = "";
        this.browseButton.appendChild(this.buttons.browse);
      }
      if (this.uploadButton) {
        var uploadText = isNullOrUndefined(this.buttons.upload) ? "Upload" : this.buttons.upload;
        this.buttons.upload = uploadText;
        if (typeof this.buttons.upload === "string") {
          this.uploadButton.textContent = this.buttons.upload === "Upload" ? this.localizedTexts("Upload") : this.buttons.upload;
          this.uploadButton.setAttribute("title", this.uploadButton.textContent);
        } else {
          this.uploadButton.innerHTML = "";
          this.uploadButton.appendChild(this.buttons.upload);
        }
      }
      if (this.clearButton) {
        var clearText = isNullOrUndefined(this.buttons.clear) ? "Clear" : this.buttons.clear;
        this.buttons.clear = clearText;
        if (typeof this.buttons.clear === "string") {
          this.clearButton.textContent = this.buttons.clear === "Clear" ? this.localizedTexts("Clear") : this.buttons.clear;
          this.clearButton.setAttribute("title", this.clearButton.textContent);
        } else {
          this.clearButton.innerHTML = "";
          this.clearButton.appendChild(this.buttons.clear);
        }
      }
    };
    Uploader2.prototype.initializeUpload = function() {
      this.element.setAttribute("tabindex", "-1");
      var inputWrapper = this.createElement("span", { className: INPUT_WRAPPER });
      this.element.parentElement.insertBefore(inputWrapper, this.element);
      this.dropAreaWrapper = this.createElement("div", { className: DROP_WRAPPER });
      this.element.parentElement.insertBefore(this.dropAreaWrapper, this.element);
      inputWrapper.appendChild(this.element);
      this.dropAreaWrapper.appendChild(this.browseButton);
      this.dropAreaWrapper.appendChild(inputWrapper);
      this.uploadWrapper = this.createElement("div", { className: CONTROL_WRAPPER });
      this.dropAreaWrapper.parentElement.insertBefore(this.uploadWrapper, this.dropAreaWrapper);
      this.uploadWrapper.appendChild(this.dropAreaWrapper);
      this.setDropArea();
    };
    Uploader2.prototype.renderPreLoadFiles = function() {
      if (this.files.length) {
        if (this.enablePersistence && this.filesData.length) {
          this.createFileList(this.filesData);
          return;
        }
        if (isNullOrUndefined(this.files[0].size)) {
          return;
        }
        this.isPreloadFiles = true;
        var files = [].slice.call(this.files);
        var filesData = [];
        if (!this.multiple) {
          this.clearData();
          files = [files[0]];
        }
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
          var data = files_1[_i];
          var fileData = {
            name: data.name + "." + data.type.split(".")[data.type.split(".").length - 1],
            rawFile: "",
            size: data.size,
            status: this.localizedTexts("uploadSuccessMessage"),
            type: data.type,
            validationMessages: { minSize: "", maxSize: "" },
            statusCode: "2"
          };
          filesData.push(fileData);
          this.filesData.push(fileData);
        }
        this.createFileList(filesData);
        if (!this.autoUpload && this.listParent && !this.actionButtons && (!this.isForm || this.allowUpload()) && this.showFileList) {
          this.renderActionButtons();
        }
        this.checkActionButtonStatus();
        if (this.sequentialUpload) {
          this.count = this.filesData.length - 1;
        }
        this.isPreloadFiles = false;
      }
    };
    Uploader2.prototype.checkActionButtonStatus = function() {
      if (this.actionButtons) {
        var length_1 = this.uploadWrapper.querySelectorAll("." + VALIDATION_FAILS).length + this.uploadWrapper.querySelectorAll(".e-upload-fails:not(.e-upload-progress)").length + this.uploadWrapper.querySelectorAll("span." + UPLOAD_SUCCESS).length + this.uploadWrapper.querySelectorAll("span." + UPLOAD_INPROGRESS).length;
        if (length_1 > 0 && length_1 === this.uploadWrapper.querySelectorAll("li").length) {
          this.uploadButton.setAttribute("disabled", "disabled");
        } else {
          this.uploadButton.removeAttribute("disabled");
        }
      }
    };
    Uploader2.prototype.setDropArea = function() {
      var dropTextArea = this.dropAreaWrapper.querySelector(".e-file-drop");
      if (this.dropArea) {
        this.dropZoneElement = typeof this.dropArea !== "string" ? this.dropArea : select(this.dropArea, document);
        var element2 = this.element;
        var enableDropText = false;
        while (element2.parentNode) {
          element2 = element2.parentNode;
          if (element2 === this.dropZoneElement) {
            enableDropText = true;
            if (!dropTextArea) {
              this.createDropTextHint();
            } else {
              dropTextArea.innerHTML = this.localizedTexts("dropFilesHint");
            }
          }
        }
        if (!enableDropText && dropTextArea) {
          remove(dropTextArea);
        }
      } else if (!isNullOrUndefined(this.uploaderOptions) && this.uploaderOptions.dropArea === void 0) {
        this.createDropTextHint();
        this.dropZoneElement = this.uploadWrapper;
        this.setProperties({ dropArea: this.uploadWrapper }, true);
      }
      this.bindDropEvents();
    };
    Uploader2.prototype.updateDropArea = function() {
      if (this.dropArea) {
        this.setDropArea();
      } else {
        this.dropZoneElement = null;
        var dropTextArea = this.dropAreaWrapper.querySelector(".e-file-drop");
        if (dropTextArea) {
          remove(dropTextArea);
        }
      }
    };
    Uploader2.prototype.createDropTextHint = function() {
      var fileDropArea = this.createElement("span", { className: DROP_AREA });
      fileDropArea.innerHTML = this.localizedTexts("dropFilesHint");
      this.dropAreaWrapper.appendChild(fileDropArea);
    };
    Uploader2.prototype.updateHTMLAttrToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttr2.indexOf(pro) < 0) {
            this.element.setAttribute(pro, this.htmlAttributes[pro]);
          }
        }
      }
    };
    Uploader2.prototype.updateHTMLAttrToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var pro = _a[_i];
          if (wrapperAttr2.indexOf(pro) > -1) {
            if (pro === "class") {
              var updatedClassValues = this.htmlAttributes[pro].replace(/\s+/g, " ").trim();
              if (updatedClassValues !== "") {
                addClass([this.uploadWrapper], updatedClassValues.split(" "));
              }
            } else if (pro === "style") {
              var uploadStyle = this.uploadWrapper.getAttribute(pro);
              uploadStyle = !isNullOrUndefined(uploadStyle) ? uploadStyle + this.htmlAttributes[pro] : this.htmlAttributes[pro];
              this.uploadWrapper.setAttribute(pro, uploadStyle);
            } else {
              this.uploadWrapper.setAttribute(pro, this.htmlAttributes[pro]);
            }
          }
        }
      }
    };
    Uploader2.prototype.setMultipleSelection = function() {
      if (this.multiple && !this.element.hasAttribute("multiple")) {
        var newAttr = document.createAttribute("multiple");
        newAttr.value = "multiple";
        this.element.setAttributeNode(newAttr);
      } else if (!this.multiple) {
        this.element.removeAttribute("multiple");
      }
    };
    Uploader2.prototype.checkAutoUpload = function(fileData) {
      if (this.autoUpload) {
        if (this.sequentialUpload) {
          this.sequenceUpload(fileData);
        } else {
          this.upload(fileData);
        }
        this.removeActionButtons();
      } else if (!this.actionButtons) {
        this.renderActionButtons();
      }
      this.checkActionButtonStatus();
    };
    Uploader2.prototype.sequenceUpload = function(fileData) {
      if (this.filesData.length - fileData.length === 0 || this.filesData[this.filesData.length - fileData.length - 1].statusCode !== "1") {
        ++this.count;
        var isFileListCreated = this.showFileList ? false : true;
        if (typeof this.filesData[this.count] === "object") {
          this.isFirstFileOnSelection = false;
          this.upload(this.filesData[this.count], isFileListCreated);
          if (this.filesData[this.count].statusCode === "0") {
            this.sequenceUpload(fileData);
          }
        } else {
          --this.count;
        }
      }
    };
    Uploader2.prototype.setCSSClass = function(oldCSSClass) {
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(this.cssClass) && updatedCssClassValue !== "") {
        addClass([this.uploadWrapper], updatedCssClassValue.split(updatedCssClassValue.indexOf(",") > -1 ? "," : " "));
      }
      var updatedOldCssClass = oldCSSClass;
      if (!isNullOrUndefined(oldCSSClass)) {
        updatedOldCssClass = oldCSSClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(oldCSSClass) && updatedOldCssClass !== "") {
        removeClass([this.uploadWrapper], updatedOldCssClass.split(" "));
      }
    };
    Uploader2.prototype.wireEvents = function() {
      EventHandler.add(this.browseButton, "click", this.browseButtonClick, this);
      EventHandler.add(this.element, "change", this.onSelectFiles, this);
      EventHandler.add(document, "click", this.removeFocus, this);
      this.keyboardModule = new KeyboardEvents(this.uploadWrapper, {
        keyAction: this.keyActionHandler.bind(this),
        keyConfigs: this.keyConfigs,
        eventName: "keydown"
      });
      if (this.isForm) {
        EventHandler.add(this.formElement, "reset", this.resetForm, this);
      }
    };
    Uploader2.prototype.unWireEvents = function() {
      EventHandler.remove(this.browseButton, "click", this.browseButtonClick);
      EventHandler.remove(this.element, "change", this.onSelectFiles);
      EventHandler.remove(document, "click", this.removeFocus);
      if (this.isForm) {
        EventHandler.remove(this.formElement, "reset", this.resetForm);
      }
      if (this.keyboardModule) {
        this.keyboardModule.destroy();
      }
    };
    Uploader2.prototype.resetForm = function() {
      this.clearAll();
    };
    Uploader2.prototype.keyActionHandler = function(e) {
      var targetElement2 = e.target;
      switch (e.action) {
        case "enter":
          if (e.target === this.clearButton) {
            this.clearButtonClick();
          } else if (e.target === this.uploadButton) {
            this.uploadButtonClick();
          } else if (e.target === this.browseButton) {
            this.browseButtonClick();
          } else if (targetElement2.classList.contains(PAUSE_UPLOAD)) {
            var metaData = this.getCurrentMetaData(null, e);
            metaData.file.statusCode = "4";
            metaData.file.status = this.localizedTexts("pauseUpload");
            this.abortUpload(metaData, false);
          } else if (targetElement2.classList.contains(RESUME_UPLOAD)) {
            this.resumeUpload(this.getCurrentMetaData(null, e), e);
          } else if (targetElement2.classList.contains(RETRY_ICON)) {
            var metaData = this.getCurrentMetaData(null, e);
            if (!isNullOrUndefined(metaData)) {
              metaData.file.statusCode = "1";
              metaData.file.status = this.localizedTexts("readyToUploadMessage");
              this.chunkUpload(metaData.file);
            } else {
              var target = e.target.parentElement;
              var fileData = this.filesData[this.fileList.indexOf(target)];
              this.retry(fileData);
            }
          } else {
            this.removeFiles(e);
            if (!targetElement2.classList.contains(ABORT_ICON)) {
              this.browseButton.focus();
            }
          }
          e.preventDefault();
          e.stopPropagation();
          break;
      }
    };
    Uploader2.prototype.getCurrentMetaData = function(fileInfo, e) {
      var fileData;
      var targetMetaData;
      if (isNullOrUndefined(fileInfo)) {
        var target = e.target.parentElement;
        fileData = this.filesData[this.fileList.indexOf(target)];
      } else {
        fileData = fileInfo;
      }
      for (var i = 0; i < this.uploadMetaData.length; i++) {
        if (this.uploadMetaData[i].file.name === fileData.name) {
          targetMetaData = this.uploadMetaData[i];
        }
      }
      return targetMetaData;
    };
    Uploader2.prototype.removeFocus = function() {
      if (this.uploadWrapper && this.listParent && this.listParent.querySelector("." + ICON_FOCUSED)) {
        document.activeElement.blur();
        this.listParent.querySelector("." + ICON_FOCUSED).classList.remove(ICON_FOCUSED);
      }
    };
    Uploader2.prototype.browseButtonClick = function() {
      this.element.click();
    };
    Uploader2.prototype.uploadButtonClick = function() {
      if (this.sequentialUpload) {
        this.sequenceUpload(this.filesData);
      } else {
        this.upload(this.filesData);
      }
    };
    Uploader2.prototype.clearButtonClick = function() {
      this.clearAll();
      if (this.sequentialUpload) {
        this.count = -1;
      }
      this.actionCompleteCount = 0;
    };
    Uploader2.prototype.bindDropEvents = function() {
      if (this.dropZoneElement) {
        EventHandler.add(this.dropZoneElement, "drop", this.dropElement, this);
        EventHandler.add(this.dropZoneElement, "dragover", this.dragHover, this);
        EventHandler.add(this.dropZoneElement, "dragleave", this.onDragLeave, this);
        EventHandler.add(this.dropZoneElement, "paste", this.onPasteFile, this);
        EventHandler.add(this.dropZoneElement, "dragenter", this.onDragEnter, this);
      }
    };
    Uploader2.prototype.unBindDropEvents = function() {
      if (this.dropZoneElement) {
        EventHandler.remove(this.dropZoneElement, "drop", this.dropElement);
        EventHandler.remove(this.dropZoneElement, "dragover", this.dragHover);
        EventHandler.remove(this.dropZoneElement, "dragleave", this.onDragLeave);
        EventHandler.remove(this.dropZoneElement, "dragenter", this.onDragEnter);
      }
    };
    Uploader2.prototype.onDragEnter = function(e) {
      if (!this.enabled) {
        return;
      }
      this.dropZoneElement.classList.add(DRAG_HOVER);
      this.dragCounter = this.dragCounter + 1;
      e.preventDefault();
      e.stopPropagation();
    };
    Uploader2.prototype.onDragLeave = function() {
      if (!this.enabled) {
        return;
      }
      this.dragCounter = this.dragCounter - 1;
      if (!this.dragCounter) {
        this.dropZoneElement.classList.remove(DRAG_HOVER);
      }
    };
    Uploader2.prototype.dragHover = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.dropEffect !== "Default") {
        e.dataTransfer.dropEffect = this.dropEffect.toLowerCase();
      }
      e.preventDefault();
      e.stopPropagation();
    };
    Uploader2.prototype.dropElement = function(e) {
      this.dragCounter = 0;
      this.dropZoneElement.classList.remove(DRAG_HOVER);
      this.onSelectFiles(e);
      e.preventDefault();
      e.stopPropagation();
    };
    Uploader2.prototype.onPasteFile = function(event) {
      var item = event.clipboardData.items;
      if (item.length !== 1) {
        return;
      }
      var pasteFile = [].slice.call(item)[0];
      if (pasteFile.kind === "file" && pasteFile.type.match("^image/")) {
        this.renderSelectedFiles(event, [pasteFile.getAsFile()], false, true);
      }
    };
    Uploader2.prototype.getSelectedFiles = function(index) {
      var data = [];
      var liElement = this.fileList[index];
      var allFiles = this.getFilesData();
      var nameElements = +liElement.getAttribute("data-files-count");
      var startIndex = 0;
      for (var i = 0; i < index; i++) {
        startIndex += +this.fileList[i].getAttribute("data-files-count");
      }
      for (var j = startIndex; j < startIndex + nameElements; j++) {
        data.push(allFiles[j]);
      }
      return data;
    };
    Uploader2.prototype.removeFiles = function(args) {
      if (!this.enabled) {
        return;
      }
      var selectedElement = args.target.parentElement;
      var index = this.fileList.indexOf(selectedElement);
      var liElement = this.fileList[index];
      var formUpload = this.isFormUpload();
      var fileData = formUpload ? this.getSelectedFiles(index) : this.getFilesInArray(this.filesData[index]);
      if (isNullOrUndefined(fileData)) {
        return;
      }
      if (args.target.classList.contains(ABORT_ICON) && !formUpload) {
        fileData[0].statusCode = "5";
        if (!isNullOrUndefined(liElement)) {
          var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
          createSpinner({ target: spinnerTarget, width: "20px" });
          showSpinner(spinnerTarget);
        }
        if (this.sequentialUpload) {
          this.uploadSequential();
        }
        if (!liElement.classList.contains(RESTRICT_RETRY)) {
          this.checkActionComplete(true);
        }
      } else if (!closest(args.target, "." + SPINNER_PANE)) {
        this.remove(fileData, false, false, true, args);
      }
      this.element.value = "";
      this.checkActionButtonStatus();
    };
    Uploader2.prototype.removeFilesData = function(file, customTemplate) {
      var index;
      if (customTemplate) {
        if (!this.showFileList) {
          index = this.filesData.indexOf(file);
          this.filesData.splice(index, 1);
        }
        return;
      }
      var selectedElement = this.getLiElement(file);
      if (isNullOrUndefined(selectedElement)) {
        return;
      }
      detach(selectedElement);
      index = this.fileList.indexOf(selectedElement);
      this.fileList.splice(index, 1);
      this.filesData.splice(index, 1);
      if (this.fileList.length === 0 && !isNullOrUndefined(this.listParent)) {
        detach(this.listParent);
        this.listParent = null;
        this.removeActionButtons();
      }
      if (this.sequentialUpload) {
        if (index <= this.count) {
          --this.count;
        }
      }
    };
    Uploader2.prototype.removeUploadedFile = function(file, eventArgs, removeDirectly, custom) {
      var _this = this;
      var selectedFiles = file;
      var ajax = new Ajax(this.asyncSettings.removeUrl, "POST", true, null);
      ajax.emitError = false;
      var formData = new FormData();
      ajax.beforeSend = function(e) {
        eventArgs.currentRequest = ajax.httpRequest;
        if (!removeDirectly) {
          _this.trigger("removing", eventArgs, function(eventArgs2) {
            if (eventArgs2.cancel) {
              e.cancel = true;
            } else {
              _this.removingEventCallback(eventArgs2, formData, selectedFiles, file);
            }
          });
        } else {
          _this.removingEventCallback(eventArgs, formData, selectedFiles, file);
        }
      };
      ajax.onLoad = function(e) {
        _this.removeCompleted(e, selectedFiles, custom);
        return {};
      };
      ajax.onError = function(e) {
        _this.removeFailed(e, selectedFiles, custom);
        return {};
      };
      ajax.send(formData);
    };
    Uploader2.prototype.removingEventCallback = function(eventArgs, formData, selectedFiles, file) {
      var name = this.element.getAttribute("name");
      var liElement = this.getLiElement(file);
      if (!isNullOrUndefined(liElement) && (!isNullOrUndefined(liElement.querySelector("." + DELETE_ICON)) || !isNullOrUndefined(liElement.querySelector("." + REMOVE_ICON)))) {
        var spinnerTarget = liElement.querySelector("." + DELETE_ICON) ? liElement.querySelector("." + DELETE_ICON) : liElement.querySelector("." + REMOVE_ICON);
        createSpinner({ target: spinnerTarget, width: "20px" });
        showSpinner(spinnerTarget);
      }
      if (eventArgs.postRawFile && !isNullOrUndefined(selectedFiles.rawFile) && selectedFiles.rawFile !== "") {
        formData.append(name, selectedFiles.rawFile, selectedFiles.name);
      } else {
        formData.append(name, selectedFiles.name);
      }
      this.updateFormData(formData, eventArgs.customFormData);
    };
    Uploader2.prototype.updateFormData = function(formData, customData) {
      if (customData.length > 0 && customData[0]) {
        var _loop_1 = function(i2) {
          var data = customData[i2];
          var value = Object.keys(data).map(function(e) {
            return data[e];
          });
          formData.append(Object.keys(data)[0], value);
        };
        for (var i = 0; i < customData.length; i++) {
          _loop_1(i);
        }
      }
    };
    Uploader2.prototype.updateCustomheader = function(request, currentRequest) {
      if (currentRequest.length > 0 && currentRequest[0]) {
        var _loop_2 = function(i2) {
          var data = currentRequest[i2];
          var value = Object.keys(data).map(function(e) {
            return data[e];
          });
          request.setRequestHeader(Object.keys(data)[0], value);
        };
        for (var i = 0; i < currentRequest.length; i++) {
          _loop_2(i);
        }
      }
    };
    Uploader2.prototype.removeCompleted = function(e, files, customTemplate) {
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var status = e.target;
      if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
        var args = {
          e,
          response,
          operation: "remove",
          file: this.updateStatus(files, this.localizedTexts("removedSuccessMessage"), "2")
        };
        this.trigger("success", args);
        this.removeFilesData(files, customTemplate);
        var index = this.uploadedFilesData.indexOf(files);
        this.uploadedFilesData.splice(index, 1);
        this.trigger("change", { files: this.uploadedFilesData });
      } else {
        this.removeFailed(e, files, customTemplate);
      }
    };
    Uploader2.prototype.removeFailed = function(e, files, customTemplate) {
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var args = {
        e,
        response,
        operation: "remove",
        file: this.updateStatus(files, this.localizedTexts("removedFailedMessage"), "0")
      };
      if (!customTemplate) {
        var index = this.filesData.indexOf(files);
        var rootElement = this.fileList[index];
        if (rootElement) {
          rootElement.classList.remove(UPLOAD_SUCCESS);
          rootElement.classList.add(UPLOAD_FAILED);
          var statusElement = rootElement.querySelector("." + STATUS);
          if (statusElement) {
            statusElement.classList.remove(UPLOAD_SUCCESS);
            statusElement.classList.add(UPLOAD_FAILED);
          }
        }
        this.checkActionButtonStatus();
      }
      this.trigger("failure", args);
      var liElement = this.getLiElement(files);
      if (!isNullOrUndefined(liElement) && !isNullOrUndefined(liElement.querySelector("." + DELETE_ICON))) {
        var spinnerTarget = liElement.querySelector("." + DELETE_ICON);
        hideSpinner(spinnerTarget);
        detach(liElement.querySelector(".e-spinner-pane"));
      }
    };
    Uploader2.prototype.getFilesFromFolder = function(event) {
      this.filesEntries = [];
      var items = this.multiple ? event.dataTransfer.items : [event.dataTransfer.items[0]];
      var validDirectoryUpload = this.checkDirectoryUpload(items);
      if (!validDirectoryUpload) {
        return;
      }
      var _loop_3 = function(i2) {
        var item = items[i2].webkitGetAsEntry();
        if (item.isFile) {
          var files_2 = [];
          item.file(function(fileObj) {
            var path = item.fullPath;
            files_2.push({ "path": path, "file": fileObj });
          });
          this_1.renderSelectedFiles(event, files_2, true);
        } else if (item.isDirectory) {
          this_1.traverseFileTree(item, event);
        }
      };
      var this_1 = this;
      for (var i = 0; i < items.length; i++) {
        _loop_3(i);
      }
    };
    Uploader2.prototype.checkDirectoryUpload = function(items) {
      for (var i = 0; items && i < items.length; i++) {
        var item = items[i].webkitGetAsEntry();
        if (item.isDirectory) {
          return true;
        }
      }
      return false;
    };
    Uploader2.prototype.traverseFileTree = function(item, event) {
      if (item.isFile) {
        this.filesEntries.push(item);
      } else if (item.isDirectory) {
        var directoryReader = item.createReader();
        this.readFileFromDirectory(directoryReader, event);
      }
    };
    Uploader2.prototype.readFileFromDirectory = function(directoryReader, event) {
      var _this = this;
      directoryReader.readEntries(function(entries) {
        for (var i = 0; i < entries.length; i++) {
          _this.traverseFileTree(entries[i], event);
        }
        _this.pushFilesEntries(event);
        if (entries.length) {
          _this.readFileFromDirectory(directoryReader);
        }
      });
    };
    Uploader2.prototype.pushFilesEntries = function(event) {
      var _this = this;
      var files = [];
      var _loop_4 = function(i2) {
        this_2.filesEntries[i2].file(function(fileObj) {
          if (_this.filesEntries.length) {
            var path = _this.filesEntries[i2].fullPath;
            files.push({ "path": path, "file": fileObj });
            if (i2 === _this.filesEntries.length - 1) {
              _this.filesEntries = [];
              _this.renderSelectedFiles(event, files, true);
            }
          }
        });
      };
      var this_2 = this;
      for (var i = 0; i < this.filesEntries.length; i++) {
        _loop_4(i);
      }
    };
    Uploader2.prototype.onSelectFiles = function(args) {
      if (!this.enabled) {
        return;
      }
      var targetFiles;
      if (args.type === "drop") {
        if (this.directoryUpload) {
          this.getFilesFromFolder(args);
        } else {
          var files = this.sortFilesList = args.dataTransfer.files;
          if (this.browserName !== "msie" && this.browserName !== "edge" && this.browserName !== "safari") {
            this.element.files = files;
          }
          if (files.length > 0) {
            targetFiles = this.multiple ? this.sortFileList(files) : [files[0]];
            this.renderSelectedFiles(args, targetFiles);
          }
        }
      } else {
        targetFiles = [].slice.call(args.target.files);
        this.renderSelectedFiles(args, targetFiles);
      }
    };
    Uploader2.prototype.getBase64 = function(file) {
      return new Promise(function(resolve, reject) {
        var fileReader = new FileReader();
        fileReader.readAsDataURL(file);
        fileReader.onload = function() {
          return resolve(fileReader.result);
        };
        fileReader.onerror = function(error) {
          return reject(error);
        };
      });
    };
    Uploader2.prototype.renderSelectedFiles = function(args, targetFiles, directory, paste) {
      var _this = this;
      this.base64String = [];
      var eventArgs = {
        event: args,
        cancel: false,
        filesData: [],
        isModified: false,
        modifiedFilesData: [],
        progressInterval: "",
        isCanceled: false,
        currentRequest: null,
        customFormData: null
      };
      if (targetFiles.length < 1) {
        eventArgs.isCanceled = true;
        this.trigger("selected", eventArgs);
        return;
      }
      this.flag = true;
      var fileData = [];
      if (!this.multiple) {
        this.clearData(true);
        targetFiles = [targetFiles[0]];
      }
      for (var i = 0; i < targetFiles.length; i++) {
        var file = directory ? targetFiles[i].file : targetFiles[i];
        this.updateInitialFileDetails(args, targetFiles, file, i, fileData, directory, paste);
      }
      eventArgs.filesData = fileData;
      if (this.allowedExtensions.indexOf("*") > -1) {
        this.allTypes = true;
      }
      if (!this.allTypes) {
        fileData = this.checkExtension(fileData);
      }
      this.trigger("selected", eventArgs, function(eventArgs2) {
        _this._internalRenderSelect(eventArgs2, fileData);
      });
    };
    Uploader2.prototype.updateInitialFileDetails = function(args, targetFiles, file, i, fileData, directory, paste) {
      var fileName = directory ? targetFiles[i].path.substring(1, targetFiles[i].path.length) : paste ? getUniqueID(file.name.substring(0, file.name.lastIndexOf("."))) + "." + this.getFileType(file.name) : this.directoryUpload ? targetFiles[i].webkitRelativePath : file.name;
      var fileDetails = {
        name: fileName,
        rawFile: file,
        size: file.size,
        status: this.localizedTexts("readyToUploadMessage"),
        type: this.getFileType(file.name),
        validationMessages: this.validatedFileSize(file.size),
        statusCode: "1",
        id: getUniqueID(file.name.substring(0, file.name.lastIndexOf("."))) + "." + this.getFileType(file.name)
      };
      if (paste) {
        fileDetails.fileSource = "paste";
      }
      fileDetails.status = fileDetails.validationMessages.minSize !== "" ? this.localizedTexts("invalidMinFileSize") : fileDetails.validationMessages.maxSize !== "" ? this.localizedTexts("invalidMaxFileSize") : fileDetails.status;
      if (fileDetails.validationMessages.minSize !== "" || fileDetails.validationMessages.maxSize !== "") {
        fileDetails.statusCode = "0";
      }
      fileData.push(fileDetails);
    };
    Uploader2.prototype._internalRenderSelect = function(eventArgs, fileData) {
      if (!eventArgs.cancel) {
        this.selectedFiles = this.selectedFiles.concat(fileData);
        this.btnTabIndex = this.disableKeyboardNavigation ? "-1" : "0";
        if (this.showFileList) {
          if (eventArgs.isModified && eventArgs.modifiedFilesData.length > 0) {
            for (var j = 0; j < eventArgs.modifiedFilesData.length; j++) {
              for (var k = 0; k < fileData.length; k++) {
                if (eventArgs.modifiedFilesData[j].id === fileData[k].id) {
                  eventArgs.modifiedFilesData[j].rawFile = fileData[k].rawFile;
                }
              }
            }
            var dataFiles = this.allTypes ? eventArgs.modifiedFilesData : this.checkExtension(eventArgs.modifiedFilesData);
            this.updateSortedFileList(dataFiles);
            this.filesData = dataFiles;
            if (!this.isForm || this.allowUpload()) {
              this.checkAutoUpload(dataFiles);
            }
          } else {
            this.createFileList(fileData, true);
            this.filesData = this.filesData.concat(fileData);
            if (!this.isForm || this.allowUpload()) {
              this.checkAutoUpload(fileData);
            }
          }
          if (!isNullOrUndefined(eventArgs.progressInterval) && eventArgs.progressInterval !== "") {
            this.progressInterval = eventArgs.progressInterval;
          }
        } else {
          this.filesData = this.filesData.concat(fileData);
          if (this.autoUpload) {
            this.upload(this.filesData, true);
          }
        }
        this.raiseActionComplete();
        this.isFirstFileOnSelection = true;
      }
    };
    Uploader2.prototype.allowUpload = function() {
      var allowFormUpload = false;
      if (this.isForm && (!isNullOrUndefined(this.asyncSettings.saveUrl) && this.asyncSettings.saveUrl !== "")) {
        allowFormUpload = true;
      }
      return allowFormUpload;
    };
    Uploader2.prototype.isFormUpload = function() {
      var isFormUpload = false;
      if (this.isForm && ((isNullOrUndefined(this.asyncSettings.saveUrl) || this.asyncSettings.saveUrl === "") && (isNullOrUndefined(this.asyncSettings.removeUrl) || this.asyncSettings.removeUrl === ""))) {
        isFormUpload = true;
      }
      return isFormUpload;
    };
    Uploader2.prototype.clearData = function(singleUpload) {
      if (!isNullOrUndefined(this.listParent)) {
        detach(this.listParent);
        this.listParent = null;
      }
      if (this.browserName !== "msie" && !singleUpload) {
        this.element.value = "";
      }
      this.fileList = [];
      this.filesData = [];
      this.removeActionButtons();
    };
    Uploader2.prototype.updateSortedFileList = function(filesData) {
      var previousListClone = this.createElement("div", { id: "clonewrapper" });
      var added = -1;
      var removedList;
      if (this.listParent) {
        for (var i = 0; i < this.listParent.querySelectorAll("li").length; i++) {
          var liElement = this.listParent.querySelectorAll("li")[i];
          previousListClone.appendChild(liElement.cloneNode(true));
        }
        removedList = this.listParent.querySelectorAll("li");
        for (var _i = 0, removedList_1 = removedList; _i < removedList_1.length; _i++) {
          var item = removedList_1[_i];
          detach(item);
        }
        this.removeActionButtons();
        var oldList = [].slice.call(previousListClone.childNodes);
        detach(this.listParent);
        this.listParent = null;
        this.fileList = [];
        this.createParentUL();
        for (var index = 0; index < filesData.length; index++) {
          for (var j = 0; j < this.filesData.length; j++) {
            if (this.filesData[j].name === filesData[index].name) {
              this.listParent.appendChild(oldList[j]);
              EventHandler.add(oldList[j].querySelector(".e-icons"), "click", this.removeFiles, this);
              this.fileList.push(oldList[j]);
              added = index;
            }
          }
          if (added !== index) {
            this.createFileList([filesData[index]]);
          }
        }
      } else {
        this.createFileList(filesData);
      }
    };
    Uploader2.prototype.isBlank = function(str) {
      return !str || /^\s*$/.test(str);
    };
    Uploader2.prototype.checkExtension = function(files) {
      var dropFiles = files;
      if (!this.isBlank(this.allowedExtensions)) {
        var allowedExtensions = [];
        var extensions = this.allowedExtensions.split(",");
        for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
          var extension = extensions_1[_i];
          allowedExtensions.push(extension.trim().toLocaleLowerCase());
        }
        for (var i = 0; i < files.length; i++) {
          if (allowedExtensions.indexOf(("." + files[i].type).toLocaleLowerCase()) === -1) {
            files[i].status = this.localizedTexts("invalidFileType");
            files[i].statusCode = "0";
          }
        }
      }
      return dropFiles;
    };
    Uploader2.prototype.validatedFileSize = function(fileSize) {
      var minSizeError = "";
      var maxSizeError = "";
      if (fileSize < this.minFileSize) {
        minSizeError = this.localizedTexts("invalidMinFileSize");
      } else if (fileSize > this.maxFileSize) {
        maxSizeError = this.localizedTexts("invalidMaxFileSize");
      } else {
        minSizeError = "";
        maxSizeError = "";
      }
      var errorMessage = { minSize: minSizeError, maxSize: maxSizeError };
      return errorMessage;
    };
    Uploader2.prototype.isPreLoadFile = function(fileData) {
      var isPreload = false;
      for (var i = 0; i < this.files.length; i++) {
        if (this.files[i].name === fileData.name.slice(0, fileData.name.lastIndexOf(".")) && this.files[i].type === fileData.type) {
          isPreload = true;
        }
      }
      return isPreload;
    };
    Uploader2.prototype.createCustomfileList = function(fileData) {
      this.createParentUL();
      for (var _i = 0, fileData_1 = fileData; _i < fileData_1.length; _i++) {
        var listItem = fileData_1[_i];
        var listElement = this.createElement("li", { className: FILE, attrs: { "data-file-name": listItem.name } });
        this.uploadTemplateFn = this.templateComplier(this.template);
        var liTempCompiler = this.uploadTemplateFn(listItem, this, "template", this.element.id + "Template", this.isStringTemplate, null, listElement);
        if (liTempCompiler) {
          var fromElements = [].slice.call(liTempCompiler);
          append(fromElements, listElement);
        }
        var index = fileData.indexOf(listItem);
        var eventArgs = {
          element: listElement,
          fileInfo: listItem,
          index,
          isPreload: this.isPreLoadFile(listItem)
        };
        var eventsArgs = {
          element: listElement,
          fileInfo: listItem,
          index,
          isPreload: this.isPreLoadFile(listItem)
        };
        this.trigger("rendering", eventArgs);
        this.trigger("fileListRendering", eventsArgs);
        this.listParent.appendChild(listElement);
        this.fileList.push(listElement);
      }
      this.renderReactTemplates();
    };
    Uploader2.prototype.createParentUL = function() {
      if (isNullOrUndefined(this.listParent)) {
        this.listParent = this.createElement("ul", { className: LIST_PARENT });
        this.uploadWrapper.appendChild(this.listParent);
      }
    };
    Uploader2.prototype.formFileList = function(fileData, files) {
      var fileList = this.createElement("li", { className: FILE });
      fileList.setAttribute("data-files-count", fileData.length + "");
      var fileContainer = this.createElement("span", { className: TEXT_CONTAINER });
      var statusMessage;
      for (var _i = 0, fileData_2 = fileData; _i < fileData_2.length; _i++) {
        var listItem = fileData_2[_i];
        var fileNameEle = this.createElement("span", { className: FILE_NAME });
        fileNameEle.innerHTML = this.getFileNameOnly(listItem.name);
        var fileTypeEle = this.createElement("span", { className: FILE_TYPE });
        var fileType = this.getFileType(listItem.name);
        fileTypeEle.innerHTML = "." + fileType;
        if (!fileType) {
          fileTypeEle.classList.add("e-hidden");
        }
        if (!this.enableRtl) {
          fileContainer.appendChild(fileNameEle);
          fileContainer.appendChild(fileTypeEle);
        } else {
          var rtlContainer = this.createElement("span", { className: RTL_CONTAINER });
          rtlContainer.appendChild(fileTypeEle);
          rtlContainer.appendChild(fileNameEle);
          fileContainer.appendChild(rtlContainer);
        }
        this.truncateName(fileNameEle);
        statusMessage = this.formValidateFileInfo(listItem, fileList);
      }
      fileList.appendChild(fileContainer);
      this.setListToFileInfo(fileData, fileList);
      var index = this.listParent.querySelectorAll("li").length;
      var infoEle = this.createElement("span");
      if (fileList.classList.contains(INVALID_FILE)) {
        infoEle.classList.add(STATUS);
        infoEle.classList.add(INVALID_FILE);
        infoEle.innerText = fileData.length > 1 ? this.localizedTexts("invalidFileSelection") : statusMessage;
      } else {
        infoEle.classList.add(fileData.length > 1 ? INFORMATION : FILE_SIZE);
        infoEle.innerText = fileData.length > 1 ? this.localizedTexts("totalFiles") + ": " + fileData.length + " , " + this.localizedTexts("size") + ": " + this.bytesToSize(this.getFileSize(fileData)) : this.bytesToSize(fileData[0].size);
        this.createFormInput(fileData);
      }
      fileContainer.appendChild(infoEle);
      if (isNullOrUndefined(fileList.querySelector(".e-icons"))) {
        var iconElement = this.createElement("span", { className: "e-icons", attrs: { "tabindex": this.btnTabIndex } });
        if (this.browserName === "msie") {
          iconElement.classList.add("e-msie");
        }
        iconElement.setAttribute("title", this.localizedTexts("remove"));
        fileList.appendChild(fileContainer);
        fileList.appendChild(iconElement);
        EventHandler.add(iconElement, "click", this.removeFiles, this);
        iconElement.classList.add(REMOVE_ICON);
      }
      var eventArgs = {
        element: fileList,
        fileInfo: this.mergeFileInfo(fileData, fileList),
        index,
        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
      };
      var eventsArgs = {
        element: fileList,
        fileInfo: this.mergeFileInfo(fileData, fileList),
        index,
        isPreload: this.isPreLoadFile(this.mergeFileInfo(fileData, fileList))
      };
      this.trigger("rendering", eventArgs);
      this.trigger("fileListRendering", eventsArgs);
      this.listParent.appendChild(fileList);
      this.fileList.push(fileList);
    };
    Uploader2.prototype.formValidateFileInfo = function(listItem, fileList) {
      var statusMessage = listItem.status;
      var validationMessages = this.validatedFileSize(listItem.size);
      if (validationMessages.minSize !== "" || validationMessages.maxSize !== "") {
        this.addInvalidClass(fileList);
        statusMessage = validationMessages.minSize !== "" ? this.localizedTexts("invalidMinFileSize") : validationMessages.maxSize !== "" ? this.localizedTexts("invalidMaxFileSize") : statusMessage;
      }
      var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;
      if (typeValidationMessage === this.localizedTexts("invalidFileType")) {
        this.addInvalidClass(fileList);
        statusMessage = typeValidationMessage;
      }
      return statusMessage;
    };
    Uploader2.prototype.addInvalidClass = function(fileList) {
      fileList.classList.add(INVALID_FILE);
    };
    Uploader2.prototype.createFormInput = function(fileData) {
      var inputElement = this.element.cloneNode(true);
      inputElement.classList.add(HIDDEN_INPUT);
      for (var _i = 0, fileData_3 = fileData; _i < fileData_3.length; _i++) {
        var listItem = fileData_3[_i];
        listItem.input = inputElement;
      }
      inputElement.setAttribute("name", this.uploaderName);
      this.uploadWrapper.querySelector("." + INPUT_WRAPPER).appendChild(inputElement);
      if (this.browserName !== "msie" && this.browserName !== "edge") {
        this.element.value = "";
      }
    };
    Uploader2.prototype.getFileSize = function(fileData) {
      var fileSize = 0;
      for (var _i = 0, fileData_4 = fileData; _i < fileData_4.length; _i++) {
        var file = fileData_4[_i];
        fileSize += file.size;
      }
      return fileSize;
    };
    Uploader2.prototype.mergeFileInfo = function(fileData, fileList) {
      var result = {
        name: "",
        rawFile: "",
        size: 0,
        status: "",
        type: "",
        validationMessages: { minSize: "", maxSize: "" },
        statusCode: "1",
        list: fileList
      };
      var fileNames = [];
      var type = "";
      for (var _i = 0, fileData_5 = fileData; _i < fileData_5.length; _i++) {
        var listItem = fileData_5[_i];
        fileNames.push(listItem.name);
        type = listItem.type;
      }
      result.name = fileNames.join(", ");
      result.size = this.getFileSize(fileData);
      result.type = type;
      result.status = this.statusForFormUpload(fileData, fileList);
      return result;
    };
    Uploader2.prototype.statusForFormUpload = function(fileData, fileList) {
      var isValid = true;
      var statusMessage;
      for (var _i = 0, fileData_6 = fileData; _i < fileData_6.length; _i++) {
        var listItem = fileData_6[_i];
        statusMessage = listItem.status;
        var validationMessages = this.validatedFileSize(listItem.size);
        if (validationMessages.minSize !== "" || validationMessages.maxSize !== "") {
          isValid = false;
          statusMessage = validationMessages.minSize !== "" ? this.localizedTexts("invalidMinFileSize") : validationMessages.maxSize !== "" ? this.localizedTexts("invalidMaxFileSize") : statusMessage;
        }
        var typeValidationMessage = this.checkExtension(this.getFilesInArray(listItem))[0].status;
        if (typeValidationMessage === this.localizedTexts("invalidFileType")) {
          isValid = false;
          statusMessage = typeValidationMessage;
        }
      }
      if (!isValid) {
        fileList.classList.add(INVALID_FILE);
        statusMessage = fileData.length > 1 ? this.localizedTexts("invalidFileSelection") : statusMessage;
      } else {
        statusMessage = this.localizedTexts("totalFiles") + ": " + fileData.length + " , " + this.localizedTexts("size") + ": " + this.bytesToSize(this.getFileSize(fileData));
      }
      return statusMessage;
    };
    Uploader2.prototype.formCustomFileList = function(fileData, files) {
      this.createParentUL();
      var fileList = this.createElement("li", { className: FILE });
      fileList.setAttribute("data-files-count", fileData.length + "");
      this.setListToFileInfo(fileData, fileList);
      var result = this.mergeFileInfo(fileData, fileList);
      fileList.setAttribute("data-file-name", result.name);
      this.uploadTemplateFn = this.templateComplier(this.template);
      var liTempCompiler = this.uploadTemplateFn(result, this, "template", this.element.id + "Template", this.isStringTemplate, null, fileList);
      if (liTempCompiler) {
        var fromElements = [].slice.call(liTempCompiler);
        append(fromElements, fileList);
      }
      var index = this.listParent.querySelectorAll("li").length;
      if (!fileList.classList.contains(INVALID_FILE)) {
        this.createFormInput(fileData);
      }
      var eventArgs = {
        element: fileList,
        fileInfo: result,
        index,
        isPreload: this.isPreLoadFile(result)
      };
      var eventsArgs = {
        element: fileList,
        fileInfo: result,
        index,
        isPreload: this.isPreLoadFile(result)
      };
      this.trigger("rendering", eventArgs);
      this.trigger("fileListRendering", eventsArgs);
      this.listParent.appendChild(fileList);
      this.fileList.push(fileList);
      this.renderReactTemplates();
    };
    Uploader2.prototype.createFileList = function(fileData, isSelectedFile) {
      this.createParentUL();
      if (this.template !== "" && !isNullOrUndefined(this.template)) {
        if (this.isFormUpload()) {
          this.uploadWrapper.classList.add(FORM_UPLOAD);
          this.formCustomFileList(fileData, this.element.files);
        } else {
          this.createCustomfileList(fileData);
        }
      } else if (this.isFormUpload()) {
        this.uploadWrapper.classList.add(FORM_UPLOAD);
        this.formFileList(fileData, this.element.files);
      } else {
        for (var _i = 0, fileData_7 = fileData; _i < fileData_7.length; _i++) {
          var listItem = fileData_7[_i];
          var liElement = this.createElement("li", {
            className: FILE,
            attrs: { "data-file-name": listItem.name, "data-files-count": "1" }
          });
          var textContainer = this.createElement("span", { className: TEXT_CONTAINER });
          var textElement = this.createElement("span", { className: FILE_NAME, attrs: { "title": listItem.name } });
          textElement.innerHTML = this.getFileNameOnly(listItem.name);
          var fileExtension = this.createElement("span", { className: FILE_TYPE });
          var fileType = this.getFileType(listItem.name);
          fileExtension.innerHTML = "." + fileType;
          if (!fileType) {
            fileExtension.classList.add("e-hidden");
          }
          if (!this.enableRtl) {
            textContainer.appendChild(textElement);
            textContainer.appendChild(fileExtension);
          } else {
            var rtlContainer = this.createElement("span", { className: RTL_CONTAINER });
            rtlContainer.appendChild(fileExtension);
            rtlContainer.appendChild(textElement);
            textContainer.appendChild(rtlContainer);
          }
          var fileSize = this.createElement("span", { className: FILE_SIZE });
          fileSize.innerHTML = this.bytesToSize(listItem.size);
          textContainer.appendChild(fileSize);
          var statusElement = this.createElement("span", { className: STATUS });
          textContainer.appendChild(statusElement);
          statusElement.innerHTML = listItem.status;
          liElement.appendChild(textContainer);
          var iconElement = this.createElement("span", {
            className: " e-icons",
            attrs: { "tabindex": this.btnTabIndex }
          });
          if (this.browserName === "msie") {
            iconElement.classList.add("e-msie");
          }
          iconElement.setAttribute("title", this.localizedTexts("remove"));
          liElement.appendChild(iconElement);
          EventHandler.add(iconElement, "click", this.removeFiles, this);
          if (listItem.statusCode === "2") {
            statusElement.classList.add(UPLOAD_SUCCESS);
            iconElement.classList.add(DELETE_ICON);
            iconElement.setAttribute("title", this.localizedTexts("delete"));
          } else if (listItem.statusCode !== "1") {
            statusElement.classList.remove(UPLOAD_SUCCESS);
            statusElement.classList.add(VALIDATION_FAILS);
          }
          if (this.autoUpload && listItem.statusCode === "1" && this.asyncSettings.saveUrl !== "") {
            statusElement.innerHTML = "";
          }
          if (!iconElement.classList.contains(DELETE_ICON)) {
            iconElement.classList.add(REMOVE_ICON);
          }
          var index = fileData.indexOf(listItem);
          var eventArgs = {
            element: liElement,
            fileInfo: listItem,
            index,
            isPreload: this.isPreLoadFile(listItem)
          };
          var eventsArgs = {
            element: liElement,
            fileInfo: listItem,
            index,
            isPreload: this.isPreLoadFile(listItem)
          };
          this.trigger("rendering", eventArgs);
          this.trigger("fileListRendering", eventsArgs);
          this.listParent.appendChild(liElement);
          this.fileList.push(liElement);
          this.truncateName(textElement);
          var preventActionComplete = this.flag;
          if (this.isPreLoadFile(listItem)) {
            this.flag = false;
            this.checkActionComplete(true);
            this.flag = preventActionComplete;
          }
        }
      }
    };
    Uploader2.prototype.getSlicedName = function(nameElement) {
      var text = nameElement.textContent;
      nameElement.dataset.tail = text.slice(text.length - 10);
    };
    Uploader2.prototype.setListToFileInfo = function(fileData, fileList) {
      for (var _i = 0, fileData_8 = fileData; _i < fileData_8.length; _i++) {
        var listItem = fileData_8[_i];
        listItem.list = fileList;
      }
    };
    Uploader2.prototype.truncateName = function(name) {
      var nameElement = name;
      if (this.browserName !== "edge" && nameElement.offsetWidth < nameElement.scrollWidth) {
        this.getSlicedName(nameElement);
      } else if (nameElement.offsetWidth + 1 < nameElement.scrollWidth) {
        this.getSlicedName(nameElement);
      }
    };
    Uploader2.prototype.getFileType = function(name) {
      var extension;
      var index = name.lastIndexOf(".");
      if (index >= 0) {
        extension = name.substring(index + 1);
      }
      return extension ? extension : "";
    };
    Uploader2.prototype.getFileNameOnly = function(name) {
      var type = this.getFileType(name);
      var names = name.split("." + type);
      return type = names[0];
    };
    Uploader2.prototype.setInitialAttributes = function() {
      if (this.initialAttr.accept) {
        this.element.setAttribute("accept", this.initialAttr.accept);
      }
      if (this.initialAttr.disabled) {
        this.element.setAttribute("disabled", "disabled");
      }
      if (this.initialAttr.multiple) {
        var newAttr = document.createAttribute("multiple");
        this.element.setAttributeNode(newAttr);
      }
    };
    Uploader2.prototype.filterfileList = function(files) {
      var filterFiles = [];
      var li;
      for (var i = 0; i < files.length; i++) {
        li = this.getLiElement(files[i]);
        if (!li.classList.contains(UPLOAD_SUCCESS)) {
          filterFiles.push(files[i]);
        }
      }
      return filterFiles;
    };
    Uploader2.prototype.updateStatus = function(files, status, statusCode, updateLiStatus) {
      if (updateLiStatus === void 0) {
        updateLiStatus = true;
      }
      if (!(status === "" || isNullOrUndefined(status)) && !(statusCode === "" || isNullOrUndefined(statusCode))) {
        files.status = status;
        files.statusCode = statusCode;
      }
      if (updateLiStatus) {
        var li = this.getLiElement(files);
        if (!isNullOrUndefined(li)) {
          if (!isNullOrUndefined(li.querySelector("." + STATUS)) && !(status === "" || isNullOrUndefined(status))) {
            li.querySelector("." + STATUS).textContent = status;
          }
        }
      }
      return files;
    };
    Uploader2.prototype.getLiElement = function(files) {
      var index;
      for (var i = 0; i < this.filesData.length; i++) {
        if (!isNullOrUndefined(files) && (!isNullOrUndefined(this.filesData[i].id) && !isNullOrUndefined(files.id) ? this.filesData[i].name === files.name && this.filesData[i].id === files.id : this.filesData[i].name === files.name)) {
          index = i;
        }
      }
      return this.fileList[index];
    };
    Uploader2.prototype.createProgressBar = function(liElement) {
      var progressbarWrapper = this.createElement("span", { className: PROGRESS_WRAPPER });
      var progressBar = this.createElement("progressbar", { className: PROGRESSBAR, attrs: { value: "0", max: "100" } });
      var progressbarInnerWrapper = this.createElement("span", { className: PROGRESS_INNER_WRAPPER });
      progressBar.setAttribute("style", "width: 0%");
      var progressbarText = this.createElement("span", { className: PROGRESSBAR_TEXT });
      progressbarText.textContent = "0%";
      progressbarInnerWrapper.appendChild(progressBar);
      progressbarWrapper.appendChild(progressbarInnerWrapper);
      progressbarWrapper.appendChild(progressbarText);
      liElement.querySelector("." + TEXT_CONTAINER).appendChild(progressbarWrapper);
    };
    Uploader2.prototype.updateProgressbar = function(e, li) {
      if (!isNaN(Math.round(e.loaded / e.total * 100)) && !isNullOrUndefined(li.querySelector("." + PROGRESSBAR))) {
        if (!isNullOrUndefined(this.progressInterval) && this.progressInterval !== "") {
          var value = Math.round(e.loaded / e.total * 100) % parseInt(this.progressInterval, 10);
          if (value === 0 || value === 100) {
            this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + "%");
          }
        } else {
          this.changeProgressValue(li, Math.round(e.loaded / e.total * 100).toString() + "%");
        }
      }
    };
    Uploader2.prototype.changeProgressValue = function(li, progressValue) {
      li.querySelector("." + PROGRESSBAR).setAttribute("style", "width:" + progressValue);
      li.querySelector("." + PROGRESSBAR_TEXT).textContent = progressValue;
    };
    Uploader2.prototype.uploadInProgress = function(e, files, customUI, request) {
      var li = this.getLiElement(files);
      if (isNullOrUndefined(li) && !customUI) {
        return;
      }
      if (!isNullOrUndefined(li)) {
        if (files.statusCode === "5") {
          this.cancelUploadingFile(files, e, request, li);
        }
        if (!(li.querySelectorAll("." + PROGRESS_WRAPPER).length > 0) && li.querySelector("." + STATUS)) {
          li.querySelector("." + STATUS).classList.add(UPLOAD_INPROGRESS);
          this.createProgressBar(li);
          this.updateProgressBarClasses(li, UPLOAD_INPROGRESS);
          li.querySelector("." + STATUS).classList.remove(UPLOAD_FAILED);
        }
        this.updateProgressbar(e, li);
        var iconEle = li.querySelector("." + REMOVE_ICON);
        if (!isNullOrUndefined(iconEle)) {
          iconEle.classList.add(ABORT_ICON, UPLOAD_INPROGRESS);
          iconEle.setAttribute("title", this.localizedTexts("abort"));
          iconEle.classList.remove(REMOVE_ICON);
        }
      } else {
        this.cancelUploadingFile(files, e, request);
      }
      var args = { e, operation: "upload", file: this.updateStatus(files, this.localizedTexts("inProgress"), "3") };
      this.trigger("progress", args);
    };
    Uploader2.prototype.cancelUploadingFile = function(files, e, request, li) {
      var _this = this;
      if (files.statusCode === "5") {
        var eventArgs = {
          event: e,
          fileData: files,
          cancel: false,
          customFormData: []
        };
        this.trigger("canceling", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            files.statusCode = "3";
            if (!isNullOrUndefined(li)) {
              var spinnerTarget = li.querySelector("." + ABORT_ICON);
              if (!isNullOrUndefined(spinnerTarget)) {
                hideSpinner(spinnerTarget);
                detach(li.querySelector(".e-spinner-pane"));
              }
            }
          } else {
            request.emitError = false;
            request.httpRequest.abort();
            var formData = new FormData();
            if (files.statusCode === "5") {
              var name_1 = _this.element.getAttribute("name");
              formData.append(name_1, files.name);
              formData.append("cancel-uploading", files.name);
              _this.updateFormData(formData, eventArgs2.customFormData);
              var ajax = new Ajax(_this.asyncSettings.removeUrl, "POST", true, null);
              ajax.emitError = false;
              ajax.onLoad = function(e2) {
                _this.removecanceledFile(e2, files);
                return {};
              };
              ajax.send(formData);
            }
          }
        });
      }
    };
    Uploader2.prototype.removecanceledFile = function(e, file) {
      var liElement = this.getLiElement(file);
      if (liElement.querySelector("." + RETRY_ICON) || isNullOrUndefined(liElement.querySelector("." + ABORT_ICON))) {
        return;
      }
      this.updateStatus(file, this.localizedTexts("fileUploadCancel"), "5");
      this.renderFailureState(e, file, liElement);
      var spinnerTarget = liElement.querySelector("." + REMOVE_ICON);
      if (!isNullOrUndefined(liElement)) {
        hideSpinner(spinnerTarget);
        if (!isNullOrUndefined(liElement.querySelector(".e-spinner-pane"))) {
          detach(liElement.querySelector(".e-spinner-pane"));
        }
      }
      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
      var args = { event: e, response: requestResponse, operation: "cancel", file };
      this.trigger("success", args);
    };
    Uploader2.prototype.renderFailureState = function(e, file, liElement) {
      var _this = this;
      this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
      this.removeProgressbar(liElement, "failure");
      if (!isNullOrUndefined(liElement.querySelector(".e-file-status"))) {
        liElement.querySelector(".e-file-status").classList.add(UPLOAD_FAILED);
      }
      var deleteIcon = liElement.querySelector("." + ABORT_ICON);
      if (isNullOrUndefined(deleteIcon)) {
        return;
      }
      deleteIcon.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
      deleteIcon.classList.add(REMOVE_ICON);
      deleteIcon.setAttribute("title", this.localizedTexts("remove"));
      this.pauseButton = this.createElement("span", { className: "e-icons e-file-reload-btn", attrs: { "tabindex": this.btnTabIndex } });
      deleteIcon.parentElement.insertBefore(this.pauseButton, deleteIcon);
      this.pauseButton.setAttribute("title", this.localizedTexts("retry"));
      var retryElement = liElement.querySelector("." + RETRY_ICON);
      retryElement.addEventListener("click", function(e2) {
        _this.reloadcanceledFile(e2, file, liElement, false);
      }, false);
    };
    Uploader2.prototype.reloadcanceledFile = function(e, file, liElement, custom) {
      file.statusCode = "1";
      file.status = this.localizedTexts("readyToUploadMessage");
      if (!custom) {
        if (!isNullOrUndefined(liElement.querySelector("." + STATUS))) {
          liElement.querySelector("." + STATUS).classList.remove(UPLOAD_FAILED);
        }
        if (!isNullOrUndefined(liElement.querySelector("." + RETRY_ICON))) {
          detach(liElement.querySelector("." + RETRY_ICON));
        }
        this.pauseButton = null;
      }
      liElement.classList.add(RESTRICT_RETRY);
      this.upload([file]);
    };
    Uploader2.prototype.uploadComplete = function(e, file, customUI) {
      var status = e.target;
      if (status.readyState === 4 && status.status >= 200 && status.status <= 299) {
        var li = this.getLiElement(file);
        if (isNullOrUndefined(li) && (!customUI || isNullOrUndefined(customUI))) {
          return;
        }
        if (!isNullOrUndefined(li)) {
          this.updateProgressBarClasses(li, UPLOAD_SUCCESS);
          this.removeProgressbar(li, "success");
          var iconEle = li.querySelector("." + ABORT_ICON);
          if (!isNullOrUndefined(iconEle)) {
            iconEle.classList.add(DELETE_ICON);
            iconEle.setAttribute("title", this.localizedTexts("delete"));
            iconEle.classList.remove(ABORT_ICON);
            iconEle.classList.remove(UPLOAD_INPROGRESS);
          }
        }
        this.raiseSuccessEvent(e, file);
      } else {
        this.uploadFailed(e, file);
      }
    };
    Uploader2.prototype.getResponse = function(e) {
      var target = e.currentTarget;
      var response = {
        readyState: target.readyState,
        statusCode: target.status,
        statusText: target.statusText,
        headers: target.getAllResponseHeaders(),
        withCredentials: target.withCredentials
      };
      return response;
    };
    Uploader2.prototype.raiseSuccessEvent = function(e, file) {
      var _this = this;
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var statusMessage = this.localizedTexts("uploadSuccessMessage");
      var args = {
        e,
        response,
        operation: "upload",
        file: this.updateStatus(file, statusMessage, "2", false),
        statusText: statusMessage
      };
      var liElement = this.getLiElement(file);
      if (!isNullOrUndefined(liElement)) {
        var spinnerEle = liElement.querySelector("." + SPINNER_PANE);
        if (!isNullOrUndefined(spinnerEle)) {
          hideSpinner(liElement);
          detach(spinnerEle);
        }
      }
      this.trigger("success", args, function(args2) {
        _this.updateStatus(file, args2.statusText, "2");
        _this.uploadedFilesData.push(file);
        _this.trigger("change", { file: _this.uploadedFilesData });
        _this.checkActionButtonStatus();
        if (_this.fileList.length > 0) {
          if (!_this.getLiElement(file).classList.contains(RESTRICT_RETRY)) {
            _this.uploadSequential();
            _this.checkActionComplete(true);
          } else {
            _this.getLiElement(file).classList.remove(RESTRICT_RETRY);
          }
        }
      });
    };
    Uploader2.prototype.uploadFailed = function(e, file) {
      var _this = this;
      var li = this.getLiElement(file);
      var response = e && e.currentTarget ? this.getResponse(e) : null;
      var statusMessage = this.localizedTexts("uploadFailedMessage");
      var args = {
        e,
        response,
        operation: "upload",
        file: this.updateStatus(file, statusMessage, "0", false),
        statusText: statusMessage
      };
      if (!isNullOrUndefined(li)) {
        this.renderFailureState(e, file, li);
      }
      this.trigger("failure", args, function(args2) {
        _this.updateStatus(file, args2.statusText, "0");
        _this.checkActionButtonStatus();
        _this.uploadSequential();
        _this.checkActionComplete(true);
      });
    };
    Uploader2.prototype.uploadSequential = function() {
      if (this.sequentialUpload) {
        if (this.autoUpload) {
          this.checkAutoUpload(this.filesData);
        } else {
          this.uploadButtonClick();
        }
      }
    };
    Uploader2.prototype.checkActionComplete = function(increment) {
      if (increment) {
        ++this.actionCompleteCount;
      } else {
        --this.actionCompleteCount;
      }
      this.raiseActionComplete();
    };
    Uploader2.prototype.raiseActionComplete = function() {
      if (this.filesData.length === this.actionCompleteCount && this.flag) {
        this.flag = false;
        var eventArgs = {
          fileData: []
        };
        eventArgs.fileData = this.getSelectedFileStatus(this.selectedFiles);
        this.trigger("actionComplete", eventArgs);
      }
    };
    Uploader2.prototype.getSelectedFileStatus = function(selectedFiles) {
      var matchFiles = [];
      var matchFilesIndex = 0;
      for (var selectFileIndex = 0; selectFileIndex < selectedFiles.length; selectFileIndex++) {
        var selectedFileData = selectedFiles[selectFileIndex];
        for (var fileDataIndex = 0; fileDataIndex < this.filesData.length; fileDataIndex++) {
          if (this.filesData[fileDataIndex].name === selectedFileData.name) {
            matchFiles[matchFilesIndex] = this.filesData[fileDataIndex];
            ++matchFilesIndex;
          }
        }
      }
      return matchFiles;
    };
    Uploader2.prototype.updateProgressBarClasses = function(li, className) {
      var progressBar = li.querySelector("." + PROGRESSBAR);
      if (!isNullOrUndefined(progressBar)) {
        progressBar.classList.add(className);
      }
    };
    Uploader2.prototype.removeProgressbar = function(li, callType) {
      var _this = this;
      if (!isNullOrUndefined(li.querySelector("." + PROGRESS_WRAPPER))) {
        this.progressAnimation = new Animation({ duration: 1250 });
        this.progressAnimation.animate(li.querySelector("." + PROGRESS_WRAPPER), { name: "FadeOut" });
        this.progressAnimation.animate(li.querySelector("." + PROGRESSBAR_TEXT), { name: "FadeOut" });
        setTimeout(function() {
          _this.animateProgressBar(li, callType);
        }, 750);
      }
    };
    Uploader2.prototype.animateProgressBar = function(li, callType) {
      if (callType === "success") {
        li.classList.add(UPLOAD_SUCCESS);
        if (!isNullOrUndefined(li.querySelector("." + STATUS))) {
          li.querySelector("." + STATUS).classList.remove(UPLOAD_INPROGRESS);
          this.progressAnimation.animate(li.querySelector("." + STATUS), { name: "FadeIn" });
          li.querySelector("." + STATUS).classList.add(UPLOAD_SUCCESS);
        }
      } else {
        if (!isNullOrUndefined(li.querySelector("." + STATUS))) {
          li.querySelector("." + STATUS).classList.remove(UPLOAD_INPROGRESS);
          this.progressAnimation.animate(li.querySelector("." + STATUS), { name: "FadeIn" });
          li.querySelector("." + STATUS).classList.add(UPLOAD_FAILED);
        }
      }
      if (li.querySelector("." + PROGRESS_WRAPPER)) {
        detach(li.querySelector("." + PROGRESS_WRAPPER));
      }
    };
    Uploader2.prototype.setExtensions = function(extensions) {
      if (extensions !== "" && !isNullOrUndefined(extensions)) {
        this.element.setAttribute("accept", extensions);
      } else {
        this.element.removeAttribute("accept");
      }
    };
    Uploader2.prototype.templateComplier = function(uploadTemplate) {
      if (uploadTemplate) {
        try {
          if (selectAll(uploadTemplate, document).length) {
            return compile2(select(uploadTemplate, document).innerHTML.trim());
          }
        } catch (exception) {
          return compile2(uploadTemplate);
        }
      }
      return void 0;
    };
    Uploader2.prototype.setRTL = function() {
      if (this.enableRtl) {
        addClass([this.uploadWrapper], RTL7);
      } else {
        removeClass([this.uploadWrapper], RTL7);
      }
    };
    Uploader2.prototype.localizedTexts = function(localeText) {
      this.l10n.setLocale(this.locale);
      return this.l10n.getConstant(localeText);
    };
    Uploader2.prototype.setControlStatus = function() {
      if (!this.enabled) {
        this.uploadWrapper.classList.add(DISABLED5);
        this.element.setAttribute("disabled", "disabled");
        this.browseButton.setAttribute("disabled", "disabled");
        if (!isNullOrUndefined(this.clearButton)) {
          this.clearButton.setAttribute("disabled", "disabled");
        }
        if (!isNullOrUndefined(this.uploadButton)) {
          this.uploadButton.setAttribute("disabled", "disabled");
        }
      } else {
        if (this.uploadWrapper.classList.contains(DISABLED5)) {
          this.uploadWrapper.classList.remove(DISABLED5);
        }
        if (!isNullOrUndefined(this.browseButton) && this.element.hasAttribute("disabled")) {
          this.element.removeAttribute("disabled");
          this.browseButton.removeAttribute("disabled");
        }
        if (!isNullOrUndefined(this.clearButton) && this.clearButton.hasAttribute("disabled")) {
          this.clearButton.removeAttribute("disabled");
        }
        if (!isNullOrUndefined(this.uploadButton) && this.uploadButton.hasAttribute("disabled")) {
          this.uploadButton.hasAttribute("disabled");
        }
      }
    };
    Uploader2.prototype.checkHTMLAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["accept", "multiple", "disabled"];
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(prop))) {
          switch (prop) {
            case "accept":
              if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions["allowedExtensions"] === void 0 || isDynamic) {
                this.setProperties({ allowedExtensions: this.element.getAttribute("accept") }, !isDynamic);
                this.initialAttr.accept = this.allowedExtensions;
              }
              break;
            case "multiple":
              if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions["multiple"] === void 0 || isDynamic) {
                var isMutiple = this.element.getAttribute(prop) === "multiple" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ multiple: isMutiple }, !isDynamic);
                this.initialAttr.multiple = true;
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.uploaderOptions) || this.uploaderOptions["enabled"] === void 0 || isDynamic) {
                var isDisabled = this.element.getAttribute(prop) === "disabled" || this.element.getAttribute(prop) === "" || this.element.getAttribute(prop) === "true" ? false : true;
                this.setProperties({ enabled: isDisabled }, !isDynamic);
                this.initialAttr.disabled = true;
              }
          }
        }
      }
    };
    Uploader2.prototype.chunkUpload = function(file, custom, fileIndex) {
      var start = 0;
      var end = Math.min(this.asyncSettings.chunkSize, file.size);
      var index = 0;
      var blob = file.rawFile.slice(start, end);
      var metaData = { chunkIndex: index, blob, file, start, end, retryCount: 0, request: null };
      this.sendRequest(file, metaData, custom, fileIndex);
    };
    Uploader2.prototype.sendRequest = function(file, metaData, custom, fileIndex) {
      var _this = this;
      var formData = new FormData();
      var blob = file.rawFile.slice(metaData.start, metaData.end);
      formData.append("chunkFile", blob, file.name);
      formData.append(this.uploaderName, blob, file.name);
      formData.append("chunk-index", metaData.chunkIndex.toString());
      formData.append("chunkIndex", metaData.chunkIndex.toString());
      var totalChunk = Math.max(Math.ceil(file.size / this.asyncSettings.chunkSize), 1);
      formData.append("total-chunk", totalChunk.toString());
      formData.append("totalChunk", totalChunk.toString());
      var ajax = new Ajax({ url: this.asyncSettings.saveUrl, type: "POST", async: true, contentType: null });
      ajax.emitError = false;
      ajax.onLoad = function(e) {
        _this.chunkUploadComplete(e, metaData, custom);
        return {};
      };
      ajax.onUploadProgress = function(e) {
        _this.chunkUploadInProgress(e, metaData, custom);
        return {};
      };
      var eventArgs = {
        fileData: file,
        customFormData: [],
        cancel: false,
        chunkSize: this.asyncSettings.chunkSize === 0 ? null : this.asyncSettings.chunkSize
      };
      ajax.beforeSend = function(e) {
        eventArgs.currentRequest = ajax.httpRequest;
        eventArgs.currentChunkIndex = metaData.chunkIndex;
        if (eventArgs.currentChunkIndex === 0) {
          _this.trigger("uploading", eventArgs, function(eventArgs2) {
            _this.uploadingEventCallback(formData, eventArgs2, e, file);
          });
        } else {
          _this.trigger("chunkUploading", eventArgs, function(eventArgs2) {
            _this.uploadingEventCallback(formData, eventArgs2, e, file);
          });
        }
      };
      ajax.onError = function(e) {
        _this.chunkUploadFailed(e, metaData, custom);
        return {};
      };
      ajax.send(formData);
      metaData.request = ajax;
    };
    Uploader2.prototype.uploadingEventCallback = function(formData, eventArgs, e, file) {
      if (eventArgs.cancel) {
        this.eventCancelByArgs(e, eventArgs, file);
      } else {
        this.updateFormData(formData, eventArgs.customFormData);
      }
    };
    Uploader2.prototype.eventCancelByArgs = function(e, eventArgs, file) {
      var _this = this;
      e.cancel = true;
      if (eventArgs.fileData.statusCode === "5") {
        return;
      }
      eventArgs.fileData.statusCode = "5";
      eventArgs.fileData.status = this.localizedTexts("fileUploadCancel");
      var liElement = this.getLiElement(eventArgs.fileData);
      if (liElement) {
        if (!isNullOrUndefined(liElement.querySelector("." + STATUS))) {
          liElement.querySelector("." + STATUS).innerHTML = this.localizedTexts("fileUploadCancel");
          liElement.querySelector("." + STATUS).classList.add(UPLOAD_FAILED);
        }
        this.pauseButton = this.createElement("span", { className: "e-icons e-file-reload-btn", attrs: { "tabindex": this.btnTabIndex } });
        var removeIcon = liElement.querySelector("." + REMOVE_ICON);
        if (removeIcon) {
          removeIcon.parentElement.insertBefore(this.pauseButton, removeIcon);
        }
        this.pauseButton.setAttribute("title", this.localizedTexts("retry"));
        this.pauseButton.addEventListener("click", function(e2) {
          _this.reloadcanceledFile(e2, file, liElement);
        }, false);
        this.checkActionButtonStatus();
      }
    };
    Uploader2.prototype.checkChunkUpload = function() {
      return this.asyncSettings.chunkSize <= 0 || isNullOrUndefined(this.asyncSettings.chunkSize) ? false : true;
    };
    Uploader2.prototype.chunkUploadComplete = function(e, metaData, custom) {
      var _this = this;
      var response = e.target;
      var liElement;
      if (response.readyState === 4 && response.status >= 200 && response.status < 300) {
        var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
        var totalChunk = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
        var eventArgs = {
          event: e,
          file: metaData.file,
          chunkIndex: metaData.chunkIndex,
          totalChunk,
          chunkSize: this.asyncSettings.chunkSize,
          response: requestResponse
        };
        this.trigger("chunkSuccess", eventArgs);
        if (isNullOrUndefined(custom) || !custom) {
          liElement = this.getLiElement(metaData.file);
        }
        this.updateMetaData(metaData);
        if (metaData.end === metaData.file.size) {
          metaData.file.statusCode = "3";
        }
        if (metaData.file.statusCode === "5") {
          var eventArgs_1 = { event: e, fileData: metaData.file, cancel: false, customFormData: [] };
          this.trigger("canceling", eventArgs_1, function(eventArgs2) {
            if (eventArgs2.cancel) {
              metaData.file.statusCode = "3";
              var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
              if (!isNullOrUndefined(liElement) && !isNullOrUndefined(spinnerTarget)) {
                hideSpinner(spinnerTarget);
                detach(liElement.querySelector(".e-spinner-pane"));
              }
              _this.sendNextRequest(metaData);
            } else {
              metaData.request.emitError = false;
              response.abort();
              var formData = new FormData();
              var name_2 = _this.element.getAttribute("name");
              formData.append(name_2, metaData.file.name);
              formData.append("cancel-uploading", metaData.file.name);
              formData.append("cancelUploading", metaData.file.name);
              _this.updateFormData(formData, eventArgs2.customFormData);
              var ajax = new Ajax(_this.asyncSettings.removeUrl, "POST", true, null);
              ajax.emitError = false;
              ajax.onLoad = function(e2) {
                _this.removeChunkFile(e2, metaData, custom);
                return {};
              };
              ajax.send(formData);
            }
          });
        } else {
          if (totalChunk - 1 === metaData.chunkIndex && totalChunk > metaData.chunkIndex) {
            var index = this.pausedData.indexOf(metaData);
            if (index >= 0) {
              this.pausedData.splice(index, 1);
            }
            if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {
              if (liElement && !isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD))) {
                detach(liElement.querySelector("." + PAUSE_UPLOAD));
              }
              this.removeChunkProgressBar(metaData);
            }
            this.raiseSuccessEvent(e, metaData.file);
            return;
          }
          if (metaData.file.statusCode !== "4") {
            this.sendNextRequest(metaData);
          }
        }
      } else {
        this.chunkUploadFailed(e, metaData);
      }
    };
    Uploader2.prototype.sendNextRequest = function(metaData) {
      metaData.start = metaData.end;
      metaData.end += this.asyncSettings.chunkSize;
      metaData.end = Math.min(metaData.end, metaData.file.size);
      metaData.chunkIndex += 1;
      this.sendRequest(metaData.file, metaData);
    };
    Uploader2.prototype.removeChunkFile = function(e, metaData, custom) {
      if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) && !custom)) {
        var liElement = this.getLiElement(metaData.file);
        var deleteIcon = liElement.querySelector("." + ABORT_ICON);
        var spinnerTarget = deleteIcon;
        this.updateStatus(metaData.file, this.localizedTexts("fileUploadCancel"), "5");
        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
        this.removeProgressbar(liElement, "failure");
        deleteIcon && deleteIcon.classList.remove(ABORT_ICON);
        deleteIcon && deleteIcon.classList.add(REMOVE_ICON);
        deleteIcon && deleteIcon.setAttribute("title", this.localizedTexts("remove"));
        var pauseIcon = liElement.querySelector("." + PAUSE_UPLOAD);
        pauseIcon && pauseIcon.classList.add(RETRY_ICON);
        pauseIcon && pauseIcon.classList.remove(PAUSE_UPLOAD);
        pauseIcon && pauseIcon.setAttribute("title", this.localizedTexts("retry"));
        if (!isNullOrUndefined(liElement) && !isNullOrUndefined(deleteIcon) && !isNullOrUndefined(liElement.querySelector(".e-spinner-pane"))) {
          hideSpinner(spinnerTarget);
          detach(liElement.querySelector(".e-spinner-pane"));
        }
      }
    };
    Uploader2.prototype.pauseUpload = function(metaData, e, custom) {
      metaData.file.statusCode = "4";
      metaData.file.status = this.localizedTexts("pause");
      this.updateMetaData(metaData);
      var eventArgs = {
        event: e ? e : null,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
        chunkSize: this.asyncSettings.chunkSize
      };
      this.abortUpload(metaData, custom, eventArgs);
    };
    Uploader2.prototype.abortUpload = function(metaData, custom, eventArgs) {
      if (metaData.file.statusCode !== "4") {
        metaData.request.emitError = false;
        metaData.request.httpRequest.abort();
      }
      var liElement = this.getLiElement(metaData.file);
      if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {
        var targetElement2 = liElement.querySelector("." + PAUSE_UPLOAD);
        targetElement2.classList.remove(PAUSE_UPLOAD);
        targetElement2.classList.add(RESUME_UPLOAD);
        targetElement2.setAttribute("title", this.localizedTexts("resume"));
        targetElement2.nextElementSibling.classList.add(REMOVE_ICON);
        targetElement2.nextElementSibling.classList.remove(ABORT_ICON);
        targetElement2.nextElementSibling.setAttribute("title", this.localizedTexts("remove"));
      }
      for (var i = 0; i < this.pausedData.length; i++) {
        if (this.pausedData[i].file.name === metaData.file.name) {
          this.pausedData.splice(i, 1);
        }
      }
      this.pausedData.push(metaData);
      this.trigger("pausing", eventArgs);
    };
    Uploader2.prototype.resumeUpload = function(metaData, e, custom) {
      var liElement = this.getLiElement(metaData.file);
      var targetElement2;
      if (!isNullOrUndefined(liElement)) {
        targetElement2 = liElement.querySelector("." + RESUME_UPLOAD);
      }
      if (!isNullOrUndefined(targetElement2) && (isNullOrUndefined(custom) || !custom)) {
        targetElement2.classList.remove(RESUME_UPLOAD);
        targetElement2.classList.add(PAUSE_UPLOAD);
        targetElement2.setAttribute("title", this.localizedTexts("pause"));
        targetElement2.nextElementSibling.classList.remove(REMOVE_ICON);
        targetElement2.nextElementSibling.classList.add(ABORT_ICON);
        targetElement2.nextElementSibling.setAttribute("title", this.localizedTexts("abort"));
      }
      metaData.file.status = this.localizedTexts("inProgress");
      metaData.file.statusCode = "3";
      this.updateMetaData(metaData);
      var eventArgs = {
        event: e ? e : null,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        chunkCount: Math.round(metaData.file.size / this.asyncSettings.chunkSize),
        chunkSize: this.asyncSettings.chunkSize
      };
      this.trigger("resuming", eventArgs);
      for (var i = 0; i < this.pausedData.length; i++) {
        if (this.pausedData[i].end === this.pausedData[i].file.size) {
          this.chunkUploadComplete(e, metaData, custom);
        } else {
          if (this.pausedData[i].file.name === metaData.file.name) {
            this.pausedData[i].start = this.pausedData[i].end;
            this.pausedData[i].end = this.pausedData[i].end + this.asyncSettings.chunkSize;
            this.pausedData[i].end = Math.min(this.pausedData[i].end, this.pausedData[i].file.size);
            this.pausedData[i].chunkIndex = this.pausedData[i].chunkIndex + 1;
            this.sendRequest(this.pausedData[i].file, this.pausedData[i], custom);
          }
        }
      }
    };
    Uploader2.prototype.updateMetaData = function(metaData) {
      if (this.uploadMetaData.indexOf(metaData) === -1) {
        this.uploadMetaData.push(metaData);
      } else {
        this.uploadMetaData.splice(this.uploadMetaData.indexOf(metaData), 1);
        this.uploadMetaData.push(metaData);
      }
    };
    Uploader2.prototype.removeChunkProgressBar = function(metaData) {
      var liElement = this.getLiElement(metaData.file);
      if (!isNullOrUndefined(liElement)) {
        this.updateProgressBarClasses(liElement, UPLOAD_SUCCESS);
        this.removeProgressbar(liElement, "success");
        var cancelButton = liElement.querySelector("." + ABORT_ICON);
        if (!isNullOrUndefined(cancelButton)) {
          cancelButton.classList.add(DELETE_ICON);
          cancelButton.setAttribute("title", this.localizedTexts("delete"));
          cancelButton.classList.remove(ABORT_ICON, UPLOAD_INPROGRESS);
        }
      }
    };
    Uploader2.prototype.chunkUploadFailed = function(e, metaData, custom) {
      var _this = this;
      var chunkCount = Math.max(Math.ceil(metaData.file.size / this.asyncSettings.chunkSize), 1);
      var liElement;
      if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom)) {
        liElement = this.getLiElement(metaData.file);
      }
      var requestResponse = e && e.currentTarget ? this.getResponse(e) : null;
      var eventArgs = {
        event: e,
        file: metaData.file,
        chunkIndex: metaData.chunkIndex,
        totalChunk: chunkCount,
        chunkSize: this.asyncSettings.chunkSize,
        cancel: false,
        response: requestResponse
      };
      this.trigger("chunkFailure", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          if (metaData.retryCount < _this.asyncSettings.retryCount) {
            setTimeout(function() {
              _this.retryRequest(liElement, metaData, custom);
            }, _this.asyncSettings.retryAfterDelay);
          } else {
            if (!isNullOrUndefined(liElement)) {
              var pauseButton = liElement.querySelector("." + PAUSE_UPLOAD) ? liElement.querySelector("." + PAUSE_UPLOAD) : liElement.querySelector("." + RESUME_UPLOAD);
              if (!isNullOrUndefined(pauseButton)) {
                pauseButton.classList.add(RETRY_ICON);
                pauseButton.classList.remove(PAUSE_UPLOAD, RESUME_UPLOAD);
              }
              _this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
              _this.removeProgressbar(liElement, "failure");
              liElement.querySelector(".e-icons").classList.remove(UPLOAD_INPROGRESS);
              var iconElement = liElement.querySelector("." + ABORT_ICON) ? liElement.querySelector("." + ABORT_ICON) : liElement.querySelector("." + REMOVE_ICON);
              iconElement.classList.remove(ABORT_ICON);
              if (!isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD))) {
                detach(liElement.querySelector("." + PAUSE_UPLOAD));
              }
              if (metaData.start > 0) {
                iconElement.classList.add(DELETE_ICON);
                iconElement.setAttribute("title", _this.localizedTexts("delete"));
              } else {
                iconElement.classList.add(REMOVE_ICON);
                iconElement.setAttribute("title", _this.localizedTexts("remove"));
              }
            }
            metaData.retryCount = 0;
            var file_1 = metaData.file;
            var failureMessage = _this.localizedTexts("uploadFailedMessage");
            var args = {
              e,
              response: requestResponse,
              operation: "upload",
              file: _this.updateStatus(file_1, failureMessage, "0", false),
              statusText: failureMessage
            };
            _this.trigger("failure", args, function(args2) {
              _this.updateStatus(file_1, args2.statusText, "0");
              _this.uploadSequential();
              _this.checkActionComplete(true);
            });
          }
        }
      });
    };
    Uploader2.prototype.retryRequest = function(liElement, metaData, custom) {
      if (isNullOrUndefined(this.template) && (isNullOrUndefined(custom) || !custom) && liElement) {
        this.updateProgressBarClasses(liElement, UPLOAD_FAILED);
      }
      metaData.retryCount += 1;
      this.sendRequest(metaData.file, metaData);
    };
    Uploader2.prototype.checkPausePlayAction = function(e) {
      var targetElement2 = e.target;
      var selectedElement = e.target.parentElement;
      var index = this.fileList.indexOf(selectedElement);
      var fileData = this.filesData[index];
      var metaData = this.getCurrentMetaData(fileData);
      if (targetElement2.classList.contains(PAUSE_UPLOAD)) {
        this.pauseUpload(metaData, e);
      } else if (targetElement2.classList.contains(RESUME_UPLOAD)) {
        this.resumeUpload(metaData, e);
      } else if (targetElement2.classList.contains(RETRY_ICON)) {
        if (metaData.file.status === this.localizedTexts("fileUploadCancel")) {
          this.retryUpload(metaData, false);
        } else {
          this.retryUpload(metaData, true);
        }
      }
    };
    Uploader2.prototype.retryUpload = function(metaData, fromcanceledStage) {
      if (fromcanceledStage) {
        metaData.end = metaData.end + this.asyncSettings.chunkSize;
        metaData.start = metaData.start + this.asyncSettings.chunkSize;
        this.sendRequest(metaData.file, metaData);
      } else {
        metaData.file.statusCode = "1";
        metaData.file.status = this.localizedTexts("readyToUploadMessage");
        this.chunkUpload(metaData.file);
      }
      this.getLiElement(metaData.file).classList.add(RESTRICT_RETRY);
    };
    Uploader2.prototype.chunkUploadInProgress = function(e, metaData, custom) {
      var _this = this;
      if (metaData.file.statusCode === "4") {
        return;
      }
      if (metaData.file.statusCode !== "4" && metaData.file.statusCode !== "5") {
        metaData.file.statusCode = "3";
        metaData.file.status = this.localizedTexts("inProgress");
      }
      this.updateMetaData(metaData);
      var liElement = this.getLiElement(metaData.file);
      if (isNullOrUndefined(liElement)) {
        return;
      }
      var retryElement = liElement.querySelector("." + RETRY_ICON);
      if (!isNullOrUndefined(retryElement)) {
        retryElement.classList.add(PAUSE_UPLOAD);
        retryElement.setAttribute("title", this.localizedTexts("pause"));
        retryElement.classList.remove(RETRY_ICON);
      }
      if (!isNullOrUndefined(liElement)) {
        if (!(liElement.querySelectorAll("." + PROGRESS_WRAPPER).length > 0)) {
          var statusElement = liElement.querySelector("." + STATUS);
          if (isNullOrUndefined(this.template)) {
            statusElement.classList.add(UPLOAD_INPROGRESS);
            statusElement.classList.remove(UPLOAD_FAILED);
            this.createProgressBar(liElement);
            this.updateProgressBarClasses(liElement, UPLOAD_INPROGRESS);
          }
          var clearIcon = liElement.querySelector("." + REMOVE_ICON) ? liElement.querySelector("." + REMOVE_ICON) : liElement.querySelector("." + DELETE_ICON);
          if (!isNullOrUndefined(clearIcon)) {
            clearIcon.classList.add(ABORT_ICON);
            clearIcon.setAttribute("title", this.localizedTexts("abort"));
            clearIcon.classList.remove(REMOVE_ICON);
          }
        }
        if (!isNaN(Math.round(e.loaded / e.total * 100)) && isNullOrUndefined(this.template) && metaData.file.statusCode !== "4") {
          var progressVal = void 0;
          var totalChunks = Math.ceil(metaData.file.size / this.asyncSettings.chunkSize) - 1;
          if (this.asyncSettings.chunkSize && totalChunks) {
            progressVal = Math.round(metaData.chunkIndex / totalChunks * 100);
            this.changeProgressValue(liElement, progressVal.toString() + "%");
          }
        }
        if (metaData.chunkIndex === 0) {
          this.checkActionButtonStatus();
        }
      }
      if (isNullOrUndefined(liElement.querySelector("." + PAUSE_UPLOAD)) && isNullOrUndefined(this.template) && isNullOrUndefined(liElement.querySelector("." + DELETE_ICON))) {
        this.pauseButton = this.createElement("span", { className: "e-icons e-file-pause-btn", attrs: { "tabindex": this.btnTabIndex } });
        if (this.browserName === "msie") {
          this.pauseButton.classList.add("e-msie");
        }
        var abortIcon = liElement.querySelector("." + ABORT_ICON);
        abortIcon.parentElement.insertBefore(this.pauseButton, abortIcon);
        this.pauseButton.setAttribute("title", this.localizedTexts("pause"));
        this.pauseButton.addEventListener("click", function(e2) {
          _this.checkPausePlayAction(e2);
        }, false);
      }
    };
    Uploader2.prototype.bytesToSize = function(bytes) {
      var i = -1;
      if (!bytes) {
        return "0.0 KB";
      }
      do {
        bytes = bytes / 1024;
        i++;
      } while (bytes > 99);
      if (i >= 2) {
        bytes = bytes * 1024;
        i = 1;
      }
      return Math.max(bytes, 0).toFixed(1) + " " + ["KB", "MB"][i];
    };
    Uploader2.prototype.sortFileList = function(filesData) {
      filesData = filesData ? filesData : this.sortFilesList;
      var files = filesData;
      var fileNames = [];
      for (var i = 0; i < files.length; i++) {
        fileNames.push(files[i].name);
      }
      var sortedFileNames = fileNames.sort();
      var sortedFilesData = [];
      for (var _i = 0, sortedFileNames_1 = sortedFileNames; _i < sortedFileNames_1.length; _i++) {
        var name_3 = sortedFileNames_1[_i];
        for (var i = 0; i < files.length; i++) {
          if (name_3 === files[i].name) {
            sortedFilesData.push(files[i]);
          }
        }
      }
      return sortedFilesData;
    };
    Uploader2.prototype.destroy = function() {
      this.element.value = null;
      this.clearTemplate();
      this.clearAll();
      this.unWireEvents();
      this.unBindDropEvents();
      if (this.multiple) {
        this.element.removeAttribute("multiple");
      }
      if (!this.enabled) {
        this.element.removeAttribute("disabled");
      }
      this.element.removeAttribute("accept");
      this.setInitialAttributes();
      var attributes2 = ["aria-label", "directory", "webkitdirectory", "tabindex"];
      for (var _i = 0, attributes_2 = attributes2; _i < attributes_2.length; _i++) {
        var key = attributes_2[_i];
        this.element.removeAttribute(key);
      }
      if (!isNullOrUndefined(this.uploadWrapper)) {
        this.uploadWrapper.parentElement.appendChild(this.element);
        detach(this.uploadWrapper);
      }
      this.uploadWrapper = null;
      _super.prototype.destroy.call(this);
    };
    Uploader2.prototype.upload = function(files, custom) {
      var _this = this;
      files = files ? files : this.filesData;
      if (this.sequentialUpload && (this.isFirstFileOnSelection || custom)) {
        this.sequenceUpload(files);
      } else {
        var uploadFiles_1 = this.getFilesInArray(files);
        var eventArgs = {
          customFormData: [],
          currentRequest: null,
          cancel: false
        };
        this.trigger("beforeUpload", eventArgs, function(eventArgs2) {
          if (!eventArgs2.cancel) {
            _this.uploadFiles(uploadFiles_1, custom);
          }
        });
      }
    };
    Uploader2.prototype.getFilesInArray = function(files) {
      var uploadFiles = [];
      if (files instanceof Array) {
        uploadFiles = files;
      } else {
        uploadFiles.push(files);
      }
      return uploadFiles;
    };
    Uploader2.prototype.serverReadFileBase64 = function(fileIndex, position, totalCount) {
      var _this = this;
      return new Promise(function(resolve, reject) {
        var file = _this.fileStreams[fileIndex].rawFile;
        try {
          var reader = new FileReader();
          reader.onload = /* @__PURE__ */ function(args) {
            return function() {
              try {
                var contents = args.result;
                var data = contents ? contents.split(";base64,")[1] : null;
                resolve(data);
              } catch (e) {
                reject(e);
              }
            };
          }(reader);
          reader.readAsDataURL(file.slice(position, position + totalCount));
        } catch (e) {
          reject(e);
        }
      });
    };
    Uploader2.prototype.uploadFileCount = function(ele) {
      var files = this.filesData;
      if (!files || files.length === 0) {
        return -1;
      }
      var result = files.length;
      return result;
    };
    Uploader2.prototype.getFileRead = function(index, ele) {
      var files = this.filesData;
      if (!files || files.length === 0) {
        return -1;
      }
      var file = files[index];
      var fileCount = this.newFileRef++;
      this.fileStreams[fileCount] = file;
      return fileCount;
    };
    Uploader2.prototype.getFileInfo = function(index, ele) {
      var files = this.filesData;
      if (!files || files.length === 0) {
        return null;
      }
      var file = files[index];
      if (!file) {
        return null;
      }
      return this.filesData[index];
    };
    Uploader2.prototype.uploadFiles = function(files, custom) {
      var selectedFiles = [];
      if (this.asyncSettings.saveUrl === "" || isNullOrUndefined(this.asyncSettings.saveUrl)) {
        return;
      }
      if (!custom || isNullOrUndefined(custom)) {
        if (!this.multiple) {
          var file = [];
          file.push(files[0]);
          selectedFiles = this.filterfileList(file);
        } else {
          selectedFiles = this.filterfileList(files);
        }
      } else {
        selectedFiles = files;
      }
      for (var i = 0; i < selectedFiles.length; i++) {
        this.uploadFilesRequest(selectedFiles, i, custom);
      }
    };
    Uploader2.prototype.uploadFilesRequest = function(selectedFiles, i, custom) {
      var _this = this;
      var cloneFiles = [];
      var chunkEnabled = this.checkChunkUpload();
      var ajax = new Ajax(this.asyncSettings.saveUrl, "POST", true, null);
      ajax.emitError = false;
      var getFileData;
      var eventArgs = {
        fileData: selectedFiles[i],
        customFormData: [],
        cancel: false
      };
      var formData = new FormData();
      ajax.beforeSend = function(e) {
        eventArgs.currentRequest = ajax.httpRequest;
        _this.trigger("uploading", eventArgs, function(eventArgs2) {
          if (eventArgs2.cancel) {
            _this.eventCancelByArgs(e, eventArgs2, selectedFiles[i]);
          }
          _this.updateFormData(formData, eventArgs2.customFormData);
        });
      };
      if (selectedFiles[i].statusCode === "1") {
        var name_4 = this.element.getAttribute("name");
        formData.append(name_4, selectedFiles[i].rawFile, selectedFiles[i].name);
        if (chunkEnabled && selectedFiles[i].size > this.asyncSettings.chunkSize) {
          this.chunkUpload(selectedFiles[i], custom, i);
        } else {
          ajax.onLoad = function(e) {
            if (eventArgs.cancel) {
              return {};
            } else {
              _this.uploadComplete(e, selectedFiles[i], custom);
              return {};
            }
          };
          ajax.onUploadProgress = function(e) {
            if (eventArgs.cancel) {
              return {};
            } else {
              _this.uploadInProgress(e, selectedFiles[i], custom, ajax);
              return {};
            }
          };
          ajax.onError = function(e) {
            _this.uploadFailed(e, selectedFiles[i]);
            return {};
          };
          ajax.send(formData);
        }
      }
    };
    Uploader2.prototype.spliceFiles = function(liIndex) {
      var liElement = this.fileList[liIndex];
      var allFiles = this.getFilesData();
      var nameElements = +liElement.getAttribute("data-files-count");
      var startIndex = 0;
      for (var i = 0; i < liIndex; i++) {
        startIndex += +this.fileList[i].getAttribute("data-files-count");
      }
      var endIndex = startIndex + nameElements - 1;
      for (var j = endIndex; j >= startIndex; j--) {
        allFiles.splice(j, 1);
      }
    };
    Uploader2.prototype.remove = function(fileData, customTemplate, removeDirectly, postRawFile, args) {
      var _this = this;
      if (isNullOrUndefined(postRawFile)) {
        postRawFile = true;
      }
      var eventArgs = {
        event: args,
        cancel: false,
        filesData: [],
        customFormData: [],
        postRawFile,
        currentRequest: null
      };
      var beforeEventArgs = {
        cancel: false,
        customFormData: [],
        currentRequest: null
      };
      this.trigger("beforeRemove", beforeEventArgs, function(beforeEventArgs2) {
        if (!beforeEventArgs2.cancel) {
          if (_this.isFormUpload()) {
            eventArgs.filesData = fileData;
            _this.trigger("removing", eventArgs, function(eventArgs2) {
              if (!eventArgs2.cancel) {
                var removingFiles = _this.getFilesInArray(fileData);
                var isLiRemoved = false;
                var liIndex = void 0;
                for (var _i2 = 0, removingFiles_1 = removingFiles; _i2 < removingFiles_1.length; _i2++) {
                  var data = removingFiles_1[_i2];
                  if (!isLiRemoved) {
                    liIndex = _this.fileList.indexOf(data.list);
                  }
                  if (liIndex > -1) {
                    var inputElement = !isNullOrUndefined(data.input) ? data.input : null;
                    if (inputElement) {
                      detach(inputElement);
                    }
                    _this.spliceFiles(liIndex);
                    detach(_this.fileList[liIndex]);
                    _this.fileList.splice(liIndex, 1);
                    isLiRemoved = true;
                    liIndex = -1;
                  }
                }
              }
            });
          } else if (_this.isForm && (isNullOrUndefined(_this.asyncSettings.removeUrl) || _this.asyncSettings.removeUrl === "")) {
            eventArgs.filesData = _this.getFilesData();
            _this.trigger("removing", eventArgs, function(eventArgs2) {
              if (!eventArgs2.cancel) {
                _this.clearAll();
              }
            });
          } else {
            var removeFiles = [];
            fileData = !isNullOrUndefined(fileData) ? fileData : _this.filesData;
            if (fileData instanceof Array) {
              removeFiles = fileData;
            } else {
              removeFiles.push(fileData);
            }
            eventArgs.filesData = removeFiles;
            var removeUrl = _this.asyncSettings.removeUrl;
            var validUrl = removeUrl === "" || isNullOrUndefined(removeUrl) ? false : true;
            var _loop_5 = function(files2) {
              var fileUploadedIndex = _this.uploadedFilesData.indexOf(files2);
              if ((files2.statusCode === "2" || files2.statusCode === "4" || files2.statusCode === "0" && fileUploadedIndex !== -1) && validUrl) {
                _this.removeUploadedFile(files2, eventArgs, removeDirectly, customTemplate);
              } else {
                if (!removeDirectly) {
                  _this.trigger("removing", eventArgs, function(eventArgs2) {
                    if (!eventArgs2.cancel) {
                      _this.removeFilesData(files2, customTemplate);
                    }
                  });
                } else {
                  _this.removeFilesData(files2, customTemplate);
                }
              }
              if (args && !args.target.classList.contains(REMOVE_ICON)) {
                _this.checkActionComplete(false);
              }
            };
            for (var _i = 0, removeFiles_1 = removeFiles; _i < removeFiles_1.length; _i++) {
              var files = removeFiles_1[_i];
              _loop_5(files);
            }
          }
        }
      });
    };
    Uploader2.prototype.clearAll = function() {
      var _this = this;
      if (isNullOrUndefined(this.listParent)) {
        if (this.browserName !== "msie") {
          this.element.value = "";
        }
        this.filesData = [];
        return;
      }
      var eventArgs = {
        cancel: false,
        filesData: this.filesData
      };
      this.trigger("clearing", eventArgs, function(eventArgs2) {
        if (!eventArgs2.cancel) {
          _this.clearData();
          _this.actionCompleteCount = 0;
          _this.count = -1;
        }
      });
    };
    Uploader2.prototype.getFilesData = function(index) {
      if (isNullOrUndefined(index)) {
        return this.filesData;
      } else {
        return this.getSelectedFiles(index);
      }
    };
    Uploader2.prototype.pause = function(fileData, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      this.pauseUploading(fileDataFiles, custom);
    };
    Uploader2.prototype.pauseUploading = function(fileData, custom) {
      var files = this.getFiles(fileData);
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === "3") {
          this.pauseUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }
      }
    };
    Uploader2.prototype.getFiles = function(fileData) {
      var files = [];
      if (!isNullOrUndefined(fileData) && !(fileData instanceof Array)) {
        files.push(fileData);
      } else {
        files = fileData;
      }
      return files;
    };
    Uploader2.prototype.resume = function(fileData, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      this.resumeFiles(fileDataFiles, custom);
    };
    Uploader2.prototype.resumeFiles = function(fileData, custom) {
      var files = this.getFiles(fileData);
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === "4") {
          this.resumeUpload(this.getCurrentMetaData(files[i], null), null, custom);
        }
      }
    };
    Uploader2.prototype.retry = function(fileData, fromcanceledStage, custom) {
      fileData = fileData ? fileData : this.filesData;
      var fileDataFiles = this.getFilesInArray(fileData);
      if (this.sequentialUpload && this.isFirstFileOnSelection) {
        this.isFirstFileOnSelection = false;
      }
      this.retryFailedFiles(fileDataFiles, fromcanceledStage, custom);
    };
    Uploader2.prototype.retryFailedFiles = function(fileData, fromcanceledStage, custom) {
      var files = this.getFiles(fileData);
      for (var i = 0; i < files.length; i++) {
        if (files[i].statusCode === "5" || files[i].statusCode === "0") {
          if (this.asyncSettings.chunkSize > 0) {
            this.retryUpload(this.getCurrentMetaData(files[i], null), fromcanceledStage);
          } else {
            var liElement = void 0;
            if (!custom) {
              liElement = this.fileList[this.filesData.indexOf(files[i])];
            }
            this.reloadcanceledFile(null, files[i], liElement, custom);
          }
        }
      }
    };
    Uploader2.prototype.cancel = function(fileData) {
      fileData = fileData ? fileData : this.filesData;
      var cancelingFiles = this.getFilesInArray(fileData);
      this.cancelUpload(cancelingFiles);
    };
    Uploader2.prototype.cancelUpload = function(fileData) {
      var files = this.getFiles(fileData);
      if (this.asyncSettings.chunkSize > 0) {
        for (var i = 0; i < files.length; i++) {
          if (files[i].statusCode === "3") {
            var metaData = this.getCurrentMetaData(files[i], null);
            metaData.file.statusCode = "5";
            metaData.file.status = this.localizedTexts("fileUploadCancel");
            this.updateMetaData(metaData);
            this.showHideUploadSpinner(files[i]);
          }
        }
      } else {
        for (var i = 0; i < files.length; i++) {
          if (files[i].statusCode === "3") {
            files[i].statusCode = "5";
            files[i].status = this.localizedTexts("fileUploadCancel");
            this.showHideUploadSpinner(files[i]);
          }
        }
      }
    };
    Uploader2.prototype.showHideUploadSpinner = function(files) {
      var liElement = this.getLiElement(files);
      if (!isNullOrUndefined(liElement) && isNullOrUndefined(this.template)) {
        var spinnerTarget = liElement.querySelector("." + ABORT_ICON);
        createSpinner({ target: spinnerTarget, width: "20px" });
        showSpinner(spinnerTarget);
      }
    };
    __decorate20([
      Complex({ saveUrl: "", removeUrl: "" }, AsyncSettings)
    ], Uploader2.prototype, "asyncSettings", void 0);
    __decorate20([
      Property(false)
    ], Uploader2.prototype, "sequentialUpload", void 0);
    __decorate20([
      Property({})
    ], Uploader2.prototype, "htmlAttributes", void 0);
    __decorate20([
      Property("")
    ], Uploader2.prototype, "cssClass", void 0);
    __decorate20([
      Property(true)
    ], Uploader2.prototype, "enabled", void 0);
    __decorate20([
      Property(null)
    ], Uploader2.prototype, "template", void 0);
    __decorate20([
      Property(true)
    ], Uploader2.prototype, "multiple", void 0);
    __decorate20([
      Property(true)
    ], Uploader2.prototype, "autoUpload", void 0);
    __decorate20([
      Complex({}, ButtonsProps)
    ], Uploader2.prototype, "buttons", void 0);
    __decorate20([
      Property("")
    ], Uploader2.prototype, "allowedExtensions", void 0);
    __decorate20([
      Property(0)
    ], Uploader2.prototype, "minFileSize", void 0);
    __decorate20([
      Property(3e7)
    ], Uploader2.prototype, "maxFileSize", void 0);
    __decorate20([
      Property(null)
    ], Uploader2.prototype, "dropArea", void 0);
    __decorate20([
      Collection([{}], FilesProp)
    ], Uploader2.prototype, "files", void 0);
    __decorate20([
      Property(true)
    ], Uploader2.prototype, "showFileList", void 0);
    __decorate20([
      Property(false)
    ], Uploader2.prototype, "directoryUpload", void 0);
    __decorate20([
      Property("Default")
    ], Uploader2.prototype, "dropEffect", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "created", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "actionComplete", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "rendering", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "beforeUpload", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "fileListRendering", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "selected", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "uploading", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "success", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "failure", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "removing", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "beforeRemove", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "clearing", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "progress", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "change", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "chunkSuccess", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "chunkFailure", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "chunkUploading", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "canceling", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "pausing", void 0);
    __decorate20([
      Event2()
    ], Uploader2.prototype, "resuming", void 0);
    Uploader2 = __decorate20([
      NotifyPropertyChanges
    ], Uploader2);
    return Uploader2;
  }(Component)
);

// node_modules/@syncfusion/ej2-splitbuttons/src/common/common.js
var __extends21 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate21 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
function getModel(props, model) {
  var obj = extend({}, props);
  for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
    var prop = _a[_i];
    if (model.indexOf(prop) < 0) {
      deleteObject(obj, prop);
    }
  }
  return obj;
}
function upDownKeyHandler(ul, keyCode2) {
  var defaultIdx = keyCode2 === 40 ? 0 : ul.childElementCount - 1;
  var liIdx = defaultIdx;
  var li;
  var selectedLi = ul.querySelector(".e-selected");
  if (selectedLi) {
    selectedLi.classList.remove("e-selected");
  }
  for (var i = 0, len = ul.children.length; i < len; i++) {
    if (ul.children[i].classList.contains("e-focused")) {
      li = ul.children[i];
      liIdx = i;
      li.classList.remove("e-focused");
      if (keyCode2 === 40) {
        liIdx++;
      } else {
        liIdx--;
      }
      if (liIdx === (keyCode2 === 40 ? ul.childElementCount : -1)) {
        liIdx = defaultIdx;
      }
    }
  }
  li = ul.children[liIdx];
  liIdx = isValidLI(ul, li, liIdx, keyCode2);
  if (liIdx !== -1) {
    addClass([ul.children[liIdx]], "e-focused");
    ul.children[liIdx].focus();
  }
}
function isValidLI(ul, li, index, keyCode2, count) {
  if (count === void 0) {
    count = 0;
  }
  if (li.classList.contains("e-separator") || li.classList.contains("e-disabled")) {
    if (index === (keyCode2 === 40 ? ul.childElementCount - 1 : 0)) {
      index = keyCode2 === 40 ? 0 : ul.childElementCount - 1;
    } else {
      if (keyCode2 === 40) {
        index++;
      } else {
        index--;
      }
    }
  }
  li = ul.children[index];
  if (li.classList.contains("e-separator") || li.classList.contains("e-disabled")) {
    count++;
    if (count === ul.childElementCount) {
      return index = -1;
    }
    index = isValidLI(ul, li, index, keyCode2, count);
  }
  return index;
}
function setBlankIconStyle(popup) {
  var blankIconList = [].slice.call(popup.getElementsByClassName("e-blank-icon"));
  if (!blankIconList.length) {
    return;
  }
  var iconLi = popup.querySelector(".e-item:not(.e-blank-icon):not(.e-separator)");
  if (isNullOrUndefined(iconLi)) {
    return;
  }
  if (iconLi.classList.contains("e-url")) {
    iconLi = iconLi.querySelector(".e-menu-url");
  }
  var icon = iconLi.querySelector(".e-menu-icon");
  var cssProp;
  var enableRtl = popup.classList.contains("e-rtl");
  if (enableRtl) {
    cssProp = { padding: "paddingRight", margin: "marginLeft" };
  } else {
    cssProp = { padding: "paddingLeft", margin: "marginRight" };
  }
  var size = parseInt(getComputedStyle(icon).fontSize, 10) + parseInt(enableRtl ? getComputedStyle(icon)[cssProp.margin] : getComputedStyle(icon)[cssProp.margin], 10) + parseInt(getComputedStyle(iconLi).paddingLeft, 10) + "px";
  blankIconList.forEach(function(li) {
    if (li.classList.contains("e-url")) {
      li.querySelector(".e-menu-url").style[cssProp.padding] = size;
    } else {
      li.style[cssProp.padding] = size;
    }
  });
}
var Item = (
  /** @class */
  function(_super) {
    __extends21(Item2, _super);
    function Item2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate21([
      Property("")
    ], Item2.prototype, "iconCss", void 0);
    __decorate21([
      Property("")
    ], Item2.prototype, "id", void 0);
    __decorate21([
      Property(false)
    ], Item2.prototype, "separator", void 0);
    __decorate21([
      Property("")
    ], Item2.prototype, "text", void 0);
    __decorate21([
      Property("")
    ], Item2.prototype, "url", void 0);
    __decorate21([
      Property(false)
    ], Item2.prototype, "disabled", void 0);
    return Item2;
  }(ChildProperty)
);

// node_modules/@syncfusion/ej2-splitbuttons/src/drop-down-button/drop-down-button.js
var __extends22 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate22 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var classNames3 = {
  DISABLED: "e-disabled",
  FOCUS: "e-focused",
  ICON: "e-menu-icon",
  ITEM: "e-item",
  POPUP: "e-dropdown-popup",
  RTL: "e-rtl",
  SEPARATOR: "e-separator",
  VERTICAL: "e-vertical"
};
var DropDownButton = (
  /** @class */
  function(_super) {
    __extends22(DropDownButton2, _super);
    function DropDownButton2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isPopupCreated = true;
      return _this;
    }
    DropDownButton2.prototype.preRender = function() {
    };
    DropDownButton2.prototype.getPersistData = function() {
      return this.addOnPersist([]);
    };
    DropDownButton2.prototype.toggle = function() {
      if (this.canOpen()) {
        this.openPopUp();
      } else {
        this.closePopup();
      }
    };
    DropDownButton2.prototype.render = function() {
      this.initialize();
      if (!this.disabled) {
        this.wireEvents();
      }
      this.renderComplete();
    };
    DropDownButton2.prototype.addItems = function(items, text) {
      var newItem;
      var idx = this.items.length;
      for (var j = 0, len = this.items.length; j < len; j++) {
        if (text === this.items[j].text) {
          idx = j;
          break;
        }
      }
      for (var i = items.length - 1; i >= 0; i--) {
        newItem = new Item(this, "items", items[i], true);
        this.items.splice(idx, 0, newItem);
      }
      if (!this.canOpen()) {
        this.createItems();
      }
    };
    DropDownButton2.prototype.removeItems = function(items, isUniqueId) {
      var refresh = false;
      for (var i = 0, len = items.length; i < len; i++) {
        for (var j = 0, len_1 = this.items.length; j < len_1; j++) {
          if (items[i] === (isUniqueId ? this.items[j].id : this.items[j].text)) {
            this.items.splice(j, 1);
            refresh = true;
            break;
          }
        }
      }
      if (refresh && this.getULElement()) {
        this.createItems();
      }
    };
    DropDownButton2.prototype.createPopup = function() {
      var _a;
      var div = this.createElement("div", {
        className: classNames3.POPUP,
        id: this.element.id + "-popup"
      });
      document.body.appendChild(div);
      this.dropDown = new Popup(div, {
        relateTo: this.element,
        collision: { X: "fit", Y: "flip" },
        position: { X: "left", Y: "bottom" },
        targetType: "relative",
        content: this.target ? this.getTargetElement() : "",
        enableRtl: this.enableRtl
      });
      if (this.dropDown.element.style.position === "fixed") {
        this.dropDown.refreshPosition(this.element);
      }
      this.dropDown.hide();
      attributes(this.element, (_a = {}, _a["aria-haspopup"] = this.items.length || this.target ? "true" : "false", _a["aria-expanded"] = "false", _a["aria-owns"] = this.getPopUpElement().id, _a["type"] = "button", _a["aria-label"] = this.element.textContent + " dropdownbutton", _a));
      if (this.cssClass) {
        addClass([div], this.cssClass.split(" "));
      }
      this.isPopupCreated = true;
    };
    DropDownButton2.prototype.getTargetElement = function() {
      return typeof this.target === "string" ? select(this.target) : this.target;
    };
    DropDownButton2.prototype.createItems = function(appendItems) {
      var items = this.items;
      var showIcon = this.hasIcon(this.items, "iconCss");
      var span;
      var item;
      var li;
      var eventArgs;
      var ul = this.getULElement();
      if (ul) {
        ul.innerHTML = "";
      } else {
        ul = this.createElement("ul", {
          attrs: { "role": "menu", "tabindex": "0" }
        });
      }
      for (var i = 0; i < items.length; i++) {
        item = items[i];
        var tempItem = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.text) : item.text;
        li = this.createElement("li", {
          innerHTML: item.url ? "" : tempItem,
          className: item.separator ? classNames3.ITEM + " " + classNames3.SEPARATOR : classNames3.ITEM,
          attrs: { "role": "menuItem", "tabindex": "-1" },
          id: item.id ? item.id : getUniqueID("e-" + this.getModuleName() + "-item")
        });
        if (item.url) {
          li.appendChild(this.createAnchor(item));
          li.classList.add("e-url");
        }
        if (item.iconCss) {
          span = this.createElement("span", { className: classNames3.ICON + " " + item.iconCss });
          if (item.url) {
            li.childNodes[0].appendChild(span);
          } else {
            li.insertBefore(span, li.childNodes[0]);
          }
        } else {
          if (showIcon && !item.separator) {
            li.classList.add("e-blank-icon");
          }
        }
        if (item.disabled) {
          li.classList.add("e-disabled");
        }
        eventArgs = { item, element: li };
        this.trigger("beforeItemRender", eventArgs);
        ul.appendChild(li);
      }
      if (appendItems) {
        this.getPopUpElement().appendChild(ul);
      }
      if (showIcon) {
        setBlankIconStyle(this.getPopUpElement());
      }
    };
    DropDownButton2.prototype.hasIcon = function(items, field) {
      for (var i = 0, len = items.length; i < len; i++) {
        if (items[i][field]) {
          return true;
        }
      }
      return false;
    };
    DropDownButton2.prototype.createAnchor = function(item) {
      var tempItem = this.enableHtmlSanitizer ? SanitizeHtmlHelper.sanitize(item.text) : item.text;
      return this.createElement("a", { className: "e-menu-text e-menu-url", innerHTML: tempItem, attrs: { "href": item.url } });
    };
    DropDownButton2.prototype.initialize = function() {
      this.button = new Button({
        iconCss: this.iconCss,
        iconPosition: this.iconPosition,
        cssClass: this.cssClass,
        content: this.content,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        enablePersistence: this.enablePersistence
      });
      this.button.createElement = this.createElement;
      this.button.appendTo(this.element);
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
      this.appendArrowSpan();
      this.setActiveElem([this.element]);
      if (this.target && !this.isColorPicker() || !this.createPopupOnClick) {
        this.createPopup();
      } else {
        this.isPopupCreated = false;
      }
    };
    DropDownButton2.prototype.isColorPicker = function() {
      if (!this.element) {
        return false;
      }
      var prevElem = this.element.previousSibling;
      if (prevElem && prevElem.classList && prevElem.classList.contains("e-split-colorpicker")) {
        return true;
      }
      return false;
    };
    DropDownButton2.prototype.appendArrowSpan = function() {
      this.element.appendChild(this.createElement("span", {
        className: "e-btn-icon e-icons e-icon-" + (this.cssClass.indexOf(classNames3.VERTICAL) > -1 ? "bottom" : "right") + " e-caret"
      }));
    };
    DropDownButton2.prototype.setActiveElem = function(elem) {
      this.activeElem = elem;
    };
    DropDownButton2.prototype.getModuleName = function() {
      return "dropdown-btn";
    };
    DropDownButton2.prototype.canOpen = function() {
      var val = false;
      if (this.isPopupCreated) {
        val = this.getPopUpElement().classList.contains("e-popup-close");
      }
      return val;
    };
    DropDownButton2.prototype.destroy = function() {
      var _this = this;
      _super.prototype.destroy.call(this);
      if (this.getModuleName() === "dropdown-btn") {
        var classList_1;
        if (this.element.querySelector("span.e-caret")) {
          detach(this.element.querySelector("span.e-caret"));
        }
        if (this.cssClass) {
          classList_1 = this.cssClass.split(" ");
        }
        this.button.destroy();
        if (classList_1) {
          removeClass([this.element], classList_1);
        }
        removeClass(this.activeElem, ["e-active"]);
        var attrList = this.element.getAttribute("class") ? ["aria-haspopup", "aria-expanded", "aria-owns", "type"] : ["aria-haspopup", "aria-expanded", "aria-owns", "type", "class"];
        attrList.forEach(function(key) {
          _this.element.removeAttribute(key);
        });
        this.popupUnWireEvents();
        this.destroyPopup();
        this.isPopupCreated = false;
        if (!this.disabled) {
          this.unWireEvents();
        }
      }
    };
    DropDownButton2.prototype.destroyPopup = function() {
      if (this.isPopupCreated) {
        this.dropDown.destroy();
        if (this.getPopUpElement()) {
          var popupEle = document.getElementById(this.getPopUpElement().id);
          if (popupEle) {
            removeClass([popupEle], ["e-popup-open", "e-popup-close"]);
            detach(popupEle);
          }
        }
        EventHandler.remove(this.getPopUpElement(), "click", this.clickHandler);
        EventHandler.remove(this.getPopUpElement(), "keydown", this.keyBoardHandler);
        if (this.isPopupCreated) {
          this.dropDown = void 0;
        }
      }
      this.isPopupCreated = false;
    };
    DropDownButton2.prototype.getPopUpElement = function() {
      var val = null;
      if (this.dropDown) {
        val = this.dropDown.element;
      }
      return val;
    };
    DropDownButton2.prototype.getULElement = function() {
      var val = null;
      if (this.getPopUpElement()) {
        val = this.getPopUpElement().children[0];
      }
      return val;
    };
    DropDownButton2.prototype.wireEvents = function() {
      this.delegateMousedownHandler = this.mousedownHandler.bind(this);
      if (!this.createPopupOnClick) {
        EventHandler.add(document, "mousedown touchstart", this.delegateMousedownHandler, this);
      }
      EventHandler.add(this.element, "click", this.clickHandler, this);
      EventHandler.add(this.element, "keydown", this.keyBoardHandler, this);
    };
    DropDownButton2.prototype.popupWireEvents = function() {
      var popupElement = this.getPopUpElement();
      if (this.createPopupOnClick) {
        EventHandler.add(document, "mousedown touchstart", this.delegateMousedownHandler, this);
      }
      if (popupElement) {
        EventHandler.add(popupElement, "click", this.clickHandler, this);
        EventHandler.add(popupElement, "keydown", this.keyBoardHandler, this);
      }
      this.rippleFn = rippleEffect(popupElement, { selector: "." + classNames3.ITEM });
    };
    DropDownButton2.prototype.popupUnWireEvents = function() {
      var popupElement = this.getPopUpElement();
      if (this.createPopupOnClick) {
        EventHandler.remove(document, "mousedown touchstart", this.delegateMousedownHandler);
      }
      if (popupElement && popupElement.parentElement) {
        EventHandler.remove(popupElement, "click", this.clickHandler);
        EventHandler.remove(popupElement, "keydown", this.keyBoardHandler);
      }
    };
    DropDownButton2.prototype.keyBoardHandler = function(e) {
      if (e.target === this.element && (e.keyCode === 9 || !e.altKey && e.keyCode === 40 || e.keyCode === 38)) {
        return;
      }
      switch (e.keyCode) {
        case 38:
        case 40:
          if (e.altKey && (e.keyCode === 38 || e.keyCode === 40)) {
            this.keyEventHandler(e);
          } else {
            this.upDownKeyHandler(e);
          }
          break;
        case 9:
        case 13:
        case 27:
        case 32:
          this.keyEventHandler(e);
          break;
      }
    };
    DropDownButton2.prototype.upDownKeyHandler = function(e) {
      if (this.target && (e.keyCode === 38 || e.keyCode === 40)) {
        return;
      }
      e.preventDefault();
      upDownKeyHandler(this.getULElement(), e.keyCode);
    };
    DropDownButton2.prototype.keyEventHandler = function(e) {
      if (this.target && (e.keyCode === 13 || e.keyCode === 9)) {
        return;
      }
      if (e.target && e.target.className.indexOf("e-edit-template") > -1 && e.keyCode === 32) {
        return;
      }
      if (e.keyCode !== 9) {
        e.preventDefault();
      }
      if (e.keyCode === 27 || e.keyCode === 38 || e.keyCode === 9) {
        if (!this.canOpen()) {
          this.closePopup(e, this.element);
        }
      } else {
        this.clickHandler(e);
      }
    };
    DropDownButton2.prototype.getLI = function(elem) {
      return elem.tagName === "LI" ? elem : closest(elem, "li");
    };
    DropDownButton2.prototype.mousedownHandler = function(e) {
      var trgt = e.target;
      if (this.dropDown && !this.canOpen() && !(closest(trgt, '[id="' + this.getPopUpElement().id + '"]') || closest(trgt, '[id="' + this.element.id + '"]'))) {
        this.closePopup(e);
      }
    };
    DropDownButton2.prototype.clickHandler = function(e) {
      var trgt = e.target;
      if (closest(trgt, '[id="' + this.element.id + '"]')) {
        if (!this.createPopupOnClick || this.target && !this.isColorPicker()) {
          if (this.getPopUpElement().classList.contains("e-popup-close")) {
            this.openPopUp(e);
          } else {
            this.closePopup(e);
          }
        } else if (this.isPopupCreated) {
          this.closePopup(e, this.activeElem[0]);
        } else {
          this.createPopup();
          this.openPopUp(e);
        }
      } else {
        if (closest(trgt, '[id="' + this.getPopUpElement().id + '"]')) {
          var eventArgs = void 0;
          var liIdx = void 0;
          var item = void 0;
          var li = this.getLI(trgt);
          if (li) {
            liIdx = Array.prototype.indexOf.call(this.getULElement().children, li);
            item = this.items[liIdx];
            if (item) {
              eventArgs = { element: li, item };
              this.trigger("select", eventArgs);
            }
            this.closePopup(e, this.activeElem[0]);
          }
        }
      }
    };
    DropDownButton2.prototype.openPopUp = function(e) {
      var _this = this;
      if (e === void 0) {
        e = null;
      }
      var isReact = false;
      var popupElem = this.getPopUpElement();
      if (!this.target) {
        this.createItems(true);
      } else {
        if (this.activeElem.length > 1) {
          var splitButton = getComponent(this.activeElem[0], "split-btn");
          if (splitButton.isReact && popupElem.childNodes.length < 1) {
            isReact = true;
            splitButton.appendReactElement(this.getTargetElement(), this.getPopUpElement());
          }
        } else {
          if (this.isReact && popupElem.childNodes.length < 1) {
            isReact = true;
            this.appendReactElement(this.getTargetElement(), this.getPopUpElement());
          }
        }
      }
      var ul = this.getULElement();
      this.popupWireEvents();
      var beforeOpenArgs = { element: ul, items: this.items, event: e, cancel: false };
      this.trigger("beforeOpen", beforeOpenArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          var ul_1 = _this.getULElement();
          _this.dropDown.show(null, _this.element);
          addClass([_this.element], "e-active");
          _this.element.setAttribute("aria-expanded", "true");
          ul_1.focus();
          var openArgs = { element: ul_1, items: _this.items };
          _this.trigger("open", openArgs);
        }
      });
    };
    DropDownButton2.prototype.closePopup = function(e, focusEle) {
      var _this = this;
      if (e === void 0) {
        e = null;
      }
      var ul = this.getULElement();
      var beforeCloseArgs = { element: ul, items: this.items, event: e, cancel: false };
      var popupElement = this.getPopUpElement();
      if (popupElement) {
        EventHandler.remove(popupElement, "keydown", this.keyBoardHandler);
      }
      this.trigger("beforeClose", beforeCloseArgs, function(observedArgs) {
        if (!observedArgs.cancel) {
          _this.popupUnWireEvents();
          var ul_2 = _this.getULElement();
          var selectedLi = ul_2.querySelector(".e-selected");
          if (selectedLi) {
            selectedLi.classList.remove("e-selected");
          }
          _this.dropDown.hide();
          removeClass(_this.activeElem, "e-active");
          _this.element.setAttribute("aria-expanded", "false");
          if (focusEle) {
            focusEle.focus();
          }
          var closeArgs = { element: ul_2, items: _this.items };
          _this.trigger("close", closeArgs);
          if (!_this.target && ul_2) {
            detach(ul_2);
          }
          if (!_this.target || _this.isColorPicker()) {
            if (_this.createPopupOnClick) {
              _this.destroyPopup();
            }
          }
          if (_this.target) {
            _this.isPopupCreated = _this.createPopupOnClick ? false : true;
          }
        }
      });
    };
    DropDownButton2.prototype.unWireEvents = function() {
      if (!this.createPopupOnClick) {
        EventHandler.remove(document, "mousedown touchstart", this.delegateMousedownHandler);
      }
      EventHandler.remove(this.element, "click", this.clickHandler);
      EventHandler.remove(this.element, "keydown", this.keyBoardHandler);
      if (this.isPopupCreated) {
        EventHandler.remove(this.getPopUpElement(), "click", this.clickHandler);
        EventHandler.remove(this.getPopUpElement(), "keydown", this.keyBoardHandler);
      }
    };
    DropDownButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var btnModel = ["content", "cssClass", "iconCss", "iconPosition", "disabled", "enableRtl"];
      this.button.setProperties(getModel(newProp, btnModel));
      var popupElement;
      if (this.isPopupCreated) {
        popupElement = this.getPopUpElement();
        this.dropDown.setProperties(getModel(newProp, ["enableRtl"]));
      }
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "content":
            if (!this.element.querySelector("span.e-caret")) {
              this.appendArrowSpan();
            }
            break;
          case "disabled":
            if (newProp.disabled) {
              this.unWireEvents();
              if (this.isPopupCreated && !this.canOpen()) {
                this.closePopup();
              }
            } else {
              this.wireEvents();
            }
            break;
          case "cssClass":
            if (newProp.cssClass.indexOf(classNames3.VERTICAL) > -1) {
              var arrowSpan = this.element.querySelector("span.e-caret");
              classList(arrowSpan, ["e-icon-bottom"], ["e-icon-right"]);
            }
            if (this.isPopupCreated) {
              if (oldProp.cssClass) {
                removeClass([popupElement], oldProp.cssClass.split(" "));
              }
              if (newProp.cssClass) {
                addClass([popupElement], newProp.cssClass.split(" "));
              }
            }
            break;
          case "target":
            this.dropDown.content = this.getTargetElement();
            this.dropDown.dataBind();
            break;
          case "items":
            if (this.isPopupCreated && this.getULElement()) {
              this.createItems();
            }
            break;
          case "createPopupOnClick":
            if (newProp.createPopupOnClick) {
              this.destroyPopup();
            } else {
              this.createPopup();
            }
            break;
        }
      }
    };
    DropDownButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate22([
      Property("")
    ], DropDownButton2.prototype, "content", void 0);
    __decorate22([
      Property("")
    ], DropDownButton2.prototype, "cssClass", void 0);
    __decorate22([
      Property(false)
    ], DropDownButton2.prototype, "disabled", void 0);
    __decorate22([
      Property("")
    ], DropDownButton2.prototype, "iconCss", void 0);
    __decorate22([
      Property("Left")
    ], DropDownButton2.prototype, "iconPosition", void 0);
    __decorate22([
      Property(false)
    ], DropDownButton2.prototype, "enableHtmlSanitizer", void 0);
    __decorate22([
      Collection([], Item)
    ], DropDownButton2.prototype, "items", void 0);
    __decorate22([
      Property(false)
    ], DropDownButton2.prototype, "createPopupOnClick", void 0);
    __decorate22([
      Property("")
    ], DropDownButton2.prototype, "target", void 0);
    __decorate22([
      Event2()
    ], DropDownButton2.prototype, "beforeItemRender", void 0);
    __decorate22([
      Event2()
    ], DropDownButton2.prototype, "beforeOpen", void 0);
    __decorate22([
      Event2()
    ], DropDownButton2.prototype, "beforeClose", void 0);
    __decorate22([
      Event2()
    ], DropDownButton2.prototype, "close", void 0);
    __decorate22([
      Event2()
    ], DropDownButton2.prototype, "open", void 0);
    __decorate22([
      Event2()
    ], DropDownButton2.prototype, "select", void 0);
    __decorate22([
      Event2()
    ], DropDownButton2.prototype, "created", void 0);
    DropDownButton2 = __decorate22([
      NotifyPropertyChanges
    ], DropDownButton2);
    return DropDownButton2;
  }(Component)
);

// node_modules/@syncfusion/ej2-splitbuttons/src/split-button/split-button.js
var __extends23 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate23 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var RTL8 = "e-rtl";
var TAGNAME = "EJS-SPLITBUTTON";
var SplitButton = (
  /** @class */
  function(_super) {
    __extends23(SplitButton2, _super);
    function SplitButton2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    SplitButton2.prototype.preRender = function() {
      var ele = this.element;
      if (ele.tagName === TAGNAME) {
        var ejInstance = getValue("ej2_instances", ele);
        var btn = this.createElement("button", { attrs: { "type": "button" } });
        var wrapper = this.createElement(TAGNAME, { className: "e-" + this.getModuleName() + "-wrapper" });
        for (var idx = 0, len = ele.attributes.length; idx < len; idx++) {
          btn.setAttribute(ele.attributes[idx].nodeName, ele.attributes[idx].nodeValue);
        }
        ele.parentNode.insertBefore(wrapper, ele);
        detach(ele);
        ele = btn;
        wrapper.appendChild(ele);
        setValue("ej2_instances", ejInstance, ele);
        this.wrapper = wrapper;
        this.element = ele;
      }
      if (!this.element.id) {
        this.element.id = getUniqueID("e-" + this.getModuleName());
      }
    };
    SplitButton2.prototype.render = function() {
      this.initWrapper();
      this.createPrimaryButton();
      this.renderControl();
    };
    SplitButton2.prototype.renderControl = function() {
      this.createSecondaryButton();
      this.setActiveElem([this.element, this.secondaryBtnObj.element]);
      this.setAria();
      this.wireEvents();
      this.renderComplete();
    };
    SplitButton2.prototype.addItems = function(items, text) {
      _super.prototype.addItems.call(this, items, text);
      this.secondaryBtnObj.items = this.items;
    };
    SplitButton2.prototype.removeItems = function(items, isUniqueId) {
      _super.prototype.removeItems.call(this, items, isUniqueId);
      this.secondaryBtnObj.items = this.items;
    };
    SplitButton2.prototype.initWrapper = function() {
      if (!this.wrapper) {
        this.wrapper = this.createElement("div", { className: "e-" + this.getModuleName() + "-wrapper" });
        this.element.parentNode.insertBefore(this.wrapper, this.element);
      }
      this.element.classList.remove("e-" + this.getModuleName());
      if (this.enableRtl) {
        this.wrapper.classList.add(RTL8);
      }
      if (this.cssClass) {
        addClass([this.wrapper], this.cssClass.split(" "));
      }
    };
    SplitButton2.prototype.createPrimaryButton = function() {
      var btnModel = {
        cssClass: this.cssClass,
        enableRtl: this.enableRtl,
        iconCss: this.iconCss,
        iconPosition: this.iconPosition,
        content: this.content,
        disabled: this.disabled
      };
      this.primaryBtnObj = new Button(btnModel);
      this.primaryBtnObj.createElement = this.createElement;
      this.primaryBtnObj.appendTo(this.element);
      this.element.classList.add("e-" + this.getModuleName());
      this.element.type = "button";
      this.wrapper.appendChild(this.element);
    };
    SplitButton2.prototype.createSecondaryButton = function() {
      var _this = this;
      var btnElem = this.createElement("button", {
        className: "e-icon-btn",
        attrs: { "tabindex": "-1" },
        id: this.element.id + "_dropdownbtn"
      });
      this.wrapper.appendChild(btnElem);
      var dropDownBtnModel = {
        cssClass: this.cssClass,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        items: this.items,
        target: this.target,
        createPopupOnClick: this.createPopupOnClick
      };
      dropDownBtnModel.beforeItemRender = function(args) {
        if (_this.createPopupOnClick) {
          _this.secondaryBtnObj.dropDown.relateTo = _this.wrapper;
          _this.dropDown = _this.secondaryBtnObj.dropDown;
        }
        _this.trigger("beforeItemRender", args);
      };
      dropDownBtnModel.open = function(args) {
        _this.trigger("open", args);
      };
      dropDownBtnModel.close = function(args) {
        _this.trigger("close", args);
      };
      dropDownBtnModel.select = function(args) {
        _this.trigger("select", args);
      };
      dropDownBtnModel.beforeOpen = function(args) {
        var callBackPromise = new Deferred();
        _this.trigger("beforeOpen", args, function(observedArgs) {
          callBackPromise.resolve(observedArgs);
        });
        return callBackPromise;
      };
      dropDownBtnModel.beforeClose = function(args) {
        var callBackPromise = new Deferred();
        _this.trigger("beforeClose", args, function(observedArgs) {
          callBackPromise.resolve(observedArgs);
        });
        return callBackPromise;
      };
      this.secondaryBtnObj = new DropDownButton(dropDownBtnModel);
      this.secondaryBtnObj.createElement = this.createElement;
      this.secondaryBtnObj.appendTo(btnElem);
      if (!this.createPopupOnClick) {
        this.secondaryBtnObj.dropDown.relateTo = this.wrapper;
        this.dropDown = this.secondaryBtnObj.dropDown;
      }
      this.secondaryBtnObj.activeElem = [this.element, this.secondaryBtnObj.element];
      this.secondaryBtnObj.element.querySelector(".e-btn-icon").classList.remove("e-icon-right");
    };
    SplitButton2.prototype.setAria = function() {
      attributes(this.element, {
        "aria-expanded": "false",
        "aria-haspopup": "true",
        "aria-label": this.element.textContent + " splitbutton",
        "aria-owns": this.element.id + "_dropdownbtn-popup"
      });
    };
    SplitButton2.prototype.getModuleName = function() {
      return "split-btn";
    };
    SplitButton2.prototype.toggle = function() {
      this.secondaryBtnObj.toggle();
    };
    SplitButton2.prototype.destroy = function() {
      var _this = this;
      var classList2 = [RTL8];
      if (this.cssClass) {
        classList2 = classList2.concat(this.cssClass.split(" "));
      }
      if (this.element) {
        var element2 = document.getElementById(this.element.id);
        if (element2 && element2.parentElement === this.wrapper) {
          if (this.wrapper.tagName === TAGNAME) {
            this.wrapper.innerHTML = "";
            removeClass([this.wrapper], ["e-rtl", "e-" + this.getModuleName() + "-wrapper"]);
            removeClass([this.wrapper], this.cssClass.split(" "));
          } else {
            removeClass([this.element], classList2);
            ["aria-label", "aria-haspopup", "aria-expanded", "aria-owns", "type"].forEach(function(key) {
              _this.element.removeAttribute(key);
            });
            this.wrapper.parentNode.insertBefore(this.element, this.wrapper);
            remove(this.wrapper);
          }
          this.unWireEvents();
        }
      }
      this.primaryBtnObj.destroy();
      this.secondaryBtnObj.destroy();
      _super.prototype.destroy.call(this);
      if (!this.element.getAttribute("class")) {
        this.element.removeAttribute("class");
      }
    };
    SplitButton2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.primaryBtnClickHandler, this);
      new KeyboardEvents(this.element, {
        keyAction: this.btnKeyBoardHandler.bind(this),
        keyConfigs: {
          altdownarrow: "alt+downarrow"
        }
      });
    };
    SplitButton2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.primaryBtnClickHandler);
      getInstance(this.element, KeyboardEvents).destroy();
    };
    SplitButton2.prototype.primaryBtnClickHandler = function() {
      this.trigger("click", { element: this.element });
    };
    SplitButton2.prototype.btnKeyBoardHandler = function(e) {
      switch (e.action) {
        case "altdownarrow":
          this.clickHandler(e);
          break;
      }
    };
    SplitButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var model = ["content", "iconCss", "iconPosition", "cssClass", "disabled", "enableRtl"];
      this.primaryBtnObj.setProperties(getModel(newProp, model));
      model = [
        "beforeOpen",
        "beforeItemRender",
        "select",
        "open",
        "close",
        "cssClass",
        "disabled",
        "enableRtl",
        "createPopupOnClick"
      ];
      if (Object.keys(newProp).indexOf("items") > -1) {
        this.secondaryBtnObj.items = newProp.items;
        this.secondaryBtnObj.dataBind();
      }
      this.secondaryBtnObj.setProperties(getModel(newProp, model));
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "cssClass":
            if (oldProp.cssClass) {
              removeClass([this.wrapper], oldProp.cssClass.split(" "));
            }
            addClass([this.wrapper], newProp.cssClass.split(" "));
            break;
          case "enableRtl":
            if (newProp.enableRtl) {
              addClass([this.wrapper], RTL8);
            } else {
              removeClass([this.wrapper], RTL8);
            }
            break;
        }
      }
    };
    SplitButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate23([
      Property("")
    ], SplitButton2.prototype, "content", void 0);
    __decorate23([
      Property("")
    ], SplitButton2.prototype, "cssClass", void 0);
    __decorate23([
      Property(false)
    ], SplitButton2.prototype, "disabled", void 0);
    __decorate23([
      Property("")
    ], SplitButton2.prototype, "iconCss", void 0);
    __decorate23([
      Property("Left")
    ], SplitButton2.prototype, "iconPosition", void 0);
    __decorate23([
      Property(false)
    ], SplitButton2.prototype, "createPopupOnClick", void 0);
    __decorate23([
      Collection([], Item)
    ], SplitButton2.prototype, "items", void 0);
    __decorate23([
      Property("")
    ], SplitButton2.prototype, "target", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "beforeItemRender", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "beforeOpen", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "beforeClose", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "click", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "close", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "open", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "select", void 0);
    __decorate23([
      Event2()
    ], SplitButton2.prototype, "created", void 0);
    SplitButton2 = __decorate23([
      NotifyPropertyChanges
    ], SplitButton2);
    return SplitButton2;
  }(DropDownButton)
);
var Deferred = (
  /** @class */
  /* @__PURE__ */ function() {
    function Deferred3() {
      var _this = this;
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      this.catch = this.promise.catch.bind(this.promise);
      this.then = this.promise.then.bind(this.promise);
    }
    return Deferred3;
  }()
);

// node_modules/@syncfusion/ej2-splitbuttons/src/progress-button/progress-button.js
var __extends24 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate24 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HIDESPINNER = "e-hide-spinner";
var PROGRESS = "e-progress";
var PROGRESSACTIVE = "e-progress-active";
var CONTENTCLS = "e-btn-content";
var SpinSettings = (
  /** @class */
  function(_super) {
    __extends24(SpinSettings2, _super);
    function SpinSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate24([
      Property(null)
    ], SpinSettings2.prototype, "template", void 0);
    __decorate24([
      Property(16)
    ], SpinSettings2.prototype, "width", void 0);
    __decorate24([
      Property("Left")
    ], SpinSettings2.prototype, "position", void 0);
    return SpinSettings2;
  }(ChildProperty)
);
var AnimationSettings2 = (
  /** @class */
  function(_super) {
    __extends24(AnimationSettings3, _super);
    function AnimationSettings3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate24([
      Property(400)
    ], AnimationSettings3.prototype, "duration", void 0);
    __decorate24([
      Property("None")
    ], AnimationSettings3.prototype, "effect", void 0);
    __decorate24([
      Property("ease")
    ], AnimationSettings3.prototype, "easing", void 0);
    return AnimationSettings3;
  }(ChildProperty)
);
var ProgressButton = (
  /** @class */
  function(_super) {
    __extends24(ProgressButton2, _super);
    function ProgressButton2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.step = 1;
      return _this;
    }
    ProgressButton2.prototype.preRender = function() {
      _super.prototype.preRender.call(this);
    };
    ProgressButton2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.init();
      this.wireEvents();
      this.setAria();
      this.renderComplete();
    };
    ProgressButton2.prototype.start = function(percent) {
      this.isPaused = false;
      this.startProgress(percent ? percent : this.percent, this.progressTime);
    };
    ProgressButton2.prototype.stop = function() {
      this.isPaused = true;
      cancelAnimationFrame(this.timerId);
    };
    ProgressButton2.prototype.progressComplete = function() {
      this.isPaused = false;
      this.finishProgress();
    };
    ProgressButton2.prototype.getModuleName = function() {
      return "progress-btn";
    };
    ProgressButton2.prototype.destroy = function() {
      var _this = this;
      var classList2 = [
        HIDESPINNER,
        PROGRESSACTIVE,
        "e-round-corner",
        "e-" + _super.prototype.getModuleName.call(this),
        "e-spin-" + this.spinSettings.position.toLowerCase()
      ];
      _super.prototype.destroy.call(this);
      this.unWireEvents();
      this.element.innerHTML = "";
      if (this.cssClass) {
        classList2 = classList2.concat(this.cssClass.split(" "));
      }
      removeClass([this.element], classList2);
      var css = this.element.getAttribute("class") ? ["aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow"] : ["aria-label", "aria-valuemin", "aria-valuemax", "aria-valuenow", "class"];
      css.forEach(function(key) {
        _this.element.removeAttribute(key);
      });
      if (this.disabled) {
        this.element.removeAttribute("disabled");
      }
    };
    ProgressButton2.prototype.init = function() {
      this.element.classList.add("e-" + _super.prototype.getModuleName.call(this));
      this.setContent();
      this.createSpinner();
      if (this.enableProgress) {
        this.createProgress();
      }
    };
    ProgressButton2.prototype.createSpinner = function() {
      var spinner = this.createElement("span", { className: "e-spinner" });
      this.setSpinPosition(spinner);
      createSpinner({
        target: spinner,
        width: this.spinSettings.width || 16,
        template: this.spinSettings.template
      }, this.createElement);
    };
    ProgressButton2.prototype.getSpinner = function() {
      return this.element.getElementsByClassName("e-spinner")[0];
    };
    ProgressButton2.prototype.getProgress = function() {
      return this.element.getElementsByClassName(PROGRESS)[0];
    };
    ProgressButton2.prototype.setSpinPosition = function(ele) {
      var position = this.spinSettings.position || "Left";
      if (position === "Left" || position === "Top") {
        this.element.insertBefore(ele, this.element.getElementsByClassName(CONTENTCLS)[0]);
      } else {
        this.element.appendChild(ele);
      }
      this.element.classList.add("e-spin-" + position.toLowerCase());
    };
    ProgressButton2.prototype.createProgress = function() {
      this.element.appendChild(this.createElement("span", { className: PROGRESS }));
    };
    ProgressButton2.prototype.setContent = function() {
      var cont;
      cont = this.element.innerHTML;
      if (this.enableHtmlSanitizer) {
        cont = SanitizeHtmlHelper.sanitize(this.element.innerHTML);
      }
      this.element.innerHTML = "";
      this.element.appendChild(this.createElement("span", { className: CONTENTCLS, innerHTML: cont }));
    };
    ProgressButton2.prototype.setContentIcon = function(content) {
      var contElem = this.createElement("span", { className: CONTENTCLS, innerHTML: content });
      if (this.iconCss) {
        var span = this.createElement("span", { className: "e-btn-icon " + this.iconCss });
        if (!this.element.textContent.trim()) {
          this.element.classList.add("e-icon-btn");
        } else {
          span.classList.add("e-icon-" + this.iconPosition.toLowerCase());
          if (this.iconPosition === "Top" || this.iconPosition === "Bottom") {
            this.element.classList.add("e-" + this.iconPosition.toLowerCase() + "-icon-btn");
          }
        }
        var node = contElem.childNodes[0];
        if (node && (this.iconPosition === "Left" || this.iconPosition === "Top")) {
          contElem.insertBefore(span, node);
        } else {
          contElem.appendChild(span);
        }
      }
      this.element.appendChild(contElem);
    };
    ProgressButton2.prototype.clickHandler = function() {
      if (this.element.classList.contains(PROGRESSACTIVE)) {
        return;
      }
      this.startProgress();
    };
    ProgressButton2.prototype.startProgress = function(percent, progressTime) {
      var clsList = this.element.classList;
      var isVertical = clsList.contains("e-vertical");
      clsList.add(PROGRESSACTIVE);
      if (!clsList.contains(HIDESPINNER)) {
        showSpinner(this.element);
      }
      this.startAnimate(Date.now(), progressTime ? progressTime : 0, progressTime ? Date.now() - this.duration * 1 / 100 : Date.now(), percent ? percent : 0, 0, this.step, 0, isVertical);
      this.startContAnimate();
    };
    ProgressButton2.prototype.startAnimate = function(timestamp, progressTime, prevTime, percent, prevPercent, step, prevProgressTime, isVertical) {
      var _this = this;
      try {
        var timeDiff = timestamp - prevTime;
        var stepTime = this.duration * step / 100;
        var timeDiffBuffer_1 = timeDiff ? timeDiff < stepTime ? timeDiff - stepTime : timeDiff % stepTime : 0;
        this.progressTime = progressTime = progressTime + timeDiff - timeDiffBuffer_1;
        prevTime = timestamp - timeDiffBuffer_1;
        percent = percent + (timeDiff - timeDiffBuffer_1) / this.duration * 100;
        prevPercent = (progressTime - prevProgressTime) % stepTime === 0 || percent === 100 ? percent : prevPercent;
        var args = { percent: prevPercent, currentDuration: progressTime, step };
        this.eIsVertical = isVertical;
        if (percent === 0) {
          this.trigger("begin", args, function(observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        } else if (percent === 100 || progressTime === this.duration) {
          this.trigger("end", args, function(observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        } else {
          this.trigger("progress", args, function(observedArgs) {
            _this.successCallback(observedArgs, percent, prevPercent, progressTime, prevProgressTime, timeDiffBuffer_1, prevTime);
          });
        }
      } catch (e) {
        cancelAnimationFrame(this.timerId);
        this.trigger("fail", e);
      }
    };
    ProgressButton2.prototype.successCallback = function(args, perc, pPerc, prgTim, pPrgTim, timDif, pTim) {
      var _this = this;
      var percent = perc;
      var prevPercent = pPerc;
      var timeDiffBuffer = timDif;
      var progressTime = prgTim;
      var prevProgressTime = pPrgTim;
      var prevTime = pTim;
      var isVertical = this.eIsVertical;
      if (percent !== args.percent && args.percent !== prevPercent) {
        percent = args.percent;
      }
      this.percent = percent;
      this.step = args.step;
      if ((progressTime - prevProgressTime) % (this.duration * args.step / 100) === 0 || percent === 100) {
        this.timerId = requestAnimationFrame(function() {
          if (_this.enableProgress) {
            _this.getProgress().style[isVertical ? "height" : "width"] = percent + "%";
          }
          _this.element.setAttribute("aria-valuenow", percent.toString());
        });
        prevPercent = percent;
        prevProgressTime = progressTime;
      }
      if (!this.isPaused) {
        if (progressTime < this.duration && percent < 100) {
          this.interval = window.setTimeout(function() {
            _this.startAnimate(Date.now(), progressTime, prevTime, percent, prevPercent, args.step, prevProgressTime, isVertical);
          }, this.duration / 100 - timeDiffBuffer);
        } else {
          this.interval = window.setTimeout(function() {
            _this.progressTime = _this.percent = 0;
            if (_this.enableProgress) {
              _this.getProgress().style[isVertical ? "height" : "width"] = "0%";
            }
            _this.element.setAttribute("aria-valuenow", "0");
            _this.hideSpin();
          }, 100);
        }
      }
    };
    ProgressButton2.prototype.startContAnimate = function() {
      var _this = this;
      var ele = this.element.getElementsByClassName(CONTENTCLS)[0];
      if (this.animationSettings.effect !== "None") {
        new Animation({}).animate(ele, {
          duration: this.animationSettings.duration,
          name: "Progress" + this.animationSettings.effect,
          timingFunction: this.animationSettings.easing,
          begin: function() {
            if (_this.spinSettings.position === "Center") {
              _this.setSpinnerSize();
            }
          },
          end: function() {
            ele.classList.add("e-animate-end");
          }
        });
      } else if (this.spinSettings.position === "Center") {
        this.setSpinnerSize();
      }
    };
    ProgressButton2.prototype.finishProgress = function() {
      var clsList = this.element.classList;
      var isVertical = clsList.contains("e-vertical");
      clsList.add(PROGRESSACTIVE);
      var count = 100;
      for (var i = this.percent; i < count; i++) {
        i += 10;
        if (i > 100) {
          i = 100;
        }
        if (this.enableProgress) {
          this.getProgress().style[isVertical ? "height" : "width"] = this.percent < 100 ? i + "%" : "100%";
        }
      }
      this.element.setAttribute("aria-valuenow", "0");
      this.hideSpin();
      var args = { step: this.step, currentDuration: this.progressTime, percent: 100 };
      clearTimeout(this.interval);
      this.trigger("end", args);
      this.progressTime = this.percent = 0;
    };
    ProgressButton2.prototype.setSpinnerSize = function() {
      var ele = this.element.getElementsByClassName(CONTENTCLS)[0];
      var spinner = this.getSpinner();
      spinner.style.width = Math.max(spinner.offsetWidth, ele.offsetWidth) + "px";
      spinner.style.height = Math.max(spinner.offsetHeight, ele.offsetHeight) + "px";
      ele.classList.add("e-cont-animate");
    };
    ProgressButton2.prototype.hideSpin = function() {
      var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
      if (!this.element.classList.contains(HIDESPINNER)) {
        hideSpinner(this.element);
      }
      this.element.classList.remove(PROGRESSACTIVE);
      if (this.animationSettings.effect !== "None") {
        cont.classList.remove("e-animate-end");
      }
      if (this.spinSettings.position === "Center") {
        var ele = this.getSpinner();
        cont.classList.remove("e-cont-animate");
        ele.style.width = "auto";
        ele.style.height = "auto";
      }
    };
    ProgressButton2.prototype.setIconSpan = function() {
      var cont = this.element.getElementsByClassName(CONTENTCLS)[0];
      var iconSpan = this.element.getElementsByClassName("e-btn-icon")[0];
      if (cont.childNodes[0] && (this.iconPosition === "Left" || this.iconPosition === "Top")) {
        cont.insertBefore(iconSpan, cont.childNodes[0]);
      } else {
        cont.appendChild(iconSpan);
      }
    };
    ProgressButton2.prototype.setAria = function() {
      attributes(this.element, {
        "aria-label": this.element.textContent + " progress",
        "aria-valuemin": "0",
        "aria-valuemax": "100",
        "aria-valuenow": "0"
      });
    };
    ProgressButton2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "click", this.clickHandler, this);
    };
    ProgressButton2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
    };
    ProgressButton2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var ele = this.element;
      var isSpinning = false;
      var clsList = this.element.querySelector(".e-spinner-pane").classList;
      if (clsList.contains("e-spin-show")) {
        isSpinning = true;
      }
      _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "content":
            this.setContent();
            this.createSpinner();
            if (isSpinning) {
              showSpinner(this.element);
              isSpinning = false;
            }
            if (this.enableProgress) {
              this.createProgress();
            }
            ele.setAttribute("aria-label", ele.textContent + " progress");
            break;
          case "iconCss":
            if (!oldProp.iconCss) {
              this.setIconSpan();
            }
            break;
          case "iconPosition":
            this.setIconSpan();
            break;
          case "enableProgress":
            if (newProp.enableProgress) {
              this.createProgress();
            } else {
              remove(this.getProgress());
            }
            break;
          case "spinSettings":
            if (newProp.spinSettings.position) {
              ele.classList.remove("e-spin-" + oldProp.spinSettings.position.toLowerCase());
              this.setSpinPosition(this.getSpinner());
            }
            if (newProp.spinSettings.template || newProp.spinSettings.width) {
              ele.removeChild(this.getSpinner());
              this.createSpinner();
            }
            break;
        }
      }
    };
    ProgressButton2.prototype.focusIn = function() {
      this.element.focus();
    };
    __decorate24([
      Property(false)
    ], ProgressButton2.prototype, "enableProgress", void 0);
    __decorate24([
      Property(2e3)
    ], ProgressButton2.prototype, "duration", void 0);
    __decorate24([
      Property("Left")
    ], ProgressButton2.prototype, "iconPosition", void 0);
    __decorate24([
      Property("")
    ], ProgressButton2.prototype, "iconCss", void 0);
    __decorate24([
      Property(false)
    ], ProgressButton2.prototype, "disabled", void 0);
    __decorate24([
      Property(false)
    ], ProgressButton2.prototype, "isPrimary", void 0);
    __decorate24([
      Property("")
    ], ProgressButton2.prototype, "cssClass", void 0);
    __decorate24([
      Property("")
    ], ProgressButton2.prototype, "content", void 0);
    __decorate24([
      Property(false)
    ], ProgressButton2.prototype, "isToggle", void 0);
    __decorate24([
      Property(false)
    ], ProgressButton2.prototype, "enableHtmlSanitizer", void 0);
    __decorate24([
      Complex({}, SpinSettings)
    ], ProgressButton2.prototype, "spinSettings", void 0);
    __decorate24([
      Complex({}, AnimationSettings2)
    ], ProgressButton2.prototype, "animationSettings", void 0);
    __decorate24([
      Event2()
    ], ProgressButton2.prototype, "created", void 0);
    __decorate24([
      Event2()
    ], ProgressButton2.prototype, "begin", void 0);
    __decorate24([
      Event2()
    ], ProgressButton2.prototype, "progress", void 0);
    __decorate24([
      Event2()
    ], ProgressButton2.prototype, "end", void 0);
    __decorate24([
      Event2()
    ], ProgressButton2.prototype, "fail", void 0);
    ProgressButton2 = __decorate24([
      NotifyPropertyChanges
    ], ProgressButton2);
    return ProgressButton2;
  }(Button)
);

// node_modules/@syncfusion/ej2-inputs/src/color-picker/color-picker.js
var __extends25 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate25 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var APPLY = "e-apply";
var CANCEL = "e-cancel";
var CURRENT = "e-current";
var CONTAINER = "e-container";
var CTRLBTN = "e-ctrl-btn";
var CTRLSWITCH = "e-switch-ctrl-btn";
var DISABLED6 = "e-disabled";
var FORMATSWITCH = "e-value-switch-btn";
var HANDLER = "e-handler";
var HEX = "e-hex";
var HIDEHEX = "e-hide-hex-value";
var HIDEOPACITY = "e-hide-opacity";
var HIDERGBA = "e-hide-switchable-value";
var HIDEVALUE = "e-hide-value";
var HIDEVALUESWITCH = "e-hide-valueswitcher";
var HSVAREA = "e-hsv-color";
var HSVCONTAINER = "e-hsv-container";
var INPUTWRAPPER = "e-selected-value";
var MODESWITCH = "e-mode-switch-btn";
var NOCOLOR = "e-nocolor-item";
var OPACITY = "e-opacity-value";
var PALETTES = "e-palette";
var PALETTECONTENT = "e-color-palette";
var PICKERCONTENT = "e-color-picker";
var PREVIEW = "e-preview-container";
var PREVIOUS = "e-previous";
var RTL9 = "e-rtl";
var SHOWVALUE = "e-show-value";
var SELECT = "e-selected";
var SPLITPREVIEW = "e-split-preview";
var TILE = "e-tile";
var presets = {
  default: [
    "#000000",
    "#f44336",
    "#e91e63",
    "#9c27b0",
    "#673ab7",
    "#2196f3",
    "#03a9f4",
    "#00bcd4",
    "#009688",
    "#ffeb3b",
    "#ffffff",
    "#ffebee",
    "#fce4ec",
    "#f3e5f5",
    "#ede7f6",
    "#e3f2fd",
    "#e1f5fe",
    "#e0f7fa",
    "#e0f2f1",
    "#fffde7",
    "#f2f2f2",
    "#ffcdd2",
    "#f8bbd0",
    "#e1bee7",
    "#d1c4e9",
    "#bbdefb",
    "#b3e5fc",
    "#b2ebf2",
    "#b2dfdb",
    "#fff9c4",
    "#e6e6e6",
    "#ef9a9a",
    "#f48fb1",
    "#ce93d8",
    "#b39ddb",
    "#90caf9",
    "#81d4fa",
    "#80deea",
    "#80cbc4",
    "#fff59d",
    "#cccccc",
    "#e57373",
    "#f06292",
    "#ba68c8",
    "#9575cd",
    "#64b5f6",
    "#4fc3f7",
    "#4dd0e1",
    "#4db6ac",
    "#fff176",
    "#b3b3b3",
    "#ef5350",
    "#ec407a",
    "#ab47bc",
    "#7e57c2",
    "#42a5f5",
    "#29b6f6",
    "#26c6da",
    "#26a69a",
    "#ffee58",
    "#999999",
    "#e53935",
    "#d81b60",
    "#8e24aa",
    "#5e35b1",
    "#1e88e5",
    "#039be5",
    "#00acc1",
    "#00897b",
    "#fdd835",
    "#808080",
    "#d32f2f",
    "#c2185b",
    "#7b1fa2",
    "#512da8",
    "#1976d2",
    "#0288d1",
    "#0097a7",
    "#00796b",
    "#fbc02d",
    "#666666",
    "#c62828",
    "#ad1457",
    "#6a1b9a",
    "#4527a0",
    "#1565c0",
    "#0277bd",
    "#00838f",
    "#00695c",
    "#f9a825",
    "#4d4d4d",
    "#b71c1c",
    "#880e4f",
    "#4a148c",
    "#311b92",
    "#0d47a1",
    "#01579b",
    "#006064",
    "#004d40",
    "#f57f17"
  ]
};
var ColorPicker = (
  /** @class */
  function(_super) {
    __extends25(ColorPicker2, _super);
    function ColorPicker2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    ColorPicker2.prototype.preRender = function() {
      var ele = this.element;
      this.formElement = closest(this.element, "form");
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      var localeText = { Apply: "Apply", Cancel: "Cancel", ModeSwitcher: "Switch Mode" };
      this.l10n = new L10n("colorpicker", localeText, this.locale);
      if (ele.getAttribute("ejs-for") && !ele.getAttribute("name")) {
        ele.setAttribute("name", ele.id);
      }
    };
    ColorPicker2.prototype.render = function() {
      this.initWrapper();
      if (this.inline) {
        this.createWidget();
      } else {
        this.createSplitBtn();
      }
      if (!this.enableOpacity) {
        addClass([this.container.parentElement], HIDEOPACITY);
      }
      this.renderComplete();
    };
    ColorPicker2.prototype.initWrapper = function() {
      var wrapper = this.createElement("div", { className: "e-" + this.getModuleName() + "-wrapper" });
      this.element.parentNode.insertBefore(wrapper, this.element);
      wrapper.appendChild(this.element);
      attributes(this.element, { "tabindex": "-1", "spellcheck": "false" });
      this.container = this.createElement("div", { className: CONTAINER });
      this.getWrapper().appendChild(this.container);
      var value = this.value ? this.roundValue(this.value).toLowerCase() : "#008000ff";
      if (this.noColor && this.mode === "Palette" && this.value === "") {
        value = "";
      }
      var slicedValue = value.slice(0, 7);
      if (isNullOrUndefined(this.initialInputValue)) {
        this.initialInputValue = slicedValue;
      }
      this.element.value = slicedValue;
      if (this.enableOpacity) {
        this.setProperties({ "value": value }, true);
      } else {
        this.setProperties({ "value": slicedValue }, true);
      }
      if (this.enableRtl) {
        wrapper.classList.add(RTL9);
      }
      if (this.cssClass) {
        addClass([wrapper], this.cssClass.split(" "));
      }
      this.tileRipple = rippleEffect(this.container, { selector: "." + TILE });
      this.ctrlBtnRipple = rippleEffect(this.container, { selector: ".e-btn" });
    };
    ColorPicker2.prototype.getWrapper = function() {
      return this.element.parentElement;
    };
    ColorPicker2.prototype.createWidget = function() {
      if (this.mode === "Palette") {
        this.createPalette();
        if (!this.inline) {
          this.firstPaletteFocus();
        }
      } else {
        this.createPicker();
        if (!this.inline) {
          this.getDragHandler().focus();
        }
      }
      this.isRgb = true;
      this.createInput();
      this.createCtrlBtn();
      if (!this.disabled) {
        this.wireEvents();
      }
      if (this.inline && this.disabled) {
        this.toggleDisabled(true);
      }
      if (Browser.isDevice) {
        this.refreshPopupPos();
      }
    };
    ColorPicker2.prototype.createSplitBtn = function() {
      var _this = this;
      var splitButton = this.createElement("button", { className: "e-split-colorpicker" });
      this.getWrapper().appendChild(splitButton);
      this.splitBtn = new SplitButton({
        iconCss: "e-selected-color",
        target: this.container,
        disabled: this.disabled,
        enableRtl: this.enableRtl,
        createPopupOnClick: this.createPopupOnClick,
        open: this.onOpen.bind(this),
        click: function() {
          _this.trigger("change", {
            currentValue: { hex: _this.value.slice(0, 7), rgba: _this.convertToRgbString(_this.hexToRgb(_this.value)) },
            previousValue: { hex: null, rgba: null },
            value: _this.value
          });
        }
      });
      this.splitBtn.createElement = this.createElement;
      this.splitBtn.appendTo(splitButton);
      var preview = this.createElement("span", { className: SPLITPREVIEW });
      select(".e-selected-color", splitButton).appendChild(preview);
      preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
      var popupEle = this.getPopupEle();
      addClass([popupEle], "e-colorpicker-popup");
      if (this.cssClass) {
        addClass([popupEle], this.cssClass.split(" "));
      }
      if (Browser.isDevice) {
        var popupInst = this.getPopupInst();
        popupInst.relateTo = document.body;
        popupInst.position = { X: "center", Y: "center" };
        popupInst.targetType = "container";
        popupInst.collision = { X: "fit", Y: "fit" };
        popupInst.offsetY = 4;
        popupEle.style.zIndex = getZindexPartial(this.splitBtn.element).toString();
      }
      this.bindCallBackEvent();
    };
    ColorPicker2.prototype.onOpen = function() {
      this.trigger("open", { element: this.container });
    };
    ColorPicker2.prototype.getPopupInst = function() {
      return getInstance(this.getPopupEle(), Popup);
    };
    ColorPicker2.prototype.bindCallBackEvent = function() {
      var _this = this;
      this.splitBtn.beforeOpen = function(args) {
        var callBackPromise = new Deferred();
        _this.trigger("beforeOpen", args, function(observeOpenArgs) {
          if (!observeOpenArgs.cancel) {
            var popupEle = _this.getPopupEle();
            popupEle.style.top = formatUnit(0 + pageYOffset);
            popupEle.style.left = formatUnit(0 + pageXOffset);
            popupEle.style.display = "block";
            _this.createWidget();
            popupEle.style.display = "";
            if (Browser.isDevice) {
              _this.modal = _this.createElement("div");
              _this.modal.className = "e-" + _this.getModuleName() + " e-modal";
              _this.modal.style.display = "none";
              document.body.insertBefore(_this.modal, popupEle);
              document.body.className += " e-colorpicker-overflow";
              _this.modal.style.display = "block";
              _this.modal.style.zIndex = (Number(popupEle.style.zIndex) - 1).toString();
            }
          }
          args.cancel = observeOpenArgs.cancel;
          callBackPromise.resolve(observeOpenArgs);
        });
        return callBackPromise;
      };
      this.splitBtn.beforeClose = function(args) {
        var callBackPromise = new Deferred();
        if (!isNullOrUndefined(args.event)) {
          var beforeCloseArgs = { element: _this.container, event: args.event, cancel: false };
          _this.trigger("beforeClose", beforeCloseArgs, function(observedCloseArgs) {
            if (Browser.isDevice && args.event.target === _this.modal) {
              observedCloseArgs.cancel = true;
            }
            if (!observedCloseArgs.cancel) {
              _this.onPopupClose();
            }
            args.cancel = observedCloseArgs.cancel;
            callBackPromise.resolve(observedCloseArgs);
          });
        } else {
          callBackPromise.resolve(args);
        }
        return callBackPromise;
      };
    };
    ColorPicker2.prototype.onPopupClose = function() {
      this.unWireEvents();
      this.destroyOtherComp();
      this.container.style.width = "";
      select("." + SPLITPREVIEW, this.splitBtn.element).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
      this.container.innerHTML = "";
      removeClass([this.container], [PICKERCONTENT, PALETTECONTENT]);
      if (Browser.isDevice && this.modal) {
        removeClass([document.body], "e-colorpicker-overflow");
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
    };
    ColorPicker2.prototype.createPalette = function() {
      classList(this.container, [PALETTECONTENT], [PICKERCONTENT]);
      if (this.presetColors) {
        var paletteGroup = this.createElement("div", { className: "e-custom-palette" });
        this.appendElement(paletteGroup);
        var keys2 = Object.keys(this.presetColors);
        if (keys2.length === 1) {
          this.appendPalette(this.presetColors[keys2[0]], keys2[0], paletteGroup);
        } else {
          for (var i = 0, len = keys2.length; i < len; i++) {
            this.appendPalette(this.presetColors[keys2[i]], keys2[i], paletteGroup);
          }
        }
        if (selectAll(".e-row", paletteGroup).length > 10) {
          addClass([paletteGroup], "e-palette-group");
        }
      } else {
        this.appendPalette(presets.default, "default");
      }
      if (this.mode === "Palette" && !this.modeSwitcher && this.noColor) {
        this.setNoColor();
      }
      var width = parseInt(getComputedStyle(this.container).borderBottomWidth, 10);
      this.container.style.width = formatUnit(this.container.children[0].offsetWidth + width + width);
      this.rgb = this.hexToRgb(this.roundValue(this.value));
      this.hsv = this.rgbToHsv.apply(this, this.rgb);
    };
    ColorPicker2.prototype.firstPaletteFocus = function() {
      if (!select("." + SELECT, this.container.children[0])) {
        selectAll("." + PALETTES, this.container)[0].focus();
      }
    };
    ColorPicker2.prototype.appendPalette = function(colors, key, refEle) {
      var palette = this.createElement("div", { className: PALETTES, attrs: { "tabindex": "0" } });
      if (refEle) {
        refEle.appendChild(palette);
      } else {
        this.appendElement(palette);
      }
      var row;
      var tile;
      var roundedColor;
      for (var i = 0, len = colors.length; i < len; i++) {
        if (i === 0 || i % this.columns === 0) {
          row = this.createElement("div", {
            className: "e-row",
            attrs: { "role": "presentation" }
          });
          palette.appendChild(row);
        }
        roundedColor = this.roundValue(colors[i]).toLowerCase();
        tile = this.createElement("span", {
          className: TILE,
          attrs: { "role": "gridcell", "aria-label": roundedColor, "aria-selected": "false" }
        });
        this.trigger("beforeTileRender", { element: tile, presetName: key, value: colors[i] });
        row.appendChild(tile);
        if (this.value === roundedColor) {
          this.addTileSelection(tile);
          palette.focus();
        }
        tile.style.backgroundColor = this.convertToRgbString(this.hexToRgb(roundedColor));
      }
    };
    ColorPicker2.prototype.setNoColor = function() {
      var noColorEle = this.container.querySelector(".e-row").children[0];
      noColorEle.classList.add(NOCOLOR);
      if (!this.value) {
        noColorEle.classList.add(SELECT);
        closest(noColorEle, "." + PALETTES).focus();
      }
      ["aria-selected", "aria-label"].forEach(function(attr) {
        noColorEle.removeAttribute(attr);
      });
      noColorEle.style.backgroundColor = "";
    };
    ColorPicker2.prototype.appendElement = function(ele, insertPos) {
      if (insertPos === void 0) {
        insertPos = 0;
      }
      var refEle = this.container.children[insertPos];
      if (refEle) {
        this.container.insertBefore(ele, refEle);
      } else {
        this.container.appendChild(ele);
      }
    };
    ColorPicker2.prototype.addTileSelection = function(ele) {
      ele.classList.add(SELECT);
      ele.setAttribute("aria-selected", "true");
    };
    ColorPicker2.prototype.createPicker = function() {
      classList(this.container, [PICKERCONTENT], [PALETTECONTENT]);
      var hsvContainer = this.createElement("div", { className: HSVCONTAINER });
      this.appendElement(hsvContainer);
      hsvContainer.appendChild(this.createElement("div", { className: HSVAREA }));
      var dragHandler = this.createElement("span", { className: HANDLER, attrs: { "tabindex": "0" } });
      hsvContainer.appendChild(dragHandler);
      if (this.value === null) {
        this.value = "#008000ff";
      }
      this.rgb = this.hexToRgb(this.value);
      this.hsv = this.rgbToHsv.apply(this, this.rgb);
      this.setHsvContainerBg();
      this.setHandlerPosition();
      this.createSlider();
      this.createDragTooltip();
    };
    ColorPicker2.prototype.setHsvContainerBg = function(h) {
      if (h === void 0) {
        h = this.hsv[0];
      }
      this.getHsvContainer().style.backgroundColor = this.convertToRgbString(this.hsvToRgb(h, 100, 100, 1));
    };
    ColorPicker2.prototype.getHsvContainer = function() {
      return select("." + HSVCONTAINER, this.container);
    };
    ColorPicker2.prototype.setHandlerPosition = function() {
      var dragHandler = this.getDragHandler();
      var hsvArea = select("." + HSVAREA, this.container);
      if (this.enableRtl) {
        dragHandler.style.left = formatUnit(hsvArea.offsetWidth * Math.abs(100 - this.hsv[1]) / 100);
      } else {
        dragHandler.style.left = formatUnit(hsvArea.offsetWidth * this.hsv[1] / 100);
      }
      dragHandler.style.top = formatUnit(hsvArea.offsetHeight * (100 - this.hsv[2]) / 100);
    };
    ColorPicker2.prototype.createSlider = function() {
      var sliderPreviewWrapper = this.createElement("div", { className: "e-slider-preview" });
      this.appendElement(sliderPreviewWrapper, 1);
      this.createPreview(sliderPreviewWrapper);
      var sliderWrapper = this.createElement("div", { className: "e-colorpicker-slider" });
      sliderPreviewWrapper.insertBefore(sliderWrapper, sliderPreviewWrapper.children[0]);
      var slider = this.createElement("div", { className: "e-hue-slider" });
      sliderWrapper.appendChild(slider);
      this.hueSlider = new Slider({
        value: this.hsv[0],
        min: 0,
        max: 359,
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        change: this.hueChange.bind(this)
      });
      this.hueSlider.createElement = this.createElement;
      this.hueSlider.appendTo(slider);
      if (this.enableOpacity) {
        slider = this.createElement("div", { className: "e-opacity-slider" });
        sliderWrapper.appendChild(slider);
        this.createOpacitySlider(slider);
      }
    };
    ColorPicker2.prototype.createOpacitySlider = function(slider) {
      this.opacitySlider = new Slider({
        value: this.rgb[3] * 100,
        min: 0,
        max: 100,
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        change: this.opacityChange.bind(this)
      });
      this.opacitySlider.createElement = this.createElement;
      this.opacitySlider.appendTo(slider);
      var opacityBgTrack = this.createElement("div", { className: "e-opacity-empty-track" });
      slider.appendChild(opacityBgTrack);
      this.updateOpacitySliderBg();
    };
    ColorPicker2.prototype.updateOpacitySliderBg = function() {
      var direction = this.enableRtl ? "to left" : "to right";
      var opacityEle = select(".e-opacity-empty-track", this.opacitySlider.element);
      if (opacityEle) {
        opacityEle.style.background = "linear-gradient(" + direction + ", rgba(" + this.rgb.slice(0, 3) + ", 0) 0%, " + this.convertToRgbString(this.rgb.slice(0, 3)) + " 100%)";
      }
    };
    ColorPicker2.prototype.hueChange = function(args) {
      this.hsv[0] = args.value;
      this.setHsvContainerBg();
      this.convertToOtherFormat();
    };
    ColorPicker2.prototype.opacityChange = function(args) {
      var value = args.value;
      var pValue = this.rgbToHex(this.rgb);
      this.hsv[3] = value / 100;
      this.rgb[3] = value / 100;
      var cValue = this.rgbToHex(this.rgb);
      this.updateOpacityInput(value);
      var rgb = this.convertToRgbString(this.rgb);
      this.updatePreview(rgb);
      this.triggerEvent(cValue, pValue, rgb);
    };
    ColorPicker2.prototype.updateOpacityInput = function(value) {
      if (this.enableOpacity && !this.getWrapper().classList.contains(HIDEVALUE)) {
        var opacityTextBoxInst = getInstance(select("." + OPACITY, this.container), NumericTextBox);
        opacityTextBoxInst.value = value;
        opacityTextBoxInst.dataBind();
      }
    };
    ColorPicker2.prototype.createPreview = function(parentEle) {
      var previewContainer = this.createElement("div", { className: PREVIEW });
      parentEle.appendChild(previewContainer);
      var preview = this.createElement("span", { className: "e-preview " + CURRENT });
      previewContainer.appendChild(preview);
      var colorValue = this.convertToRgbString(this.rgb);
      preview.style.backgroundColor = colorValue;
      preview = this.createElement("span", { className: "e-preview " + PREVIOUS });
      previewContainer.appendChild(preview);
      preview.style.backgroundColor = colorValue;
    };
    ColorPicker2.prototype.isPicker = function() {
      return !this.container.classList.contains(PALETTECONTENT);
    };
    ColorPicker2.prototype.getPopupEle = function() {
      return this.container.parentElement;
    };
    ColorPicker2.prototype.createNumericInput = function(element2, value, label, max) {
      var _this = this;
      var numericInput = new NumericTextBox({
        value,
        placeholder: label,
        min: 0,
        max,
        format: "###.##",
        showSpinButton: false,
        floatLabelType: "Always",
        enableRtl: this.enableRtl,
        enabled: !this.disabled,
        readonly: this.isPicker() ? false : true,
        change: function(args) {
          if (args.event) {
            _this.inputHandler(args.event);
          }
        }
      });
      numericInput.createElement = this.createElement;
      numericInput.appendTo(element2);
    };
    ColorPicker2.prototype.createInput = function() {
      var isPicker = this.isPicker();
      var wrapper = this.getWrapper();
      if (isPicker && !wrapper.classList.contains(HIDEVALUE) || !isPicker && wrapper.classList.contains(SHOWVALUE)) {
        var inputWrap = this.createElement("div", { className: INPUTWRAPPER });
        if (isPicker) {
          this.appendElement(inputWrap, 2);
        } else {
          this.appendElement(inputWrap, 1);
        }
        var container = this.createElement("div", { className: "e-input-container" });
        inputWrap.appendChild(container);
        if (!wrapper.classList.contains(HIDEVALUESWITCH)) {
          this.appendValueSwitchBtn(inputWrap);
        }
        if (!wrapper.classList.contains(HIDEHEX)) {
          var hexInput = this.createElement("input", {
            className: HEX,
            attrs: { "maxlength": "7", "spellcheck": "false" }
          });
          container.appendChild(hexInput);
          Input.createInput({
            element: hexInput,
            floatLabelType: "Always",
            properties: {
              placeholder: "HEX",
              enableRtl: this.enableRtl,
              enabled: !this.disabled,
              readonly: this.isPicker() ? false : true
            }
          }, this.createElement);
          Input.setValue(this.value.slice(0, 7), hexInput);
          hexInput.addEventListener("input", this.inputHandler.bind(this));
        }
        if (!wrapper.classList.contains(HIDERGBA)) {
          var label = void 0;
          var value = void 0;
          if (this.isRgb) {
            label = "RGB";
            value = this.rgb;
          } else {
            label = "HSV";
            value = this.hsv;
          }
          var clsName = ["rh", "gs", "bv"];
          for (var i = 0; i < 3; i++) {
            this.createNumericInput(container.appendChild(this.createElement("input", { className: "e-" + clsName[i] + "-value" })), value[i], label[i], 255);
          }
          if (this.enableOpacity) {
            this.appendOpacityValue(container);
          }
        }
      }
    };
    ColorPicker2.prototype.appendOpacityValue = function(container) {
      this.createNumericInput(container.appendChild(this.createElement("input", { className: OPACITY })), this.rgb[3] * 100, "A", 100);
    };
    ColorPicker2.prototype.appendValueSwitchBtn = function(targetEle) {
      var valueSwitchBtn = this.createElement("button", {
        className: "e-icons e-css e-btn e-flat e-icon-btn " + FORMATSWITCH
      });
      targetEle.appendChild(valueSwitchBtn);
      if (this.isPicker() && !this.getWrapper().classList.contains(HIDERGBA)) {
        valueSwitchBtn.addEventListener("click", this.formatSwitchHandler.bind(this));
      }
    };
    ColorPicker2.prototype.createCtrlBtn = function() {
      if (this.modeSwitcher || this.showButtons) {
        this.l10n.setLocale(this.locale);
        var btnWrapper = this.createElement("div", { className: CTRLSWITCH });
        this.container.appendChild(btnWrapper);
        if (this.showButtons) {
          var controlBtnWrapper = this.createElement("div", { className: CTRLBTN });
          btnWrapper.appendChild(controlBtnWrapper);
          var apply = this.l10n.getConstant("Apply");
          controlBtnWrapper.appendChild(this.createElement("button", {
            innerHTML: apply,
            className: "e-btn e-css e-flat e-primary e-small " + APPLY,
            attrs: { "title": apply }
          }));
          var cancel = this.l10n.getConstant("Cancel");
          controlBtnWrapper.appendChild(this.createElement("button", {
            innerHTML: cancel,
            className: "e-btn e-css e-flat e-small " + CANCEL,
            attrs: { "title": cancel }
          }));
        }
        if (this.modeSwitcher) {
          this.appendModeSwitchBtn();
        }
      }
    };
    ColorPicker2.prototype.appendModeSwitchBtn = function() {
      var modeSwitcher = this.createElement("button", {
        className: "e-icons e-btn e-flat e-icon-btn " + MODESWITCH,
        attrs: { title: this.l10n.getConstant("ModeSwitcher") }
      });
      select("." + CTRLSWITCH, this.container).insertBefore(modeSwitcher, select("." + CTRLBTN, this.container));
    };
    ColorPicker2.prototype.createDragTooltip = function() {
      var _this = this;
      var tooltip = new Tooltip({
        opensOn: "Custom",
        showTipPointer: false,
        cssClass: "e-color-picker-tooltip",
        beforeOpen: function(args) {
          _this.tooltipEle = args.element;
        },
        animation: { open: { effect: "None" }, close: { effect: "None" } }
      });
      tooltip.createElement = this.createElement;
      tooltip.appendTo(this.container);
      tooltip.open(this.container);
      this.tooltipEle.style.zIndex = getZindexPartial(this.tooltipEle).toString();
      select(".e-tip-content", this.tooltipEle).appendChild(this.createElement("div", { className: "e-tip-transparent" }));
    };
    ColorPicker2.prototype.getTooltipInst = function() {
      return getInstance(this.container, Tooltip);
    };
    ColorPicker2.prototype.setTooltipOffset = function(value) {
      this.getTooltipInst().offsetY = value;
    };
    ColorPicker2.prototype.toggleDisabled = function(enable) {
      if (enable) {
        this.getWrapper().classList.add(DISABLED6);
      } else {
        this.getWrapper().classList.remove(DISABLED6);
      }
      if (this.showButtons) {
        [].slice.call(selectAll(".e-btn", this.container)).forEach(function(ele) {
          if (enable) {
            attributes(ele, { "disabled": "" });
          } else {
            ele.removeAttribute("disabled");
          }
        });
      }
    };
    ColorPicker2.prototype.convertToRgbString = function(rgb) {
      return rgb.length ? rgb.length === 4 ? "rgba(" + rgb.join() + ")" : "rgb(" + rgb.join() + ")" : "";
    };
    ColorPicker2.prototype.convertToHsvString = function(hsv) {
      return hsv.length === 4 ? "hsva(" + hsv.join() + ")" : "hsv(" + hsv.join() + ")";
    };
    ColorPicker2.prototype.updateHsv = function() {
      this.hsv[1] = this.hsv[1] > 100 ? 100 : this.hsv[1];
      this.hsv[2] = this.hsv[2] > 100 ? 100 : this.hsv[2];
      this.setHandlerPosition();
    };
    ColorPicker2.prototype.convertToOtherFormat = function(isKey) {
      if (isKey === void 0) {
        isKey = false;
      }
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = this.hsvToRgb.apply(this, this.hsv);
      var cValue = this.rgbToHex(this.rgb);
      var rgba = this.convertToRgbString(this.rgb);
      this.updatePreview(rgba);
      this.updateInput(cValue);
      this.triggerEvent(cValue, pValue, rgba, isKey);
    };
    ColorPicker2.prototype.updateInput = function(value) {
      var wrapper = this.getWrapper();
      if (!wrapper.classList.contains(HIDEVALUE)) {
        if (!wrapper.classList.contains(HIDEHEX)) {
          Input.setValue(value.substr(0, 7), select("." + HEX, this.container));
        }
        if (!wrapper.classList.contains(HIDERGBA)) {
          if (this.isRgb) {
            this.updateValue(this.rgb, false);
          } else {
            this.updateValue(this.hsv, false);
          }
        }
      }
    };
    ColorPicker2.prototype.updatePreview = function(value) {
      if (this.enableOpacity) {
        this.updateOpacitySliderBg();
      }
      select(".e-tip-transparent", this.tooltipEle).style.backgroundColor = value;
      select("." + PREVIEW + " ." + CURRENT, this.container).style.backgroundColor = value;
      select("." + PREVIEW + " ." + PREVIOUS, this.container).style.backgroundColor = this.convertToRgbString(this.hexToRgb(this.value));
    };
    ColorPicker2.prototype.getDragHandler = function() {
      return select("." + HANDLER, this.container);
    };
    ColorPicker2.prototype.removeTileSelection = function() {
      var selectedEle = [].slice.call(selectAll("." + SELECT, this.container.children[0]));
      selectedEle.forEach(function(ele) {
        ele.classList.remove(SELECT);
        ele.setAttribute("aria-selected", "false");
      });
    };
    ColorPicker2.prototype.convertRgbToNumberArray = function(value) {
      return value.slice(value.indexOf("(") + 1, value.indexOf(")")).split(",").map(function(n, i) {
        return i !== 3 ? parseInt(n, 10) : parseFloat(n);
      });
    };
    ColorPicker2.prototype.getValue = function(value, type) {
      if (!value) {
        value = this.value;
      }
      type = !type ? "hex" : type.toLowerCase();
      if (value[0] === "r") {
        var cValue = this.convertRgbToNumberArray(value);
        if (type === "hex" || type === "hexa") {
          var hex = this.rgbToHex(cValue);
          return type === "hex" ? hex.slice(0, 7) : hex;
        } else {
          if (type === "hsv") {
            return this.convertToHsvString(this.rgbToHsv.apply(this, cValue.slice(0, 3)));
          } else {
            if (type === "hsva") {
              return this.convertToHsvString(this.rgbToHsv.apply(this, cValue));
            } else {
              return "null";
            }
          }
        }
      } else {
        if (value[0] === "h") {
          var cValue = this.hsvToRgb.apply(this, this.convertRgbToNumberArray(value));
          if (type === "rgba") {
            return this.convertToRgbString(cValue);
          } else {
            if (type === "hex" || type === "hexa") {
              var hex = this.rgbToHex(cValue);
              return type === "hex" ? hex.slice(0, 7) : hex;
            } else {
              if (type === "rgb") {
                return this.convertToRgbString(cValue.slice(0, 3));
              } else {
                return "null";
              }
            }
          }
        } else {
          value = this.roundValue(value);
          var rgb = this.hexToRgb(value);
          if (type === "rgb" || type === "hsv") {
            rgb = rgb.slice(0, 3);
          }
          if (type === "rgba" || type === "rgb") {
            return this.convertToRgbString(rgb);
          } else {
            if (type === "hsva" || type === "hsv") {
              return this.convertToHsvString(this.rgbToHsv.apply(this, rgb));
            } else {
              if (type === "hex") {
                return value.slice(0, 7);
              } else {
                if (type === "a") {
                  return rgb[3].toString();
                } else {
                  return "null";
                }
              }
            }
          }
        }
      }
    };
    ColorPicker2.prototype.toggle = function() {
      if (this.container.parentElement.classList.contains("e-popup-close")) {
        this.splitBtn.toggle();
      } else {
        this.closePopup(null);
      }
    };
    ColorPicker2.prototype.getModuleName = function() {
      return "colorpicker";
    };
    ColorPicker2.prototype.getPersistData = function() {
      return this.addOnPersist(["value"]);
    };
    ColorPicker2.prototype.wireEvents = function() {
      if (this.isPicker()) {
        var dragHandler = this.getDragHandler();
        EventHandler.add(dragHandler, "keydown", this.pickerKeyDown, this);
        EventHandler.add(this.getHsvContainer(), "mousedown touchstart", this.handlerDown, this);
        if (this.modeSwitcher || this.showButtons) {
          this.addCtrlSwitchEvent();
        }
        EventHandler.add(select("." + PREVIOUS, this.container), "click", this.previewHandler, this);
      } else {
        EventHandler.add(this.container, "click", this.paletteClickHandler, this);
        EventHandler.add(this.container, "keydown", this.paletteKeyDown, this);
      }
    };
    ColorPicker2.prototype.formResetHandler = function() {
      this.value = this.initialInputValue;
      attributes(this.element, { "value": this.initialInputValue });
    };
    ColorPicker2.prototype.addCtrlSwitchEvent = function() {
      var ctrlSwitchBtn = select("." + CTRLSWITCH, this.container);
      if (ctrlSwitchBtn) {
        EventHandler.add(ctrlSwitchBtn, "click", this.btnClickHandler, this);
      }
    };
    ColorPicker2.prototype.pickerKeyDown = function(e) {
      switch (e.keyCode) {
        case 39:
          this.handlerDragPosition(1, this.enableRtl ? -1 : 1, e);
          break;
        case 37:
          this.handlerDragPosition(1, this.enableRtl ? 1 : -1, e);
          break;
        case 38:
          this.handlerDragPosition(2, 1, e);
          break;
        case 40:
          this.handlerDragPosition(2, -1, e);
          break;
        case 13: {
          e.preventDefault();
          var cValue = this.rgbToHex(this.rgb);
          this.enterKeyHandler(cValue, e);
        }
      }
    };
    ColorPicker2.prototype.enterKeyHandler = function(value, e) {
      this.triggerChangeEvent(value);
      if (!this.inline) {
        this.closePopup(e);
        this.splitBtn.element.focus();
      }
    };
    ColorPicker2.prototype.closePopup = function(e) {
      var _this = this;
      var beforeCloseArgs = { element: this.container, event: e, cancel: false };
      this.trigger("beforeClose", beforeCloseArgs, function(observedcloseArgs) {
        if (!observedcloseArgs.cancel) {
          _this.splitBtn.toggle();
          _this.onPopupClose();
        }
      });
    };
    ColorPicker2.prototype.triggerChangeEvent = function(value) {
      var hex = value.slice(0, 7);
      this.trigger("change", {
        currentValue: { hex, rgba: this.convertToRgbString(this.rgb) },
        previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },
        value: this.enableOpacity ? value : hex
      });
      if (this.enableOpacity) {
        this.setProperties({ "value": value }, true);
      } else {
        this.setProperties({ "value": hex }, true);
      }
      this.element.value = hex ? hex : "#000000";
    };
    ColorPicker2.prototype.handlerDragPosition = function(prob, value, e) {
      e.preventDefault();
      this.hsv[prob] += value * (e.ctrlKey ? 1 : 3);
      if (this.hsv[prob] < 0) {
        this.hsv[prob] = 0;
      }
      this.updateHsv();
      this.convertToOtherFormat(true);
    };
    ColorPicker2.prototype.handlerDown = function(e) {
      e.preventDefault();
      if (e.type === "mousedown") {
        this.clientX = Math.abs(e.pageX - pageXOffset);
        this.clientY = Math.abs(e.pageY - pageYOffset);
        this.setTooltipOffset(8);
      } else {
        this.clientX = Math.abs(e.changedTouches[0].pageX - pageXOffset);
        this.clientY = Math.abs(e.changedTouches[0].pageY - pageYOffset);
        this.setTooltipOffset(-8);
      }
      this.setHsv(this.clientX, this.clientY);
      this.getDragHandler().style.transition = "left .4s cubic-bezier(.25, .8, .25, 1), top .4s cubic-bezier(.25, .8, .25, 1)";
      this.updateHsv();
      this.convertToOtherFormat();
      this.getDragHandler().focus();
      EventHandler.add(document, "mousemove touchmove", this.handlerMove, this);
      EventHandler.add(document, "mouseup touchend", this.handlerEnd, this);
    };
    ColorPicker2.prototype.handlerMove = function(e) {
      if (e.type !== "touchmove") {
        e.preventDefault();
      }
      var x;
      var y;
      if (e.type === "mousemove") {
        x = Math.abs(e.pageX - pageXOffset);
        y = Math.abs(e.pageY - pageYOffset);
      } else {
        x = Math.abs(e.changedTouches[0].pageX - pageXOffset);
        y = Math.abs(e.changedTouches[0].pageY - pageYOffset);
      }
      this.setHsv(x, y);
      var dragHandler = this.getDragHandler();
      this.updateHsv();
      this.convertToOtherFormat();
      this.getTooltipInst().refresh(dragHandler);
      if (!this.tooltipEle.style.transform) {
        if (Math.abs(this.clientX - x) > 8 || Math.abs(this.clientY - y) > 8) {
          select("." + HSVAREA, this.container).style.cursor = "pointer";
          dragHandler.style.transition = "none";
          if (!this.inline) {
            this.tooltipEle.style.zIndex = (parseInt(this.getPopupEle().style.zIndex, 10) + 1).toString();
          }
          this.tooltipEle.style.transform = "rotate(45deg)";
          dragHandler.classList.add("e-hide-handler");
        }
      }
    };
    ColorPicker2.prototype.setHsv = function(clientX, clientY) {
      var ele = select("." + HSVAREA, this.container);
      var position = ele.getBoundingClientRect();
      if (this.enableRtl) {
        clientX = clientX > position.right ? 0 : Math.abs(clientX - position.right);
      } else {
        clientX = clientX > position.left ? Math.abs(clientX - position.left) : 0;
      }
      clientY = clientY > position.top ? Math.abs(clientY - position.top) : 0;
      this.hsv[2] = Math.round(Number(100 * (ele.offsetHeight - Math.max(0, Math.min(ele.offsetHeight, clientY - ele.offsetTop))) / ele.offsetHeight) * 10) / 10;
      this.hsv[1] = Math.round(Number(100 * Math.max(0, Math.min(ele.offsetWidth, clientX - ele.offsetLeft)) / ele.offsetWidth) * 10) / 10;
    };
    ColorPicker2.prototype.handlerEnd = function(e) {
      if (e.type !== "touchend") {
        e.preventDefault();
      }
      EventHandler.remove(document, "mousemove touchmove", this.handlerMove);
      EventHandler.remove(document, "mouseup touchend", this.handlerEnd);
      var dragHandler = this.getDragHandler();
      select("." + HSVAREA, this.container).style.cursor = "";
      if (this.tooltipEle.style.transform) {
        this.tooltipEle.style.transform = "";
        dragHandler.classList.remove("e-hide-handler");
      }
      if (!this.inline && !this.showButtons) {
        this.closePopup(e);
      }
    };
    ColorPicker2.prototype.btnClickHandler = function(e) {
      var target = e.target;
      if (closest(target, "." + MODESWITCH)) {
        e.stopPropagation();
        this.switchToPalette();
      } else {
        if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
          this.ctrlBtnClick(target, e);
        }
      }
    };
    ColorPicker2.prototype.switchToPalette = function() {
      this.trigger("beforeModeSwitch", { element: this.container, mode: "Palette" });
      this.unWireEvents();
      this.destroyOtherComp();
      detach(select(".e-slider-preview", this.container));
      if (!this.getWrapper().classList.contains(HIDEVALUE)) {
        remove(select("." + INPUTWRAPPER, this.container));
      }
      detach(this.getHsvContainer());
      this.createPalette();
      this.firstPaletteFocus();
      this.createInput();
      this.refreshPopupPos();
      this.wireEvents();
      this.trigger("onModeSwitch", { element: this.container, mode: "Palette" });
    };
    ColorPicker2.prototype.refreshPopupPos = function() {
      if (!this.inline) {
        var popupEle = this.getPopupEle();
        popupEle.style.left = formatUnit(0 + pageXOffset);
        popupEle.style.top = formatUnit(0 + pageYOffset);
        this.getPopupInst().refreshPosition(this.splitBtn.element.parentElement);
      }
    };
    ColorPicker2.prototype.formatSwitchHandler = function() {
      if (this.isRgb) {
        this.updateValue(this.hsv, true, 3, [360, 100, 100]);
        this.isRgb = false;
      } else {
        this.updateValue(this.rgb, true, 2);
        this.isRgb = true;
      }
    };
    ColorPicker2.prototype.updateValue = function(value, format, idx, max) {
      var clsName = ["e-rh-value", "e-gs-value", "e-bv-value"];
      var inst;
      for (var i = 0, len = clsName.length; i < len; i++) {
        inst = getInstance(select("." + clsName[i], this.container), NumericTextBox);
        inst.value = Math.round(value[i]);
        if (format) {
          inst.placeholder = clsName[i].substr(idx, 1).toUpperCase();
          inst.max = max ? max[i] : 255;
        }
        inst.dataBind();
      }
    };
    ColorPicker2.prototype.previewHandler = function(e) {
      var target = e.target;
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = this.convertRgbToNumberArray(target.style.backgroundColor);
      if (!this.rgb[3]) {
        this.rgb[3] = 1;
      }
      var cValue = this.rgbToHex(this.rgb);
      var hsv = this.rgbToHsv.apply(this, this.rgb);
      if (hsv[0] !== this.hsv[0]) {
        this.hueSlider.setProperties({ "value": hsv[0] }, true);
        this.hueSlider.refresh();
      }
      this.setHsvContainerBg(hsv[0]);
      if (this.enableOpacity && hsv[3] !== this.hsv[3]) {
        this.opacitySlider.setProperties({ "value": hsv[3] * 100 }, true);
        this.opacitySlider.refresh();
        this.updateOpacitySliderBg();
      }
      this.hsv = hsv;
      this.setHandlerPosition();
      this.updateInput(cValue);
      select("." + PREVIEW + " ." + CURRENT, this.container).style.backgroundColor = this.convertToRgbString(this.rgb);
      this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
    };
    ColorPicker2.prototype.paletteClickHandler = function(e) {
      e.preventDefault();
      var target = e.target;
      if (target.classList.contains(TILE)) {
        this.removeTileSelection();
        this.addTileSelection(target);
        if (target.classList.contains(NOCOLOR)) {
          this.noColorTile();
        } else {
          var cValue = target.getAttribute("aria-label");
          var pValue = this.rgbToHex(this.rgb);
          this.rgb = this.hexToRgb(this.roundValue(cValue));
          this.hsv = this.rgbToHsv.apply(this, this.rgb);
          if (this.getWrapper().classList.contains(SHOWVALUE)) {
            this.updateInput(cValue);
          }
          this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb));
        }
        if (!this.inline && !this.showButtons) {
          this.closePopup(e);
        }
      } else {
        if (closest(target, "." + MODESWITCH)) {
          this.switchToPicker();
        } else {
          if (target.classList.contains(APPLY) || target.classList.contains(CANCEL)) {
            this.ctrlBtnClick(target, e);
          } else {
            if (this.getWrapper().classList.contains(SHOWVALUE) && closest(target, "." + FORMATSWITCH)) {
              this.formatSwitchHandler();
            }
          }
        }
      }
    };
    ColorPicker2.prototype.noColorTile = function(isKey) {
      if (isKey === void 0) {
        isKey = false;
      }
      var pValue = this.rgbToHex(this.rgb);
      this.rgb = [];
      this.hsv = [];
      this.triggerEvent("", pValue, "", isKey);
    };
    ColorPicker2.prototype.switchToPicker = function() {
      var wrapper = this.getWrapper();
      this.trigger("beforeModeSwitch", { element: this.container, mode: "Picker" });
      this.unWireEvents();
      [].slice.call(selectAll("." + PALETTES, this.container)).forEach(function(ele) {
        detach(ele);
      });
      if (wrapper.classList.contains(SHOWVALUE)) {
        detach(select("." + INPUTWRAPPER, this.container));
      }
      this.container.style.width = "";
      var grpEle = select(".e-custom-palette", this.container);
      if (this.presetColors) {
        remove(grpEle);
      }
      this.createPicker();
      this.getDragHandler().focus();
      this.createInput();
      this.refreshPopupPos();
      this.wireEvents();
      this.trigger("onModeSwitch", { element: this.container, mode: "Picker" });
    };
    ColorPicker2.prototype.ctrlBtnClick = function(ele, e) {
      if (ele.classList.contains(APPLY)) {
        var cValue = this.rgbToHex(this.rgb);
        this.triggerChangeEvent(cValue);
      }
      if (!this.inline) {
        this.closePopup(e);
        this.splitBtn.element.focus();
      }
    };
    ColorPicker2.prototype.paletteKeyDown = function(e) {
      var target = e.target;
      if (!target.classList.contains(PALETTES)) {
        return;
      }
      var selectedEle;
      var idx;
      var tiles = [].slice.call(selectAll("." + TILE, target));
      var prevSelectedEle = tiles.filter(function(tile) {
        return tile.classList.contains("e-selected");
      }).pop();
      switch (!e.altKey && e.keyCode) {
        case 39:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? -1 : 1)] : tiles[this.enableRtl ? tiles.length - 1 : 0];
          this.keySelectionChanges(selectedEle);
          break;
        case 37:
          e.preventDefault();
          selectedEle = prevSelectedEle ? tiles[this.tilePosition(tiles, prevSelectedEle, this.enableRtl ? 1 : -1)] : tiles[this.enableRtl ? 0 : tiles.length - 1];
          this.keySelectionChanges(selectedEle);
          break;
        case 38:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, -this.columns) : 0;
          selectedEle = tiles[idx] ? tiles[idx] : tiles[idx - this.columns];
          this.keySelectionChanges(selectedEle);
          break;
        case 40:
          e.preventDefault();
          idx = prevSelectedEle ? this.tilePosition(tiles, prevSelectedEle, this.columns) : tiles.length - 1;
          if (tiles[idx]) {
            selectedEle = tiles[idx];
          } else {
            idx %= tiles.length;
            idx += tiles[tiles.length - 1].parentElement.childElementCount;
            selectedEle = tiles[idx];
          }
          this.keySelectionChanges(selectedEle);
          break;
        case 13:
          e.preventDefault();
          if (prevSelectedEle) {
            var cValue = prevSelectedEle.getAttribute("aria-label");
            this.enterKeyHandler(cValue ? cValue : "", e);
          }
      }
    };
    ColorPicker2.prototype.keySelectionChanges = function(newEle) {
      this.removeTileSelection();
      this.addTileSelection(newEle);
      if (newEle.classList.contains(NOCOLOR)) {
        this.noColorTile(true);
      } else {
        var cValue = newEle.getAttribute("aria-label");
        var pValue = this.rgbToHex(this.rgb);
        this.rgb = this.hexToRgb(cValue);
        this.hsv = this.rgbToHsv.apply(this, this.rgb);
        if (this.getWrapper().classList.contains(SHOWVALUE)) {
          this.updateInput(cValue);
        }
        this.triggerEvent(cValue, pValue, this.convertToRgbString(this.rgb), true);
      }
    };
    ColorPicker2.prototype.tilePosition = function(items, element2, cIdx) {
      items = Array.prototype.slice.call(items);
      var n = items.length;
      var emptyCount = this.columns - items[n - 1].parentElement.childElementCount;
      var idx = items.indexOf(element2);
      idx += cIdx;
      if (idx < 0) {
        idx += n + emptyCount;
      } else {
        idx %= n + emptyCount;
      }
      return idx;
    };
    ColorPicker2.prototype.inputHandler = function(e) {
      var target = e.target;
      if (!target.value.length) {
        return;
      }
      var hsv;
      var pValue;
      var label = select(".e-float-text", target.parentElement).textContent;
      switch (label) {
        case "HEX": {
          var value = "";
          if (target.value[0] === "#" && target.value.length !== 5 || target.value[0] !== "#" && target.value.length !== 4) {
            value = this.roundValue(target.value);
          }
          if (value.length === 9) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb = this.hexToRgb(value + value.substr(-2));
            this.inputValueChange(this.rgbToHsv.apply(this, this.rgb), pValue, target.value);
          } else {
            return;
          }
          break;
        }
        case "R":
          if (this.rgb[0] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[0] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue);
          }
          break;
        case "G":
          if (this.rgb[1] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[1] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue);
          }
          break;
        case "B":
          if (this.rgb[2] !== Number(target.value)) {
            pValue = this.rgbToHex(this.rgb);
            this.rgb[2] = Number(target.value);
            hsv = this.rgbToHsv.apply(this, this.rgb);
            this.inputValueChange(hsv, pValue);
          }
          break;
        case "H":
          this.hueSlider.value = Number(target.value);
          break;
        case "S":
          if (this.hsv[1] !== Number(target.value)) {
            this.hsv[1] = Number(target.value);
            this.updateHsv();
            this.convertToOtherFormat();
          }
          break;
        case "V":
          if (this.hsv[2] !== Number(target.value)) {
            this.hsv[2] = Number(target.value);
            this.updateHsv();
            this.convertToOtherFormat();
          }
          break;
        case "A":
          this.opacitySlider.value = Number(target.value);
          break;
      }
    };
    ColorPicker2.prototype.inputValueChange = function(hsv, pValue, value) {
      if (hsv[0] !== this.hsv[0]) {
        this.hueSlider.setProperties({ "value": hsv[0] }, true);
        this.hueSlider.refresh();
        this.setHsvContainerBg(hsv[0]);
      }
      this.hsv = hsv;
      var cValue = this.rgbToHex(this.rgb);
      this.setHandlerPosition();
      this.updateInput(value ? value : cValue);
      var rgba = this.convertToRgbString(this.rgb);
      this.updatePreview(rgba);
      this.triggerEvent(cValue, pValue, rgba);
    };
    ColorPicker2.prototype.triggerEvent = function(cValue, pValue, rgba, isKey) {
      if (isKey === void 0) {
        isKey = false;
      }
      var hex = cValue.slice(0, 7);
      if (!this.showButtons && !isKey) {
        this.trigger("change", {
          currentValue: { hex, rgba },
          previousValue: { hex: this.value.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(this.value)) },
          value: cValue
        });
        if (this.enableOpacity) {
          this.setProperties({ "value": cValue }, true);
        } else {
          this.setProperties({ "value": hex }, true);
        }
        this.element.value = hex ? hex : "#000000";
      } else {
        this.trigger("select", {
          currentValue: { hex, rgba },
          previousValue: { hex: pValue.slice(0, 7), rgba: this.convertToRgbString(this.hexToRgb(pValue)) }
        });
      }
    };
    ColorPicker2.prototype.destroy = function() {
      var _this = this;
      var wrapper = this.getWrapper();
      _super.prototype.destroy.call(this);
      ["tabindex", "spellcheck"].forEach(function(attr) {
        _this.element.removeAttribute(attr);
      });
      if (this.inline) {
        this.unWireEvents();
        this.destroyOtherComp();
      } else {
        if (this.isPopupOpen()) {
          this.unWireEvents();
          this.destroyOtherComp();
        }
        this.splitBtn.destroy();
        this.splitBtn = null;
      }
      this.tileRipple();
      this.tileRipple = null;
      this.ctrlBtnRipple();
      this.ctrlBtnRipple = null;
      if (this.element.nextElementSibling) {
        detach(this.element.nextElementSibling);
      }
      if (wrapper) {
        wrapper.parentElement.insertBefore(this.element, wrapper);
        detach(wrapper);
      }
      this.container = null;
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    ColorPicker2.prototype.destroyOtherComp = function() {
      if (this.isPicker()) {
        this.hueSlider.destroy();
        if (this.enableOpacity) {
          this.opacitySlider.destroy();
          this.opacitySlider = null;
        }
        this.hueSlider = null;
        var tooltipInst = this.getTooltipInst();
        tooltipInst.close();
        tooltipInst.destroy();
        this.tooltipEle = null;
      }
    };
    ColorPicker2.prototype.isPopupOpen = function() {
      return this.getPopupEle().classList.contains("e-popup-open");
    };
    ColorPicker2.prototype.unWireEvents = function() {
      if (this.isPicker()) {
        var dragHandler = this.getDragHandler();
        EventHandler.remove(dragHandler, "keydown", this.pickerKeyDown);
        EventHandler.remove(this.getHsvContainer(), "mousedown touchstart", this.handlerDown);
        if (this.modeSwitcher || this.showButtons) {
          EventHandler.remove(select("." + CTRLSWITCH, this.container), "click", this.btnClickHandler);
        }
        EventHandler.remove(select("." + PREVIOUS, this.container), "click", this.previewHandler);
      } else {
        EventHandler.remove(this.container, "click", this.paletteClickHandler);
        EventHandler.remove(this.container, "keydown", this.paletteKeyDown);
      }
    };
    ColorPicker2.prototype.roundValue = function(value) {
      if (!value) {
        return "";
      }
      if (value[0] !== "#") {
        value = "#" + value;
      }
      var len = value.length;
      if (len === 4) {
        value += "f";
        len = 5;
      }
      if (len === 5) {
        var tempValue = "";
        for (var i = 1, len_1 = value.length; i < len_1; i++) {
          tempValue += value.charAt(i) + value.charAt(i);
        }
        value = "#" + tempValue;
        len = 9;
      }
      if (len === 7) {
        value += "ff";
      }
      return value;
    };
    ColorPicker2.prototype.hexToRgb = function(hex) {
      if (!hex) {
        return [];
      }
      hex = hex.trim();
      if (hex.length !== 9) {
        hex = this.roundValue(hex);
      }
      var opacity = Number((parseInt(hex.slice(-2), 16) / 255).toFixed(2));
      hex = hex.slice(1, 7);
      var bigInt = parseInt(hex, 16);
      var h = [];
      h.push(bigInt >> 16 & 255);
      h.push(bigInt >> 8 & 255);
      h.push(bigInt & 255);
      h.push(opacity);
      return h;
    };
    ColorPicker2.prototype.rgbToHsv = function(r, g, b, opacity) {
      if (this.rgb && !this.rgb.length) {
        return [];
      }
      r /= 255;
      g /= 255;
      b /= 255;
      var max = Math.max(r, g, b);
      var min = Math.min(r, g, b);
      var h;
      var v = max;
      var d = max - min;
      var s = max === 0 ? 0 : d / max;
      if (max === min) {
        h = 0;
      } else {
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
            break;
        }
        h /= 6;
      }
      var hsv = [Math.round(h * 360), Math.round(s * 1e3) / 10, Math.round(v * 1e3) / 10];
      if (!isNullOrUndefined(opacity)) {
        hsv.push(opacity);
      }
      return hsv;
    };
    ColorPicker2.prototype.hsvToRgb = function(h, s, v, opacity) {
      var r;
      var g;
      var b;
      s /= 100;
      v /= 100;
      if (s === 0) {
        r = g = b = v;
        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), opacity];
      }
      h /= 60;
      var i = Math.floor(h);
      var f = h - i;
      var p = v * (1 - s);
      var q = v * (1 - s * f);
      var t = v * (1 - s * (1 - f));
      switch (i) {
        case 0:
          r = v;
          g = t;
          b = p;
          break;
        case 1:
          r = q;
          g = v;
          b = p;
          break;
        case 2:
          r = p;
          g = v;
          b = t;
          break;
        case 3:
          r = p;
          g = q;
          b = v;
          break;
        case 4:
          r = t;
          g = p;
          b = v;
          break;
        default:
          r = v;
          g = p;
          b = q;
      }
      var rgb = [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
      if (!isNullOrUndefined(opacity)) {
        rgb.push(opacity);
      }
      return rgb;
    };
    ColorPicker2.prototype.rgbToHex = function(rgb) {
      return rgb.length ? "#" + this.hex(rgb[0]) + this.hex(rgb[1]) + this.hex(rgb[2]) + (!isNullOrUndefined(rgb[3]) ? rgb[3] !== 0 ? (Math.round(rgb[3] * 255) + 65536).toString(16).substr(-2) : "00" : "") : "";
    };
    ColorPicker2.prototype.hex = function(x) {
      return ("0" + x.toString(16)).slice(-2);
    };
    ColorPicker2.prototype.changeModeSwitcherProp = function(prop) {
      var ctrlSwitchWrapper = select("." + CTRLSWITCH, this.container);
      if (prop) {
        if (ctrlSwitchWrapper) {
          this.appendModeSwitchBtn();
        } else {
          this.createCtrlBtn();
          if (this.isPicker() && !this.disabled) {
            this.addCtrlSwitchEvent();
          }
        }
      } else {
        if (ctrlSwitchWrapper) {
          if (this.showButtons) {
            detach(select("." + MODESWITCH, ctrlSwitchWrapper));
          } else {
            remove(ctrlSwitchWrapper);
          }
        }
      }
    };
    ColorPicker2.prototype.changeShowBtnProps = function(prop) {
      var ctrlBtnWrapper = select("." + CTRLSWITCH, this.container);
      if (prop) {
        if (ctrlBtnWrapper) {
          remove(ctrlBtnWrapper);
        }
        this.createCtrlBtn();
        if (this.isPicker() && !this.disabled) {
          this.addCtrlSwitchEvent();
        }
      } else {
        if (this.modeSwitcher) {
          detach(select("." + CTRLBTN, ctrlBtnWrapper));
        } else {
          remove(ctrlBtnWrapper);
        }
      }
    };
    ColorPicker2.prototype.changeValueProp = function(newProp) {
      if (this.isPicker()) {
        this.rgb = this.hexToRgb(newProp);
        this.hsv = this.rgbToHsv.apply(this, this.rgb);
        this.setHandlerPosition();
        detach(closest(this.hueSlider.element, ".e-slider-preview"));
        this.createSlider();
        this.setHsvContainerBg();
        this.updateInput(newProp);
        if (this.rgb.length === 4) {
          this.updateOpacityInput(this.rgb[3] * 100);
        }
      } else {
        this.removeTileSelection();
        var ele = this.container.querySelector('span[aria-label="' + this.roundValue(newProp) + '"]');
        if (ele) {
          this.addTileSelection(ele);
        }
      }
    };
    ColorPicker2.prototype.setInputEleProps = function() {
      remove(select("." + INPUTWRAPPER, this.container));
      this.createInput();
    };
    ColorPicker2.prototype.changeDisabledProp = function(newProp) {
      if (this.isPicker()) {
        this.hueSlider.enabled = !newProp;
        this.opacitySlider.enabled = !newProp;
        this.setInputEleProps();
      }
      if (newProp) {
        this.toggleDisabled(true);
        this.unWireEvents();
      } else {
        this.toggleDisabled(false);
        this.wireEvents();
      }
    };
    ColorPicker2.prototype.changeCssClassProps = function(newProp, oldProp) {
      var wrapper = this.getWrapper();
      var popupWrapper = this.getPopupEle();
      if (oldProp) {
        removeClass([wrapper, popupWrapper], oldProp.split(" "));
      }
      if (newProp) {
        addClass([wrapper, popupWrapper], newProp.split(" "));
      }
    };
    ColorPicker2.prototype.changeRtlProps = function(newProp) {
      if (newProp) {
        addClass([this.getWrapper()], "e-rtl");
      } else {
        removeClass([this.getWrapper()], "e-rtl");
      }
    };
    ColorPicker2.prototype.changePaletteProps = function() {
      detach(this.container.children[0]);
      this.container.style.width = "";
      this.createPalette();
    };
    ColorPicker2.prototype.changeOpacityProps = function(newProp) {
      var wrapper = this.getWrapper();
      if (newProp) {
        removeClass([this.container.parentElement], HIDEOPACITY);
        this.createOpacitySlider(select(".e-colorpicker-slider", this.container).appendChild(this.createElement("div", { className: "e-opacity-slider" })));
        if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
          this.appendOpacityValue(select(".e-input-container", this.container));
        }
      } else {
        addClass([this.container.parentElement], HIDEOPACITY);
        this.opacitySlider.destroy();
        remove(this.opacitySlider.element);
        this.opacitySlider = null;
        if (!wrapper.classList.contains(HIDEVALUE) && !wrapper.classList.contains(HIDERGBA)) {
          remove(select("." + OPACITY, this.container).parentElement);
        }
      }
    };
    ColorPicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var _this = this;
      if (!isNullOrUndefined(newProp.value)) {
        var value = this.roundValue(newProp.value);
        if (value.length === 9) {
          this.element.value = this.roundValue(value).slice(0, 7);
          var preview = this.splitBtn && select("." + SPLITPREVIEW, this.splitBtn.element);
          if (preview) {
            preview.style.backgroundColor = this.convertToRgbString(this.hexToRgb(newProp.value));
          }
        } else {
          this.value = oldProp.value;
        }
      }
      if (!this.inline && isNullOrUndefined(newProp.inline)) {
        var otherCompModel = ["disabled", "enableRtl"];
        this.splitBtn.setProperties(getModel(newProp, otherCompModel));
        if (!this.isPopupOpen()) {
          this.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
          this.changeRtlProps(newProp.enableRtl);
          return;
        }
      }
      var _loop_1 = function(prop2) {
        switch (prop2) {
          case "inline":
            if (newProp.inline) {
              this_1.getWrapper().appendChild(this_1.container);
              this_1.splitBtn.destroy();
              detach(this_1.element.nextElementSibling);
              if (!this_1.container.children.length) {
                this_1.createWidget();
              }
            } else {
              this_1.destroyOtherComp();
              this_1.unWireEvents();
              this_1.container.innerHTML = "";
              this_1.createSplitBtn();
            }
            break;
          case "cssClass": {
            this_1.changeCssClassProps(newProp.cssClass, oldProp.cssClass);
            var props = newProp.cssClass.split(" ").concat(oldProp.cssClass.split(" "));
            props = props.reduce(function(a, b) {
              if (a.indexOf(b) < 0) {
                a.push(b);
              }
              return a;
            }, []);
            var count_1 = 0;
            props.forEach(function(cls) {
              if (count_1 === 0 && (cls === HIDEVALUE || cls === HIDEVALUESWITCH || cls === SHOWVALUE || cls === HIDEHEX || cls === HIDERGBA)) {
                var inputWrap = select("." + INPUTWRAPPER, _this.container);
                if (inputWrap) {
                  remove(select("." + INPUTWRAPPER, _this.container));
                }
                _this.createInput();
                count_1++;
              }
            });
            break;
          }
          case "enableRtl":
            if (this_1.isPicker()) {
              this_1.hueSlider.enableRtl = newProp.enableRtl;
              if (this_1.enableOpacity) {
                this_1.opacitySlider.enableRtl = newProp.enableRtl;
              }
              this_1.setInputEleProps();
            }
            this_1.changeRtlProps(newProp.enableRtl);
            break;
          case "disabled":
            this_1.changeDisabledProp(newProp.disabled);
            break;
          case "value":
            if (this_1.value !== oldProp.value) {
              this_1.changeValueProp(newProp.value);
            }
            break;
          case "showButtons":
            this_1.changeShowBtnProps(newProp.showButtons);
            break;
          case "mode":
            if (newProp.mode === "Picker") {
              this_1.switchToPicker();
            } else {
              this_1.switchToPalette();
            }
            break;
          case "modeSwitcher":
            this_1.changeModeSwitcherProp(newProp.modeSwitcher);
            break;
          case "columns":
          case "presetColors":
            if (!this_1.isPicker()) {
              this_1.changePaletteProps();
            }
            break;
          case "noColor":
            if (newProp.noColor) {
              if (this_1.mode === "Palette" && !this_1.modeSwitcher) {
                this_1.setNoColor();
              }
            } else {
              this_1.changePaletteProps();
            }
            break;
          case "enableOpacity":
            this_1.changeOpacityProps(newProp.enableOpacity);
            break;
        }
      };
      var this_1 = this;
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_1(prop);
      }
    };
    ColorPicker2.prototype.focusIn = function() {
      this.element.parentElement.focus();
    };
    __decorate25([
      Property("#008000ff")
    ], ColorPicker2.prototype, "value", void 0);
    __decorate25([
      Property("")
    ], ColorPicker2.prototype, "cssClass", void 0);
    __decorate25([
      Property(false)
    ], ColorPicker2.prototype, "disabled", void 0);
    __decorate25([
      Property("Picker")
    ], ColorPicker2.prototype, "mode", void 0);
    __decorate25([
      Property(true)
    ], ColorPicker2.prototype, "modeSwitcher", void 0);
    __decorate25([
      Property(null)
    ], ColorPicker2.prototype, "presetColors", void 0);
    __decorate25([
      Property(true)
    ], ColorPicker2.prototype, "showButtons", void 0);
    __decorate25([
      Property(10)
    ], ColorPicker2.prototype, "columns", void 0);
    __decorate25([
      Property(false)
    ], ColorPicker2.prototype, "inline", void 0);
    __decorate25([
      Property(false)
    ], ColorPicker2.prototype, "noColor", void 0);
    __decorate25([
      Property(false)
    ], ColorPicker2.prototype, "enablePersistence", void 0);
    __decorate25([
      Property(true)
    ], ColorPicker2.prototype, "enableOpacity", void 0);
    __decorate25([
      Property(false)
    ], ColorPicker2.prototype, "createPopupOnClick", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "select", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "change", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "beforeTileRender", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "beforeOpen", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "open", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "beforeClose", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "beforeModeSwitch", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "onModeSwitch", void 0);
    __decorate25([
      Event2()
    ], ColorPicker2.prototype, "created", void 0);
    ColorPicker2 = __decorate25([
      NotifyPropertyChanges
    ], ColorPicker2);
    return ColorPicker2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/textbox/textbox.js
var __extends26 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate26 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var HIDE_CLEAR = "e-clear-icon-hide";
var TEXTBOX_FOCUS = "e-input-focus";
var containerAttr2 = ["title", "style", "class"];
var TextBox = (
  /** @class */
  function(_super) {
    __extends26(TextBox2, _super);
    function TextBox2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.previousValue = null;
      _this.isAngular = false;
      _this.isHiddenInput = false;
      _this.isForm = false;
      _this.inputPreviousValue = null;
      _this.isVue = false;
      _this.textboxOptions = options;
      return _this;
    }
    TextBox2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "floatLabelType":
            Input.removeFloating(this.textboxWrapper);
            Input.addFloating(this.respectiveElement, this.floatLabelType, this.placeholder);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
            this.bindClearEvent();
            break;
          case "width":
            Input.setWidth(newProp.width, this.textboxWrapper.container);
            break;
          case "value":
            {
              var prevOnChange = this.isProtectedOnChange;
              this.isProtectedOnChange = true;
              if (!this.isBlank(this.value)) {
                this.value = this.value.toString();
              }
              this.isProtectedOnChange = prevOnChange;
              Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);
              if (this.isHiddenInput) {
                this.element.value = this.respectiveElement.value;
              }
              this.inputPreviousValue = this.respectiveElement.value;
              if ((this.isAngular || this.isVue) && this.preventChange === true) {
                this.previousValue = this.isAngular ? this.value : this.previousValue;
                this.preventChange = false;
              } else if (isNullOrUndefined(this.isAngular) || !this.isAngular || this.isAngular && !this.preventChange || this.isAngular && isNullOrUndefined(this.preventChange)) {
                this.raiseChangeEvent();
              }
            }
            break;
          case "htmlAttributes":
            {
              this.updateHTMLAttrToElement();
              this.updateHTMLAttrToWrapper();
              this.checkAttributes(true);
              Input.validateInputType(this.textboxWrapper.container, this.element);
            }
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.respectiveElement);
            break;
          case "type":
            if (this.respectiveElement.tagName !== "TEXTAREA") {
              this.respectiveElement.setAttribute("type", this.type);
              Input.validateInputType(this.textboxWrapper.container, this.element);
              this.raiseChangeEvent();
            }
            break;
          case "showClearButton":
            if (this.respectiveElement.tagName !== "TEXTAREA") {
              Input.setClearButton(this.showClearButton, this.respectiveElement, this.textboxWrapper);
              this.bindClearEvent();
            }
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.textboxWrapper.container]);
            break;
          case "placeholder":
            Input.setPlaceholder(this.placeholder, this.respectiveElement);
            break;
          case "autocomplete":
            if (this.autocomplete !== "on" && this.autocomplete !== "") {
              this.respectiveElement.autocomplete = this.autocomplete;
            } else {
              this.removeAttributes(["autocomplete"]);
            }
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
            Input.setPlaceholder(this.placeholder, this.respectiveElement);
            break;
        }
      }
    };
    TextBox2.prototype.getModuleName = function() {
      return "textbox";
    };
    TextBox2.prototype.isBlank = function(str) {
      return !str || /^\s*$/.test(str);
    };
    TextBox2.prototype.preRender = function() {
      this.cloneElement = this.element.cloneNode(true);
      this.formElement = closest(this.element, "form");
      if (!isNullOrUndefined(this.formElement)) {
        this.isForm = true;
      }
      if (this.element.tagName === "EJS-TEXTBOX") {
        var ejInstance = getValue("ej2_instances", this.element);
        var inputElement = this.multiline ? this.createElement("textarea") : this.createElement("input");
        var index = 0;
        for (index; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;
          if (attributeName !== "id") {
            inputElement.setAttribute(attributeName, this.element.attributes[index].nodeValue);
            inputElement.innerHTML = this.element.innerHTML;
            if (attributeName === "name") {
              this.element.removeAttribute("name");
            }
          }
        }
        this.element.appendChild(inputElement);
        this.element = inputElement;
        setValue("ej2_instances", ejInstance, this.element);
      }
      this.updateHTMLAttrToElement();
      this.checkAttributes(false);
      if (this.element.tagName !== "TEXTAREA") {
        this.element.setAttribute("type", this.type);
      }
      this.element.setAttribute("role", "textbox");
      this.globalize = new Internationalization(this.locale);
      var localeText = { placeholder: this.placeholder };
      this.l10n = new L10n("textbox", localeText, this.locale);
      if (this.l10n.getConstant("placeholder") !== "") {
        this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      }
      if (!this.element.hasAttribute("id")) {
        this.element.setAttribute("id", getUniqueID("textbox"));
      }
      if (!this.element.hasAttribute("name")) {
        this.element.setAttribute("name", this.element.getAttribute("id"));
      }
      if (this.element.tagName === "INPUT" && this.multiline) {
        this.isHiddenInput = true;
        this.textarea = this.createElement("textarea");
        this.element.parentNode.insertBefore(this.textarea, this.element);
        this.element.setAttribute("type", "hidden");
        this.textarea.setAttribute("name", this.element.getAttribute("name"));
        this.element.removeAttribute("name");
        this.textarea.setAttribute("role", this.element.getAttribute("role"));
        this.element.removeAttribute("role");
        this.textarea.setAttribute("id", getUniqueID("textarea"));
        var apiAttributes = ["placeholder", "disabled", "value", "readonly", "type", "autocomplete"];
        for (var index = 0; index < this.element.attributes.length; index++) {
          var attributeName = this.element.attributes[index].nodeName;
          if (this.element.hasAttribute(attributeName) && containerAttr2.indexOf(attributeName) < 0 && !(attributeName === "id" || attributeName === "type" || attributeName === "e-mappinguid")) {
            this.textarea.setAttribute(attributeName, this.element.attributes[index].nodeValue);
            if (apiAttributes.indexOf(attributeName) < 0) {
              this.element.removeAttribute(attributeName);
              index--;
            }
          }
        }
      }
    };
    TextBox2.prototype.checkAttributes = function(isDynamic) {
      var attrs = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["placeholder", "disabled", "value", "readonly", "type", "autocomplete"];
      for (var _i = 0, attrs_1 = attrs; _i < attrs_1.length; _i++) {
        var key = attrs_1[_i];
        if (!isNullOrUndefined(this.element.getAttribute(key))) {
          switch (key) {
            case "disabled":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.element.getAttribute(key) === "disabled" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? false : true;
                this.setProperties({ enabled }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.element.getAttribute(key) === "readonly" || this.element.getAttribute(key) === "" || this.element.getAttribute(key) === "true" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.element.placeholder }, !isDynamic);
              }
              break;
            case "autocomplete":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["autocomplete"] === void 0 || isDynamic) {
                var autoCompleteTxt = this.element.autocomplete === "off" ? "off" : "on";
                this.setProperties({ autocomplete: autoCompleteTxt }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["value"] === void 0 || isDynamic) {
                this.setProperties({ value: this.element.value }, !isDynamic);
              }
              break;
            case "type":
              if (isNullOrUndefined(this.textboxOptions) || this.textboxOptions["type"] === void 0 || isDynamic) {
                this.setProperties({ type: this.element.type }, !isDynamic);
              }
              break;
          }
        }
      }
    };
    TextBox2.prototype.render = function() {
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.getInputValidClassList(this.cssClass);
      }
      this.respectiveElement = this.isHiddenInput ? this.textarea : this.element;
      this.textboxWrapper = Input.createInput({
        element: this.respectiveElement,
        floatLabelType: this.floatLabelType,
        properties: {
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          cssClass: updatedCssClassValue,
          readonly: this.readonly,
          placeholder: this.placeholder,
          showClearButton: this.showClearButton
        }
      });
      this.updateHTMLAttrToWrapper();
      if (this.isHiddenInput) {
        this.respectiveElement.parentNode.insertBefore(this.element, this.respectiveElement);
      }
      this.wireEvents();
      if (!isNullOrUndefined(this.value)) {
        Input.setValue(this.value, this.respectiveElement, this.floatLabelType, this.showClearButton);
        if (this.isHiddenInput) {
          this.element.value = this.respectiveElement.value;
        }
      }
      if (!isNullOrUndefined(this.value)) {
        this.initialValue = this.value;
        this.setInitialValue();
      }
      if (this.autocomplete !== "on" && this.autocomplete !== "") {
        this.respectiveElement.autocomplete = this.autocomplete;
      } else if (!isNullOrUndefined(this.textboxOptions) && this.textboxOptions["autocomplete"] !== void 0) {
        this.removeAttributes(["autocomplete"]);
      }
      this.previousValue = this.value;
      this.inputPreviousValue = this.value;
      this.respectiveElement.defaultValue = this.respectiveElement.value;
      Input.setWidth(this.width, this.textboxWrapper.container);
      this.renderComplete();
    };
    TextBox2.prototype.updateHTMLAttrToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr2.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassValues = this.getInputValidClassList(this.htmlAttributes[key]);
              if (updatedClassValues !== "") {
                addClass([this.textboxWrapper.container], updatedClassValues.split(" "));
              }
            } else if (key === "style") {
              var setStyle = this.textboxWrapper.container.getAttribute(key);
              setStyle = !isNullOrUndefined(setStyle) ? setStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
              this.textboxWrapper.container.setAttribute(key, setStyle);
            } else {
              this.textboxWrapper.container.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };
    TextBox2.prototype.updateHTMLAttrToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr2.indexOf(key) < 0) {
            this.element.setAttribute(key, this.htmlAttributes[key]);
          }
        }
      }
    };
    TextBox2.prototype.updateCssClass = function(newClass, oldClass) {
      Input.setCssClass(this.getInputValidClassList(newClass), [this.textboxWrapper.container], this.getInputValidClassList(oldClass));
    };
    TextBox2.prototype.getInputValidClassList = function(inputClassName) {
      var result = inputClassName;
      if (!isNullOrUndefined(inputClassName) && inputClassName !== "") {
        result = inputClassName.replace(/\s+/g, " ").trim();
      }
      return result;
    };
    TextBox2.prototype.setInitialValue = function() {
      if (!this.isAngular) {
        this.respectiveElement.setAttribute("value", this.initialValue);
      }
    };
    TextBox2.prototype.wireEvents = function() {
      EventHandler.add(this.respectiveElement, "focus", this.focusHandler, this);
      EventHandler.add(this.respectiveElement, "blur", this.focusOutHandler, this);
      EventHandler.add(this.respectiveElement, "input", this.inputHandler, this);
      EventHandler.add(this.respectiveElement, "change", this.changeHandler, this);
      if (this.isForm) {
        EventHandler.add(this.formElement, "reset", this.resetForm, this);
      }
      this.bindClearEvent();
      if (!isNullOrUndefined(this.textboxWrapper.container.querySelector(".e-float-text")) && this.floatLabelType === "Auto" && this.textboxWrapper.container.classList.contains("e-autofill") && this.textboxWrapper.container.classList.contains("e-outline")) {
        EventHandler.add(this.textboxWrapper.container.querySelector(".e-float-text"), "animationstart", this.animationHandler, this);
      }
    };
    TextBox2.prototype.animationHandler = function() {
      this.textboxWrapper.container.classList.add("e-valid-input");
      var label = this.textboxWrapper.container.querySelector(".e-float-text");
      if (!isNullOrUndefined(label)) {
        label.classList.add("e-label-top");
        if (label.classList.contains("e-label-bottom")) {
          label.classList.remove("e-label-bottom");
        }
      }
    };
    TextBox2.prototype.resetValue = function(value) {
      var prevOnChange = this.isProtectedOnChange;
      this.isProtectedOnChange = true;
      this.value = value;
      this.isProtectedOnChange = prevOnChange;
    };
    TextBox2.prototype.resetForm = function() {
      if (this.isAngular) {
        this.resetValue("");
      } else {
        this.resetValue(this.initialValue);
      }
      if (!isNullOrUndefined(this.textboxWrapper)) {
        var label = this.textboxWrapper.container.querySelector(".e-float-text");
        if (!isNullOrUndefined(label)) {
          if (isNullOrUndefined(this.initialValue) || this.initialValue === "") {
            label.classList.add("e-label-bottom");
            label.classList.remove("e-label-top");
          } else if (this.initialValue !== "") {
            label.classList.add("e-label-top");
            label.classList.remove("e-label-bottom");
          }
        }
      }
    };
    TextBox2.prototype.focusHandler = function(args) {
      var eventArgs = {
        container: this.textboxWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger("focus", eventArgs);
    };
    TextBox2.prototype.focusOutHandler = function(args) {
      if (!(this.previousValue === null && this.value === null && this.respectiveElement.value === "") && this.previousValue !== this.respectiveElement.value) {
        this.raiseChangeEvent(args, true);
      }
      var eventArgs = {
        container: this.textboxWrapper.container,
        event: args,
        value: this.value
      };
      this.trigger("blur", eventArgs);
    };
    TextBox2.prototype.inputHandler = function(args) {
      var textboxObj = this;
      var eventArgs = {
        event: args,
        value: this.respectiveElement.value,
        previousValue: this.inputPreviousValue,
        container: this.textboxWrapper.container
      };
      this.inputPreviousValue = this.respectiveElement.value;
      if (this.isAngular) {
        textboxObj.localChange({ value: this.respectiveElement.value });
        this.preventChange = true;
      }
      if (this.isVue) {
        this.preventChange = true;
      }
      this.trigger("input", eventArgs);
      args.stopPropagation();
    };
    TextBox2.prototype.changeHandler = function(args) {
      this.setProperties({ value: this.respectiveElement.value }, true);
      this.raiseChangeEvent(args, true);
      args.stopPropagation();
    };
    TextBox2.prototype.raiseChangeEvent = function(event, interaction) {
      var eventArgs = {
        event,
        value: this.value,
        previousValue: this.previousValue,
        container: this.textboxWrapper.container,
        isInteraction: interaction ? interaction : false,
        isInteracted: interaction ? interaction : false
      };
      this.preventChange = false;
      this.trigger("change", eventArgs);
      this.previousValue = this.value;
    };
    TextBox2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.respectiveElement.tagName !== "TEXTAREA") {
        if (this.enabled) {
          EventHandler.add(this.textboxWrapper.clearButton, "mousedown touchstart", this.resetInputHandler, this);
        } else {
          EventHandler.remove(this.textboxWrapper.clearButton, "mousedown touchstart", this.resetInputHandler);
        }
      }
    };
    TextBox2.prototype.resetInputHandler = function(event) {
      event.preventDefault();
      if (!this.textboxWrapper.clearButton.classList.contains(HIDE_CLEAR) || this.textboxWrapper.container.classList.contains("e-static-clear")) {
        Input.setValue("", this.respectiveElement, this.floatLabelType, this.showClearButton);
        if (this.isHiddenInput) {
          this.element.value = this.respectiveElement.value;
        }
        this.setProperties({ value: this.respectiveElement.value }, true);
        var eventArgs = {
          event,
          value: this.respectiveElement.value,
          previousValue: this.inputPreviousValue,
          container: this.textboxWrapper.container
        };
        this.trigger("input", eventArgs);
        this.inputPreviousValue = this.respectiveElement.value;
        this.raiseChangeEvent(event, true);
      }
    };
    TextBox2.prototype.unWireEvents = function() {
      EventHandler.remove(this.respectiveElement, "focus", this.focusHandler);
      EventHandler.remove(this.respectiveElement, "blur", this.focusOutHandler);
      EventHandler.remove(this.respectiveElement, "input", this.inputHandler);
      EventHandler.remove(this.respectiveElement, "change", this.changeHandler);
      if (this.isForm) {
        EventHandler.remove(this.formElement, "reset", this.resetForm);
      }
      if (!isNullOrUndefined(this.textboxWrapper.container.querySelector(".e-float-text")) && this.floatLabelType === "Auto" && this.textboxWrapper.container.classList.contains("e-outline") && this.textboxWrapper.container.classList.contains("e-autofill")) {
        EventHandler.remove(this.textboxWrapper.container.querySelector(".e-float-text"), "animationstart", this.animationHandler);
      }
    };
    TextBox2.prototype.destroy = function() {
      this.unWireEvents();
      if (this.element.tagName === "INPUT" && this.multiline) {
        detach(this.textboxWrapper.container.getElementsByTagName("textarea")[0]);
        this.respectiveElement = this.element;
        this.element.removeAttribute("type");
      }
      this.respectiveElement.value = this.respectiveElement.defaultValue;
      this.respectiveElement.classList.remove("e-input");
      this.removeAttributes(["aria-placeholder", "aria-disabled", "aria-readonly", "aria-labelledby"]);
      if (!isNullOrUndefined(this.textboxWrapper)) {
        this.textboxWrapper.container.insertAdjacentElement("afterend", this.respectiveElement);
        detach(this.textboxWrapper.container);
      }
      this.textboxWrapper = null;
      _super.prototype.destroy.call(this);
    };
    TextBox2.prototype.addIcon = function(position, icons) {
      Input.addIcon(position, icons, this.textboxWrapper.container, this.respectiveElement, this.createElement);
    };
    TextBox2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    TextBox2.prototype.addAttributes = function(attributes2) {
      for (var _i = 0, _a = Object.keys(attributes2); _i < _a.length; _i++) {
        var key = _a[_i];
        if (key === "disabled") {
          this.setProperties({ enabled: false }, true);
          Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
        } else if (key === "readonly") {
          this.setProperties({ readonly: true }, true);
          Input.setReadonly(this.readonly, this.respectiveElement);
        } else if (key === "class") {
          this.respectiveElement.classList.add(attributes2[key]);
        } else if (key === "placeholder") {
          this.setProperties({ placeholder: attributes2[key] }, true);
          Input.setPlaceholder(this.placeholder, this.respectiveElement);
        } else if (key === "rows" && this.respectiveElement.tagName === "TEXTAREA") {
          this.respectiveElement.setAttribute(key, attributes2[key]);
        } else {
          this.respectiveElement.setAttribute(key, attributes2[key]);
        }
      }
    };
    TextBox2.prototype.removeAttributes = function(attributes2) {
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var key = attributes_1[_i];
        if (key === "disabled") {
          this.setProperties({ enabled: true }, true);
          Input.setEnabled(this.enabled, this.respectiveElement, this.floatLabelType, this.textboxWrapper.container);
        } else if (key === "readonly") {
          this.setProperties({ readonly: false }, true);
          Input.setReadonly(this.readonly, this.respectiveElement);
        } else if (key === "placeholder") {
          this.setProperties({ placeholder: null }, true);
          Input.setPlaceholder(this.placeholder, this.respectiveElement);
        } else {
          this.respectiveElement.removeAttribute(key);
        }
      }
    };
    TextBox2.prototype.focusIn = function() {
      if (document.activeElement !== this.respectiveElement && this.enabled) {
        this.respectiveElement.focus();
        if (this.textboxWrapper.container.classList.contains("e-input-group") || this.textboxWrapper.container.classList.contains("e-outline") || this.textboxWrapper.container.classList.contains("e-filled")) {
          addClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };
    TextBox2.prototype.focusOut = function() {
      if (document.activeElement === this.respectiveElement && this.enabled) {
        this.respectiveElement.blur();
        if (this.textboxWrapper.container.classList.contains("e-input-group") || this.textboxWrapper.container.classList.contains("e-outline") || this.textboxWrapper.container.classList.contains("e-filled")) {
          removeClass([this.textboxWrapper.container], [TEXTBOX_FOCUS]);
        }
      }
    };
    __decorate26([
      Property("text")
    ], TextBox2.prototype, "type", void 0);
    __decorate26([
      Property(false)
    ], TextBox2.prototype, "readonly", void 0);
    __decorate26([
      Property(null)
    ], TextBox2.prototype, "value", void 0);
    __decorate26([
      Property("Never")
    ], TextBox2.prototype, "floatLabelType", void 0);
    __decorate26([
      Property("")
    ], TextBox2.prototype, "cssClass", void 0);
    __decorate26([
      Property(null)
    ], TextBox2.prototype, "placeholder", void 0);
    __decorate26([
      Property("on")
    ], TextBox2.prototype, "autocomplete", void 0);
    __decorate26([
      Property({})
    ], TextBox2.prototype, "htmlAttributes", void 0);
    __decorate26([
      Property(false)
    ], TextBox2.prototype, "multiline", void 0);
    __decorate26([
      Property(true)
    ], TextBox2.prototype, "enabled", void 0);
    __decorate26([
      Property(false)
    ], TextBox2.prototype, "showClearButton", void 0);
    __decorate26([
      Property(false)
    ], TextBox2.prototype, "enablePersistence", void 0);
    __decorate26([
      Property(null)
    ], TextBox2.prototype, "width", void 0);
    __decorate26([
      Event2()
    ], TextBox2.prototype, "created", void 0);
    __decorate26([
      Event2()
    ], TextBox2.prototype, "destroyed", void 0);
    __decorate26([
      Event2()
    ], TextBox2.prototype, "change", void 0);
    __decorate26([
      Event2()
    ], TextBox2.prototype, "blur", void 0);
    __decorate26([
      Event2()
    ], TextBox2.prototype, "focus", void 0);
    __decorate26([
      Event2()
    ], TextBox2.prototype, "input", void 0);
    TextBox2 = __decorate26([
      NotifyPropertyChanges
    ], TextBox2);
    return TextBox2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/common/signature-base.js
var __extends27 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var SignatureBase = (
  /** @class */
  function(_super) {
    __extends27(SignatureBase2, _super);
    function SignatureBase2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.minDistance = 5;
      _this.previous = 0;
      _this.interval = 30;
      _this.timeout = null;
      _this.isSignatureEmpty = true;
      _this.backgroundLoaded = null;
      _this.clearArray = [];
      _this.isBlazor = false;
      return _this;
    }
    SignatureBase2.prototype.initialize = function(element2, parameter, dotnetRef) {
      this.element = element2;
      this.canvasContext = this.element.getContext("2d");
      this.canvasContext.canvas.tabIndex = 0;
      if (parameter) {
        this.setBlazorParameter(parameter);
        this.dotnetRef = dotnetRef;
      }
      this.setHTMLProperties();
      if (isNullOrUndefined(this.signatureValue)) {
        this.updateSnapCollection(true);
      }
      this.wireEvents();
      this.isSignatureEmpty = true;
      if (!this.isBlazor) {
        this.trigger("created", null);
      }
    };
    SignatureBase2.prototype.setBlazorParameter = function(parameter) {
      this.isBlazor = true;
      this.backgroundColor = parameter.backgroundColor;
      this.backgroundImage = parameter.backgroundImage;
      this.disabled = parameter.disabled;
      this.isReadOnly = parameter.isReadOnly;
      this.maxStrokeWidth = parameter.maxStrokeWidth || 2;
      this.minStrokeWidth = parameter.minStrokeWidth || 0.5;
      this.velocity = parameter.velocity || 0.7;
      this.strokeColor = parameter.strokeColor || "#000000";
      this.saveWithBackground = parameter.saveWithBackground;
      this.interval = 30;
      this.previous = 0;
      this.minDistance = 5;
      this.signatureValue = parameter.signatureValue;
      if (this.signatureValue) {
        this.loadPersistedSignature();
      }
    };
    SignatureBase2.prototype.wireEvents = function() {
      if (isNullOrUndefined(this.pointColl) && !this.isReadOnly && !this.disabled) {
        EventHandler.add(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler, this);
        EventHandler.add(this.canvasContext.canvas, "keydown", this.keyboardHandler, this);
        window.addEventListener("resize", this.resizeHandler.bind(this));
      } else if (this.pointColl) {
        EventHandler.add(this.canvasContext.canvas, "mousemove touchmove", this.mouseMoveHandler, this);
        EventHandler.add(this.canvasContext.canvas, "mouseup touchend", this.mouseUpHandler, this);
        EventHandler.add(document, "mouseup", this.mouseUpHandler, this);
      }
    };
    SignatureBase2.prototype.unwireEvents = function(type) {
      if (type === "mouseup" || type === "touchend") {
        EventHandler.remove(this.canvasContext.canvas, "mousemove touchmove", this.mouseMoveHandler);
        EventHandler.remove(this.canvasContext.canvas, "mouseup touchend", this.mouseUpHandler);
        EventHandler.remove(document, "mouseup", this.mouseUpHandler);
      } else {
        EventHandler.remove(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler);
        EventHandler.remove(this.canvasContext.canvas, "mousemove touchmove", this.mouseMoveHandler);
        EventHandler.remove(this.canvasContext.canvas, "mouseup touchend", this.mouseUpHandler);
        EventHandler.remove(document, "mouseup", this.mouseUpHandler);
        EventHandler.remove(this.canvasContext.canvas, "keydown", this.keyboardHandler);
        window.removeEventListener("resize", this.resizeHandler);
      }
    };
    SignatureBase2.prototype.setHTMLProperties = function() {
      if (this.element.height === 150) {
        this.element.height = this.element.offsetHeight;
      }
      if (this.element.width === 300) {
        this.element.width = this.element.offsetWidth;
      }
      this.canvasContext.scale(1, 1);
      this.canvasContext.fillStyle = this.strokeColor;
      if (this.backgroundImage) {
        this.canvasContext.canvas.style.backgroundImage = "url(" + this.backgroundImage + ")";
      } else if (this.backgroundColor) {
        this.canvasContext.canvas.style.backgroundColor = this.backgroundColor;
      }
    };
    SignatureBase2.prototype.mouseDownHandler = function(e) {
      if (e.buttons === 1 || e.buttons === 2 || e.type === "touchstart") {
        if (e.type === "touchstart") {
          e.preventDefault();
          e.stopPropagation();
        }
        this.beginStroke(e);
        this.wireEvents();
      }
    };
    SignatureBase2.prototype.mouseMoveHandler = function(e) {
      if (e.buttons === 1 || e.buttons === 2 || e.type === "touchmove") {
        if (e.type === "touchmove") {
          e.preventDefault();
          e.stopPropagation();
        }
        if (this.interval) {
          this.updateStrokeWithThrottle(e);
        } else {
          this.updateStroke(e);
        }
      }
    };
    SignatureBase2.prototype.mouseUpHandler = function(e) {
      var args = { actionName: "strokeUpdate" };
      if (e.type === "touchstart") {
        e.preventDefault();
        e.stopPropagation();
      }
      this.endDraw();
      this.updateSnapCollection();
      this.unwireEvents(e.type);
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "mouseUp");
      }
      this.signatureValue = this.snapColl[this.incStep];
    };
    SignatureBase2.prototype.keyboardHandler = function(e) {
      var _this = this;
      var args = { fileName: "Signature", type: "Png", cancel: false };
      switch (e.key) {
        case "Delete":
          this.clear();
          break;
        case (e.ctrlKey && "s"):
          if (!this.isBlazor) {
            this.trigger("beforeSave", args, function(observableSaveArgs) {
              if (!args.cancel) {
                _this.save(observableSaveArgs.type, observableSaveArgs.fileName);
              }
            });
          } else {
            this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "beforeSave");
          }
          e.preventDefault();
          e.stopImmediatePropagation();
          break;
        case (e.ctrlKey && "z"):
          this.undo();
          break;
        case (e.ctrlKey && "y"):
          this.redo();
          break;
      }
    };
    SignatureBase2.prototype.resizeHandler = function() {
      var proxy2 = this;
      this.canvasContext.canvas.width = this.element.offsetWidth;
      this.canvasContext.canvas.height = this.element.offsetHeight;
      this.canvasContext.scale(1, 1);
      var restoreImg = new Image();
      restoreImg.src = this.snapColl[this.incStep];
      restoreImg.onload = function() {
        proxy2.canvasContext.clearRect(0, 0, proxy2.element.width, proxy2.element.height);
        proxy2.canvasContext.drawImage(restoreImg, 0, 0, proxy2.element.width, proxy2.element.height);
      };
    };
    SignatureBase2.prototype.beginStroke = function(e) {
      this.refresh();
      this.updateStroke(e);
    };
    SignatureBase2.prototype.updateStroke = function(e) {
      var point = this.createPoint(e);
      this.addPoint(point);
    };
    SignatureBase2.prototype.updateStrokeWithThrottle = function(args) {
      var now = Date.now();
      var remaining = this.interval - (now - this.previous);
      this.storedArgs = args;
      if (remaining <= 0 || remaining > this.interval) {
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }
        this.previous = now;
        this.updateStroke(this.storedArgs);
        if (!this.timeout) {
          this.storedArgs = null;
        }
      } else if (!this.timeout) {
        this.timeout = window.setTimeout(this.delay.bind(this), remaining);
      }
    };
    SignatureBase2.prototype.delay = function() {
      this.previous = Date.now();
      this.timeout = null;
      this.updateStroke(this.storedArgs);
      if (!this.timeout) {
        this.storedArgs = null;
      }
    };
    SignatureBase2.prototype.createPoint = function(e) {
      var rect = this.canvasContext.canvas.getBoundingClientRect();
      if (e.type === "mousedown" || e.type === "mousemove") {
        return this.point(e.clientX - rect.left, e.clientY - rect.top, (/* @__PURE__ */ new Date()).getTime());
      } else {
        return this.point(e.touches[0].clientX - rect.left, e.touches[0].clientY - rect.top, (/* @__PURE__ */ new Date()).getTime());
      }
    };
    SignatureBase2.prototype.point = function(pointX, pointY, time) {
      this.pointX = pointX;
      this.pointY = pointY;
      this.time = time || (/* @__PURE__ */ new Date()).getTime();
      return { x: this.pointX, y: this.pointY, time: this.time };
    };
    SignatureBase2.prototype.addPoint = function(point) {
      var points = this.pointColl;
      var controlPoint1;
      var controlPoint2;
      var lastPoint = points.length > 0 && points[points.length - 1];
      var isLastPointTooClose = lastPoint ? this.distanceTo(lastPoint) <= this.minDistance : false;
      if (!lastPoint || !(lastPoint && isLastPointTooClose)) {
        points.push(point);
        if (points.length > 2) {
          if (points.length === 3) {
            points.unshift(points[0]);
          }
          controlPoint1 = this.calculateCurveControlPoints(points[0], points[1], points[2]).controlPoint2;
          controlPoint2 = this.calculateCurveControlPoints(points[1], points[2], points[3]).controlPoint1;
          this.startPoint = points[1];
          this.controlPoint1 = controlPoint1;
          this.controlPoint2 = controlPoint2;
          this.endPoint = points[2];
          this.startDraw();
          points.shift();
        }
      }
    };
    SignatureBase2.prototype.startDraw = function() {
      var velocity;
      velocity = this.pointVelocityCalc(this.startPoint);
      velocity = this.velocity * velocity + (1 - this.velocity) * this.lastVelocity;
      var newWidth = Math.max(this.maxStrokeWidth / (velocity + 1), this.minStrokeWidth);
      this.curveDraw(this.lastWidth, newWidth);
      this.lastVelocity = velocity;
      this.lastWidth = newWidth;
    };
    SignatureBase2.prototype.endDraw = function() {
      var canDrawCurve = this.pointColl.length > 2;
      var point = this.pointColl[0];
      if (!canDrawCurve && point) {
        this.strokeDraw(point);
      }
    };
    SignatureBase2.prototype.curveDraw = function(startWidth, endWidth) {
      var context = this.canvasContext;
      var width;
      var i;
      var t1;
      var t2;
      var t3;
      var u1;
      var u2;
      var u3;
      var x;
      var y;
      var widthValue = endWidth - startWidth;
      var bezierLength = this.bezierLengthCalc();
      var drawSteps = Math.ceil(bezierLength) * 2;
      context.beginPath();
      for (i = 0; i < drawSteps; i++) {
        t1 = i / drawSteps;
        t2 = t1 * t1;
        t3 = t2 * t1;
        u1 = 1 - t1;
        u2 = u1 * u1;
        u3 = u2 * u1;
        x = u3 * this.startPoint.x;
        x += 3 * u2 * t1 * this.controlPoint1.x;
        x += 3 * u1 * t2 * this.controlPoint2.x;
        x += t3 * this.endPoint.x;
        y = u3 * this.startPoint.y;
        y += 3 * u2 * t1 * this.controlPoint1.y;
        y += 3 * u1 * t2 * this.controlPoint2.y;
        y += t3 * this.endPoint.y;
        width = Math.min(startWidth + t3 * widthValue, this.maxStrokeWidth);
        this.arcDraw(x, y, width);
      }
      context.closePath();
      context.fill();
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.strokeDraw = function(point) {
      var context = this.canvasContext;
      var pointSize = (this.minStrokeWidth + this.maxStrokeWidth) / 2;
      context.beginPath();
      this.arcDraw(point.x, point.y, pointSize);
      context.closePath();
      context.fill();
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.arcDraw = function(x, y, size) {
      var context = this.canvasContext;
      context.moveTo(x, y);
      context.arc(x, y, size, 0, 2 * Math.PI, false);
    };
    SignatureBase2.prototype.calculateCurveControlPoints = function(p1, p2, p3) {
      var dx1 = p1.x - p2.x;
      var dy1 = p1.y - p2.y;
      var dx2 = p2.x - p3.x;
      var dy2 = p2.y - p3.y;
      var m1 = { x: (p1.x + p2.x) / 2, y: (p1.y + p2.y) / 2 };
      var m2 = { x: (p2.x + p3.x) / 2, y: (p2.y + p3.y) / 2 };
      var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
      var l2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
      var dxm = m1.x - m2.x;
      var dym = m1.y - m2.y;
      var k = l2 / (l1 + l2);
      var cm = { x: m2.x + dxm * k, y: m2.y + dym * k };
      var tx = p2.x - cm.x;
      var ty = p2.y - cm.y;
      return {
        controlPoint1: this.point(m1.x + tx, m1.y + ty, 0),
        controlPoint2: this.point(m2.x + tx, m2.y + ty, 0)
      };
    };
    SignatureBase2.prototype.bezierLengthCalc = function() {
      var steps = 10;
      var length = 0;
      var i;
      var t;
      var pointx1;
      var pointy1;
      var pointx2;
      var pointy2;
      var pointx3;
      var pointy3;
      for (i = 0; i <= steps; i++) {
        t = i / steps;
        pointx1 = this.bezierPointCalc(t, this.startPoint.x, this.controlPoint1.x, this.controlPoint2.x, this.endPoint.x);
        pointy1 = this.bezierPointCalc(t, this.startPoint.y, this.controlPoint1.y, this.controlPoint2.y, this.endPoint.y);
        if (i > 0) {
          pointx3 = pointx1 - pointx2;
          pointy3 = pointy1 - pointy2;
          length += Math.sqrt(pointx3 * pointx3 + pointy3 * pointy3);
        }
        pointx2 = pointx1;
        pointy2 = pointy1;
      }
      return length;
    };
    SignatureBase2.prototype.bezierPointCalc = function(t, startpoint, cp1, cp2, endpoint) {
      return startpoint * (1 - t) * (1 - t) * (1 - t) + 3 * cp1 * (1 - t) * (1 - t) * t + 3 * cp2 * (1 - t) * t * t + endpoint * t * t * t;
    };
    SignatureBase2.prototype.pointVelocityCalc = function(startPoint) {
      return this.time !== startPoint.time ? this.distanceTo(startPoint) / (this.time - startPoint.time) : 0;
    };
    SignatureBase2.prototype.distanceTo = function(start) {
      return Math.sqrt(Math.pow(this.pointX - start.x, 2) + Math.pow(this.pointY - start.y, 2));
    };
    SignatureBase2.prototype.isRead = function(isRead) {
      if (isRead) {
        EventHandler.remove(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler);
      } else if (!this.disabled) {
        EventHandler.add(this.canvasContext.canvas, "mousedown touchstart", this.mouseDownHandler, this);
      }
    };
    SignatureBase2.prototype.enableOrDisable = function(isDisable) {
      this.disabled = isDisable;
      if (isDisable) {
        this.reDraw("0.5");
        this.isRead(true);
      } else {
        this.reDraw("1");
        this.isRead(false);
      }
    };
    SignatureBase2.prototype.reDraw = function(opacity) {
      var data = this.canvasContext.getImageData(0, 0, this.element.width, this.element.height);
      this.canvasContext.clearRect(0, 0, this.element.width, this.element.height);
      this.element.style.opacity = opacity;
      this.canvasContext.putImageData(data, 0, 0);
    };
    SignatureBase2.prototype.updateSnapCollection = function(isClear) {
      if (isNullOrUndefined(this.incStep)) {
        this.incStep = -1;
        this.incStep++;
        this.snapColl = [];
        this.clearArray = [];
      } else {
        this.incStep++;
      }
      if (this.incStep < this.snapColl.length) {
        this.snapColl.length = this.incStep;
      }
      if (this.incStep > 0) {
        var canvasNew = this.createElement("canvas", { className: "e-" + this.getModuleName() + "-wrapper" });
        var canvasContextNew = canvasNew.getContext("2d");
        canvasNew.width = this.canvasContext.canvas.width;
        canvasNew.height = this.canvasContext.canvas.height;
        canvasContextNew.drawImage(this.canvasContext.canvas, 0, 0, canvasNew.width, canvasNew.height);
        this.snapColl.push(canvasNew.toDataURL());
      } else {
        this.snapColl.push(this.canvasContext.canvas.toDataURL());
      }
      if (isClear) {
        this.clearArray.push(this.incStep);
      }
    };
    SignatureBase2.prototype.setBackgroundImage = function(imageSrc) {
      var proxy2 = this;
      var imageObj = new Image();
      imageObj.crossOrigin = "anonymous";
      imageObj.src = imageSrc;
      imageObj.onload = function() {
        proxy2.canvasContext.globalCompositeOperation = "source-over";
        proxy2.canvasContext.drawImage(imageObj, 0, 0, proxy2.element.width, proxy2.element.height);
        proxy2.updateSnapCollection();
        proxy2.saveBackground(true);
      };
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
    };
    SignatureBase2.prototype.setBackgroundColor = function(color) {
      var canvasEle = this.canvasContext;
      canvasEle.strokeStyle = color;
      var i;
      var j;
      for (i = 1; i <= canvasEle.canvas.width; i++) {
        for (j = 1; j <= canvasEle.canvas.height; j++) {
          canvasEle.strokeRect(0, 0, i, j);
        }
      }
      this.updateSnapCollection();
    };
    SignatureBase2.prototype.loadPersistedSignature = function() {
      if (isNullOrUndefined(this.signatureValue)) {
        return;
      }
      var proxy2 = this;
      var lastImage = new Image();
      lastImage.src = this.signatureValue;
      lastImage.onload = function() {
        proxy2.canvasContext.clearRect(0, 0, proxy2.element.width, proxy2.element.height);
        proxy2.canvasContext.drawImage(lastImage, 0, 0);
        proxy2.updateSnapCollection();
      };
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.getBlob = function(url) {
      var arr = url.split(",");
      var type = arr[0].match(/:(.*?);/)[1];
      var bstr = atob(arr[1]);
      var n = bstr.length;
      var u8arr = new Uint8Array(n);
      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new Blob([u8arr], { type });
    };
    SignatureBase2.prototype.download = function(blob, fileName) {
      var blobUrl = URL.createObjectURL(blob);
      var a = document.createElement("a");
      a.href = blobUrl;
      a.target = "_parent";
      a.download = fileName;
      (document.body || document.documentElement).appendChild(a);
      a.click();
      a.parentNode.removeChild(a);
    };
    SignatureBase2.prototype.refresh = function() {
      this.pointColl = [];
      this.lastVelocity = 0;
      this.lastWidth = (this.minStrokeWidth + this.maxStrokeWidth) / 2;
    };
    SignatureBase2.prototype.clear = function() {
      var args = { actionName: "clear" };
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      this.refresh();
      this.updateSnapCollection(true);
      this.isSignatureEmpty = true;
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "Clear");
      }
    };
    SignatureBase2.prototype.undo = function() {
      var args = { actionName: "undo" };
      var proxy2 = this;
      if (this.incStep > 0) {
        this.incStep--;
        var undoImg_1 = new Image();
        undoImg_1.src = this.snapColl[this.incStep];
        undoImg_1.onload = function() {
          proxy2.canvasContext.clearRect(0, 0, proxy2.element.width, proxy2.element.height);
          proxy2.canvasContext.drawImage(undoImg_1, 0, 0, proxy2.element.width, proxy2.element.height);
        };
      }
      this.isClear();
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "Undo");
      }
    };
    SignatureBase2.prototype.redo = function() {
      var args = { actionName: "redo" };
      var proxy2 = this;
      if (this.incStep < this.snapColl.length - 1) {
        this.incStep++;
        var redoImg_1 = new Image();
        redoImg_1.src = this.snapColl[this.incStep];
        redoImg_1.onload = function() {
          proxy2.canvasContext.clearRect(0, 0, proxy2.element.width, proxy2.element.height);
          proxy2.canvasContext.drawImage(redoImg_1, 0, 0, proxy2.element.width, proxy2.element.height);
        };
      }
      this.isClear();
      if (!this.isBlazor) {
        this.trigger("change", args);
      } else {
        this.dotnetRef.invokeMethodAsync("TriggerEventAsync", "Redo");
      }
    };
    SignatureBase2.prototype.isClear = function() {
      if (this.clearArray) {
        var empty = false;
        for (var i = 0; i < this.clearArray.length; i++) {
          if (this.clearArray[i] === this.incStep) {
            this.isSignatureEmpty = true;
            empty = true;
          }
        }
        if (!empty) {
          this.isSignatureEmpty = false;
        }
      }
    };
    SignatureBase2.prototype.isEmpty = function() {
      return this.isSignatureEmpty;
    };
    SignatureBase2.prototype.canUndo = function() {
      return this.incStep > 0;
    };
    SignatureBase2.prototype.canRedo = function() {
      return this.incStep < this.snapColl.length - 1;
    };
    SignatureBase2.prototype.draw = function(text, fontFamily, fontSize) {
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      fontFamily = fontFamily || "Arial";
      fontSize = fontSize || 30;
      this.canvasContext.font = fontSize + "px " + fontFamily;
      this.canvasContext.textAlign = "center";
      this.canvasContext.textBaseline = "middle";
      this.canvasContext.fillText(text, this.element.width / 2, this.element.height / 2);
      this.updateSnapCollection();
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.load = function(signature, width, height) {
      height = height || this.element.height;
      width = width || this.element.width;
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      var proxy2 = this;
      var bitmapImage = new Image();
      bitmapImage.src = signature;
      bitmapImage.onload = function() {
        Promise.all([
          createImageBitmap(bitmapImage, 0, 0, width, height)
        ]).then(function(results) {
          var tempCanvas = document.createElement("canvas");
          tempCanvas.width = width;
          tempCanvas.height = height;
          tempCanvas.getContext("2d").drawImage(results[0], 0, 0);
          proxy2.canvasContext.drawImage(tempCanvas, 0, 0, width, height, 0, 0, proxy2.element.width, proxy2.element.height);
          proxy2.updateSnapCollection();
        });
      };
      this.isSignatureEmpty = false;
    };
    SignatureBase2.prototype.saveBackground = function(savebg) {
      var imageSrc;
      if (savebg && this.backgroundImage) {
        imageSrc = this.snapColl[this.incStep - 1];
      } else {
        imageSrc = this.snapColl[this.incStep];
      }
      if (!savebg) {
        this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
        if (this.backgroundImage) {
          this.setBackgroundImage(this.backgroundImage);
        } else if (this.backgroundColor) {
          this.setBackgroundColor(this.backgroundColor);
          savebg = true;
        }
      }
      if (savebg) {
        var proxy_1 = this;
        var imageObj_1 = new Image();
        imageObj_1.crossOrigin = "anonymous";
        imageObj_1.src = imageSrc;
        imageObj_1.onload = function() {
          proxy_1.backgroundLoaded = true;
          proxy_1.canvasContext.globalCompositeOperation = "source-over";
          proxy_1.canvasContext.drawImage(imageObj_1, 0, 0, proxy_1.element.width, proxy_1.element.height);
          proxy_1.save(proxy_1.fileType, proxy_1.fileName);
        };
      }
    };
    SignatureBase2.prototype.save = function(type, fileName) {
      if (this.saveWithBackground && this.backgroundLoaded == null && (this.backgroundImage || this.backgroundColor)) {
        this.backgroundLoaded = false;
        this.fileType = type;
        this.fileName = fileName;
        this.saveBackground(false);
      } else if (type === "Svg") {
        fileName = fileName || "Signature";
        this.toSVG(fileName);
      } else if (type === "Jpeg") {
        fileName = fileName || "Signature";
        if (!this.saveWithBackground || this.saveWithBackground && !(this.backgroundImage || this.backgroundColor)) {
          this.toJPEG(fileName);
        } else {
          var dataURL = this.canvasContext.canvas.toDataURL("image/jpeg");
          this.download(this.getBlob(dataURL), fileName + ".jpeg");
        }
      } else {
        fileName = fileName || "Signature";
        var dataURL = this.canvasContext.canvas.toDataURL("image/png");
        this.download(this.getBlob(dataURL), fileName + ".png");
      }
      if (this.saveWithBackground && this.backgroundLoaded) {
        this.resetSnap();
      }
    };
    SignatureBase2.prototype.resetSnap = function() {
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      var proxy2 = this;
      var restoreObj = new Image();
      restoreObj.src = this.snapColl[this.incStep - 1];
      restoreObj.onload = function() {
        proxy2.canvasContext.drawImage(restoreObj, 0, 0, proxy2.element.width, proxy2.element.height);
        proxy2.updateSnapCollection();
      };
      this.backgroundLoaded = null;
      this.snapColl.pop();
      this.incStep--;
      this.snapColl.pop();
      this.incStep--;
    };
    SignatureBase2.prototype.toJPEG = function(fileName) {
      var _this = this;
      var imageSrc = this.snapColl[this.incStep];
      this.setBackgroundColor("#ffffff");
      var proxy2 = this;
      var imageObj = new Image();
      imageObj.crossOrigin = "anonymous";
      imageObj.src = imageSrc;
      imageObj.onload = function() {
        proxy2.canvasContext.globalCompositeOperation = "source-over";
        proxy2.canvasContext.drawImage(imageObj, 0, 0, proxy2.element.width, proxy2.element.height);
        var dataURL = proxy2.canvasContext.canvas.toDataURL("image/jpeg");
        proxy2.download(proxy2.getBlob(dataURL), fileName + ".jpeg");
        proxy2.canvasContext.clearRect(0, 0, proxy2.canvasContext.canvas.width, proxy2.canvasContext.canvas.height);
        _this.resizeHandler();
      };
      this.snapColl.pop();
      this.incStep--;
    };
    SignatureBase2.prototype.toSVG = function(fileName) {
      var dataUrl = this.canvasContext.canvas.toDataURL();
      var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      svg.setAttribute("width", this.canvasContext.canvas.width.toString());
      svg.setAttribute("height", this.canvasContext.canvas.height.toString());
      var XLinkNS = "http://www.w3.org/1999/xlink";
      var img = document.createElementNS("http://www.w3.org/2000/svg", "image");
      img.setAttributeNS(null, "height", this.canvasContext.canvas.height.toString());
      img.setAttributeNS(null, "width", this.canvasContext.canvas.width.toString());
      img.setAttributeNS(XLinkNS, "xlink:href", dataUrl);
      svg.appendChild(img);
      var prefix = "data:image/svg+xml;base64,";
      var header = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"' + (' width="' + this.canvasContext.canvas.width + '"') + (' height="' + this.canvasContext.canvas.height + '"') + ">";
      var footer = "</svg>";
      var body = svg.innerHTML;
      var data = header + body + footer;
      var svgDataUrl = prefix + btoa(data);
      if (fileName == null) {
        return svgDataUrl;
      } else {
        this.download(this.getBlob(svgDataUrl), fileName + ".svg");
        return null;
      }
    };
    SignatureBase2.prototype.saveAsBlob = function() {
      return this.getBlob(this.canvasContext.canvas.toDataURL("image/png"));
    };
    SignatureBase2.prototype.getSignature = function(type) {
      if (type === "Jpeg") {
        var imgData = this.canvasContext.getImageData(0, 0, this.element.width, this.element.height);
        var data = imgData.data;
        for (var i = 0; i < data.length; i += 4) {
          if (data[i + 3] < 255) {
            data[i] = 255 - data[i];
            data[i + 1] = 255 - data[i + 1];
            data[i + 2] = 255 - data[i + 2];
            data[i + 3] = 255 - data[i + 3];
          }
        }
        this.canvasContext.putImageData(imgData, 0, 0);
        var dataURL = this.canvasContext.canvas.toDataURL("image/jpeg");
        this.resizeHandler();
        return dataURL;
      } else if (type === "Svg") {
        return this.toSVG(null);
      } else {
        return this.canvasContext.canvas.toDataURL("image/png");
      }
    };
    SignatureBase2.prototype.getModuleName = function() {
      return "signature";
    };
    SignatureBase2.prototype.getPersistData = function() {
      this.signatureValue = this.snapColl[this.incStep];
      return this.addOnPersist(["signatureValue"]);
    };
    SignatureBase2.prototype.destroy = function() {
      this.unwireEvents(null);
      removeClass([this.element], "e-" + this.getModuleName());
      this.element.removeAttribute("tabindex");
      this.pointColl = null;
      _super.prototype.destroy.call(this);
    };
    SignatureBase2.prototype.propertyChanged = function(key, value) {
      var canvasNew = this.canvasContext;
      switch (key) {
        case "backgroundColor":
          canvasNew.canvas.style.backgroundColor = value;
          this.backgroundColor = value;
          break;
        case "backgroundImage":
          canvasNew.canvas.style.backgroundImage = "url(" + value + ")";
          this.backgroundImage = value;
          break;
        case "strokeColor":
          canvasNew.fillStyle = value;
          this.strokeColor = value;
          break;
        case "saveWithBackground":
          this.saveWithBackground = value;
          break;
        case "maxStrokeWidth":
          this.maxStrokeWidth = value;
          break;
        case "minStrokeWidth":
          this.minStrokeWidth = value;
          break;
        case "velocity":
          this.velocity = value;
          break;
        case "isReadOnly":
          this.isRead(value);
          break;
        case "disabled":
          this.enableOrDisable(value);
          break;
      }
    };
    return SignatureBase2;
  }(Component)
);

// node_modules/@syncfusion/ej2-inputs/src/signature/signature.js
var __extends28 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate27 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Signature = (
  /** @class */
  function(_super) {
    __extends28(Signature2, _super);
    function Signature2(options, element2) {
      return _super.call(this, options, element2) || this;
    }
    Signature2.prototype.preRender = function() {
    };
    Signature2.prototype.render = function() {
      this.initialize();
    };
    Signature2.prototype.initialize = function() {
      addClass([this.element], "e-" + this.getModuleName());
      _super.prototype.initialize.call(this, this.element);
      if (this.enablePersistence) {
        this.loadPersistedSignature();
      }
    };
    Signature2.prototype.getModuleName = function() {
      return "signature";
    };
    Signature2.prototype.getPersistData = function() {
      return this.addOnPersist(["signatureValue"]);
    };
    Signature2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "backgroundColor":
            _super.prototype.propertyChanged.call(this, prop, newProp.backgroundColor);
            break;
          case "backgroundImage":
            _super.prototype.propertyChanged.call(this, prop, newProp.backgroundImage);
            break;
          case "strokeColor":
            if (newProp.strokeColor !== oldProp.strokeColor) {
              _super.prototype.propertyChanged.call(this, prop, newProp.strokeColor);
            }
            break;
          case "saveWithBackground":
            _super.prototype.propertyChanged.call(this, prop, newProp.saveWithBackground);
            break;
          case "isReadOnly":
            _super.prototype.propertyChanged.call(this, prop, newProp.isReadOnly);
            break;
          case "disabled":
            _super.prototype.propertyChanged.call(this, prop, newProp.disabled);
            break;
        }
      }
    };
    __decorate27([
      Property("")
    ], Signature2.prototype, "backgroundColor", void 0);
    __decorate27([
      Property("")
    ], Signature2.prototype, "backgroundImage", void 0);
    __decorate27([
      Property(false)
    ], Signature2.prototype, "disabled", void 0);
    __decorate27([
      Property(false)
    ], Signature2.prototype, "isReadOnly", void 0);
    __decorate27([
      Property(true)
    ], Signature2.prototype, "saveWithBackground", void 0);
    __decorate27([
      Property("#000000")
    ], Signature2.prototype, "strokeColor", void 0);
    __decorate27([
      Property(0.5)
    ], Signature2.prototype, "minStrokeWidth", void 0);
    __decorate27([
      Property(2)
    ], Signature2.prototype, "maxStrokeWidth", void 0);
    __decorate27([
      Property(0.7)
    ], Signature2.prototype, "velocity", void 0);
    __decorate27([
      Property("en-US")
    ], Signature2.prototype, "locale", void 0);
    __decorate27([
      Property(false)
    ], Signature2.prototype, "enableRtl", void 0);
    __decorate27([
      Property(false)
    ], Signature2.prototype, "enablePersistence", void 0);
    __decorate27([
      Event2()
    ], Signature2.prototype, "beforeSave", void 0);
    __decorate27([
      Event2()
    ], Signature2.prototype, "change", void 0);
    __decorate27([
      Event2()
    ], Signature2.prototype, "created", void 0);
    Signature2 = __decorate27([
      NotifyPropertyChanges
    ], Signature2);
    return Signature2;
  }(SignatureBase)
);

// node_modules/@syncfusion/ej2-calendars/src/datepicker/datepicker.js
var __extends29 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate28 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER = "e-date-wrapper";
var ROOT6 = "e-datepicker";
var LIBRARY = "e-lib";
var CONTROL3 = "e-control";
var POPUPWRAPPER = "e-popup-wrapper";
var INPUTWRAPPER2 = "e-input-group-icon";
var POPUP = "e-popup";
var INPUTCONTAINER = "e-input-group";
var INPUTFOCUS = "e-input-focus";
var INPUTROOT = "e-input";
var ERROR3 = "e-error";
var ACTIVE2 = "e-active";
var OVERFLOW = "e-date-overflow";
var DATEICON = "e-date-icon";
var ICONS = "e-icons";
var OPENDURATION = 300;
var OFFSETVALUE = 4;
var SELECTED3 = "e-selected";
var FOCUSEDDATE3 = "e-focused-date";
var NONEDIT = "e-non-edit";
var containerAttr3 = ["title", "class", "style"];
var DatePicker = (
  /** @class */
  function(_super) {
    __extends29(DatePicker2, _super);
    function DatePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.previousElementValue = "";
      _this.isDateIconClicked = false;
      _this.isAltKeyPressed = false;
      _this.isInteracted = true;
      _this.invalidValueString = null;
      _this.checkPreviousValue = null;
      _this.maskedDateValue = "";
      _this.isAngular = false;
      _this.preventChange = false;
      _this.isIconClicked = false;
      _this.isDynamicValueChanged = false;
      _this.moduleName = _this.getModuleName();
      _this.datepickerOptions = options;
      return _this;
    }
    DatePicker2.prototype.render = function() {
      this.initialize();
      this.bindEvents();
      this.renderComplete();
      this.setTimeZone(this.serverTimezoneOffset);
    };
    DatePicker2.prototype.setTimeZone = function(offsetValue) {
      if (!isNullOrUndefined(this.serverTimezoneOffset) && this.value) {
        var clientTimeZoneDiff = (/* @__PURE__ */ new Date()).getTimezoneOffset() / 60;
        var serverTimezoneDiff = offsetValue;
        var timeZoneDiff = serverTimezoneDiff + clientTimeZoneDiff;
        timeZoneDiff = this.isDayLightSaving() ? timeZoneDiff-- : timeZoneDiff;
        this.value = new Date(this.value.getTime() + timeZoneDiff * 60 * 60 * 1e3);
        this.updateInput();
      }
    };
    DatePicker2.prototype.isDayLightSaving = function() {
      var firstOffset = new Date(this.value.getFullYear(), 0, 1).getTimezoneOffset();
      var secondOffset = new Date(this.value.getFullYear(), 6, 1).getTimezoneOffset();
      return this.value.getTimezoneOffset() < Math.max(firstOffset, secondOffset);
    };
    DatePicker2.prototype.setAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, { "readonly": "" });
      }
      this.updateIconState();
    };
    DatePicker2.prototype.updateIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDIT]);
        } else {
          addClass([this.inputWrapper.container], [NONEDIT]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDIT]);
      }
    };
    DatePicker2.prototype.initialize = function() {
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.checkInvalidValue(this.value);
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setAllowEdit();
      this.updateInput();
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType == "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInputValue(this.maskedDateValue);
      }
      this.previousElementValue = this.inputElement.value;
      this.previousDate = !isNullOrUndefined(this.value) ? /* @__PURE__ */ new Date(+this.value) : null;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputValueCopy = this.value;
    };
    DatePicker2.prototype.createInput = function() {
      var ariaAttrs = {
        "aria-live": "assertive",
        "aria-atomic": "true",
        "aria-haspopup": "true",
        "aria-activedescendant": "null",
        "aria-owns": this.element.id + "_options",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-invalid": "false"
      };
      if (this.getModuleName() === "datepicker") {
        var l10nLocale = { placeholder: this.placeholder };
        this.globalize = new Internationalization(this.locale);
        this.l10n = new L10n("datepicker", l10nLocale, this.locale);
        this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      }
      var updatedCssClassValues = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValues = this.cssClass.replace(/\s+/g, " ").trim();
      }
      var isBindClearAction = this.enableMask ? false : true;
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        floatLabelType: this.floatLabelType,
        bindClearAction: isBindClearAction,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValues,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [INPUTWRAPPER2 + " " + DATEICON + " " + ICONS]
      }, this.createElement);
      this.setWidth(this.width);
      if (this.inputElement.name !== "") {
        this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute("name"));
      } else {
        this.inputElement.setAttribute("name", "" + this.element.id);
      }
      attributes(this.inputElement, ariaAttrs);
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
      Input.addAttributes({ "aria-label": "select" }, this.inputWrapper.buttons[0]);
      addClass([this.inputWrapper.container], DATEWRAPPER);
    };
    DatePicker2.prototype.updateInput = function(isDynamic) {
      if (isDynamic === void 0) {
        isDynamic = false;
      }
      var formatOptions;
      if (this.value && !this.isCalendar() && !isDynamic) {
        this.disabledDates();
      }
      if (isNaN(+new Date(this.checkValue(this.value)))) {
        this.setProperties({ value: null }, true);
      }
      if (this.strictMode) {
        _super.prototype.validateDate.call(this);
        this.minMaxUpdates();
        _super.prototype.minMaxUpdate.call(this);
      }
      if (!isNullOrUndefined(this.value)) {
        var dateValue = this.value;
        var dateString = void 0;
        var tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd"
            });
          } else {
            dateString = this.globalize.formatDate(this.value, {
              format: tempFormat,
              type: "dateTime",
              skeleton: "yMd",
              calendar: "islamic"
            });
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          dateString = this.globalize.formatDate(this.value, formatOptions);
        }
        if (+dateValue <= +this.max && +dateValue >= +this.min) {
          this.updateInputValue(dateString);
        } else {
          var value = +dateValue >= +this.max || !+this.value || (!+this.value || +dateValue <= +this.min);
          if (!this.strictMode && value) {
            this.updateInputValue(dateString);
          }
        }
      }
      if (isNullOrUndefined(this.value) && this.strictMode) {
        if (!this.enableMask) {
          this.updateInputValue("");
        } else {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.updateInputValue(this.invalidValueString);
      }
      this.changedArgs = { value: this.value };
      this.errorClass();
      this.updateIconState();
    };
    DatePicker2.prototype.minMaxUpdates = function() {
      if (!isNullOrUndefined(this.value) && this.value < this.min && this.min <= this.max && this.strictMode) {
        this.setProperties({ value: this.min }, true);
        this.changedArgs = { value: this.value };
      } else {
        if (!isNullOrUndefined(this.value) && this.value > this.max && this.min <= this.max && this.strictMode) {
          this.setProperties({ value: this.max }, true);
          this.changedArgs = { value: this.value };
        }
      }
    };
    DatePicker2.prototype.checkStringValue = function(val) {
      var returnDate = null;
      var formatOptions = null;
      var formatDateTime = null;
      if (this.getModuleName() === "datetimepicker") {
        var culture = new Internationalization(this.locale);
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd" };
          formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime" };
        } else {
          formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime", calendar: "islamic" };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
        } else {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
      }
      returnDate = this.checkDateValue(this.globalize.parseDate(val, formatOptions));
      if (isNullOrUndefined(returnDate) && this.getModuleName() === "datetimepicker") {
        returnDate = this.checkDateValue(this.globalize.parseDate(val, formatDateTime));
      }
      return returnDate;
    };
    DatePicker2.prototype.checkInvalidValue = function(value) {
      if (!(value instanceof Date) && !isNullOrUndefined(value)) {
        var valueDate = null;
        var valueString = value;
        if (typeof value === "number") {
          valueString = value.toString();
        }
        var formatOptions = null;
        var formatDateTime = null;
        if (this.getModuleName() === "datetimepicker") {
          var culture = new Internationalization(this.locale);
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd" };
            formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime" };
          } else {
            formatOptions = { format: this.dateTimeFormat, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
            formatDateTime = { format: culture.getDatePattern({ skeleton: "yMd" }), type: "dateTime", calendar: "islamic" };
          }
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
        }
        var invalid = false;
        if (typeof valueString !== "string") {
          valueString = null;
          invalid = true;
        } else {
          if (typeof valueString === "string") {
            valueString = valueString.trim();
          }
          valueDate = this.checkStringValue(valueString);
          if (!valueDate) {
            var extISOString = null;
            var basicISOString = null;
            extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
            if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
              invalid = true;
            } else {
              valueDate = new Date(valueString);
            }
          }
        }
        if (invalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({ value: null }, true);
        } else {
          this.setProperties({ value: valueDate }, true);
        }
      }
    };
    DatePicker2.prototype.bindInputEvent = function() {
      if (!isNullOrUndefined(this.formatString) || this.enableMask) {
        if (this.enableMask || this.formatString.indexOf("y") === -1) {
          EventHandler.add(this.inputElement, "input", this.inputHandler, this);
        } else {
          EventHandler.remove(this.inputElement, "input", this.inputHandler);
        }
      }
    };
    DatePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateIconHandler, this);
      EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
      }
      this.bindInputEvent();
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.resetFormHandler, this);
      }
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardModules = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyActionHandle.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DatePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "ArrowLeft":
        case "ArrowRight":
        case "ArrowUp":
        case "ArrowDown":
        case "Home":
        case "End":
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            if (e.code !== "Delete") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    DatePicker2.prototype.unBindEvents = function() {
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateIconHandler);
      EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      if (this.enableMask) {
        EventHandler.remove(this.inputElement, "keydown", this.keydownHandler);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
    };
    DatePicker2.prototype.resetFormHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var value = this.inputElement.getAttribute("value");
        if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
          value = "";
          this.inputValueCopy = null;
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({ value: this.inputValueCopy }, true);
        this.restoreValue();
        if (this.inputElement) {
          this.updateInputValue(value);
          this.errorClass();
        }
      }
    };
    DatePicker2.prototype.restoreValue = function() {
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.previousDate = this.value;
      this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.globalize.formatDate(this.inputValueCopy, {
        format: this.formatString,
        type: "dateTime",
        skeleton: "yMd"
      });
    };
    DatePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    DatePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler, this);
      }
    };
    DatePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      this.clear(e);
    };
    DatePicker2.prototype.mouseUpHandler = function(e) {
      if (this.enableMask) {
        e.preventDefault();
        this.notify("setMaskSelection", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.clear = function(event) {
      this.setProperties({ value: null }, true);
      if (!this.enableMask) {
        this.updateInputValue("");
      }
      var clearedArgs = {
        event
      };
      this.trigger("cleared", clearedArgs);
      this.invalidValueString = "";
      this.updateInput();
      this.popupUpdate();
      this.changeEvent(event);
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnDateIconClick");
    };
    DatePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    DatePicker2.prototype.dateIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
        this.inputElement.blur();
      }
      e.preventDefault();
      if (!this.readonly) {
        if (this.isCalendar()) {
          this.hide(e);
        } else {
          this.isDateIconClicked = true;
          this.show(null, e);
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          this.inputElement.focus();
          addClass([this.inputWrapper.container], [INPUTFOCUS]);
          addClass(this.inputWrapper.buttons, ACTIVE2);
        }
      }
      this.isIconClicked = false;
    };
    DatePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (!isNullOrUndefined(this.htmlAttributes[key])) {
            if (containerAttr3.indexOf(key) > -1) {
              if (key === "class") {
                var updatedClassValues = this.htmlAttributes[key].replace(/\s+/g, " ").trim();
                if (updatedClassValues !== "") {
                  addClass([this.inputWrapper.container], updatedClassValues.split(" "));
                }
              } else if (key === "style") {
                var setStyle = this.inputWrapper.container.getAttribute(key);
                if (!isNullOrUndefined(setStyle)) {
                  if (setStyle.charAt(setStyle.length - 1) === ";") {
                    setStyle = setStyle + this.htmlAttributes[key];
                  } else {
                    setStyle = setStyle + ";" + this.htmlAttributes[key];
                  }
                } else {
                  setStyle = this.htmlAttributes[key];
                }
                this.inputWrapper.container.setAttribute(key, setStyle);
              } else {
                this.inputWrapper.container.setAttribute(key, this.htmlAttributes[key]);
              }
            }
          }
        }
      }
    };
    DatePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (containerAttr3.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes[key]);
          }
        }
      }
    };
    DatePicker2.prototype.updateCssClass = function(newCssClass, oldCssClass) {
      if (!isNullOrUndefined(oldCssClass)) {
        oldCssClass = oldCssClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(newCssClass)) {
        newCssClass = newCssClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(newCssClass, [this.inputWrapper.container], oldCssClass);
      if (this.popupWrapper) {
        Input.setCssClass(newCssClass, [this.popupWrapper], oldCssClass);
      }
    };
    DatePicker2.prototype.calendarKeyActionHandle = function(e) {
      switch (e.action) {
        case "escape":
          if (this.isCalendar()) {
            this.hide(e);
          } else {
            this.inputWrapper.container.children[this.index].blur();
          }
          break;
        case "enter":
          if (!this.isCalendar()) {
            this.show(null, e);
          } else {
            if (+this.value !== +this.currentDate && !this.isCalendar()) {
              this.inputWrapper.container.children[this.index].focus();
            }
          }
          if (this.getModuleName() === "datetimepicker") {
            this.inputElement.focus();
          }
          break;
        case "tab":
          this.hide(e);
      }
    };
    DatePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType == "Auto" || this.floatLabelType == "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      var focusArguments = {
        model: this
      };
      this.isDateIconClicked = false;
      this.trigger("focus", focusArguments);
      this.updateIconState();
      if (this.openOnFocus && !this.isIconClicked) {
        this.show();
      }
    };
    DatePicker2.prototype.inputHandler = function() {
      this.isPopupClicked = false;
      if (this.enableMask) {
        this.notify("inputHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    DatePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.strictModeUpdate();
      if (this.inputElement.value === "" && isNullOrUndefined(this.value)) {
        this.invalidValueString = null;
        this.updateInputValue("");
      }
      this.updateInput();
      this.popupUpdate();
      this.changeTrigger(e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value == this.maskedDateValue && !this.value && (this.floatLabelType == "Auto" || this.floatLabelType == "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      this.errorClass();
      if (this.isCalendar() && document.activeElement === this.inputElement) {
        this.hide(e);
      }
      if (this.getModuleName() === "datepicker") {
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
      if (this.isCalendar()) {
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.calendarKeyboardModules = new KeyboardEvents(this.calendarElement.children[1].firstElementChild, {
          eventName: "keydown",
          keyAction: this.calendarKeyActionHandle.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      }
      this.isPopupClicked = false;
    };
    DatePicker2.prototype.documentHandler = function(e) {
      if (!isNullOrUndefined(this.popupObj) && (this.inputWrapper.container.contains(e.target) || this.popupObj.element && this.popupObj.element.contains(e.target)) && e.type !== "touchstart") {
        e.preventDefault();
      }
      var target = e.target;
      if (!closest(target, ".e-datepicker.e-popup-wrapper") && !(closest(target, "." + INPUTCONTAINER) === this.inputWrapper.container) && !target.classList.contains("e-day")) {
        this.hide(e);
        this.focusOut();
      } else if (closest(target, ".e-datepicker.e-popup-wrapper")) {
        if (target.classList.contains("e-day") && !isNullOrUndefined(e.target.parentElement) && e.target.parentElement.classList.contains("e-selected") && closest(target, ".e-content") && closest(target, ".e-content").classList.contains("e-" + this.depth.toLowerCase())) {
          this.hide(e);
        } else if (closest(target, ".e-footer-container") && target.classList.contains("e-today") && target.classList.contains("e-btn") && +/* @__PURE__ */ new Date(+this.value) === +_super.prototype.generateTodayVal.call(this, this.value)) {
          this.hide(e);
        }
      }
    };
    DatePicker2.prototype.inputKeyActionHandle = function(e) {
      var clickedView = this.currentView();
      switch (e.action) {
        case "altUpArrow":
          this.isAltKeyPressed = false;
          this.hide(e);
          this.inputElement.focus();
          break;
        case "altDownArrow":
          this.isAltKeyPressed = true;
          this.strictModeUpdate();
          this.updateInput();
          this.changeTrigger(e);
          if (this.getModuleName() === "datepicker") {
            this.show(null, e);
          }
          break;
        case "escape":
          this.hide(e);
          break;
        case "enter":
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (!this.isCalendar() && document.activeElement === this.inputElement) {
            this.hide(e);
          }
          if (this.isCalendar()) {
            e.preventDefault();
            e.stopPropagation();
          }
          break;
        case "tab":
        case "shiftTab":
          var start = this.inputElement.selectionStart;
          var end = this.inputElement.selectionEnd;
          if (this.enableMask && !this.popupObj && !this.readonly) {
            var length_1 = this.inputElement.value.length;
            if (start == 0 && end == length_1 || end !== length_1 && e.action == "tab" || start !== 0 && e.action == "shiftTab") {
              e.preventDefault();
            }
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
            start = this.inputElement.selectionStart;
            end = this.inputElement.selectionEnd;
          }
          this.strictModeUpdate();
          this.updateInput();
          this.popupUpdate();
          this.changeTrigger(e);
          this.errorClass();
          if (this.enableMask) {
            this.inputElement.selectionStart = start;
            this.inputElement.selectionEnd = end;
          }
          this.hide(e);
          break;
        default:
          this.defaultAction(e);
          if (e.action === "select" && clickedView === this.depth) {
            this.hide(e);
          }
      }
    };
    DatePicker2.prototype.defaultAction = function(e) {
      this.previousDate = !isNullOrUndefined(this.value) && /* @__PURE__ */ new Date(+this.value) || null;
      if (this.isCalendar()) {
        _super.prototype.keyActionHandle.call(this, e);
        if (this.isCalendar()) {
          attributes(this.inputElement, {
            "aria-activedescendant": "" + this.setActiveDescendant()
          });
        }
      }
    };
    DatePicker2.prototype.popupUpdate = function() {
      if (isNullOrUndefined(this.value) && !isNullOrUndefined(this.previousDate) || +this.value !== +this.previousDate) {
        if (this.popupObj) {
          if (this.popupObj.element.querySelectorAll("." + SELECTED3).length > 0) {
            removeClass(this.popupObj.element.querySelectorAll("." + SELECTED3), [SELECTED3]);
          }
        }
        if (!isNullOrUndefined(this.value)) {
          if (+this.value >= +this.min && +this.value <= +this.max) {
            var targetdate = new Date(this.checkValue(this.value));
            _super.prototype.navigateTo.call(this, "Month", targetdate);
          }
        }
      }
    };
    DatePicker2.prototype.strictModeUpdate = function() {
      var format;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        format = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else {
        format = isNullOrUndefined(this.formatString) ? this.formatString : this.formatString.replace("dd", "d");
      }
      if (!isNullOrUndefined(format)) {
        var len = format.split("M").length - 1;
        if (len < 3) {
          format = format.replace("MM", "M");
        }
      }
      var dateOptions;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          dateOptions = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format, type: "dateTime", skeleton: "yMd" };
        } else {
          formatOptions = { format, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
        dateOptions = formatOptions;
      }
      var date;
      if (typeof this.inputElement.value === "string") {
        this.inputElement.value = this.inputElement.value.trim();
      }
      if (this.getModuleName() === "datetimepicker") {
        if (this.checkDateValue(this.globalize.parseDate(this.inputElement.value, dateOptions))) {
          date = this.globalize.parseDate(this.inputElement.value, dateOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          date = this.globalize.parseDate(this.inputElement.value, formatOptions);
        }
      } else {
        date = this.globalize.parseDate(this.inputElement.value, dateOptions);
        date = !isNullOrUndefined(date) && isNaN(+date) ? null : date;
        if (!isNullOrUndefined(this.formatString) && this.inputElement.value !== "" && this.strictMode) {
          if ((this.isPopupClicked || !this.isPopupClicked && this.inputElement.value === this.previousElementValue) && this.formatString.indexOf("y") === -1) {
            date.setFullYear(this.value.getFullYear());
          }
        }
      }
      if (this.getModuleName() === "datepicker" && (this.value && !isNaN(+this.value)) && date) {
        date.setHours(this.value.getHours(), this.value.getMinutes(), this.value.getSeconds(), this.value.getMilliseconds());
      }
      if (this.strictMode && date) {
        this.updateInputValue(this.globalize.formatDate(date, dateOptions));
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({ value: date }, true);
        }
      } else if (!this.strictMode) {
        if (this.inputElement.value !== this.previousElementValue) {
          this.setProperties({ value: date }, true);
        }
      }
      if (this.strictMode && !date && this.inputElement.value === "") {
        this.setProperties({ value: null }, true);
      }
      if (isNaN(+this.value)) {
        this.setProperties({ value: null }, true);
      }
      if (isNullOrUndefined(this.value)) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
    };
    DatePicker2.prototype.createCalendar = function() {
      var _this = this;
      this.popupWrapper = this.createElement("div", { className: "" + ROOT6 + " " + POPUPWRAPPER });
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (Browser.isDevice) {
        this.modelHeader();
        this.modal = this.createElement("div");
        this.modal.className = "" + ROOT6 + " e-date-modal";
        document.body.className += " " + OVERFLOW;
        this.modal.style.display = "block";
        document.body.appendChild(this.modal);
      }
      this.calendarElement.querySelector("table tbody").className = "";
      this.popupObj = new Popup(this.popupWrapper, {
        content: this.calendarElement,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? { X: "center", Y: "center" } : { X: "left", Y: "bottom" },
        offsetY: OFFSETVALUE,
        targetType: "container",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        collision: Browser.isDevice ? { X: "fit", Y: "fit" } : { X: "flip", Y: "flip" },
        open: function() {
          if (_this.getModuleName() !== "datetimepicker") {
            if (document.activeElement !== _this.inputElement) {
              _this.defaultKeyConfigs = extend(_this.defaultKeyConfigs, _this.keyConfigs);
              _this.calendarElement.children[1].firstElementChild.focus();
              _this.calendarKeyboardModules = new KeyboardEvents(_this.calendarElement.children[1].firstElementChild, {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
              _this.calendarKeyboardModules = new KeyboardEvents(_this.inputWrapper.container.children[_this.index], {
                eventName: "keydown",
                keyAction: _this.calendarKeyActionHandle.bind(_this),
                keyConfigs: _this.defaultKeyConfigs
              });
            }
          }
        },
        close: function() {
          if (_this.isDateIconClicked) {
            _this.inputWrapper.container.children[_this.index].focus();
          }
          if (_this.value) {
            _this.disabledDates();
          }
          if (_this.popupObj) {
            _this.popupObj.destroy();
          }
          _this.resetCalendar();
          detach(_this.popupWrapper);
          _this.popupObj = _this.popupWrapper = null;
          _this.preventArgs = null;
          _this.calendarKeyboardModules = null;
          _this.setAriaAttributes();
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      this.popupObj.element.className += " " + this.cssClass;
      this.setAriaAttributes();
    };
    DatePicker2.prototype.setAriaDisabled = function() {
      if (!this.enabled) {
        this.inputElement.setAttribute("aria-disabled", "true");
        this.inputElement.tabIndex = -1;
      } else {
        this.inputElement.setAttribute("aria-disabled", "false");
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      }
    };
    DatePicker2.prototype.modelHeader = function() {
      var dateOptions;
      var modelHeader = this.createElement("div", { className: "e-model-header" });
      var yearHeading = this.createElement("h1", { className: "e-model-year" });
      var h2 = this.createElement("div");
      var daySpan = this.createElement("span", { className: "e-model-day" });
      var monthSpan = this.createElement("span", { className: "e-model-month" });
      if (this.calendarMode === "Gregorian") {
        dateOptions = { format: "y", skeleton: "dateTime" };
      } else {
        dateOptions = { format: "y", skeleton: "dateTime", calendar: "islamic" };
      }
      yearHeading.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      if (this.calendarMode === "Gregorian") {
        dateOptions = { format: "E", skeleton: "dateTime" };
      } else {
        dateOptions = { format: "E", skeleton: "dateTime", calendar: "islamic" };
      }
      daySpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions) + ", ";
      if (this.calendarMode === "Gregorian") {
        dateOptions = { format: "MMM d", skeleton: "dateTime" };
      } else {
        dateOptions = { format: "MMM d", skeleton: "dateTime", calendar: "islamic" };
      }
      monthSpan.textContent = "" + this.globalize.formatDate(this.value || /* @__PURE__ */ new Date(), dateOptions);
      modelHeader.appendChild(yearHeading);
      h2.appendChild(daySpan);
      h2.appendChild(monthSpan);
      modelHeader.appendChild(h2);
      this.calendarElement.insertBefore(modelHeader, this.calendarElement.firstElementChild);
    };
    DatePicker2.prototype.changeTrigger = function(event) {
      if (this.inputElement.value !== this.previousElementValue) {
        if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
          if (this.isDynamicValueChanged && this.isCalendar()) {
            this.popupUpdate();
          }
          this.changedArgs.value = this.value;
          this.changedArgs.event = event || null;
          this.changedArgs.element = this.element;
          this.changedArgs.isInteracted = !isNullOrUndefined(event);
          if (this.isAngular && this.preventChange) {
            this.preventChange = false;
          } else {
            this.trigger("change", this.changedArgs);
          }
          this.previousElementValue = this.inputElement.value;
          this.previousDate = !isNaN(+new Date(this.checkValue(this.value))) ? new Date(this.checkValue(this.value)) : null;
          this.isInteracted = true;
        }
      }
    };
    DatePicker2.prototype.navigatedEvent = function() {
      this.trigger("navigated", this.navigatedArgs);
    };
    DatePicker2.prototype.changeEvent = function(event) {
      if ((this.previousDate && this.previousDate.valueOf()) !== (this.value && this.value.valueOf())) {
        this.selectCalendar(event);
        this.changedArgs.event = event ? event : null;
        this.changedArgs.element = this.element;
        this.changedArgs.isInteracted = this.isInteracted;
        if (!this.isDynamicValueChanged) {
          this.trigger("change", this.changedArgs);
        }
        this.previousDate = this.value && /* @__PURE__ */ new Date(+this.value);
        if (!this.isDynamicValueChanged) {
          this.hide(event);
        }
        this.previousElementValue = this.inputElement.value;
        this.errorClass();
      }
    };
    DatePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this) {
        modules.push({ args: [this], member: "islamic" });
      }
      if (this.enableMask) {
        modules.push({ args: [this], member: "MaskedDateTime" });
      }
      return modules;
    };
    DatePicker2.prototype.selectCalendar = function(e) {
      var date;
      var tempFormat;
      var formatOptions;
      if (this.getModuleName() === "datetimepicker") {
        tempFormat = !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat;
      } else {
        tempFormat = this.formatString;
      }
      if (this.value) {
        if (this.getModuleName() === "datetimepicker") {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: tempFormat, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: tempFormat, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        } else {
          if (this.calendarMode === "Gregorian") {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
          } else {
            formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
          }
          date = this.globalize.formatDate(this.changedArgs.value, formatOptions);
        }
        if (this.enableMask) {
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
      if (!isNullOrUndefined(date)) {
        this.updateInputValue(date);
        if (this.enableMask) {
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
        }
      }
    };
    DatePicker2.prototype.isCalendar = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + POPUPWRAPPER)) {
        return true;
      }
      return false;
    };
    DatePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else if (typeof width === "string") {
        this.inputWrapper.container.style.width = width.match(/px|%|em/) ? this.width : formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DatePicker2.prototype.show = function(type, e) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        var prevent_1 = true;
        var outOfRange = void 0;
        if (!isNullOrUndefined(this.value) && !(+this.value >= +this.min && +this.value <= +this.max)) {
          outOfRange = new Date(this.checkValue(this.value));
          this.setProperties({ "value": null }, true);
        } else {
          outOfRange = this.value || null;
        }
        if (!this.isCalendar()) {
          _super.prototype.render.call(this);
          this.setProperties({ "value": outOfRange || null }, true);
          this.previousDate = outOfRange;
          this.createCalendar();
        }
        if (Browser.isDevice) {
          this.mobilePopupWrapper = this.createElement("div", { className: "e-datepick-mob-popup-wrap" });
          document.body.appendChild(this.mobilePopupWrapper);
        }
        this.preventArgs = {
          preventDefault: function() {
            prevent_1 = false;
          },
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          appendTo: Browser.isDevice ? this.mobilePopupWrapper : document.body
        };
        var eventArgs = this.preventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.preventArgs = eventArgs2;
          if (prevent_1 && !_this.preventArgs.cancel) {
            addClass(_this.inputWrapper.buttons, ACTIVE2);
            _this.preventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupObj.refreshPosition(_this.inputElement);
            var openAnimation = {
              name: "FadeIn",
              duration: Browser.isDevice ? 0 : OPENDURATION
            };
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _super.prototype.setOverlayIndex.call(_this, _this.mobilePopupWrapper, _this.popupObj.element, _this.modal, Browser.isDevice);
            _this.setAriaAttributes();
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.popupObj = null;
          }
          if (!isNullOrUndefined(_this.inputElement) && _this.inputElement.value === "") {
            if (!isNullOrUndefined(_this.tableBodyElement) && _this.tableBodyElement.querySelectorAll("td.e-selected").length > 0) {
              addClass([_this.tableBodyElement.querySelector("td.e-selected")], FOCUSEDDATE3);
              removeClass(_this.tableBodyElement.querySelectorAll("td.e-selected"), SELECTED3);
            }
          }
          EventHandler.add(document, "mousedown touchstart", _this.documentHandler, _this);
        });
      }
    };
    DatePicker2.prototype.hide = function(event) {
      var _this = this;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var prevent_2 = true;
        this.preventArgs = {
          preventDefault: function() {
            prevent_2 = false;
          },
          popup: this.popupObj,
          event: event || null,
          cancel: false
        };
        removeClass(this.inputWrapper.buttons, ACTIVE2);
        removeClass([document.body], OVERFLOW);
        var eventArgs = this.preventArgs;
        if (this.isCalendar()) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventCallback(prevent_2, eventArgs2);
          });
        } else {
          this.closeEventCallback(prevent_2, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DatePicker2.prototype.closeEventCallback = function(prevent, eventArgs) {
      this.preventArgs = eventArgs;
      if (this.isCalendar() && (prevent && !this.preventArgs.cancel)) {
        this.popupObj.hide();
        this.isAltKeyPressed = false;
        this.keyboardModule.destroy();
        removeClass(this.inputWrapper.buttons, ACTIVE2);
      }
      this.setAriaAttributes();
      if (Browser.isDevice && this.modal) {
        this.modal.style.display = "none";
        this.modal.outerHTML = "";
        this.modal = null;
      }
      if (Browser.isDevice) {
        if (!isNullOrUndefined(this.mobilePopupWrapper)) {
          this.mobilePopupWrapper.remove();
          this.mobilePopupWrapper = null;
        }
      }
      EventHandler.remove(document, "mousedown touchstart", this.documentHandler);
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DatePicker2.prototype.focusIn = function(triggerEvent) {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS]);
      }
    };
    DatePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS]);
        this.inputElement.blur();
      }
    };
    DatePicker2.prototype.currentView = function() {
      var currentView;
      if (this.calendarElement) {
        currentView = _super.prototype.currentView.call(this);
      }
      return currentView;
    };
    DatePicker2.prototype.navigateTo = function(view, date) {
      if (this.calendarElement) {
        _super.prototype.navigateTo.call(this, view, date);
      }
    };
    DatePicker2.prototype.destroy = function() {
      this.unBindEvents();
      _super.prototype.destroy.call(this);
      this.keyboardModules.destroy();
      if (this.popupObj && this.popupObj.element.classList.contains(POPUP)) {
        _super.prototype.destroy.call(this);
      }
      var ariaAttrs = {
        "aria-live": "assertive",
        "aria-atomic": "true",
        "aria-disabled": "true",
        "aria-haspopup": "true",
        "aria-activedescendant": "null",
        "aria-owns": this.element.id + "_options",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.inputElementCopy.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
        this.ensureInputAttribute();
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObj = this.popupWrapper = null;
        this.keyboardModule.destroy();
      }
      if (this.ngTag === null) {
        if (this.inputElement) {
          this.inputWrapper.container.insertAdjacentElement("afterend", this.inputElement);
          removeClass([this.inputElement], [INPUTROOT]);
        }
        removeClass([this.element], [ROOT6]);
        detach(this.inputWrapper.container);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.resetFormHandler);
      }
    };
    DatePicker2.prototype.ensureInputAttribute = function() {
      var prop = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        prop[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < prop.length; i++) {
        if (isNullOrUndefined(this.inputElementCopy.getAttribute(prop[i]))) {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(prop[i]);
        } else {
          if (prop[i].toLowerCase() === "value") {
            this.inputElement.value = this.inputElementCopy.getAttribute(prop[i]);
          }
          this.inputElement.setAttribute(prop[i], this.inputElementCopy.getAttribute(prop[i]));
        }
      }
    };
    DatePicker2.prototype.preRender = function() {
      this.inputElementCopy = this.element.cloneNode(true);
      removeClass([this.inputElementCopy], [ROOT6, CONTROL3, LIBRARY]);
      this.inputElement = this.element;
      this.formElement = closest(this.inputElement, "form");
      this.index = this.showClearButton ? 2 : 1;
      this.ngTag = null;
      if (this.element.tagName === "EJS-DATEPICKER" || this.element.tagName === "EJS-DATETIMEPICKER") {
        this.ngTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      if (this.element.getAttribute("id")) {
        if (this.ngTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        if (this.getModuleName() === "datetimepicker") {
          this.element.id = getUniqueID("ej2-datetimepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, { "id": this.element.id + "_input" });
          }
        } else {
          this.element.id = getUniqueID("ej2-datepicker");
          if (this.ngTag !== null) {
            attributes(this.inputElement, { "id": this.element.id + "_input" });
          }
        }
      }
      if (this.ngTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.defaultKeyConfigs = this.getDefaultKeyConfig();
      this.checkHtmlAttributes(false);
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
    };
    DatePicker2.prototype.getDefaultKeyConfig = function() {
      this.defaultKeyConfigs = {
        altUpArrow: "alt+uparrow",
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        controlUp: "ctrl+38",
        controlDown: "ctrl+40",
        moveDown: "downarrow",
        moveUp: "uparrow",
        moveLeft: "leftarrow",
        moveRight: "rightarrow",
        select: "enter",
        home: "home",
        end: "end",
        pageUp: "pageup",
        pageDown: "pagedown",
        shiftPageUp: "shift+pageup",
        shiftPageDown: "shift+pagedown",
        controlHome: "ctrl+home",
        controlEnd: "ctrl+end",
        shiftTab: "shift+tab",
        tab: "tab"
      };
      return this.defaultKeyConfigs;
    };
    DatePicker2.prototype.validationAttribute = function(target, inputElement) {
      var nameAttribute = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      inputElement.setAttribute("name", nameAttribute);
      target.removeAttribute("name");
      var attribute = ["required", "aria-required", "form"];
      for (var i = 0; i < attribute.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attribute[i]))) {
          continue;
        }
        var attr = target.getAttribute(attribute[i]);
        inputElement.setAttribute(attribute[i], attr);
        target.removeAttribute(attribute[i]);
      }
    };
    DatePicker2.prototype.checkFormat = function() {
      var culture = new Internationalization(this.locale);
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = culture.getDatePattern({ skeleton: skeletonString, type: "dateTime" });
          } else {
            this.formatString = culture.getDatePattern({ skeleton: skeletonString, type: "date" });
          }
        } else {
          if (this.getModuleName() === "datetimepicker") {
            this.formatString = this.dateTimeFormat;
          } else {
            this.formatString = null;
          }
        }
      } else {
        this.formatString = null;
      }
    };
    DatePicker2.prototype.checkHtmlAttributes = function(dynamic) {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      var attributes2 = dynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["value", "min", "max", "disabled", "readonly", "style", "name", "placeholder", "type"];
      var options;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          };
        } else {
          options = {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          };
        }
      } else {
        if (this.calendarMode === "Gregorian") {
          options = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
        } else {
          options = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
      }
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["enabled"] === void 0 || dynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({ enabled }, !dynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["readonly"] === void 0 || dynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ readonly }, !dynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["placeholder"] === void 0 || dynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !dynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "value":
              if (isNullOrUndefined(this.datepickerOptions) || this.datepickerOptions["value"] === void 0 || dynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(value, options), {}), !dynamic);
              }
              break;
            case "min":
              if (+this.min === +new Date(1900, 0, 1) || dynamic) {
                var min = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(min), {}), !dynamic);
              }
              break;
            case "max":
              if (+this.max === +new Date(2099, 11, 31) || dynamic) {
                var max = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, this.globalize.parseDate(max), {}), !dynamic);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DatePicker2.prototype.getModuleName = function() {
      return "datepicker";
    };
    DatePicker2.prototype.disabledDates = function() {
      var formatOptions;
      var globalize;
      var valueCopy = this.checkDateValue(this.value) ? /* @__PURE__ */ new Date(+this.value) : new Date(this.checkValue(this.value));
      var previousValCopy = this.previousDate;
      this.minMaxUpdates();
      _super.prototype.render.call(this);
      this.previousDate = previousValCopy;
      var date = valueCopy && +valueCopy;
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + date);
      if (!this.strictMode) {
        if (typeof this.value === "string" || typeof this.value === "object" && +this.value !== +valueCopy) {
          this.setProperties({ value: valueCopy }, true);
        }
      }
      if (!isNullOrUndefined(this.calendarElement.querySelectorAll(dateIdString)[0])) {
        if (this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled")) {
          if (!this.strictMode) {
            this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
          }
        }
      }
      var inputVal;
      if (this.getModuleName() === "datetimepicker") {
        if (this.calendarMode === "Gregorian") {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd"
          });
        } else {
          globalize = this.globalize.formatDate(valueCopy, {
            format: !isNullOrUndefined(this.formatString) ? this.formatString : this.dateTimeFormat,
            type: "dateTime",
            skeleton: "yMd",
            calendar: "islamic"
          });
        }
        inputVal = globalize;
      } else {
        if (this.calendarMode === "Gregorian") {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd" };
        } else {
          formatOptions = { format: this.formatString, type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
        inputVal = this.globalize.formatDate(valueCopy, formatOptions);
      }
      if (!this.popupObj) {
        this.updateInputValue(inputVal);
        if (this.enableMask) {
          this.updateInputValue(this.maskedDateValue);
          this.notify("createMask", {
            module: "MaskedDateTime"
          });
        }
      }
    };
    DatePicker2.prototype.setAriaAttributes = function() {
      if (this.isCalendar()) {
        Input.addAttributes({ "aria-expanded": "true" }, this.inputElement);
        attributes(this.inputElement, { "aria-activedescendant": "" + this.setActiveDescendant() });
      } else {
        Input.addAttributes({ "aria-expanded": "false" }, this.inputElement);
        attributes(this.inputElement, { "aria-activedescendant": "null" });
      }
    };
    DatePicker2.prototype.errorClass = function() {
      var dateIdString = '*[id^="/id"]'.replace("/id", "" + +this.value);
      var isDisabledDate = this.calendarElement && this.calendarElement.querySelectorAll(dateIdString)[0] && this.calendarElement.querySelectorAll(dateIdString)[0].classList.contains("e-disabled");
      if (!isNullOrUndefined(this.value) && !(+(/* @__PURE__ */ new Date(+this.value)).setMilliseconds(0) >= +this.min && +(/* @__PURE__ */ new Date(+this.value)).setMilliseconds(0) <= +this.max) || (!this.strictMode && this.inputElement.value !== "" && this.inputElement.value !== this.maskedDateValue && isNullOrUndefined(this.value) || isDisabledDate)) {
        addClass([this.inputWrapper.container], ERROR3);
        attributes(this.inputElement, { "aria-invalid": "true" });
      } else {
        removeClass([this.inputWrapper.container], ERROR3);
        attributes(this.inputElement, { "aria-invalid": "false" });
      }
    };
    DatePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.isInteracted = false;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            this.previousElementValue = this.inputElement.value;
            if (isNullOrUndefined(this.value)) {
              this.updateInputValue("");
              this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
            }
            this.updateInput(true);
            if (+this.previousDate !== +this.value) {
              this.changeTrigger(null);
            }
            this.isInteracted = true;
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "format":
            this.checkFormat();
            this.bindInputEvent();
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "allowEdit":
            this.setAllowEdit();
            break;
          case "placeholder":
            Input.setPlaceholder(this.placeholder, this.inputElement);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            this.setAriaDisabled();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkHtmlAttributes(true);
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
            Input.setPlaceholder(this.placeholder, this.inputElement);
            this.updateInput();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "start":
          case "depth":
            this.checkView();
            if (this.calendarElement) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            this.index = this.showClearButton ? 2 : 1;
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
              this.bindInputEvent();
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
          default:
            if (this.calendarElement && this.isCalendar()) {
              _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            }
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "width", void 0);
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "value", void 0);
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "cssClass", void 0);
    __decorate28([
      Property(false)
    ], DatePicker2.prototype, "strictMode", void 0);
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "format", void 0);
    __decorate28([
      Property(true)
    ], DatePicker2.prototype, "enabled", void 0);
    __decorate28([
      Property({})
    ], DatePicker2.prototype, "htmlAttributes", void 0);
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "values", void 0);
    __decorate28([
      Property(false)
    ], DatePicker2.prototype, "isMultiSelection", void 0);
    __decorate28([
      Property(true)
    ], DatePicker2.prototype, "showClearButton", void 0);
    __decorate28([
      Property(true)
    ], DatePicker2.prototype, "allowEdit", void 0);
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "keyConfigs", void 0);
    __decorate28([
      Property(false)
    ], DatePicker2.prototype, "enablePersistence", void 0);
    __decorate28([
      Property(1e3)
    ], DatePicker2.prototype, "zIndex", void 0);
    __decorate28([
      Property(false)
    ], DatePicker2.prototype, "readonly", void 0);
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "placeholder", void 0);
    __decorate28([
      Property("Never")
    ], DatePicker2.prototype, "floatLabelType", void 0);
    __decorate28([
      Property(null)
    ], DatePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate28([
      Property(false)
    ], DatePicker2.prototype, "openOnFocus", void 0);
    __decorate28([
      Property(false)
    ], DatePicker2.prototype, "enableMask", void 0);
    __decorate28([
      Property({ day: "day", month: "month", year: "year", hour: "hour", minute: "minute", second: "second", dayOfTheWeek: "day of the week" })
    ], DatePicker2.prototype, "maskPlaceholder", void 0);
    __decorate28([
      Event2()
    ], DatePicker2.prototype, "open", void 0);
    __decorate28([
      Event2()
    ], DatePicker2.prototype, "cleared", void 0);
    __decorate28([
      Event2()
    ], DatePicker2.prototype, "close", void 0);
    __decorate28([
      Event2()
    ], DatePicker2.prototype, "blur", void 0);
    __decorate28([
      Event2()
    ], DatePicker2.prototype, "focus", void 0);
    __decorate28([
      Event2()
    ], DatePicker2.prototype, "created", void 0);
    __decorate28([
      Event2()
    ], DatePicker2.prototype, "destroyed", void 0);
    DatePicker2 = __decorate28([
      NotifyPropertyChanges
    ], DatePicker2);
    return DatePicker2;
  }(Calendar)
);

// node_modules/@syncfusion/ej2-data/src/query.js
var Query = (
  /** @class */
  function() {
    function Query2(from) {
      this.subQuery = null;
      this.isChild = false;
      this.distincts = [];
      this.queries = [];
      this.key = "";
      this.fKey = "";
      if (typeof from === "string") {
        this.fromTable = from;
      } else if (from && from instanceof Array) {
        this.lookups = from;
      }
      this.expands = [];
      this.sortedColumns = [];
      this.groupedColumns = [];
      this.subQuery = null;
      this.isChild = false;
      this.params = [];
      this.lazyLoad = [];
      return this;
    }
    Query2.prototype.setKey = function(field) {
      this.key = field;
      return this;
    };
    Query2.prototype.using = function(dataManager) {
      this.dataManager = dataManager;
      return this;
    };
    Query2.prototype.execute = function(dataManager, done, fail, always) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeQuery(this, done, fail, always);
      }
      return DataUtil.throwError('Query - execute() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.executeLocal = function(dataManager) {
      dataManager = dataManager || this.dataManager;
      if (dataManager) {
        return dataManager.executeLocal(this);
      }
      return DataUtil.throwError('Query - executeLocal() : dataManager needs to be is set using "using" function or should be passed as argument');
    };
    Query2.prototype.clone = function() {
      var cloned = new Query2();
      cloned.queries = this.queries.slice(0);
      cloned.key = this.key;
      cloned.isChild = this.isChild;
      cloned.dataManager = this.dataManager;
      cloned.fromTable = this.fromTable;
      cloned.params = this.params.slice(0);
      cloned.expands = this.expands.slice(0);
      cloned.sortedColumns = this.sortedColumns.slice(0);
      cloned.groupedColumns = this.groupedColumns.slice(0);
      cloned.subQuerySelector = this.subQuerySelector;
      cloned.subQuery = this.subQuery;
      cloned.fKey = this.fKey;
      cloned.isCountRequired = this.isCountRequired;
      cloned.distincts = this.distincts.slice(0);
      cloned.lazyLoad = this.lazyLoad.slice(0);
      return cloned;
    };
    Query2.prototype.from = function(tableName) {
      this.fromTable = tableName;
      return this;
    };
    Query2.prototype.addParams = function(key, value) {
      if (typeof value === "function") {
        this.params.push({ key, fn: value });
      } else {
        this.params.push({ key, value });
      }
      return this;
    };
    Query2.prototype.distinct = function(fields) {
      if (typeof fields === "string") {
        this.distincts = [].slice.call([fields], 0);
      } else {
        this.distincts = fields.slice(0);
      }
      return this;
    };
    Query2.prototype.expand = function(tables) {
      if (typeof tables === "string") {
        this.expands = [].slice.call([tables], 0);
      } else {
        this.expands = tables.slice(0);
      }
      return this;
    };
    Query2.prototype.where = function(fieldName, operator, value, ignoreCase, ignoreAccent) {
      operator = operator ? operator.toLowerCase() : null;
      var predicate = null;
      if (typeof fieldName === "string") {
        predicate = new Predicate(fieldName, operator, value, ignoreCase, ignoreAccent);
      } else if (fieldName instanceof Predicate) {
        predicate = fieldName;
      }
      this.queries.push({
        fn: "onWhere",
        e: predicate
      });
      return this;
    };
    Query2.prototype.search = function(searchKey, fieldNames, operator, ignoreCase, ignoreAccent) {
      if (typeof fieldNames === "string") {
        fieldNames = [fieldNames];
      }
      if (!operator || operator === "none") {
        operator = "contains";
      }
      var comparer = DataUtil.fnOperators[operator];
      this.queries.push({
        fn: "onSearch",
        e: {
          fieldNames,
          operator,
          searchKey,
          ignoreCase,
          ignoreAccent,
          comparer
        }
      });
      return this;
    };
    Query2.prototype.sortBy = function(fieldName, comparer, isFromGroup) {
      return this.sortByForeignKey(fieldName, comparer, isFromGroup);
    };
    Query2.prototype.sortByForeignKey = function(fieldName, comparer, isFromGroup, direction) {
      var order = !isNullOrUndefined(direction) ? direction : "ascending";
      var sorts;
      var temp;
      if (typeof fieldName === "string" && DataUtil.endsWith(fieldName.toLowerCase(), " desc")) {
        fieldName = fieldName.replace(/ desc$/i, "");
        comparer = "descending";
      }
      if (!comparer || typeof comparer === "string") {
        order = comparer ? comparer.toLowerCase() : "ascending";
        comparer = DataUtil.fnSort(comparer);
      }
      if (isFromGroup) {
        sorts = Query2.filterQueries(this.queries, "onSortBy");
        for (var i = 0; i < sorts.length; i++) {
          temp = sorts[i].e.fieldName;
          if (typeof temp === "string") {
            if (temp === fieldName) {
              return this;
            }
          } else if (temp instanceof Array) {
            for (var j = 0; j < temp.length; j++) {
              if (temp[j] === fieldName || fieldName.toLowerCase() === temp[j] + " desc") {
                return this;
              }
            }
          }
        }
      }
      this.queries.push({
        fn: "onSortBy",
        e: {
          fieldName,
          comparer,
          direction: order
        }
      });
      return this;
    };
    Query2.prototype.sortByDesc = function(fieldName) {
      return this.sortBy(fieldName, "descending");
    };
    Query2.prototype.group = function(fieldName, fn, format) {
      this.sortBy(fieldName, null, true);
      this.queries.push({
        fn: "onGroup",
        e: {
          fieldName,
          comparer: fn ? fn : null,
          format: format ? format : null
        }
      });
      return this;
    };
    Query2.prototype.page = function(pageIndex, pageSize) {
      this.queries.push({
        fn: "onPage",
        e: {
          pageIndex,
          pageSize
        }
      });
      return this;
    };
    Query2.prototype.range = function(start, end) {
      this.queries.push({
        fn: "onRange",
        e: {
          start,
          end
        }
      });
      return this;
    };
    Query2.prototype.take = function(nos) {
      this.queries.push({
        fn: "onTake",
        e: {
          nos
        }
      });
      return this;
    };
    Query2.prototype.skip = function(nos) {
      this.queries.push({
        fn: "onSkip",
        e: { nos }
      });
      return this;
    };
    Query2.prototype.select = function(fieldNames) {
      if (typeof fieldNames === "string") {
        fieldNames = [].slice.call([fieldNames], 0);
      }
      this.queries.push({
        fn: "onSelect",
        e: { fieldNames }
      });
      return this;
    };
    Query2.prototype.hierarchy = function(query, selectorFn) {
      this.subQuerySelector = selectorFn;
      this.subQuery = query;
      return this;
    };
    Query2.prototype.foreignKey = function(key) {
      this.fKey = key;
      return this;
    };
    Query2.prototype.requiresCount = function() {
      this.isCountRequired = true;
      return this;
    };
    Query2.prototype.aggregate = function(type, field) {
      this.queries.push({
        fn: "onAggregates",
        e: { field, type }
      });
      return this;
    };
    Query2.filterQueries = function(queries, name) {
      return queries.filter(function(q) {
        return q.fn === name;
      });
    };
    Query2.filterQueryLists = function(queries, singles) {
      var filtered = queries.filter(function(q) {
        return singles.indexOf(q.fn) !== -1;
      });
      var res = {};
      for (var i = 0; i < filtered.length; i++) {
        if (!res[filtered[i].fn]) {
          res[filtered[i].fn] = filtered[i].e;
        }
      }
      return res;
    };
    return Query2;
  }()
);
var Predicate = (
  /** @class */
  function() {
    function Predicate2(field, operator, value, ignoreCase, ignoreAccent) {
      if (ignoreCase === void 0) {
        ignoreCase = false;
      }
      this.ignoreAccent = false;
      this.isComplex = false;
      if (typeof field === "string") {
        this.field = field;
        this.operator = operator.toLowerCase();
        this.value = value;
        this.ignoreCase = ignoreCase;
        this.ignoreAccent = ignoreAccent;
        this.isComplex = false;
        this.comparer = DataUtil.fnOperators.processOperator(this.operator);
      } else if (field instanceof Predicate2 && value instanceof Predicate2 || value instanceof Array) {
        this.isComplex = true;
        this.condition = operator.toLowerCase();
        this.predicates = [field];
        if (value instanceof Array) {
          [].push.apply(this.predicates, value);
        } else {
          this.predicates.push(value);
        }
      }
      return this;
    }
    Predicate2.and = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "and");
    };
    Predicate2.prototype.and = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "and", ignoreCase, ignoreAccent);
    };
    Predicate2.or = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return Predicate2.combinePredicates([].slice.call(args, 0), "or");
    };
    Predicate2.prototype.or = function(field, operator, value, ignoreCase, ignoreAccent) {
      return Predicate2.combine(this, field, operator, value, "or", ignoreCase, ignoreAccent);
    };
    Predicate2.fromJson = function(json) {
      if (json instanceof Array) {
        var res = [];
        for (var i = 0, len = json.length; i < len; i++) {
          res.push(this.fromJSONData(json[i]));
        }
        return res;
      }
      var pred = json;
      return this.fromJSONData(pred);
    };
    Predicate2.prototype.validate = function(record) {
      var predicate = this.predicates ? this.predicates : [];
      var isAnd;
      var ret;
      if (!this.isComplex && this.comparer) {
        return this.comparer.call(this, DataUtil.getObject(this.field, record), this.value, this.ignoreCase, this.ignoreAccent);
      }
      isAnd = this.condition === "and";
      for (var i = 0; i < predicate.length; i++) {
        ret = predicate[i].validate(record);
        if (isAnd) {
          if (!ret) {
            return false;
          }
        } else {
          if (ret) {
            return true;
          }
        }
      }
      return isAnd;
    };
    Predicate2.prototype.toJson = function() {
      var predicates;
      var p;
      if (this.isComplex) {
        predicates = [];
        p = this.predicates;
        for (var i = 0; i < p.length; i++) {
          predicates.push(p[i].toJson());
        }
      }
      return {
        isComplex: this.isComplex,
        field: this.field,
        operator: this.operator,
        value: this.value,
        ignoreCase: this.ignoreCase,
        ignoreAccent: this.ignoreAccent,
        condition: this.condition,
        predicates
      };
    };
    Predicate2.combinePredicates = function(predicates, operator) {
      if (predicates.length === 1) {
        if (!(predicates[0] instanceof Array)) {
          return predicates[0];
        }
        predicates = predicates[0];
      }
      return new Predicate2(predicates[0], operator, predicates.slice(1));
    };
    Predicate2.combine = function(pred, field, operator, value, condition, ignoreCase, ignoreAccent) {
      if (field instanceof Predicate2) {
        return Predicate2[condition](pred, field);
      }
      if (typeof field === "string") {
        return Predicate2[condition](pred, new Predicate2(field, operator, value, ignoreCase, ignoreAccent));
      }
      return DataUtil.throwError("Predicate - " + condition + " : invalid arguments");
    };
    Predicate2.fromJSONData = function(json) {
      var preds = json.predicates || [];
      var len = preds.length;
      var predicates = [];
      var result;
      for (var i = 0; i < len; i++) {
        predicates.push(this.fromJSONData(preds[i]));
      }
      if (!json.isComplex) {
        result = new Predicate2(json.field, json.operator, json.value, json.ignoreCase, json.ignoreAccent);
      } else {
        result = new Predicate2(predicates[0], json.condition, predicates.slice(1));
      }
      return result;
    };
    return Predicate2;
  }()
);

// node_modules/@syncfusion/ej2-data/src/util.js
var consts = { GroupGuid: "{271bbba0-1ee7}" };
var DataUtil = (
  /** @class */
  function() {
    function DataUtil2() {
    }
    DataUtil2.getValue = function(value, inst) {
      if (typeof value === "function") {
        return value.call(inst || {});
      }
      return value;
    };
    DataUtil2.endsWith = function(input, substr) {
      return input.slice && input.slice(-substr.length) === substr;
    };
    DataUtil2.startsWith = function(input, start) {
      return input.slice(0, start.length) === start;
    };
    DataUtil2.fnSort = function(order) {
      order = order ? DataUtil2.toLowerCase(order) : "ascending";
      if (order === "ascending") {
        return this.fnAscending;
      }
      return this.fnDescending;
    };
    DataUtil2.fnAscending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return -1;
      }
      if (y === null || y === void 0) {
        return -1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y);
      }
      if (x === null || x === void 0) {
        return 1;
      }
      return x - y;
    };
    DataUtil2.fnDescending = function(x, y) {
      if (isNullOrUndefined(x) && isNullOrUndefined(y)) {
        return -1;
      }
      if (y === null || y === void 0) {
        return 1;
      }
      if (typeof x === "string") {
        return x.localeCompare(y) * -1;
      }
      if (x === null || x === void 0) {
        return -1;
      }
      return y - x;
    };
    DataUtil2.extractFields = function(obj, fields) {
      var newObj = {};
      for (var i = 0; i < fields.length; i++) {
        newObj = this.setValue(fields[i], this.getObject(fields[i], obj), newObj);
      }
      return newObj;
    };
    DataUtil2.select = function(jsonArray, fields) {
      var newData = [];
      for (var i = 0; i < jsonArray.length; i++) {
        newData.push(this.extractFields(jsonArray[i], fields));
      }
      return newData;
    };
    DataUtil2.group = function(jsonArray, field, aggregates, level, groupDs, format, isLazyLoad) {
      level = level || 1;
      var jsonData = jsonArray;
      var guid = "GroupGuid";
      if (jsonData.GroupGuid === consts[guid]) {
        var _loop_1 = function(j2) {
          if (!isNullOrUndefined(groupDs)) {
            var indx = -1;
            var temp = groupDs.filter(function(e) {
              return e.key === jsonData[j2].key;
            });
            indx = groupDs.indexOf(temp[0]);
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, groupDs[indx].items, format, isLazyLoad);
            jsonData[j2].count = groupDs[indx].count;
          } else {
            jsonData[j2].items = this_1.group(jsonData[j2].items, field, aggregates, jsonData.level + 1, null, format, isLazyLoad);
            jsonData[j2].count = jsonData[j2].items.length;
          }
        };
        var this_1 = this;
        for (var j = 0; j < jsonData.length; j++) {
          _loop_1(j);
        }
        jsonData.childLevels += 1;
        return jsonData;
      }
      var grouped = {};
      var groupedArray = [];
      groupedArray.GroupGuid = consts[guid];
      groupedArray.level = level;
      groupedArray.childLevels = 0;
      groupedArray.records = jsonData;
      var _loop_2 = function(i2) {
        var val = this_2.getVal(jsonData, i2, field);
        if (!isNullOrUndefined(format)) {
          val = format(val, field);
        }
        if (!grouped[val]) {
          grouped[val] = {
            key: val,
            count: 0,
            items: [],
            aggregates: {},
            field
          };
          groupedArray.push(grouped[val]);
          if (!isNullOrUndefined(groupDs)) {
            var tempObj = groupDs.filter(function(e) {
              return e.key === grouped[val].key;
            });
            grouped[val].count = tempObj[0].count;
          }
        }
        grouped[val].count = !isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;
        if (!isLazyLoad || isLazyLoad && aggregates.length) {
          grouped[val].items.push(jsonData[i2]);
        }
      };
      var this_2 = this;
      for (var i = 0; i < jsonData.length; i++) {
        _loop_2(i);
      }
      if (aggregates && aggregates.length) {
        var _loop_3 = function(i2) {
          var res = {};
          var fn = void 0;
          var aggs = aggregates;
          for (var j2 = 0; j2 < aggregates.length; j2++) {
            fn = DataUtil2.aggregates[aggregates[j2].type];
            if (!isNullOrUndefined(groupDs)) {
              var temp = groupDs.filter(function(e) {
                return e.key === groupedArray[i2].key;
              });
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(temp[0].items, aggs[j2].field);
              }
            } else {
              if (fn) {
                res[aggs[j2].field + " - " + aggs[j2].type] = fn(groupedArray[i2].items, aggs[j2].field);
              }
            }
          }
          groupedArray[i2].aggregates = res;
        };
        for (var i = 0; i < groupedArray.length; i++) {
          _loop_3(i);
        }
      }
      if (isLazyLoad && groupedArray.length && aggregates.length) {
        for (var i = 0; i < groupedArray.length; i++) {
          groupedArray[i].items = [];
        }
      }
      return jsonData.length && groupedArray || jsonData;
    };
    DataUtil2.buildHierarchy = function(fKey, from, source, lookup, pKey) {
      var i;
      var grp = {};
      var temp;
      if (lookup.result) {
        lookup = lookup.result;
      }
      if (lookup.GroupGuid) {
        this.throwError("DataManager: Do not have support Grouping in hierarchy");
      }
      for (i = 0; i < lookup.length; i++) {
        var fKeyData = this.getObject(fKey, lookup[i]);
        temp = grp[fKeyData] || (grp[fKeyData] = []);
        temp.push(lookup[i]);
      }
      for (i = 0; i < source.length; i++) {
        var fKeyData = this.getObject(pKey || fKey, source[i]);
        source[i][from] = grp[fKeyData];
      }
    };
    DataUtil2.getFieldList = function(obj, fields, prefix) {
      if (prefix === void 0) {
        prefix = "";
      }
      if (fields === void 0 || fields === null) {
        return this.getFieldList(obj, [], prefix);
      }
      var copyObj = obj;
      var keys2 = Object.keys(obj);
      for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
        var prop = keys_1[_i];
        if (typeof copyObj[prop] === "object" && !(copyObj[prop] instanceof Array)) {
          this.getFieldList(copyObj[prop], fields, prefix + prop + ".");
        } else {
          fields.push(prefix + prop);
        }
      }
      return fields;
    };
    DataUtil2.getObject = function(nameSpace, from) {
      if (!nameSpace) {
        return from;
      }
      if (!from) {
        return void 0;
      }
      if (nameSpace.indexOf(".") === -1) {
        return from[nameSpace];
      }
      var value = from;
      var splits = nameSpace.split(".");
      for (var i = 0; i < splits.length; i++) {
        if (value == null) {
          break;
        }
        value = value[splits[i]];
      }
      return value;
    };
    DataUtil2.setValue = function(nameSpace, value, obj) {
      var keys2 = nameSpace.toString().split(".");
      var start = obj || {};
      var fromObj = start;
      var i;
      var length = keys2.length;
      var key;
      for (i = 0; i < length; i++) {
        key = keys2[i];
        if (i + 1 === length) {
          fromObj[key] = value === void 0 ? void 0 : value;
        } else if (isNullOrUndefined(fromObj[key])) {
          fromObj[key] = {};
        }
        fromObj = fromObj[key];
      }
      return start;
    };
    DataUtil2.sort = function(ds, field, comparer) {
      if (ds.length <= 1) {
        return ds;
      }
      var middle = parseInt((ds.length / 2).toString(), 10);
      var left = ds.slice(0, middle);
      var right = ds.slice(middle);
      left = this.sort(left, field, comparer);
      right = this.sort(right, field, comparer);
      return this.merge(left, right, field, comparer);
    };
    DataUtil2.ignoreDiacritics = function(value) {
      if (typeof value !== "string") {
        return value;
      }
      var result = value.split("");
      var newValue = result.map(function(temp) {
        return temp in DataUtil2.diacritics ? DataUtil2.diacritics[temp] : temp;
      });
      return newValue.join("");
    };
    DataUtil2.merge = function(left, right, fieldName, comparer) {
      var result = [];
      var current;
      while (left.length > 0 || right.length > 0) {
        if (left.length > 0 && right.length > 0) {
          if (comparer) {
            current = comparer(this.getVal(left, 0, fieldName), this.getVal(right, 0, fieldName), left[0], right[0]) <= 0 ? left : right;
          } else {
            current = left[0][fieldName] < left[0][fieldName] ? left : right;
          }
        } else {
          current = left.length > 0 ? left : right;
        }
        result.push(current.shift());
      }
      return result;
    };
    DataUtil2.getVal = function(array, index, field) {
      return field ? this.getObject(field, array[index]) : array[index];
    };
    DataUtil2.toLowerCase = function(val) {
      return val ? typeof val === "string" ? val.toLowerCase() : val.toString() : val === 0 || val === false ? val.toString() : "";
    };
    DataUtil2.callAdaptorFunction = function(adaptor, fnName, param1, param2) {
      if (fnName in adaptor) {
        var res = adaptor[fnName](param1, param2);
        if (!isNullOrUndefined(res)) {
          param1 = res;
        }
      }
      return param1;
    };
    DataUtil2.getAddParams = function(adp, dm, query) {
      var req = {};
      DataUtil2.callAdaptorFunction(adp, "addParams", {
        dm,
        query,
        params: query.params,
        reqParams: req
      });
      return req;
    };
    DataUtil2.isPlainObject = function(obj) {
      return !!obj && obj.constructor === Object;
    };
    DataUtil2.isCors = function() {
      var xhr = null;
      var request = "XMLHttpRequest";
      try {
        xhr = new window[request]();
      } catch (e) {
      }
      return !!xhr && "withCredentials" in xhr;
    };
    DataUtil2.getGuid = function(prefix) {
      var hexs = "0123456789abcdef";
      var rand;
      return (prefix || "") + "00000000-0000-4000-0000-000000000000".replace(/0/g, function(val, i) {
        if ("crypto" in window && "getRandomValues" in crypto) {
          var arr = new Uint8Array(1);
          window.crypto.getRandomValues(arr);
          rand = arr[0] % 16 | 0;
        } else {
          rand = Math.random() * 16 | 0;
        }
        return hexs[i === 19 ? rand & 3 | 8 : rand];
      });
    };
    DataUtil2.isNull = function(val) {
      return val === void 0 || val === null;
    };
    DataUtil2.getItemFromComparer = function(array, field, comparer) {
      var keyVal;
      var current;
      var key;
      var i = 0;
      var castRequired = typeof DataUtil2.getVal(array, 0, field) === "string";
      if (array.length) {
        while (isNullOrUndefined(keyVal) && i < array.length) {
          keyVal = DataUtil2.getVal(array, i, field);
          key = array[i++];
        }
      }
      for (; i < array.length; i++) {
        current = DataUtil2.getVal(array, i, field);
        if (isNullOrUndefined(current)) {
          continue;
        }
        if (castRequired) {
          keyVal = +keyVal;
          current = +current;
        }
        if (comparer(keyVal, current) > 0) {
          keyVal = current;
          key = array[i];
        }
      }
      return key;
    };
    DataUtil2.distinct = function(json, fieldName, requiresCompleteRecord) {
      requiresCompleteRecord = isNullOrUndefined(requiresCompleteRecord) ? false : requiresCompleteRecord;
      var result = [];
      var val;
      var tmp = {};
      json.forEach(function(data, index) {
        val = typeof json[index] === "object" ? DataUtil2.getVal(json, index, fieldName) : json[index];
        if (!(val in tmp)) {
          result.push(!requiresCompleteRecord ? val : json[index]);
          tmp[val] = 1;
        }
      });
      return result;
    };
    DataUtil2.processData = function(dm, records) {
      var query = this.prepareQuery(dm);
      var sampledata = new DataManager(records);
      if (dm.requiresCounts) {
        query.requiresCount();
      }
      var result = sampledata.executeLocal(query);
      var returnValue = {
        result: dm.requiresCounts ? result.result : result,
        count: result.count,
        aggregates: JSON.stringify(result.aggregates)
      };
      return dm.requiresCounts ? returnValue : result;
    };
    DataUtil2.prepareQuery = function(dm) {
      var _this = this;
      var query = new Query();
      if (dm.select) {
        query.select(dm.select);
      }
      if (dm.where) {
        var where = DataUtil2.parse.parseJson(dm.where);
        where.filter(function(pred) {
          if (isNullOrUndefined(pred.condition)) {
            query.where(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent);
          } else {
            var predicateList = [];
            if (pred.field) {
              predicateList.push(new Predicate(pred.field, pred.operator, pred.value, pred.ignoreCase, pred.ignoreAccent));
            } else {
              predicateList = predicateList.concat(_this.getPredicate(pred.predicates));
            }
            if (pred.condition == "or") {
              query.where(Predicate.or(predicateList));
            } else if (pred.condition == "and") {
              query.where(Predicate.and(predicateList));
            }
          }
        });
      }
      if (dm.search) {
        var search = DataUtil2.parse.parseJson(dm.search);
        search.filter(function(e) {
          return query.search(e.key, e.fields, e["operator"], e["ignoreCase"], e["ignoreAccent"]);
        });
      }
      if (dm.aggregates) {
        dm.aggregates.filter(function(e) {
          return query.aggregate(e.type, e.field);
        });
      }
      if (dm.sorted) {
        dm.sorted.filter(function(e) {
          return query.sortBy(e.name, e.direction);
        });
      }
      if (dm.skip) {
        query.skip(dm.skip);
      }
      if (dm.take) {
        query.take(dm.take);
      }
      if (dm.group) {
        dm.group.filter(function(grp) {
          return query.group(grp);
        });
      }
      return query;
    };
    DataUtil2.getPredicate = function(pred) {
      var mainPred = [];
      for (var i = 0; i < pred.length; i++) {
        var e = pred[i];
        if (e.field) {
          mainPred.push(new Predicate(e.field, e.operator, e.value, e.ignoreCase, e.ignoreAccent));
        } else {
          var childPred = [];
          var cpre = this.getPredicate(e.predicates);
          for (var _i = 0, _a = Object.keys(cpre); _i < _a.length; _i++) {
            var prop = _a[_i];
            childPred.push(cpre[prop]);
          }
          mainPred.push(e.condition == "or" ? Predicate.or(childPred) : Predicate.and(childPred));
        }
      }
      return mainPred;
    };
    DataUtil2.serverTimezoneOffset = null;
    DataUtil2.timeZoneHandling = true;
    DataUtil2.throwError = function(error) {
      try {
        throw new Error(error);
      } catch (e) {
        throw e.message + "\n" + e.stack;
      }
    };
    DataUtil2.aggregates = {
      /**
       * Calculate sum of the given field in the data.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      sum: function(ds, field) {
        var result = 0;
        var val;
        var castRequired = typeof DataUtil2.getVal(ds, 0, field) !== "number";
        for (var i = 0; i < ds.length; i++) {
          val = DataUtil2.getVal(ds, i, field);
          if (!isNaN(val) && val !== null) {
            if (castRequired) {
              val = +val;
            }
            result += val;
          }
        }
        return result;
      },
      /**
       * Calculate average value of the given field in the data.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      average: function(ds, field) {
        return DataUtil2.aggregates.sum(ds, field) / ds.length;
      },
      /**
       * Returns the min value of the data based on the field.
       * @param  {Object[]} ds
       * @param  {string|Function} field
       */
      min: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnAscending));
      },
      /**
       * Returns the max value of the data based on the field.
       * @param  {Object[]} ds
       * @param  {string} field
       * @returns number
       */
      max: function(ds, field) {
        var comparer;
        if (typeof field === "function") {
          comparer = field;
          field = null;
        }
        return DataUtil2.getObject(field, DataUtil2.getItemFromComparer(ds, field, comparer || DataUtil2.fnDescending));
      },
      /**
       * Returns the total number of true value present in the data based on the given boolean field name.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      truecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", true, true)).length;
      },
      /**
       * Returns the total number of false value present in the data based on the given boolean field name.
       * @param  {Object[]} ds
       * @param  {string} field
       */
      falsecount: function(ds, field) {
        return new DataManager(ds).executeLocal(new Query().where(field, "equal", false, true)).length;
      },
      /**
       * Returns the length of the given data.
       * @param  {Object[]} ds
       * @param  {string} field?
       * @returns number
       */
      count: function(ds, field) {
        return ds.length;
      }
    };
    DataUtil2.operatorSymbols = {
      "<": "lessthan",
      ">": "greaterthan",
      "<=": "lessthanorequal",
      ">=": "greaterthanorequal",
      "==": "equal",
      "!=": "notequal",
      "*=": "contains",
      "$=": "endswith",
      "^=": "startswith"
    };
    DataUtil2.odBiOperator = {
      "<": " lt ",
      ">": " gt ",
      "<=": " le ",
      ">=": " ge ",
      "==": " eq ",
      "!=": " ne ",
      "lessthan": " lt ",
      "lessthanorequal": " le ",
      "greaterthan": " gt ",
      "greaterthanorequal": " ge ",
      "equal": " eq ",
      "notequal": " ne "
    };
    DataUtil2.odUniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "substringof",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "substringof"
    };
    DataUtil2.odv4UniOperator = {
      "$=": "endswith",
      "^=": "startswith",
      "*=": "contains",
      "endswith": "endswith",
      "startswith": "startswith",
      "contains": "contains"
    };
    DataUtil2.diacritics = {
      "Ⓐ": "A",
      "Ａ": "A",
      "À": "A",
      "Á": "A",
      "Â": "A",
      "Ầ": "A",
      "Ấ": "A",
      "Ẫ": "A",
      "Ẩ": "A",
      "Ã": "A",
      "Ā": "A",
      "Ă": "A",
      "Ằ": "A",
      "Ắ": "A",
      "Ẵ": "A",
      "Ẳ": "A",
      "Ȧ": "A",
      "Ǡ": "A",
      "Ä": "A",
      "Ǟ": "A",
      "Ả": "A",
      "Å": "A",
      "Ǻ": "A",
      "Ǎ": "A",
      "Ȁ": "A",
      "Ȃ": "A",
      "Ạ": "A",
      "Ậ": "A",
      "Ặ": "A",
      "Ḁ": "A",
      "Ą": "A",
      "Ⱥ": "A",
      "Ɐ": "A",
      "Ꜳ": "AA",
      "Æ": "AE",
      "Ǽ": "AE",
      "Ǣ": "AE",
      "Ꜵ": "AO",
      "Ꜷ": "AU",
      "Ꜹ": "AV",
      "Ꜻ": "AV",
      "Ꜽ": "AY",
      "Ⓑ": "B",
      "Ｂ": "B",
      "Ḃ": "B",
      "Ḅ": "B",
      "Ḇ": "B",
      "Ƀ": "B",
      "Ƃ": "B",
      "Ɓ": "B",
      "Ⓒ": "C",
      "Ｃ": "C",
      "Ć": "C",
      "Ĉ": "C",
      "Ċ": "C",
      "Č": "C",
      "Ç": "C",
      "Ḉ": "C",
      "Ƈ": "C",
      "Ȼ": "C",
      "Ꜿ": "C",
      "Ⓓ": "D",
      "Ｄ": "D",
      "Ḋ": "D",
      "Ď": "D",
      "Ḍ": "D",
      "Ḑ": "D",
      "Ḓ": "D",
      "Ḏ": "D",
      "Đ": "D",
      "Ƌ": "D",
      "Ɗ": "D",
      "Ɖ": "D",
      "Ꝺ": "D",
      "Ǳ": "DZ",
      "Ǆ": "DZ",
      "ǲ": "Dz",
      "ǅ": "Dz",
      "Ⓔ": "E",
      "Ｅ": "E",
      "È": "E",
      "É": "E",
      "Ê": "E",
      "Ề": "E",
      "Ế": "E",
      "Ễ": "E",
      "Ể": "E",
      "Ẽ": "E",
      "Ē": "E",
      "Ḕ": "E",
      "Ḗ": "E",
      "Ĕ": "E",
      "Ė": "E",
      "Ë": "E",
      "Ẻ": "E",
      "Ě": "E",
      "Ȅ": "E",
      "Ȇ": "E",
      "Ẹ": "E",
      "Ệ": "E",
      "Ȩ": "E",
      "Ḝ": "E",
      "Ę": "E",
      "Ḙ": "E",
      "Ḛ": "E",
      "Ɛ": "E",
      "Ǝ": "E",
      "Ⓕ": "F",
      "Ｆ": "F",
      "Ḟ": "F",
      "Ƒ": "F",
      "Ꝼ": "F",
      "Ⓖ": "G",
      "Ｇ": "G",
      "Ǵ": "G",
      "Ĝ": "G",
      "Ḡ": "G",
      "Ğ": "G",
      "Ġ": "G",
      "Ǧ": "G",
      "Ģ": "G",
      "Ǥ": "G",
      "Ɠ": "G",
      "Ꞡ": "G",
      "Ᵹ": "G",
      "Ꝿ": "G",
      "Ⓗ": "H",
      "Ｈ": "H",
      "Ĥ": "H",
      "Ḣ": "H",
      "Ḧ": "H",
      "Ȟ": "H",
      "Ḥ": "H",
      "Ḩ": "H",
      "Ḫ": "H",
      "Ħ": "H",
      "Ⱨ": "H",
      "Ⱶ": "H",
      "Ɥ": "H",
      "Ⓘ": "I",
      "Ｉ": "I",
      "Ì": "I",
      "Í": "I",
      "Î": "I",
      "Ĩ": "I",
      "Ī": "I",
      "Ĭ": "I",
      "İ": "I",
      "Ï": "I",
      "Ḯ": "I",
      "Ỉ": "I",
      "Ǐ": "I",
      "Ȉ": "I",
      "Ȋ": "I",
      "Ị": "I",
      "Į": "I",
      "Ḭ": "I",
      "Ɨ": "I",
      "Ⓙ": "J",
      "Ｊ": "J",
      "Ĵ": "J",
      "Ɉ": "J",
      "Ⓚ": "K",
      "Ｋ": "K",
      "Ḱ": "K",
      "Ǩ": "K",
      "Ḳ": "K",
      "Ķ": "K",
      "Ḵ": "K",
      "Ƙ": "K",
      "Ⱪ": "K",
      "Ꝁ": "K",
      "Ꝃ": "K",
      "Ꝅ": "K",
      "Ꞣ": "K",
      "Ⓛ": "L",
      "Ｌ": "L",
      "Ŀ": "L",
      "Ĺ": "L",
      "Ľ": "L",
      "Ḷ": "L",
      "Ḹ": "L",
      "Ļ": "L",
      "Ḽ": "L",
      "Ḻ": "L",
      "Ł": "L",
      "Ƚ": "L",
      "Ɫ": "L",
      "Ⱡ": "L",
      "Ꝉ": "L",
      "Ꝇ": "L",
      "Ꞁ": "L",
      "Ǉ": "LJ",
      "ǈ": "Lj",
      "Ⓜ": "M",
      "Ｍ": "M",
      "Ḿ": "M",
      "Ṁ": "M",
      "Ṃ": "M",
      "Ɱ": "M",
      "Ɯ": "M",
      "Ⓝ": "N",
      "Ｎ": "N",
      "Ǹ": "N",
      "Ń": "N",
      "Ñ": "N",
      "Ṅ": "N",
      "Ň": "N",
      "Ṇ": "N",
      "Ņ": "N",
      "Ṋ": "N",
      "Ṉ": "N",
      "Ƞ": "N",
      "Ɲ": "N",
      "Ꞑ": "N",
      "Ꞥ": "N",
      "Ǌ": "NJ",
      "ǋ": "Nj",
      "Ⓞ": "O",
      "Ｏ": "O",
      "Ò": "O",
      "Ó": "O",
      "Ô": "O",
      "Ồ": "O",
      "Ố": "O",
      "Ỗ": "O",
      "Ổ": "O",
      "Õ": "O",
      "Ṍ": "O",
      "Ȭ": "O",
      "Ṏ": "O",
      "Ō": "O",
      "Ṑ": "O",
      "Ṓ": "O",
      "Ŏ": "O",
      "Ȯ": "O",
      "Ȱ": "O",
      "Ö": "O",
      "Ȫ": "O",
      "Ỏ": "O",
      "Ő": "O",
      "Ǒ": "O",
      "Ȍ": "O",
      "Ȏ": "O",
      "Ơ": "O",
      "Ờ": "O",
      "Ớ": "O",
      "Ỡ": "O",
      "Ở": "O",
      "Ợ": "O",
      "Ọ": "O",
      "Ộ": "O",
      "Ǫ": "O",
      "Ǭ": "O",
      "Ø": "O",
      "Ǿ": "O",
      "Ɔ": "O",
      "Ɵ": "O",
      "Ꝋ": "O",
      "Ꝍ": "O",
      "Ƣ": "OI",
      "Ꝏ": "OO",
      "Ȣ": "OU",
      "Ⓟ": "P",
      "Ｐ": "P",
      "Ṕ": "P",
      "Ṗ": "P",
      "Ƥ": "P",
      "Ᵽ": "P",
      "Ꝑ": "P",
      "Ꝓ": "P",
      "Ꝕ": "P",
      "Ⓠ": "Q",
      "Ｑ": "Q",
      "Ꝗ": "Q",
      "Ꝙ": "Q",
      "Ɋ": "Q",
      "Ⓡ": "R",
      "Ｒ": "R",
      "Ŕ": "R",
      "Ṙ": "R",
      "Ř": "R",
      "Ȑ": "R",
      "Ȓ": "R",
      "Ṛ": "R",
      "Ṝ": "R",
      "Ŗ": "R",
      "Ṟ": "R",
      "Ɍ": "R",
      "Ɽ": "R",
      "Ꝛ": "R",
      "Ꞧ": "R",
      "Ꞃ": "R",
      "Ⓢ": "S",
      "Ｓ": "S",
      "ẞ": "S",
      "Ś": "S",
      "Ṥ": "S",
      "Ŝ": "S",
      "Ṡ": "S",
      "Š": "S",
      "Ṧ": "S",
      "Ṣ": "S",
      "Ṩ": "S",
      "Ș": "S",
      "Ş": "S",
      "Ȿ": "S",
      "Ꞩ": "S",
      "Ꞅ": "S",
      "Ⓣ": "T",
      "Ｔ": "T",
      "Ṫ": "T",
      "Ť": "T",
      "Ṭ": "T",
      "Ț": "T",
      "Ţ": "T",
      "Ṱ": "T",
      "Ṯ": "T",
      "Ŧ": "T",
      "Ƭ": "T",
      "Ʈ": "T",
      "Ⱦ": "T",
      "Ꞇ": "T",
      "Ꜩ": "TZ",
      "Ⓤ": "U",
      "Ｕ": "U",
      "Ù": "U",
      "Ú": "U",
      "Û": "U",
      "Ũ": "U",
      "Ṹ": "U",
      "Ū": "U",
      "Ṻ": "U",
      "Ŭ": "U",
      "Ü": "U",
      "Ǜ": "U",
      "Ǘ": "U",
      "Ǖ": "U",
      "Ǚ": "U",
      "Ủ": "U",
      "Ů": "U",
      "Ű": "U",
      "Ǔ": "U",
      "Ȕ": "U",
      "Ȗ": "U",
      "Ư": "U",
      "Ừ": "U",
      "Ứ": "U",
      "Ữ": "U",
      "Ử": "U",
      "Ự": "U",
      "Ụ": "U",
      "Ṳ": "U",
      "Ų": "U",
      "Ṷ": "U",
      "Ṵ": "U",
      "Ʉ": "U",
      "Ⓥ": "V",
      "Ｖ": "V",
      "Ṽ": "V",
      "Ṿ": "V",
      "Ʋ": "V",
      "Ꝟ": "V",
      "Ʌ": "V",
      "Ꝡ": "VY",
      "Ⓦ": "W",
      "Ｗ": "W",
      "Ẁ": "W",
      "Ẃ": "W",
      "Ŵ": "W",
      "Ẇ": "W",
      "Ẅ": "W",
      "Ẉ": "W",
      "Ⱳ": "W",
      "Ⓧ": "X",
      "Ｘ": "X",
      "Ẋ": "X",
      "Ẍ": "X",
      "Ⓨ": "Y",
      "Ｙ": "Y",
      "Ỳ": "Y",
      "Ý": "Y",
      "Ŷ": "Y",
      "Ỹ": "Y",
      "Ȳ": "Y",
      "Ẏ": "Y",
      "Ÿ": "Y",
      "Ỷ": "Y",
      "Ỵ": "Y",
      "Ƴ": "Y",
      "Ɏ": "Y",
      "Ỿ": "Y",
      "Ⓩ": "Z",
      "Ｚ": "Z",
      "Ź": "Z",
      "Ẑ": "Z",
      "Ż": "Z",
      "Ž": "Z",
      "Ẓ": "Z",
      "Ẕ": "Z",
      "Ƶ": "Z",
      "Ȥ": "Z",
      "Ɀ": "Z",
      "Ⱬ": "Z",
      "Ꝣ": "Z",
      "ⓐ": "a",
      "ａ": "a",
      "ẚ": "a",
      "à": "a",
      "á": "a",
      "â": "a",
      "ầ": "a",
      "ấ": "a",
      "ẫ": "a",
      "ẩ": "a",
      "ã": "a",
      "ā": "a",
      "ă": "a",
      "ằ": "a",
      "ắ": "a",
      "ẵ": "a",
      "ẳ": "a",
      "ȧ": "a",
      "ǡ": "a",
      "ä": "a",
      "ǟ": "a",
      "ả": "a",
      "å": "a",
      "ǻ": "a",
      "ǎ": "a",
      "ȁ": "a",
      "ȃ": "a",
      "ạ": "a",
      "ậ": "a",
      "ặ": "a",
      "ḁ": "a",
      "ą": "a",
      "ⱥ": "a",
      "ɐ": "a",
      "ꜳ": "aa",
      "æ": "ae",
      "ǽ": "ae",
      "ǣ": "ae",
      "ꜵ": "ao",
      "ꜷ": "au",
      "ꜹ": "av",
      "ꜻ": "av",
      "ꜽ": "ay",
      "ⓑ": "b",
      "ｂ": "b",
      "ḃ": "b",
      "ḅ": "b",
      "ḇ": "b",
      "ƀ": "b",
      "ƃ": "b",
      "ɓ": "b",
      "ⓒ": "c",
      "ｃ": "c",
      "ć": "c",
      "ĉ": "c",
      "ċ": "c",
      "č": "c",
      "ç": "c",
      "ḉ": "c",
      "ƈ": "c",
      "ȼ": "c",
      "ꜿ": "c",
      "ↄ": "c",
      "ⓓ": "d",
      "ｄ": "d",
      "ḋ": "d",
      "ď": "d",
      "ḍ": "d",
      "ḑ": "d",
      "ḓ": "d",
      "ḏ": "d",
      "đ": "d",
      "ƌ": "d",
      "ɖ": "d",
      "ɗ": "d",
      "ꝺ": "d",
      "ǳ": "dz",
      "ǆ": "dz",
      "ⓔ": "e",
      "ｅ": "e",
      "è": "e",
      "é": "e",
      "ê": "e",
      "ề": "e",
      "ế": "e",
      "ễ": "e",
      "ể": "e",
      "ẽ": "e",
      "ē": "e",
      "ḕ": "e",
      "ḗ": "e",
      "ĕ": "e",
      "ė": "e",
      "ë": "e",
      "ẻ": "e",
      "ě": "e",
      "ȅ": "e",
      "ȇ": "e",
      "ẹ": "e",
      "ệ": "e",
      "ȩ": "e",
      "ḝ": "e",
      "ę": "e",
      "ḙ": "e",
      "ḛ": "e",
      "ɇ": "e",
      "ɛ": "e",
      "ǝ": "e",
      "ⓕ": "f",
      "ｆ": "f",
      "ḟ": "f",
      "ƒ": "f",
      "ꝼ": "f",
      "ⓖ": "g",
      "ｇ": "g",
      "ǵ": "g",
      "ĝ": "g",
      "ḡ": "g",
      "ğ": "g",
      "ġ": "g",
      "ǧ": "g",
      "ģ": "g",
      "ǥ": "g",
      "ɠ": "g",
      "ꞡ": "g",
      "ᵹ": "g",
      "ꝿ": "g",
      "ⓗ": "h",
      "ｈ": "h",
      "ĥ": "h",
      "ḣ": "h",
      "ḧ": "h",
      "ȟ": "h",
      "ḥ": "h",
      "ḩ": "h",
      "ḫ": "h",
      "ẖ": "h",
      "ħ": "h",
      "ⱨ": "h",
      "ⱶ": "h",
      "ɥ": "h",
      "ƕ": "hv",
      "ⓘ": "i",
      "ｉ": "i",
      "ì": "i",
      "í": "i",
      "î": "i",
      "ĩ": "i",
      "ī": "i",
      "ĭ": "i",
      "ï": "i",
      "ḯ": "i",
      "ỉ": "i",
      "ǐ": "i",
      "ȉ": "i",
      "ȋ": "i",
      "ị": "i",
      "į": "i",
      "ḭ": "i",
      "ɨ": "i",
      "ı": "i",
      "ⓙ": "j",
      "ｊ": "j",
      "ĵ": "j",
      "ǰ": "j",
      "ɉ": "j",
      "ⓚ": "k",
      "ｋ": "k",
      "ḱ": "k",
      "ǩ": "k",
      "ḳ": "k",
      "ķ": "k",
      "ḵ": "k",
      "ƙ": "k",
      "ⱪ": "k",
      "ꝁ": "k",
      "ꝃ": "k",
      "ꝅ": "k",
      "ꞣ": "k",
      "ⓛ": "l",
      "ｌ": "l",
      "ŀ": "l",
      "ĺ": "l",
      "ľ": "l",
      "ḷ": "l",
      "ḹ": "l",
      "ļ": "l",
      "ḽ": "l",
      "ḻ": "l",
      "ſ": "l",
      "ł": "l",
      "ƚ": "l",
      "ɫ": "l",
      "ⱡ": "l",
      "ꝉ": "l",
      "ꞁ": "l",
      "ꝇ": "l",
      "ǉ": "lj",
      "ⓜ": "m",
      "ｍ": "m",
      "ḿ": "m",
      "ṁ": "m",
      "ṃ": "m",
      "ɱ": "m",
      "ɯ": "m",
      "ⓝ": "n",
      "ｎ": "n",
      "ǹ": "n",
      "ń": "n",
      "ñ": "n",
      "ṅ": "n",
      "ň": "n",
      "ṇ": "n",
      "ņ": "n",
      "ṋ": "n",
      "ṉ": "n",
      "ƞ": "n",
      "ɲ": "n",
      "ŉ": "n",
      "ꞑ": "n",
      "ꞥ": "n",
      "ǌ": "nj",
      "ⓞ": "o",
      "ｏ": "o",
      "ò": "o",
      "ó": "o",
      "ô": "o",
      "ồ": "o",
      "ố": "o",
      "ỗ": "o",
      "ổ": "o",
      "õ": "o",
      "ṍ": "o",
      "ȭ": "o",
      "ṏ": "o",
      "ō": "o",
      "ṑ": "o",
      "ṓ": "o",
      "ŏ": "o",
      "ȯ": "o",
      "ȱ": "o",
      "ö": "o",
      "ȫ": "o",
      "ỏ": "o",
      "ő": "o",
      "ǒ": "o",
      "ȍ": "o",
      "ȏ": "o",
      "ơ": "o",
      "ờ": "o",
      "ớ": "o",
      "ỡ": "o",
      "ở": "o",
      "ợ": "o",
      "ọ": "o",
      "ộ": "o",
      "ǫ": "o",
      "ǭ": "o",
      "ø": "o",
      "ǿ": "o",
      "ɔ": "o",
      "ꝋ": "o",
      "ꝍ": "o",
      "ɵ": "o",
      "ƣ": "oi",
      "ȣ": "ou",
      "ꝏ": "oo",
      "ⓟ": "p",
      "ｐ": "p",
      "ṕ": "p",
      "ṗ": "p",
      "ƥ": "p",
      "ᵽ": "p",
      "ꝑ": "p",
      "ꝓ": "p",
      "ꝕ": "p",
      "ⓠ": "q",
      "ｑ": "q",
      "ɋ": "q",
      "ꝗ": "q",
      "ꝙ": "q",
      "ⓡ": "r",
      "ｒ": "r",
      "ŕ": "r",
      "ṙ": "r",
      "ř": "r",
      "ȑ": "r",
      "ȓ": "r",
      "ṛ": "r",
      "ṝ": "r",
      "ŗ": "r",
      "ṟ": "r",
      "ɍ": "r",
      "ɽ": "r",
      "ꝛ": "r",
      "ꞧ": "r",
      "ꞃ": "r",
      "ⓢ": "s",
      "ｓ": "s",
      "ß": "s",
      "ś": "s",
      "ṥ": "s",
      "ŝ": "s",
      "ṡ": "s",
      "š": "s",
      "ṧ": "s",
      "ṣ": "s",
      "ṩ": "s",
      "ș": "s",
      "ş": "s",
      "ȿ": "s",
      "ꞩ": "s",
      "ꞅ": "s",
      "ẛ": "s",
      "ⓣ": "t",
      "ｔ": "t",
      "ṫ": "t",
      "ẗ": "t",
      "ť": "t",
      "ṭ": "t",
      "ț": "t",
      "ţ": "t",
      "ṱ": "t",
      "ṯ": "t",
      "ŧ": "t",
      "ƭ": "t",
      "ʈ": "t",
      "ⱦ": "t",
      "ꞇ": "t",
      "ꜩ": "tz",
      "ⓤ": "u",
      "ｕ": "u",
      "ù": "u",
      "ú": "u",
      "û": "u",
      "ũ": "u",
      "ṹ": "u",
      "ū": "u",
      "ṻ": "u",
      "ŭ": "u",
      "ü": "u",
      "ǜ": "u",
      "ǘ": "u",
      "ǖ": "u",
      "ǚ": "u",
      "ủ": "u",
      "ů": "u",
      "ű": "u",
      "ǔ": "u",
      "ȕ": "u",
      "ȗ": "u",
      "ư": "u",
      "ừ": "u",
      "ứ": "u",
      "ữ": "u",
      "ử": "u",
      "ự": "u",
      "ụ": "u",
      "ṳ": "u",
      "ų": "u",
      "ṷ": "u",
      "ṵ": "u",
      "ʉ": "u",
      "ⓥ": "v",
      "ｖ": "v",
      "ṽ": "v",
      "ṿ": "v",
      "ʋ": "v",
      "ꝟ": "v",
      "ʌ": "v",
      "ꝡ": "vy",
      "ⓦ": "w",
      "ｗ": "w",
      "ẁ": "w",
      "ẃ": "w",
      "ŵ": "w",
      "ẇ": "w",
      "ẅ": "w",
      "ẘ": "w",
      "ẉ": "w",
      "ⱳ": "w",
      "ⓧ": "x",
      "ｘ": "x",
      "ẋ": "x",
      "ẍ": "x",
      "ⓨ": "y",
      "ｙ": "y",
      "ỳ": "y",
      "ý": "y",
      "ŷ": "y",
      "ỹ": "y",
      "ȳ": "y",
      "ẏ": "y",
      "ÿ": "y",
      "ỷ": "y",
      "ẙ": "y",
      "ỵ": "y",
      "ƴ": "y",
      "ɏ": "y",
      "ỿ": "y",
      "ⓩ": "z",
      "ｚ": "z",
      "ź": "z",
      "ẑ": "z",
      "ż": "z",
      "ž": "z",
      "ẓ": "z",
      "ẕ": "z",
      "ƶ": "z",
      "ȥ": "z",
      "ɀ": "z",
      "ⱬ": "z",
      "ꝣ": "z",
      "Ά": "Α",
      "Έ": "Ε",
      "Ή": "Η",
      "Ί": "Ι",
      "Ϊ": "Ι",
      "Ό": "Ο",
      "Ύ": "Υ",
      "Ϋ": "Υ",
      "Ώ": "Ω",
      "ά": "α",
      "έ": "ε",
      "ή": "η",
      "ί": "ι",
      "ϊ": "ι",
      "ΐ": "ι",
      "ό": "ο",
      "ύ": "υ",
      "ϋ": "υ",
      "ΰ": "υ",
      "ω": "ω",
      "ς": "σ"
    };
    DataUtil2.fnOperators = {
      /**
       * Returns true when the actual input is equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       * @param  {boolean} ignoreAccent?
       */
      equal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) === DataUtil2.toLowerCase(expected);
        }
        return actual === expected;
      },
      /**
       * Returns true when the actual input is not equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      notequal: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        return !DataUtil2.fnOperators.equal(actual, expected, ignoreCase);
      },
      /**
       * Returns true when the actual input is less than to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      lessthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) < DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual < expected;
      },
      /**
       * Returns true when the actual input is greater than to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      greaterthan: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) > DataUtil2.toLowerCase(expected);
        }
        return actual > expected;
      },
      /**
       * Returns true when the actual input is less than or equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      lessthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) <= DataUtil2.toLowerCase(expected);
        }
        if (isNullOrUndefined(actual)) {
          actual = void 0;
        }
        return actual <= expected;
      },
      /**
       * Returns true when the actual input is greater than or equal to the given input.
       * @param  {string|number|boolean} actual
       * @param  {string|number|boolean} expected
       * @param  {boolean} ignoreCase?
       */
      greaterthanorequal: function(actual, expected, ignoreCase) {
        if (ignoreCase) {
          return DataUtil2.toLowerCase(actual) >= DataUtil2.toLowerCase(expected);
        }
        return actual >= expected;
      },
      /**
       * Returns true when the actual input contains the given string.
       * @param  {string|number} actual
       * @param  {string|number} expected
       * @param  {boolean} ignoreCase?
       */
      contains: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && DataUtil2.toLowerCase(actual).indexOf(DataUtil2.toLowerCase(expected)) !== -1;
        }
        return !isNullOrUndefined(actual) && !isNullOrUndefined(expected) && actual.toString().indexOf(expected) !== -1;
      },
      /**
       * Returns true when the given input value is not null.
       * @param  {string|number} actual
       * @returns boolean
       */
      notnull: function(actual) {
        return actual !== null;
      },
      /**
       * Returns true when the given input value is null.
       * @param  {string|number} actual
       * @returns boolean
       */
      isnull: function(actual) {
        return actual === null;
      },
      /**
       * Returns true when the actual input starts with the given string
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      startswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.startsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.startsWith(actual, expected);
      },
      /**
       * Returns true when the actual input ends with the given string.
       * @param  {string} actual
       * @param  {string} expected
       * @param  {boolean} ignoreCase?
       */
      endswith: function(actual, expected, ignoreCase, ignoreAccent) {
        if (ignoreAccent) {
          actual = DataUtil2.ignoreDiacritics(actual);
          expected = DataUtil2.ignoreDiacritics(expected);
        }
        if (ignoreCase) {
          return actual && expected && DataUtil2.endsWith(DataUtil2.toLowerCase(actual), DataUtil2.toLowerCase(expected));
        }
        return actual && expected && DataUtil2.endsWith(actual, expected);
      },
      /**
       * It will return the filter operator based on the filter symbol.
       * @param  {string} operator
       * @hidden
       */
      processSymbols: function(operator) {
        var fnName = DataUtil2.operatorSymbols[operator];
        if (fnName) {
          var fn = DataUtil2.fnOperators[fnName];
          return fn;
        }
        return DataUtil2.throwError("Query - Process Operator : Invalid operator");
      },
      /**
       * It will return the valid filter operator based on the specified operators.
       * @param  {string} operator
       * @hidden
       */
      processOperator: function(operator) {
        var fn = DataUtil2.fnOperators[operator];
        if (fn) {
          return fn;
        }
        return DataUtil2.fnOperators.processSymbols(operator);
      }
    };
    DataUtil2.parse = {
      /**
       * Parse the given string to the plain JavaScript object.
       * @param  {string|Object|Object[]} jsonText
       */
      parseJson: function(jsonText) {
        if (typeof jsonText === "string") {
          jsonText = JSON.parse(jsonText, DataUtil2.parse.jsonReviver);
        } else if (jsonText instanceof Array) {
          DataUtil2.parse.iterateAndReviveArray(jsonText);
        } else if (typeof jsonText === "object" && jsonText !== null) {
          DataUtil2.parse.iterateAndReviveJson(jsonText);
        }
        return jsonText;
      },
      /**
       * It will perform on array of values.
       * @param  {string[]|Object[]} array
       * @hidden
       */
      iterateAndReviveArray: function(array) {
        for (var i = 0; i < array.length; i++) {
          if (typeof array[i] === "object" && array[i] !== null) {
            DataUtil2.parse.iterateAndReviveJson(array[i]);
          } else if (typeof array[i] === "string" && !/^[\s]*\[|^[\s]*\{(.)+:|\"/g.test(array[i])) {
            array[i] = DataUtil2.parse.jsonReviver("", array[i]);
          } else {
            array[i] = DataUtil2.parse.parseJson(array[i]);
          }
        }
      },
      /**
       * It will perform on JSON values
       * @param  {JSON} json
       * @hidden
       */
      iterateAndReviveJson: function(json) {
        var value;
        var keys2 = Object.keys(json);
        for (var _i = 0, keys_2 = keys2; _i < keys_2.length; _i++) {
          var prop = keys_2[_i];
          if (DataUtil2.startsWith(prop, "__")) {
            continue;
          }
          value = json[prop];
          if (typeof value === "object") {
            if (value instanceof Array) {
              DataUtil2.parse.iterateAndReviveArray(value);
            } else if (value) {
              DataUtil2.parse.iterateAndReviveJson(value);
            }
          } else {
            json[prop] = DataUtil2.parse.jsonReviver(json[prop], value);
          }
        }
      },
      /**
       * It will perform on JSON values
       * @param  {string} field
       * @param  {string|Date} value
       * @hidden
       */
      jsonReviver: function(field, value) {
        if (typeof value === "string") {
          var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
          var offSet = DataUtil2.timeZoneHandling ? DataUtil2.serverTimezoneOffset : null;
          if (ms) {
            return DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), offSet, true);
          } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
            var isUTC = value.indexOf("Z") > -1 || value.indexOf("z") > -1;
            var arr = value.split(/[^0-9.]/);
            if (isUTC) {
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), DataUtil2.serverTimezoneOffset, false);
            } else {
              var utcFormat = new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10));
              var hrs = parseInt(arr[6], 10);
              var mins = parseInt(arr[7], 10);
              if (isNaN(hrs) && isNaN(mins)) {
                return utcFormat;
              }
              if (value.indexOf("+") > -1) {
                utcFormat.setHours(utcFormat.getHours() - hrs, utcFormat.getMinutes() - mins);
              } else {
                utcFormat.setHours(utcFormat.getHours() + hrs, utcFormat.getMinutes() + mins);
              }
              value = DataUtil2.dateParse.toTimeZone(utcFormat, DataUtil2.serverTimezoneOffset, false);
            }
            if (DataUtil2.serverTimezoneOffset == null) {
              value = DataUtil2.dateParse.addSelfOffset(value);
            }
          }
        }
        return value;
      },
      /**
       * Check wheather the given value is JSON or not.
       * @param  {Object[]} jsonData
       */
      isJson: function(jsonData) {
        if (typeof jsonData[0] === "string") {
          return jsonData;
        }
        return DataUtil2.parse.parseJson(jsonData);
      },
      /**
       * Checks wheather the given value is GUID or not.
       * @param  {string} value
       */
      isGuid: function(value) {
        var regex2 = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
        var match = regex2.exec(value);
        return match != null;
      },
      /**
       * The method used to replace the value based on the type.
       * @param  {Object} value
       * @param  {boolean} stringify
       * @hidden
       */
      replacer: function(value, stringify) {
        if (DataUtil2.isPlainObject(value)) {
          return DataUtil2.parse.jsonReplacer(value, stringify);
        }
        if (value instanceof Array) {
          return DataUtil2.parse.arrayReplacer(value);
        }
        if (value instanceof Date) {
          return DataUtil2.parse.jsonReplacer({ val: value }, stringify).val;
        }
        return value;
      },
      /**
       * It will replace the JSON value.
       * @param  {string} key
       * @param  {Object} val
       * @hidden
       */
      jsonReplacer: function(val, stringify) {
        var value;
        var keys2 = Object.keys(val);
        for (var _i = 0, keys_3 = keys2; _i < keys_3.length; _i++) {
          var prop = keys_3[_i];
          value = val[prop];
          if (!(value instanceof Date)) {
            continue;
          }
          var d = value;
          if (DataUtil2.serverTimezoneOffset == null) {
            val[prop] = DataUtil2.dateParse.toTimeZone(d, null).toJSON();
          } else {
            d = new Date(+d + DataUtil2.serverTimezoneOffset * 36e5);
            val[prop] = DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(d), null).toJSON();
          }
        }
        return val;
      },
      /**
       * It will replace the Array of value.
       * @param  {string} key
       * @param  {Object[]} val
       * @hidden
       */
      arrayReplacer: function(val) {
        for (var i = 0; i < val.length; i++) {
          if (DataUtil2.isPlainObject(val[i])) {
            val[i] = DataUtil2.parse.jsonReplacer(val[i]);
          } else if (val[i] instanceof Date) {
            val[i] = DataUtil2.parse.jsonReplacer({ date: val[i] }).date;
          }
        }
        return val;
      },
      /**
       * It will replace the Date object with respective to UTC format value.
       * @param  {string} key
       * @param  {any} value
       * @hidden
       */
      /* tslint:disable-next-line:no-any */
      jsonDateReplacer: function(key, value) {
        if (key === "value" && value) {
          if (typeof value === "string") {
            var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
            if (ms) {
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(ms[1], 10)), null, true);
            } else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
              var arr = value.split(/[^0-9]/);
              value = DataUtil2.dateParse.toTimeZone(new Date(parseInt(arr[0], 10), parseInt(arr[1], 10) - 1, parseInt(arr[2], 10), parseInt(arr[3], 10), parseInt(arr[4], 10), parseInt(arr[5], 10)), null, true);
            }
          }
          if (value instanceof Date) {
            value = DataUtil2.dateParse.addSelfOffset(value);
            if (DataUtil2.serverTimezoneOffset === null) {
              return DataUtil2.dateParse.toTimeZone(DataUtil2.dateParse.addSelfOffset(value), null).toJSON();
            } else {
              value = DataUtil2.dateParse.toTimeZone(value, value.getTimezoneOffset() / 60 * 2 - DataUtil2.serverTimezoneOffset, false);
              return value.toJSON();
            }
          }
        }
        return value;
      }
    };
    DataUtil2.dateParse = {
      addSelfOffset: function(input) {
        return new Date(+input - input.getTimezoneOffset() * 6e4);
      },
      toUTC: function(input) {
        return new Date(+input + input.getTimezoneOffset() * 6e4);
      },
      toTimeZone: function(input, offset, utc) {
        if (offset === null) {
          return input;
        }
        var unix = utc ? DataUtil2.dateParse.toUTC(input) : input;
        return new Date(+unix - offset * 36e5);
      },
      toLocalTime: function(input) {
        var datefn = input;
        var timeZone = -datefn.getTimezoneOffset();
        var differenceString = timeZone >= 0 ? "+" : "-";
        var localtimefn = function(num) {
          var norm = Math.floor(Math.abs(num));
          return (norm < 10 ? "0" : "") + norm;
        };
        var val = datefn.getFullYear() + "-" + localtimefn(datefn.getMonth() + 1) + "-" + localtimefn(datefn.getDate()) + "T" + localtimefn(datefn.getHours()) + ":" + localtimefn(datefn.getMinutes()) + ":" + localtimefn(datefn.getSeconds()) + differenceString + localtimefn(timeZone / 60) + ":" + localtimefn(timeZone % 60);
        return val;
      }
    };
    return DataUtil2;
  }()
);

// node_modules/@syncfusion/ej2-data/src/adaptors.js
var __extends30 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var consts2 = { GroupGuid: "{271bbba0-1ee7}" };
var Adaptor = (
  /** @class */
  function() {
    function Adaptor2(ds) {
      this.options = {
        from: "table",
        requestType: "json",
        sortBy: "sorted",
        select: "select",
        skip: "skip",
        group: "group",
        take: "take",
        search: "search",
        count: "requiresCounts",
        where: "where",
        aggregates: "aggregates",
        expand: "expand"
      };
      this.type = Adaptor2;
      this.dataSource = ds;
      this.pvt = {};
    }
    Adaptor2.prototype.processResponse = function(data, ds, query, xhr) {
      return data;
    };
    return Adaptor2;
  }()
);
var JsonAdaptor = (
  /** @class */
  function(_super) {
    __extends30(JsonAdaptor2, _super);
    function JsonAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    JsonAdaptor2.prototype.processQuery = function(dataManager, query) {
      var result = dataManager.dataSource.json.slice(0);
      var count = result.length;
      var countFlg = true;
      var ret;
      var key;
      var lazyLoad = {};
      var keyCount = 0;
      var group = [];
      var page;
      for (var i = 0; i < query.lazyLoad.length; i++) {
        keyCount++;
        lazyLoad[query.lazyLoad[i].key] = query.lazyLoad[i].value;
      }
      var agg = {};
      for (var i = 0; i < query.queries.length; i++) {
        key = query.queries[i];
        if ((key.fn === "onPage" || key.fn === "onGroup") && query.lazyLoad.length) {
          if (key.fn === "onGroup") {
            group.push(key.e);
          }
          if (key.fn === "onPage") {
            page = key.e;
          }
          continue;
        }
        ret = this[key.fn].call(this, result, key.e, query);
        if (key.fn === "onAggregates") {
          agg[key.e.field + " - " + key.e.type] = ret;
        } else {
          result = ret !== void 0 ? ret : result;
        }
        if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") {
          countFlg = false;
        }
        if (countFlg) {
          count = result.length;
        }
      }
      if (keyCount) {
        var args = {
          query,
          lazyLoad,
          result,
          group,
          page
        };
        var lazyLoadData = this.lazyLoadGroup(args);
        result = lazyLoadData.result;
        count = lazyLoadData.count;
      }
      if (query.isCountRequired) {
        result = {
          result,
          count,
          aggregates: agg
        };
      }
      return result;
    };
    JsonAdaptor2.prototype.lazyLoadGroup = function(args) {
      var count = 0;
      var agg = this.getAggregate(args.query);
      var result = args.result;
      if (!isNullOrUndefined(args.lazyLoad.onDemandGroupInfo)) {
        var req = args.lazyLoad.onDemandGroupInfo;
        for (var i = req.where.length - 1; i >= 0; i--) {
          result = this.onWhere(result, req.where[i]);
        }
        if (args.group.length !== req.level) {
          var field = args.group[req.level].fieldName;
          result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);
        }
        count = result.length;
        var data = result;
        result = result.slice(req.skip);
        result = result.slice(0, req.take);
        if (args.group.length !== req.level) {
          this.formGroupResult(result, data);
        }
      } else {
        var field = args.group[0].fieldName;
        result = DataUtil.group(result, field, agg, null, null, args.group[0].comparer, true);
        count = result.length;
        var data = result;
        if (args.page) {
          result = this.onPage(result, args.page, args.query);
        }
        this.formGroupResult(result, data);
      }
      return { result, count };
    };
    JsonAdaptor2.prototype.formGroupResult = function(result, data) {
      if (result.length && data.length) {
        var uid2 = "GroupGuid";
        var childLevel = "childLevels";
        var level = "level";
        var records = "records";
        result[uid2] = data[uid2];
        result[childLevel] = data[childLevel];
        result[level] = data[level];
        result[records] = data[records];
      }
      return result;
    };
    JsonAdaptor2.prototype.getAggregate = function(query) {
      var aggQuery = Query.filterQueries(query.queries, "onAggregates");
      var agg = [];
      if (aggQuery.length) {
        var tmp = void 0;
        for (var i = 0; i < aggQuery.length; i++) {
          tmp = aggQuery[i].e;
          agg.push({ type: tmp.type, field: DataUtil.getValue(tmp.field, query) });
        }
      }
      return agg;
    };
    JsonAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var i;
      var deletedRecordsLen = changes.deletedRecords.length;
      for (i = 0; i < changes.addedRecords.length; i++) {
        this.insert(dm, changes.addedRecords[i]);
      }
      for (i = 0; i < changes.changedRecords.length; i++) {
        this.update(dm, e.key, changes.changedRecords[i]);
      }
      for (i = 0; i < deletedRecordsLen; i++) {
        this.remove(dm, e.key, changes.deletedRecords[i]);
      }
      return changes;
    };
    JsonAdaptor2.prototype.onWhere = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.filter(function(obj) {
        if (e) {
          return e.validate(obj);
        }
      });
    };
    JsonAdaptor2.prototype.onAggregates = function(ds, e) {
      var fn = DataUtil.aggregates[e.type];
      if (!ds || !fn || ds.length === 0) {
        return null;
      }
      return fn(ds, e.field);
    };
    JsonAdaptor2.prototype.onSearch = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      if (e.fieldNames.length === 0) {
        DataUtil.getFieldList(ds[0], e.fieldNames);
      }
      return ds.filter(function(obj) {
        for (var j = 0; j < e.fieldNames.length; j++) {
          if (e.comparer.call(obj, DataUtil.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase, e.ignoreAccent)) {
            return true;
          }
        }
        return false;
      });
    };
    JsonAdaptor2.prototype.onSortBy = function(ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }
      var fnCompare;
      var field = DataUtil.getValue(e.fieldName, query);
      if (!field) {
        return ds.sort(e.comparer);
      }
      if (field instanceof Array) {
        field = field.slice(0);
        for (var i = field.length - 1; i >= 0; i--) {
          if (!field[i]) {
            continue;
          }
          fnCompare = e.comparer;
          if (DataUtil.endsWith(field[i], " desc")) {
            fnCompare = DataUtil.fnSort("descending");
            field[i] = field[i].replace(" desc", "");
          }
          ds = DataUtil.sort(ds, field[i], fnCompare);
        }
        return ds;
      }
      return DataUtil.sort(ds, field, e.comparer);
    };
    JsonAdaptor2.prototype.onGroup = function(ds, e, query) {
      if (!ds || !ds.length) {
        return ds;
      }
      var agg = this.getAggregate(query);
      return DataUtil.group(ds, DataUtil.getValue(e.fieldName, query), agg, null, null, e.comparer);
    };
    JsonAdaptor2.prototype.onPage = function(ds, e, query) {
      var size = DataUtil.getValue(e.pageSize, query);
      var start = (DataUtil.getValue(e.pageIndex, query) - 1) * size;
      var end = start + size;
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(start, end);
    };
    JsonAdaptor2.prototype.onRange = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.start), DataUtil.getValue(e.end));
    };
    JsonAdaptor2.prototype.onTake = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(0, DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSkip = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return ds.slice(DataUtil.getValue(e.nos));
    };
    JsonAdaptor2.prototype.onSelect = function(ds, e) {
      if (!ds || !ds.length) {
        return ds;
      }
      return DataUtil.select(ds, DataUtil.getValue(e.fieldNames));
    };
    JsonAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      if (isNullOrUndefined(position)) {
        return dm.dataSource.json.push(data);
      } else {
        return dm.dataSource.json.splice(position, 0, data);
      }
    };
    JsonAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      if (typeof value === "object" && !(value instanceof Date)) {
        value = DataUtil.getObject(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (DataUtil.getObject(keyField, ds[i]) === value) {
          break;
        }
      }
      return i !== ds.length ? ds.splice(i, 1) : null;
    };
    JsonAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      var ds = dm.dataSource.json;
      var i;
      var key;
      if (!isNullOrUndefined(keyField)) {
        key = getValue(keyField, value);
      }
      for (i = 0; i < ds.length; i++) {
        if (!isNullOrUndefined(keyField) && getValue(keyField, ds[i]) === key) {
          break;
        }
      }
      return i < ds.length ? merge(ds[i], value) : null;
    };
    return JsonAdaptor2;
  }(Adaptor)
);
var UrlAdaptor = (
  /** @class */
  function(_super) {
    __extends30(UrlAdaptor2, _super);
    function UrlAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    UrlAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var params = query.params;
      var url = dm.dataSource.url;
      var temp;
      var skip;
      var take = null;
      var options = this.options;
      var request = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };
      if ("onPage" in singles) {
        temp = singles.onPage;
        skip = DataUtil.getValue(temp.pageIndex, query);
        take = DataUtil.getValue(temp.pageSize, query);
        skip = (skip - 1) * take;
      } else if ("onRange" in singles) {
        temp = singles.onRange;
        skip = temp.start;
        take = temp.end - temp.start;
      }
      for (var i = 0; i < queries.sorts.length; i++) {
        temp = DataUtil.getValue(queries.sorts[i].e.fieldName, query);
        request.sorts.push(DataUtil.callAdaptorFunction(this, "onEachSort", { name: temp, direction: queries.sorts[i].e.direction }, query));
      }
      if (hierarchyFilters) {
        temp = this.getFiltersFrom(hierarchyFilters, query);
        if (temp) {
          request.filters.push(DataUtil.callAdaptorFunction(this, "onEachWhere", temp.toJson(), query));
        }
      }
      for (var i = 0; i < queries.filters.length; i++) {
        var res = DataUtil.callAdaptorFunction(this, "onEachWhere", queries.filters[i].e.toJson(), query);
        if (this.getModuleName && this.getModuleName() === "ODataV4Adaptor" && !isNullOrUndefined(queries.filters[i].e.key) && queries.filters.length > 1) {
          res = "(" + res + ")";
        }
        request.filters.push(res);
        var keys_3 = typeof request.filters[i] === "object" ? Object.keys(request.filters[i]) : [];
        for (var _i = 0, keys_1 = keys_3; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          if (DataUtil.isNull(request[prop])) {
            delete request[prop];
          }
        }
      }
      for (var i = 0; i < queries.searches.length; i++) {
        temp = queries.searches[i].e;
        request.searches.push(DataUtil.callAdaptorFunction(this, "onEachSearch", {
          fields: temp.fieldNames,
          operator: temp.operator,
          key: temp.searchKey,
          ignoreCase: temp.ignoreCase
        }, query));
      }
      for (var i = 0; i < queries.groups.length; i++) {
        request.groups.push(DataUtil.getValue(queries.groups[i].e.fieldName, query));
      }
      for (var i = 0; i < queries.aggregates.length; i++) {
        temp = queries.aggregates[i].e;
        request.aggregates.push({ type: temp.type, field: DataUtil.getValue(temp.field, query) });
      }
      var req = {};
      this.getRequestQuery(options, query, singles, request, req);
      DataUtil.callAdaptorFunction(this, "addParams", { dm, query, params, reqParams: req });
      if (query.lazyLoad.length) {
        for (var i = 0; i < query.lazyLoad.length; i++) {
          req[query.lazyLoad[i].key] = query.lazyLoad[i].value;
        }
      }
      var keys2 = Object.keys(req);
      for (var _a = 0, keys_2 = keys2; _a < keys_2.length; _a++) {
        var prop = keys_2[_a];
        if (DataUtil.isNull(req[prop]) || req[prop] === "" || req[prop].length === 0) {
          delete req[prop];
        }
      }
      if (!(options.skip in req && options.take in req) && take !== null) {
        req[options.skip] = DataUtil.callAdaptorFunction(this, "onSkip", skip, query);
        req[options.take] = DataUtil.callAdaptorFunction(this, "onTake", take, query);
      }
      var p = this.pvt;
      this.pvt = {};
      if (this.options.requestType === "json") {
        return {
          data: JSON.stringify(req, DataUtil.parse.jsonDateReplacer),
          url,
          pvtData: p,
          type: "POST",
          contentType: "application/json; charset=utf-8"
        };
      }
      temp = this.convertToQueryString(req, query, dm);
      temp = (dm.dataSource.url.indexOf("?") !== -1 ? "&" : "/") + temp;
      return {
        type: "GET",
        url: temp.length ? url.replace(/\/*$/, temp) : url,
        pvtData: p
      };
    };
    UrlAdaptor2.prototype.getRequestQuery = function(options, query, singles, request, request1) {
      var param = "param";
      var req = request1;
      req[options.from] = query.fromTable;
      if (options.apply && query.distincts.length) {
        req[options.apply] = "onDistinct" in this ? DataUtil.callAdaptorFunction(this, "onDistinct", query.distincts) : "";
      }
      if (!query.distincts.length && options.expand) {
        req[options.expand] = "onExpand" in this && "onSelect" in singles ? DataUtil.callAdaptorFunction(this, "onExpand", { selects: DataUtil.getValue(singles.onSelect.fieldNames, query), expands: query.expands }, query) : query.expands;
      }
      req[options.select] = "onSelect" in singles && !query.distincts.length ? DataUtil.callAdaptorFunction(this, "onSelect", DataUtil.getValue(singles.onSelect.fieldNames, query), query) : "";
      req[options.count] = query.isCountRequired ? DataUtil.callAdaptorFunction(this, "onCount", query.isCountRequired, query) : "";
      req[options.search] = request.searches.length ? DataUtil.callAdaptorFunction(this, "onSearch", request.searches, query) : "";
      req[options.skip] = "onSkip" in singles ? DataUtil.callAdaptorFunction(this, "onSkip", DataUtil.getValue(singles.onSkip.nos, query), query) : "";
      req[options.take] = "onTake" in singles ? DataUtil.callAdaptorFunction(this, "onTake", DataUtil.getValue(singles.onTake.nos, query), query) : "";
      req[options.where] = request.filters.length || request.searches.length ? DataUtil.callAdaptorFunction(this, "onWhere", request.filters, query) : "";
      req[options.sortBy] = request.sorts.length ? DataUtil.callAdaptorFunction(this, "onSortBy", request.sorts, query) : "";
      req[options.group] = request.groups.length ? DataUtil.callAdaptorFunction(this, "onGroup", request.groups, query) : "";
      req[options.aggregates] = request.aggregates.length ? DataUtil.callAdaptorFunction(this, "onAggregates", request.aggregates, query) : "";
      req[param] = [];
    };
    UrlAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      return "";
    };
    UrlAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("application/json") !== -1) {
        var handleTimeZone = DataUtil.timeZoneHandling;
        if (ds && !ds.timeZoneHandling) {
          DataUtil.timeZoneHandling = false;
        }
        data = DataUtil.parse.parseJson(data);
        DataUtil.timeZoneHandling = handleTimeZone;
      }
      var requests = request;
      var pvt = requests.pvtData || {};
      var groupDs = data ? data.groupDs : [];
      if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? { result: [], count: 0 } : [];
      }
      var d = JSON.parse(requests.data);
      if (d && d.action === "batch" && data && data.addedRecords) {
        changes.addedRecords = data.addedRecords;
        return changes;
      }
      if (data && data.d) {
        data = data.d;
      }
      var args = {};
      if (data && "count" in data) {
        args.count = data.count;
      }
      args.result = data && data.result ? data.result : data;
      var isExpand = false;
      if (Array.isArray(data.result) && data.result.length) {
        var key = "key";
        var val = "value";
        var level = "level";
        if (!isNullOrUndefined(data.result[0][key])) {
          args.result = this.formRemoteGroupedData(args.result, 1, pvt.groups.length - 1);
        }
        if (query && query.lazyLoad.length && pvt.groups.length) {
          for (var i = 0; i < query.lazyLoad.length; i++) {
            if (query.lazyLoad[i][key] === "onDemandGroupInfo") {
              var value = query.lazyLoad[i][val][level];
              if (pvt.groups.length === value) {
                isExpand = true;
              }
            }
          }
        }
      }
      if (!isExpand) {
        this.getAggregateResult(pvt, data, args, groupDs, query);
      }
      return DataUtil.isNull(args.count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    UrlAdaptor2.prototype.formRemoteGroupedData = function(data, level, childLevel) {
      for (var i = 0; i < data.length; i++) {
        if (data[i].items.length && Object.keys(data[i].items[0]).indexOf("key") > -1) {
          this.formRemoteGroupedData(data[i].items, level + 1, childLevel - 1);
        }
      }
      var uid2 = "GroupGuid";
      var childLvl = "childLevels";
      var lvl = "level";
      var records = "records";
      data[uid2] = consts2[uid2];
      data[lvl] = level;
      data[childLvl] = childLevel;
      data[records] = data[0].items.length ? this.getGroupedRecords(data, !isNullOrUndefined(data[0].items[records])) : [];
      return data;
    };
    UrlAdaptor2.prototype.getGroupedRecords = function(data, hasRecords) {
      var childGroupedRecords = [];
      var records = "records";
      for (var i = 0; i < data.length; i++) {
        if (!hasRecords) {
          for (var j = 0; j < data[i].items.length; j++) {
            childGroupedRecords.push(data[i].items[j]);
          }
        } else {
          childGroupedRecords = childGroupedRecords.concat(data[i].items[records]);
        }
      }
      return childGroupedRecords;
    };
    UrlAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return e;
    };
    UrlAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
    };
    UrlAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var url;
      var key;
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e[url],
          key: e[key]
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.beforeSend = function(dm, request) {
    };
    UrlAdaptor2.prototype.insert = function(dm, data, tableName, query) {
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.remove = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: value,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.update = function(dm, keyField, value, tableName, query) {
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value,
          action: "update",
          keyColumn: keyField,
          key: DataUtil.getObject(keyField, value),
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    UrlAdaptor2.prototype.getFiltersFrom = function(data, query) {
      var key = query.fKey;
      var value;
      var prop = key;
      var pKey = query.key;
      var predicats = [];
      if (typeof data[0] !== "object") {
        prop = null;
      }
      for (var i = 0; i < data.length; i++) {
        if (typeof data[0] === "object") {
          value = DataUtil.getObject(pKey || prop, data[i]);
        } else {
          value = data[i];
        }
        predicats.push(new Predicate(key, "equal", value));
      }
      return Predicate.or(predicats);
    };
    UrlAdaptor2.prototype.getAggregateResult = function(pvt, data, args, groupDs, query) {
      var pData = data;
      if (data && data.result) {
        pData = data.result;
      }
      if (pvt && pvt.aggregates && pvt.aggregates.length) {
        var agg = pvt.aggregates;
        var fn = void 0;
        var aggregateData = pData;
        var res = {};
        if (data.aggregate) {
          aggregateData = data.aggregate;
        }
        for (var i = 0; i < agg.length; i++) {
          fn = DataUtil.aggregates[agg[i].type];
          if (fn) {
            res[agg[i].field + " - " + agg[i].type] = fn(aggregateData, agg[i].field);
          }
        }
        args.aggregates = res;
      }
      var key = "key";
      var isServerGrouping = Array.isArray(data.result) && data.result.length && !isNullOrUndefined(data.result[0][key]);
      if (pvt && pvt.groups && pvt.groups.length && !isServerGrouping) {
        var groups = pvt.groups;
        for (var i = 0; i < groups.length; i++) {
          var level = null;
          if (!isNullOrUndefined(groupDs)) {
            groupDs = DataUtil.group(groupDs, groups[i]);
          }
          var groupQuery = Query.filterQueries(query.queries, "onGroup")[i].e;
          pData = DataUtil.group(pData, groups[i], pvt.aggregates, level, groupDs, groupQuery.comparer);
        }
        args.result = pData;
      }
      return args;
    };
    UrlAdaptor2.prototype.getQueryRequest = function(query) {
      var req = { sorts: [], groups: [], filters: [], searches: [], aggregates: [] };
      req.sorts = Query.filterQueries(query.queries, "onSortBy");
      req.groups = Query.filterQueries(query.queries, "onGroup");
      req.filters = Query.filterQueries(query.queries, "onWhere");
      req.searches = Query.filterQueries(query.queries, "onSearch");
      req.aggregates = Query.filterQueries(query.queries, "onAggregates");
      return req;
    };
    UrlAdaptor2.prototype.addParams = function(options) {
      var req = options.reqParams;
      if (options.params.length) {
        req.params = {};
      }
      for (var _i = 0, _a = options.params; _i < _a.length; _i++) {
        var tmp = _a[_i];
        if (req[tmp.key]) {
          throw new Error("Query() - addParams: Custom Param is conflicting other request arguments");
        }
        req[tmp.key] = tmp.value;
        if (tmp.fn) {
          req[tmp.key] = tmp.fn.call(options.query, tmp.key, options.query, options.dm);
        }
        req.params[tmp.key] = req[tmp.key];
      }
    };
    return UrlAdaptor2;
  }(Adaptor)
);
var ODataAdaptor = (
  /** @class */
  function(_super) {
    __extends30(ODataAdaptor2, _super);
    function ODataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$inlinecount",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PUT"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataAdaptor2.prototype.getModuleName = function() {
      return "ODataAdaptor";
    };
    ODataAdaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var operator;
      var guid;
      var val = predicate.value;
      var type = typeof val;
      var field = predicate.field ? ODataAdaptor2.getField(predicate.field) : null;
      if (val instanceof Date) {
        val = "datetime'" + DataUtil.parse.replacer(val) + "'";
      }
      if (type === "string") {
        val = val.replace("'", "''");
        if (predicate.ignoreCase) {
          val = val.toLowerCase();
        }
        val = encodeURIComponent(val);
        val = "'" + val + "'";
        if (requiresCast) {
          field = "cast(" + field + ", 'Edm.String')";
        }
        if (DataUtil.parse.isGuid(val)) {
          guid = "guid";
        }
        if (predicate.ignoreCase) {
          if (!guid) {
            field = "tolower(" + field + ")";
          }
          val = val.toLowerCase();
        }
      }
      operator = DataUtil.odBiOperator[predicate.operator];
      if (operator) {
        returnValue += field;
        returnValue += operator;
        if (guid) {
          returnValue += guid;
        }
        return returnValue + val;
      }
      if (!isNullOrUndefined(this.getModuleName) && this.getModuleName() === "ODataV4Adaptor") {
        operator = DataUtil.odv4UniOperator[predicate.operator];
      } else {
        operator = DataUtil.odUniOperator[predicate.operator];
      }
      if (operator === "substringof") {
        var temp = val;
        val = field;
        field = temp;
      }
      returnValue += operator + "(";
      returnValue += field + ",";
      if (guid) {
        returnValue += guid;
      }
      returnValue += val + ")";
      return returnValue;
    };
    ODataAdaptor2.prototype.addParams = function(options) {
      _super.prototype.addParams.call(this, options);
      delete options.reqParams.params;
    };
    ODataAdaptor2.prototype.onComplexPredicate = function(predicate, query, requiresCast) {
      var res = [];
      for (var i = 0; i < predicate.predicates.length; i++) {
        res.push("(" + this.onEachWhere(predicate.predicates[i], query, requiresCast) + ")");
      }
      return res.join(" " + predicate.condition + " ");
    };
    ODataAdaptor2.prototype.onEachWhere = function(filter, query, requiresCast) {
      return filter.isComplex ? this.onComplexPredicate(filter, query, requiresCast) : this.onPredicate(filter, query, requiresCast);
    };
    ODataAdaptor2.prototype.onWhere = function(filters) {
      if (this.pvt.search) {
        filters.push(this.onEachWhere(this.pvt.search, null, true));
      }
      return filters.join(" and ");
    };
    ODataAdaptor2.prototype.onEachSearch = function(e) {
      if (e.fields && e.fields.length === 0) {
        DataUtil.throwError("Query() - Search : oData search requires list of field names to search");
      }
      var filter = this.pvt.search || [];
      for (var i = 0; i < e.fields.length; i++) {
        filter.push(new Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
      }
      this.pvt.search = filter;
    };
    ODataAdaptor2.prototype.onSearch = function(e) {
      this.pvt.search = Predicate.or(this.pvt.search);
      return "";
    };
    ODataAdaptor2.prototype.onEachSort = function(e) {
      var res = [];
      if (e.name instanceof Array) {
        for (var i = 0; i < e.name.length; i++) {
          res.push(ODataAdaptor2.getField(e.name[i]) + (e.direction === "descending" ? " desc" : ""));
        }
      } else {
        res.push(ODataAdaptor2.getField(e.name) + (e.direction === "descending" ? " desc" : ""));
      }
      return res.join(",");
    };
    ODataAdaptor2.prototype.onSortBy = function(e) {
      return e.reverse().join(",");
    };
    ODataAdaptor2.prototype.onGroup = function(e) {
      this.pvt.groups = e;
      return [];
    };
    ODataAdaptor2.prototype.onSelect = function(e) {
      for (var i = 0; i < e.length; i++) {
        e[i] = ODataAdaptor2.getField(e[i]);
      }
      return e.join(",");
    };
    ODataAdaptor2.prototype.onAggregates = function(e) {
      this.pvt.aggregates = e;
      return "";
    };
    ODataAdaptor2.prototype.onCount = function(e) {
      return e === true ? "allpages" : "";
    };
    ODataAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (DataUtil.endsWith(settings.url, this.options.batch) && settings.type.toLowerCase() === "post") {
        request.setRequestHeader("Accept", this.options.multipartAccept);
        request.setRequestHeader("DataServiceVersion", "2.0");
        request.overrideMimeType("text/plain; charset=x-user-defined");
      } else {
        request.setRequestHeader("Accept", this.options.accept);
      }
      request.setRequestHeader("DataServiceVersion", "2.0");
      request.setRequestHeader("MaxDataServiceVersion", "2.0");
    };
    ODataAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaCheck = "odata.metadata";
      if (request && request.type === "GET" && !this.rootUrl && data[metaCheck]) {
        var dataUrls = data[metaCheck].split("/$metadata#");
        this.rootUrl = dataUrls[0];
        this.resourceTableName = dataUrls[1];
      }
      var pvtData = "pvtData";
      if (!isNullOrUndefined(data.d)) {
        var dataCopy = query && query.isCountRequired ? data.d.results : data.d;
        var metaData = "__metadata";
        if (!isNullOrUndefined(dataCopy)) {
          for (var i = 0; i < dataCopy.length; i++) {
            if (!isNullOrUndefined(dataCopy[i][metaData])) {
              delete dataCopy[i][metaData];
            }
          }
        }
      }
      var pvt = request && request[pvtData];
      var emptyAndBatch = this.processBatchResponse(data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var versionCheck = xhr && request.getResponseHeader("DataServiceVersion");
      var count = null;
      var version = versionCheck && parseInt(versionCheck, 10) || 2;
      if (query && query.isCountRequired) {
        var oDataCount = "__count";
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
        if (data.d) {
          data = data.d;
        }
        if (data[oDataCount] || data["odata.count"]) {
          count = data[oDataCount] || data["odata.count"];
        }
      }
      if (version === 3 && data.value) {
        data = data.value;
      }
      if (data.d) {
        data = data.d;
      }
      if (version < 3 && data.results) {
        data = data.results;
      }
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    ODataAdaptor2.prototype.convertToQueryString = function(request, query, dm) {
      var res = [];
      var table = "table";
      var tableName = request[table] || "";
      var format = "$format";
      delete request[table];
      if (dm.dataSource.requiresFormat) {
        request[format] = "json";
      }
      var keys2 = Object.keys(request);
      for (var _i = 0, keys_4 = keys2; _i < keys_4.length; _i++) {
        var prop = keys_4[_i];
        res.push(prop + "=" + request[prop]);
      }
      res = res.join("&");
      if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName) {
        return res;
      }
      return res.length ? tableName + "?" + res : tableName || "";
    };
    ODataAdaptor2.prototype.localTimeReplacer = function(key, convertObj) {
      for (var _i = 0, _a = !isNullOrUndefined(convertObj) ? Object.keys(convertObj) : []; _i < _a.length; _i++) {
        var prop = _a[_i];
        if (convertObj[prop] instanceof Date) {
          convertObj[prop] = DataUtil.dateParse.toLocalTime(convertObj[prop]);
        }
      }
      return convertObj;
    };
    ODataAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        url: (dm.dataSource.insertUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : ""),
        data: JSON.stringify(data, this.options.localTime ? this.localTimeReplacer : null)
      };
    };
    ODataAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      var url;
      if (typeof value === "string" && !DataUtil.parse.isGuid(value)) {
        url = "('" + value + "')";
      } else {
        url = "(" + value + ")";
      }
      return {
        type: "DELETE",
        url: (dm.dataSource.removeUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url
      };
    };
    ODataAdaptor2.prototype.update = function(dm, keyField, value, tableName, query, original) {
      if (this.options.updateType === "PATCH" && !isNullOrUndefined(original)) {
        value = this.compareAndRemove(value, original, keyField);
      }
      var url;
      if (typeof value[keyField] === "string" && !DataUtil.parse.isGuid(value[keyField])) {
        url = "('" + value[keyField] + "')";
      } else {
        url = "(" + value[keyField] + ")";
      }
      return {
        type: this.options.updateType,
        url: (dm.dataSource.updateUrl || dm.dataSource.url).replace(/\/*$/, tableName ? "/" + tableName : "") + url,
        data: JSON.stringify(value, this.options.localTime ? this.localTimeReplacer : null),
        accept: this.options.accept
      };
    };
    ODataAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = this.rootUrl ? this.rootUrl + "/" + this.options.batch : dm.dataSource.url.replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var args = {
        url: e.url,
        key: e.key,
        cid: 1,
        cSet: DataUtil.getGuid(this.options.changeSet)
      };
      var req = "--" + initialGuid + "\n";
      req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";
      this.pvt.changeSet = 0;
      req += this.generateInsertRequest(changes.addedRecords, args, dm);
      req += this.generateUpdateRequest(changes.changedRecords, args, dm, original ? original.changedRecords : []);
      req += this.generateDeleteRequest(changes.deletedRecords, args, dm);
      req += args.cSet + "--\n";
      req += "--" + initialGuid + "--";
      return {
        type: "POST",
        url,
        dataType: "json",
        contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
        data: req
      };
    };
    ODataAdaptor2.prototype.generateDeleteRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "DELETE ",
        "url": function(data, i, key) {
          var url = DataUtil.getObject(key, data[i]);
          if (typeof url === "number" || DataUtil.parse.isGuid(url)) {
            return "(" + url + ")";
          } else if (url instanceof Date) {
            var dateTime = data[i][key];
            return "(" + dateTime.toJSON() + ")";
          } else {
            return "('" + url + "')";
          }
        },
        "data": function(data, i) {
          return "";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req + "\n";
    };
    ODataAdaptor2.prototype.generateInsertRequest = function(arr, e, dm) {
      if (!arr) {
        return "";
      }
      var req = "";
      var stat = {
        "method": "POST ",
        "url": function(data, i, key) {
          return "";
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.prototype.generateUpdateRequest = function(arr, e, dm, org) {
      var _this = this;
      if (!arr) {
        return "";
      }
      var req = "";
      arr.forEach(function(change) {
        return change = _this.compareAndRemove(change, org.filter(function(o) {
          return DataUtil.getObject(e.key, o) === DataUtil.getObject(e.key, change);
        })[0], e.key);
      });
      var stat = {
        "method": this.options.updateType + " ",
        "url": function(data, i, key) {
          if (typeof data[i][key] === "number" || DataUtil.parse.isGuid(data[i][key])) {
            return "(" + data[i][key] + ")";
          } else if (data[i][key] instanceof Date) {
            var date = data[i][key];
            return "(" + date.toJSON() + ")";
          } else {
            return "('" + data[i][key] + "')";
          }
        },
        "data": function(data, i) {
          return JSON.stringify(data[i]) + "\n\n";
        }
      };
      req = this.generateBodyContent(arr, e, stat, dm);
      return req;
    };
    ODataAdaptor2.getField = function(prop) {
      return prop.replace(/\./g, "/");
    };
    ODataAdaptor2.prototype.generateBodyContent = function(arr, e, stat, dm) {
      var req = "";
      for (var i = 0; i < arr.length; i++) {
        req += "\n" + e.cSet + "\n";
        req += this.options.changeSetContent + "\n\n";
        req += stat.method;
        if (stat.method === "POST ") {
          req += (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "PUT " || stat.method === "PATCH ") {
          req += (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        } else if (stat.method === "DELETE ") {
          req += (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + stat.url(arr, i, e.key) + " HTTP/1.1\n";
        }
        req += "Accept: " + this.options.accept + "\n";
        req += "Content-Id: " + this.pvt.changeSet++ + "\n";
        req += this.options.batchChangeSetContentType + "\n";
        if (!isNullOrUndefined(arr[i]["@odata.etag"])) {
          req += "If-Match: " + arr[i]["@odata.etag"] + "\n\n";
          delete arr[i]["@odata.etag"];
        } else {
          req += "\n";
        }
        req += stat.data(arr, i);
      }
      return req;
    };
    ODataAdaptor2.prototype.processBatchResponse = function(data, query, xhr, request, changes) {
      if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") !== -1) {
        return query.isCountRequired ? { result: [], count: 0 } : [];
      }
      if (request && this.options.batch && DataUtil.endsWith(request.url, this.options.batch) && request.type.toLowerCase() === "post") {
        var guid = xhr.getResponseHeader("Content-Type");
        var cIdx = void 0;
        var jsonObj = void 0;
        var d = data + "";
        guid = guid.substring(guid.indexOf("=batchresponse") + 1);
        d = d.split(guid);
        if (d.length < 2) {
          return {};
        }
        d = d[1];
        var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(d);
        if (exVal) {
          d.replace(exVal[0], "");
        }
        var changeGuid = exVal ? exVal[1] : "";
        d = d.split(changeGuid);
        for (var i = d.length; i > -1; i--) {
          if (!/\bContent-ID:/i.test(d[i]) || !/\bHTTP.+201/.test(d[i])) {
            continue;
          }
          cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(d[i])[1], 10);
          if (changes.addedRecords[cIdx]) {
            jsonObj = DataUtil.parse.parseJson(/^\{.+\}/m.exec(d[i])[0]);
            extend({}, changes.addedRecords[cIdx], this.processResponse(jsonObj));
          }
        }
        return changes;
      }
      return null;
    };
    ODataAdaptor2.prototype.compareAndRemove = function(data, original, key) {
      var _this = this;
      if (isNullOrUndefined(original)) {
        return data;
      }
      Object.keys(data).forEach(function(prop) {
        if (prop !== key && prop !== "@odata.etag") {
          if (DataUtil.isPlainObject(data[prop])) {
            _this.compareAndRemove(data[prop], original[prop]);
            var final = Object.keys(data[prop]).filter(function(data2) {
              return data2 !== "@odata.etag";
            });
            if (final.length === 0) {
              delete data[prop];
            }
          } else if (data[prop] === original[prop]) {
            delete data[prop];
          } else if (data[prop] && original[prop] && data[prop].valueOf() === original[prop].valueOf()) {
            delete data[prop];
          }
        }
      });
      return data;
    };
    return ODataAdaptor2;
  }(UrlAdaptor)
);
var ODataV4Adaptor = (
  /** @class */
  function(_super) {
    __extends30(ODataV4Adaptor2, _super);
    function ODataV4Adaptor2(props) {
      var _this = _super.call(this, props) || this;
      _this.options = extend({}, _this.options, {
        requestType: "get",
        accept: "application/json, text/javascript, */*; q=0.01",
        multipartAccept: "multipart/mixed",
        sortBy: "$orderby",
        select: "$select",
        skip: "$skip",
        take: "$top",
        count: "$count",
        search: "$search",
        where: "$filter",
        expand: "$expand",
        batch: "$batch",
        changeSet: "--changeset_",
        batchPre: "batch_",
        contentId: "Content-Id: ",
        batchContent: "Content-Type: multipart/mixed; boundary=",
        changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
        batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 ",
        updateType: "PATCH",
        localTime: false,
        apply: "$apply"
      });
      extend(_this.options, props || {});
      return _this;
    }
    ODataV4Adaptor2.prototype.getModuleName = function() {
      return "ODataV4Adaptor";
    };
    ODataV4Adaptor2.prototype.onCount = function(e) {
      return e === true ? "true" : "";
    };
    ODataV4Adaptor2.prototype.onPredicate = function(predicate, query, requiresCast) {
      var returnValue = "";
      var val = predicate.value;
      var isDate = val instanceof Date;
      if (query instanceof Query) {
        var queries = this.getQueryRequest(query);
        for (var i = 0; i < queries.filters.length; i++) {
          if (queries.filters[i].e.key === predicate.value) {
            requiresCast = true;
          }
        }
      }
      returnValue = _super.prototype.onPredicate.call(this, predicate, query, requiresCast);
      if (isDate) {
        returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");
      }
      if (DataUtil.parse.isGuid(val)) {
        returnValue = returnValue.replace("guid", "").replace(/'/g, "");
      }
      return returnValue;
    };
    ODataV4Adaptor2.prototype.onEachSearch = function(e) {
      var search = this.pvt.searches || [];
      search.push(e.key);
      this.pvt.searches = search;
    };
    ODataV4Adaptor2.prototype.onSearch = function(e) {
      return this.pvt.searches.join(" OR ");
    };
    ODataV4Adaptor2.prototype.onExpand = function(e) {
      var _this = this;
      var selected = {};
      var expanded = {};
      var expands = e.expands.slice();
      var exArr = [];
      var selects = e.selects.filter(function(item) {
        return item.indexOf(".") > -1;
      });
      selects.forEach(function(select2) {
        var splits = select2.split(".");
        if (!(splits[0] in selected)) {
          selected[splits[0]] = [];
        }
        if (splits.length == 2) {
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1) {
            if (selected[splits[0]][0].indexOf("$expand") !== -1 && selected[splits[0]][0].indexOf(";$select=") === -1) {
              selected[splits[0]][0] = selected[splits[0]][0] + ";$select=" + splits[1];
            } else {
              selected[splits[0]][0] = selected[splits[0]][0] + "," + splits[1];
            }
          } else {
            selected[splits[0]].push("$select=" + splits[1]);
          }
        } else {
          var sel = "$select=" + splits[splits.length - 1];
          var exp2 = "";
          var close_1 = "";
          for (var i = 1; i < splits.length - 1; i++) {
            exp2 = exp2 + "$expand=" + splits[i] + "(";
            close_1 = close_1 + ")";
          }
          var combineVal = exp2 + sel + close_1;
          if (selected[splits[0]].length && Object.keys(selected).indexOf(splits[0]) !== -1 && _this.expandQueryIndex(selected[splits[0]], true)) {
            var idx = _this.expandQueryIndex(selected[splits[0]]);
            selected[splits[0]][idx] = selected[splits[0]][idx] + combineVal.replace("$expand=", ",");
          } else {
            selected[splits[0]].push(combineVal);
          }
        }
      });
      Object.keys(selected).forEach(function(expand) {
        if (expands.indexOf(expand) === -1) {
          expands.push(expand);
        }
      });
      expands.forEach(function(expand) {
        expanded[expand] = expand in selected ? expand + "(" + selected[expand].join(";") + ")" : expand;
      });
      Object.keys(expanded).forEach(function(ex) {
        return exArr.push(expanded[ex]);
      });
      return exArr.join(",");
    };
    ODataV4Adaptor2.prototype.expandQueryIndex = function(query, isExpand) {
      for (var i = 0; i < query.length; i++) {
        if (query[i].indexOf("$expand") !== -1) {
          return isExpand ? true : i;
        }
      }
      return isExpand ? false : 0;
    };
    ODataV4Adaptor2.prototype.onDistinct = function(distinctFields) {
      var fields = distinctFields.map(function(field) {
        return ODataAdaptor.getField(field);
      }).join(",");
      return "groupby((" + fields + "))";
    };
    ODataV4Adaptor2.prototype.onSelect = function(e) {
      return _super.prototype.onSelect.call(this, e.filter(function(item) {
        return item.indexOf(".") === -1;
      }));
    };
    ODataV4Adaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (settings.type === "POST" || settings.type === "PUT" || settings.type === "PATCH") {
        request.setRequestHeader("Prefer", "return=representation");
      }
      request.setRequestHeader("Accept", this.options.accept);
    };
    ODataV4Adaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var metaName = "@odata.context";
      if (request && request.type === "GET" && !this.rootUrl && data[metaName]) {
        var dataUrl = data[metaName].split("/$metadata#");
        this.rootUrl = dataUrl[0];
        this.resourceTableName = dataUrl[1];
      }
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var emptyAndBatch = _super.prototype.processBatchResponse.call(this, data, query, xhr, request, changes);
      if (emptyAndBatch) {
        return emptyAndBatch;
      }
      var count = null;
      var dataCount = "@odata.count";
      if (query && query.isCountRequired) {
        if (dataCount in data) {
          count = data[dataCount];
        }
      }
      data = !isNullOrUndefined(data.value) ? data.value : data;
      var args = {};
      args.count = count;
      args.result = data;
      this.getAggregateResult(pvt, data, args, null, query);
      return DataUtil.isNull(count) ? args.result : { result: args.result, count, aggregates: args.aggregates };
    };
    return ODataV4Adaptor2;
  }(ODataAdaptor)
);
var WebApiAdaptor = (
  /** @class */
  function(_super) {
    __extends30(WebApiAdaptor2, _super);
    function WebApiAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebApiAdaptor2.prototype.getModuleName = function() {
      return "WebApiAdaptor";
    };
    WebApiAdaptor2.prototype.insert = function(dm, data, tableName) {
      return {
        type: "POST",
        url: dm.dataSource.url,
        data: JSON.stringify(data)
      };
    };
    WebApiAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      return {
        type: "DELETE",
        url: dm.dataSource.url + "/" + value,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      return {
        type: "PUT",
        url: dm.dataSource.url,
        data: JSON.stringify(value)
      };
    };
    WebApiAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      var _this = this;
      var initialGuid = e.guid = DataUtil.getGuid(this.options.batchPre);
      var url = dm.dataSource.url.replace(/\/*$/, "/" + this.options.batch);
      e.url = this.resourceTableName ? this.resourceTableName : e.url;
      var req = [];
      var _loop_1 = function(i2, x2) {
        changes.addedRecords.forEach(function(j, d) {
          var stat = {
            "method": "POST ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("POST /api/" + (dm.dataSource.insertUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.addedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.addedRecords.length; i < x; i++) {
        _loop_1(i, x);
      }
      var _loop_2 = function(i2, x2) {
        changes.changedRecords.forEach(function(j, d) {
          var stat = {
            "method": _this.options.updateType + " ",
            "url": function(data, i3, key) {
              return "";
            },
            "data": function(data, i3) {
              return JSON.stringify(data[i3]) + "\n\n";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("PUT /api/" + (dm.dataSource.updateUrl || dm.dataSource.crudUrl || e.url) + stat.url(changes.changedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.changedRecords.length; i < x; i++) {
        _loop_2(i, x);
      }
      var _loop_3 = function(i2, x2) {
        changes.deletedRecords.forEach(function(j, d) {
          var state = {
            "mtd": "DELETE ",
            "url": function(data, i3, key) {
              var url2 = DataUtil.getObject(key, data[i3]);
              if (typeof url2 === "number" || DataUtil.parse.isGuid(url2)) {
                return "/" + url2;
              } else if (url2 instanceof Date) {
                var datTime = data[i3][key];
                return "/" + datTime.toJSON();
              } else {
                return "/'" + url2 + "'";
              }
            },
            "data": function(data, i3) {
              return "";
            }
          };
          req.push("--" + initialGuid);
          req.push("Content-Type: application/http; msgtype=request", "");
          req.push("DELETE /api/" + (dm.dataSource.removeUrl || dm.dataSource.crudUrl || e.url) + state.url(changes.deletedRecords, i2, e.key) + " HTTP/1.1");
          req.push("Content-Type: application/json; charset=utf-8");
          req.push("Host: " + location.host);
          req.push("", j ? JSON.stringify(j) : "");
        });
      };
      for (var i = 0, x = changes.deletedRecords.length; i < x; i++) {
        _loop_3(i, x);
      }
      req.push("--" + initialGuid + "--", "");
      return {
        type: "POST",
        url,
        contentType: "multipart/mixed; boundary=" + initialGuid,
        data: req.join("\r\n")
      };
    };
    WebApiAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      request.setRequestHeader("Accept", "application/json, text/javascript, */*; q=0.01");
    };
    WebApiAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      var pvtData = "pvtData";
      var pvt = request && request[pvtData];
      var count = null;
      var args = {};
      if (request && request.type.toLowerCase() !== "post") {
        var versionCheck = xhr && request.getResponseHeader("DataServiceVersion");
        var version = versionCheck && parseInt(versionCheck, 10) || 2;
        if (query && query.isCountRequired) {
          if (!DataUtil.isNull(data.Count)) {
            count = data.Count;
          }
        }
        if (version < 3 && data.Items) {
          data = data.Items;
        }
        args.count = count;
        args.result = data;
        this.getAggregateResult(pvt, data, args, null, query);
      }
      args.result = args.result || data;
      return DataUtil.isNull(count) ? args.result : { result: args.result, count: args.count, aggregates: args.aggregates };
    };
    return WebApiAdaptor2;
  }(ODataAdaptor)
);
var WebMethodAdaptor = (
  /** @class */
  function(_super) {
    __extends30(WebMethodAdaptor2, _super);
    function WebMethodAdaptor2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WebMethodAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var obj = new UrlAdaptor().processQuery(dm, query, hierarchyFilters);
      var getData = "data";
      var data = DataUtil.parse.parseJson(obj[getData]);
      var result = {};
      var value = "value";
      if (data.param) {
        for (var i = 0; i < data.param.length; i++) {
          var param = data.param[i];
          var key = Object.keys(param)[0];
          result[key] = param[key];
        }
      }
      result[value] = data;
      var pvtData = "pvtData";
      var url = "url";
      return {
        data: JSON.stringify(result),
        url: obj[url],
        pvtData: obj[pvtData],
        type: "POST",
        contentType: "application/json; charset=utf-8"
      };
    };
    return WebMethodAdaptor2;
  }(UrlAdaptor)
);
var RemoteSaveAdaptor = (
  /** @class */
  function(_super) {
    __extends30(RemoteSaveAdaptor2, _super);
    function RemoteSaveAdaptor2() {
      var _this = _super.call(this) || this;
      setValue("beforeSend", UrlAdaptor.prototype.beforeSend, _this);
      return _this;
    }
    RemoteSaveAdaptor2.prototype.insert = function(dm, data, tableName, query, position) {
      this.pvt.position = position;
      this.updateType = "add";
      return {
        url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: data,
          table: tableName,
          action: "insert"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.remove = function(dm, keyField, val, tableName, query) {
      _super.prototype.remove.call(this, dm, keyField, val);
      return {
        type: "POST",
        url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          key: val,
          keyColumn: keyField,
          table: tableName,
          action: "remove"
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.update = function(dm, keyField, val, tableName, query) {
      this.updateType = "update";
      this.updateKey = keyField;
      return {
        type: "POST",
        url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        data: JSON.stringify(extend({}, {
          value: val,
          action: "update",
          keyColumn: keyField,
          key: val[keyField],
          table: tableName
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes, e) {
      var i;
      var newData = request ? JSON.parse(request.data) : data;
      data = newData.action === "batch" ? DataUtil.parse.parseJson(data) : data;
      if (this.updateType === "add") {
        _super.prototype.insert.call(this, ds, data, null, null, this.pvt.position);
      }
      if (this.updateType === "update") {
        _super.prototype.update.call(this, ds, this.updateKey, data);
      }
      this.updateType = void 0;
      if (data.added) {
        for (i = 0; i < data.added.length; i++) {
          _super.prototype.insert.call(this, ds, data.added[i]);
        }
      }
      if (data.changed) {
        for (i = 0; i < data.changed.length; i++) {
          _super.prototype.update.call(this, ds, e.key, data.changed[i]);
        }
      }
      if (data.deleted) {
        for (i = 0; i < data.deleted.length; i++) {
          _super.prototype.remove.call(this, ds, e.key, data.deleted[i]);
        }
      }
      return data;
    };
    RemoteSaveAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      return {
        type: "POST",
        url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        data: JSON.stringify(extend({}, {
          changed: changes.changedRecords,
          added: changes.addedRecords,
          deleted: changes.deletedRecords,
          action: "batch",
          table: e.url,
          key: e.key
        }, DataUtil.getAddParams(this, dm, query)))
      };
    };
    RemoteSaveAdaptor2.prototype.addParams = function(options) {
      var urlParams = new UrlAdaptor();
      urlParams.addParams(options);
    };
    return RemoteSaveAdaptor2;
  }(JsonAdaptor)
);
var CustomDataAdaptor = (
  /** @class */
  function(_super) {
    __extends30(CustomDataAdaptor2, _super);
    function CustomDataAdaptor2(props) {
      var _this = _super.call(this) || this;
      _this.options = extend({}, _this.options, {
        getData: new Function(),
        addRecord: new Function(),
        updateRecord: new Function(),
        deleteRecord: new Function(),
        batchUpdate: new Function()
      });
      extend(_this.options, props || {});
      return _this;
    }
    CustomDataAdaptor2.prototype.getModuleName = function() {
      return "CustomDataAdaptor";
    };
    return CustomDataAdaptor2;
  }(UrlAdaptor)
);
var GraphQLAdaptor = (
  /** @class */
  function(_super) {
    __extends30(GraphQLAdaptor2, _super);
    function GraphQLAdaptor2(options) {
      var _this = _super.call(this) || this;
      _this.opt = options;
      _this.schema = _this.opt.response;
      _this.query = _this.opt.query;
      _this.getVariables = _this.opt.getVariables ? _this.opt.getVariables : function() {
      };
      _this.getQuery = function() {
        return _this.query;
      };
      return _this;
    }
    GraphQLAdaptor2.prototype.getModuleName = function() {
      return "GraphQLAdaptor";
    };
    GraphQLAdaptor2.prototype.processQuery = function(datamanager, query) {
      var urlQuery = _super.prototype.processQuery.apply(this, arguments);
      var dm = JSON.parse(urlQuery.data);
      var keys2 = [
        "skip",
        "take",
        "sorted",
        "table",
        "select",
        "where",
        "search",
        "requiresCounts",
        "aggregates",
        "params"
      ];
      var temp = {};
      var str = "searchwhereparams";
      keys2.filter(function(e) {
        temp[e] = str.indexOf(e) > -1 ? JSON.stringify(dm[e]) : dm[e];
      });
      var vars = this.getVariables() || {};
      vars["datamanager"] = temp;
      var data = JSON.stringify({
        query: this.getQuery(),
        variables: vars
      });
      urlQuery.data = data;
      return urlQuery;
    };
    GraphQLAdaptor2.prototype.processResponse = function(resData, ds, query, xhr, request) {
      var res = resData;
      var count;
      var aggregates;
      var result = getValue(this.schema.result, res.data);
      if (this.schema.count) {
        count = getValue(this.schema.count, res.data);
      }
      if (this.schema.aggregates) {
        aggregates = getValue(this.schema.aggregates, res.data);
        aggregates = !isNullOrUndefined(aggregates) ? DataUtil.parse.parseJson(aggregates) : aggregates;
      }
      var pvt = request.pvtData || {};
      var args = { result, aggregates };
      var data = args;
      if (pvt && pvt.groups && pvt.groups.length) {
        this.getAggregateResult(pvt, data, args, null, query);
      }
      return !isNullOrUndefined(count) ? { result: args.result, count, aggregates } : args.result;
    };
    GraphQLAdaptor2.prototype.insert = function() {
      var inserted = _super.prototype.insert.apply(this, arguments);
      return this.generateCrudData(inserted, "insert");
    };
    GraphQLAdaptor2.prototype.update = function() {
      var inserted = _super.prototype.update.apply(this, arguments);
      return this.generateCrudData(inserted, "update");
    };
    GraphQLAdaptor2.prototype.remove = function() {
      var inserted = _super.prototype.remove.apply(this, arguments);
      return this.generateCrudData(inserted, "remove");
    };
    GraphQLAdaptor2.prototype.batchRequest = function(dm, changes, e, query, original) {
      var batch = _super.prototype.batchRequest.apply(this, arguments);
      var bData = JSON.parse(batch.data);
      bData.key = e.key;
      batch.data = JSON.stringify(bData);
      return this.generateCrudData(batch, "batch");
    };
    GraphQLAdaptor2.prototype.generateCrudData = function(crudData, action) {
      var parsed = JSON.parse(crudData.data);
      crudData.data = JSON.stringify({
        query: this.opt.getMutation(action),
        variables: parsed
      });
      return crudData;
    };
    return GraphQLAdaptor2;
  }(UrlAdaptor)
);
var CacheAdaptor = (
  /** @class */
  function(_super) {
    __extends30(CacheAdaptor2, _super);
    function CacheAdaptor2(adaptor, timeStamp, pageSize) {
      var _this = _super.call(this) || this;
      _this.isCrudAction = false;
      _this.isInsertAction = false;
      if (!isNullOrUndefined(adaptor)) {
        _this.cacheAdaptor = adaptor;
      }
      _this.pageSize = pageSize;
      _this.guidId = DataUtil.getGuid("cacheAdaptor");
      var obj = { keys: [], results: [] };
      window.localStorage.setItem(_this.guidId, JSON.stringify(obj));
      var guid = _this.guidId;
      if (!isNullOrUndefined(timeStamp)) {
        setInterval(function() {
          var data;
          data = DataUtil.parse.parseJson(window.localStorage.getItem(guid));
          var forDel = [];
          for (var i = 0; i < data.results.length; i++) {
            var currentTime = +/* @__PURE__ */ new Date();
            var requestTime = +new Date(data.results[i].timeStamp);
            data.results[i].timeStamp = currentTime - requestTime;
            if (currentTime - requestTime > timeStamp) {
              forDel.push(i);
            }
          }
          for (var i = 0; i < forDel.length; i++) {
            data.results.splice(forDel[i], 1);
            data.keys.splice(forDel[i], 1);
          }
          window.localStorage.removeItem(guid);
          window.localStorage.setItem(guid, JSON.stringify(data));
        }, timeStamp);
      }
      return _this;
    }
    CacheAdaptor2.prototype.generateKey = function(url, query) {
      var queries = this.getQueryRequest(query);
      var singles = Query.filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]);
      var key = url;
      var page = "onPage";
      if (page in singles) {
        key += singles[page].pageIndex;
      }
      queries.sorts.forEach(function(obj) {
        key += obj.e.direction + obj.e.fieldName;
      });
      queries.groups.forEach(function(obj) {
        key += obj.e.fieldName;
      });
      queries.searches.forEach(function(obj) {
        key += obj.e.searchKey;
      });
      for (var filter = 0; filter < queries.filters.length; filter++) {
        var currentFilter = queries.filters[filter];
        if (currentFilter.e.isComplex) {
          var newQuery = query.clone();
          newQuery.queries = [];
          for (var i = 0; i < currentFilter.e.predicates.length; i++) {
            newQuery.queries.push({ fn: "onWhere", e: currentFilter.e.predicates[i], filter: query.queries.filter });
          }
          key += currentFilter.e.condition + this.generateKey(url, newQuery);
        } else {
          key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value;
        }
      }
      return key;
    };
    CacheAdaptor2.prototype.processQuery = function(dm, query, hierarchyFilters) {
      var key = this.generateKey(dm.dataSource.url, query);
      var cachedItems;
      cachedItems = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
      if (data != null && !this.isCrudAction && !this.isInsertAction) {
        return data;
      }
      this.isCrudAction = null;
      this.isInsertAction = null;
      return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
    };
    CacheAdaptor2.prototype.processResponse = function(data, ds, query, xhr, request, changes) {
      if (this.isInsertAction || request && this.cacheAdaptor.options.batch && DataUtil.endsWith(request.url, this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post") {
        return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
      }
      data = this.cacheAdaptor.processResponse.apply(this.cacheAdaptor, [].slice.call(arguments, 0));
      var key = query ? this.generateKey(ds.dataSource.url, query) : ds.dataSource.url;
      var obj = {};
      obj = DataUtil.parse.parseJson(window.localStorage.getItem(this.guidId));
      var index = obj.keys.indexOf(key);
      if (index !== -1) {
        obj.results.splice(index, 1);
        obj.keys.splice(index, 1);
      }
      obj.results[obj.keys.push(key) - 1] = { keys: key, result: data.result, timeStamp: /* @__PURE__ */ new Date(), count: data.count };
      while (obj.results.length > this.pageSize) {
        obj.results.splice(0, 1);
        obj.keys.splice(0, 1);
      }
      window.localStorage.setItem(this.guidId, JSON.stringify(obj));
      return data;
    };
    CacheAdaptor2.prototype.beforeSend = function(dm, request, settings) {
      if (!isNullOrUndefined(this.cacheAdaptor.options.batch) && DataUtil.endsWith(settings.url, this.cacheAdaptor.options.batch) && settings.type.toLowerCase() === "post") {
        request.setRequestHeader("Accept", this.cacheAdaptor.options.multipartAccept);
      }
      if (!dm.dataSource.crossDomain) {
        request.setRequestHeader("Accept", this.cacheAdaptor.options.accept);
      }
    };
    CacheAdaptor2.prototype.update = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.update(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.insert = function(dm, data, tableName) {
      this.isInsertAction = true;
      return this.cacheAdaptor.insert(dm, data, tableName);
    };
    CacheAdaptor2.prototype.remove = function(dm, keyField, value, tableName) {
      this.isCrudAction = true;
      return this.cacheAdaptor.remove(dm, keyField, value, tableName);
    };
    CacheAdaptor2.prototype.batchRequest = function(dm, changes, e) {
      return this.cacheAdaptor.batchRequest(dm, changes, e);
    };
    return CacheAdaptor2;
  }(UrlAdaptor)
);

// node_modules/@syncfusion/ej2-data/src/manager.js
var DataManager = (
  /** @class */
  function() {
    function DataManager2(dataSource, query, adaptor) {
      var _this = this;
      this.dateParse = true;
      this.timeZoneHandling = true;
      this.requests = [];
      if (!dataSource && !this.dataSource) {
        dataSource = [];
      }
      adaptor = adaptor || dataSource.adaptor;
      if (dataSource && dataSource.timeZoneHandling === false) {
        this.timeZoneHandling = dataSource.timeZoneHandling;
      }
      var data;
      if (dataSource instanceof Array) {
        data = {
          json: dataSource,
          offline: true
        };
      } else if (typeof dataSource === "object") {
        if (!dataSource.json) {
          dataSource.json = [];
        }
        data = {
          url: dataSource.url,
          insertUrl: dataSource.insertUrl,
          removeUrl: dataSource.removeUrl,
          updateUrl: dataSource.updateUrl,
          crudUrl: dataSource.crudUrl,
          batchUrl: dataSource.batchUrl,
          json: dataSource.json,
          headers: dataSource.headers,
          accept: dataSource.accept,
          data: dataSource.data,
          timeTillExpiration: dataSource.timeTillExpiration,
          cachingPageSize: dataSource.cachingPageSize,
          enableCaching: dataSource.enableCaching,
          requestType: dataSource.requestType,
          key: dataSource.key,
          crossDomain: dataSource.crossDomain,
          jsonp: dataSource.jsonp,
          dataType: dataSource.dataType,
          offline: dataSource.offline !== void 0 ? dataSource.offline : dataSource.adaptor instanceof RemoteSaveAdaptor || dataSource.adaptor instanceof CustomDataAdaptor ? false : dataSource.url ? false : true,
          requiresFormat: dataSource.requiresFormat
        };
      } else {
        DataUtil.throwError("DataManager: Invalid arguments");
      }
      if (data.requiresFormat === void 0 && !DataUtil.isCors()) {
        data.requiresFormat = isNullOrUndefined(data.crossDomain) ? true : data.crossDomain;
      }
      if (data.dataType === void 0) {
        data.dataType = "json";
      }
      this.dataSource = data;
      this.defaultQuery = query;
      if (data.url && data.offline && !data.json.length) {
        this.isDataAvailable = false;
        this.adaptor = adaptor || new ODataAdaptor();
        this.dataSource.offline = false;
        this.ready = this.executeQuery(query || new Query());
        this.ready.then(function(e) {
          _this.dataSource.offline = true;
          _this.isDataAvailable = true;
          data.json = e.result;
          _this.adaptor = new JsonAdaptor();
        });
      } else {
        this.adaptor = data.offline ? new JsonAdaptor() : new ODataAdaptor();
      }
      if (!data.jsonp && this.adaptor instanceof ODataAdaptor) {
        data.jsonp = "callback";
      }
      this.adaptor = adaptor || this.adaptor;
      if (data.enableCaching) {
        this.adaptor = new CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
      }
      return this;
    }
    DataManager2.prototype.setDefaultQuery = function(query) {
      this.defaultQuery = query;
      return this;
    };
    DataManager2.prototype.executeLocal = function(query) {
      if (!this.defaultQuery && !(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeLocal() : A query is required to execute");
      }
      if (!this.dataSource.json) {
        DataUtil.throwError("DataManager - executeLocal() : Json data is required to execute");
      }
      query = query || this.defaultQuery;
      var result = this.adaptor.processQuery(this, query);
      if (query.subQuery) {
        var from = query.subQuery.fromTable;
        var lookup = query.subQuery.lookups;
        var res = query.isCountRequired ? result.result : result;
        if (lookup && lookup instanceof Array) {
          DataUtil.buildHierarchy(query.subQuery.fKey, from, res, lookup, query.subQuery.key);
        }
        for (var j = 0; j < res.length; j++) {
          if (res[j][from] instanceof Array) {
            res[j] = extend({}, {}, res[j]);
            res[j][from] = this.adaptor.processResponse(query.subQuery.using(new DataManager2(res[j][from].slice(0))).executeLocal(), this, query);
          }
        }
      }
      return this.adaptor.processResponse(result, this, query);
    };
    DataManager2.prototype.executeQuery = function(query, done, fail, always) {
      var _this = this;
      var makeRequest = "makeRequest";
      if (typeof query === "function") {
        always = fail;
        fail = done;
        done = query;
        query = null;
      }
      if (!query) {
        query = this.defaultQuery;
      }
      if (!(query instanceof Query)) {
        DataUtil.throwError("DataManager - executeQuery() : A query is required to execute");
      }
      var deffered = new Deferred2();
      var args = { query };
      if (!this.dataSource.offline && (this.dataSource.url !== void 0 && this.dataSource.url !== "") || !isNullOrUndefined(this.adaptor[makeRequest]) || this.isCustomDataAdaptor(this.adaptor)) {
        var result = this.adaptor.processQuery(this, query);
        if (!isNullOrUndefined(this.adaptor[makeRequest])) {
          this.adaptor[makeRequest](result, deffered, args, query);
        } else if (!isNullOrUndefined(result.url) || this.isCustomDataAdaptor(this.adaptor)) {
          this.makeRequest(result, deffered, args, query);
        } else {
          args = DataManager2.getDeferedArgs(query, result, args);
          deffered.resolve(args);
        }
      } else {
        DataManager2.nextTick(function() {
          var res = _this.executeLocal(query);
          args = DataManager2.getDeferedArgs(query, res, args);
          deffered.resolve(args);
        });
      }
      if (done || fail) {
        deffered.promise.then(done, fail);
      }
      if (always) {
        deffered.promise.then(always, always);
      }
      return deffered.promise;
    };
    DataManager2.getDeferedArgs = function(query, result, args) {
      if (query.isCountRequired) {
        args.result = result.result;
        args.count = result.count;
        args.aggregates = result.aggregates;
      } else {
        args.result = result;
      }
      return args;
    };
    DataManager2.nextTick = function(fn) {
      (window.setImmediate || window.setTimeout)(fn, 0);
    };
    DataManager2.prototype.extendRequest = function(url, fnSuccess, fnFail) {
      return extend({}, {
        type: "GET",
        dataType: this.dataSource.dataType,
        crossDomain: this.dataSource.crossDomain,
        jsonp: this.dataSource.jsonp,
        cache: true,
        processData: false,
        onSuccess: fnSuccess,
        onFailure: fnFail
      }, url);
    };
    DataManager2.prototype.makeRequest = function(url, deffered, args, query) {
      var _this = this;
      var isSelector = !!query.subQuerySelector;
      var fnFail = function(e) {
        args.error = e;
        deffered.reject(args);
      };
      var process = function(data, count, xhr, request2, actual, aggregates, virtualSelectRecords) {
        args.xhr = xhr;
        args.count = count ? parseInt(count.toString(), 10) : 0;
        args.result = data;
        args.request = request2;
        args.aggregates = aggregates;
        args.actual = actual;
        args.virtualSelectRecords = virtualSelectRecords;
        deffered.resolve(args);
      };
      var fnQueryChild = function(data, selector) {
        var subDeffer = new Deferred2();
        var childArgs = { parent: args };
        query.subQuery.isChild = true;
        var subUrl = _this.adaptor.processQuery(_this, query.subQuery, data ? _this.adaptor.processResponse(data) : selector);
        var childReq = _this.makeRequest(subUrl, subDeffer, childArgs, query.subQuery);
        if (!isSelector) {
          subDeffer.then(function(subData) {
            if (data) {
              DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, data, subData, query.subQuery.key);
              process(data, subData.count, subData.xhr);
            }
          }, fnFail);
        }
        return childReq;
      };
      var fnSuccess = function(data, request2) {
        if (_this.isGraphQLAdaptor(_this.adaptor)) {
          if (!isNullOrUndefined(data["errors"])) {
            return fnFail(data["errors"], request2);
          }
        }
        if (_this.isCustomDataAdaptor(_this.adaptor)) {
          request2 = extend({}, _this.ajaxReqOption, request2);
        }
        if (request2.httpRequest.getResponseHeader("Content-Type").indexOf("xml") === -1 && _this.dateParse) {
          data = DataUtil.parse.parseJson(data);
        }
        var result = _this.adaptor.processResponse(data, _this, query, request2.httpRequest, request2);
        var count = 0;
        var aggregates = null;
        var virtualSelectRecords = "virtualSelectRecords";
        var virtualRecords = data[virtualSelectRecords];
        if (query.isCountRequired) {
          count = result.count;
          aggregates = result.aggregates;
          result = result.result;
        }
        if (!query.subQuery) {
          process(result, count, request2.httpRequest, request2.type, data, aggregates, virtualRecords);
          return;
        }
        if (!isSelector) {
          fnQueryChild(result, request2);
        }
      };
      var req = this.extendRequest(url, fnSuccess, fnFail);
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var ajax_1 = new Ajax(req);
        ajax_1.beforeSend = function() {
          _this.beforeSend(ajax_1.httpRequest, ajax_1);
        };
        req = ajax_1.send();
        req.catch(function(e) {
          return true;
        });
        this.requests.push(ajax_1);
      } else {
        this.ajaxReqOption = req;
        var request = req;
        this.adaptor.options.getData({
          data: request.data,
          onSuccess: request.onSuccess,
          onFailure: request.onFailure
        });
      }
      if (isSelector) {
        var promise = void 0;
        var res = query.subQuerySelector.call(this, { query: query.subQuery, parent: query });
        if (res && res.length) {
          promise = Promise.all([req, fnQueryChild(null, res)]);
          promise.then(function() {
            var args2 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args2[_i] = arguments[_i];
            }
            var result = args2[0];
            var pResult = _this.adaptor.processResponse(result[0], _this, query, _this.requests[0].httpRequest, _this.requests[0]);
            var count = 0;
            if (query.isCountRequired) {
              count = pResult.count;
              pResult = pResult.result;
            }
            var cResult = _this.adaptor.processResponse(result[1], _this, query.subQuery, _this.requests[1].httpRequest, _this.requests[1]);
            count = 0;
            if (query.subQuery.isCountRequired) {
              count = cResult.count;
              cResult = cResult.result;
            }
            DataUtil.buildHierarchy(query.subQuery.fKey, query.subQuery.fromTable, pResult, cResult, query.subQuery.key);
            isSelector = false;
            process(pResult, count, _this.requests[0].httpRequest);
          });
        } else {
          isSelector = false;
        }
      }
      return req;
    };
    DataManager2.prototype.beforeSend = function(request, settings) {
      this.adaptor.beforeSend(this, request, settings);
      var headers = this.dataSource.headers;
      var props;
      for (var i = 0; headers && i < headers.length; i++) {
        props = [];
        var keys2 = Object.keys(headers[i]);
        for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
          var prop = keys_1[_i];
          props.push(prop);
          request.setRequestHeader(prop, headers[i][prop]);
        }
      }
    };
    DataManager2.prototype.saveChanges = function(changes, key, tableName, query, original) {
      var _this = this;
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var args = {
        url: tableName,
        key: key || this.dataSource.key
      };
      var req = this.adaptor.batchRequest(this, changes, args, query || new Query(), original);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](req);
      } else if (!this.isCustomDataAdaptor(this.adaptor)) {
        var deff_1 = new Deferred2();
        var ajax_2 = new Ajax(req);
        ajax_2.beforeSend = function() {
          _this.beforeSend(ajax_2.httpRequest, ajax_2);
        };
        ajax_2.onSuccess = function(data, request) {
          if (_this.isGraphQLAdaptor(_this.adaptor)) {
            if (!isNullOrUndefined(data["errors"])) {
              ajax_2.onFailure(JSON.stringify(data["errors"]));
            }
          }
          deff_1.resolve(_this.adaptor.processResponse(data, _this, null, request.httpRequest, request, changes, args));
        };
        ajax_2.onFailure = function(e) {
          deff_1.reject([{ error: e }]);
        };
        ajax_2.send().catch(function(e) {
          return true;
        });
        return deff_1.promise;
      } else {
        return this.doAjaxRequest(req, this.adaptor.options.batchUpdate);
      }
    };
    DataManager2.prototype.insert = function(data, tableName, query, position) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var req = this.adaptor.insert(this, data, tableName, query, position);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return req;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](req);
      } else {
        return this.doAjaxRequest(req, this.adaptor.options.addRecord);
      }
    };
    DataManager2.prototype.remove = function(keyField, value, tableName, query) {
      if (typeof value === "object") {
        value = DataUtil.getObject(keyField, value);
      }
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var res = this.adaptor.remove(this, keyField, value, tableName, query);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](res);
      } else {
        var remove2 = this.adaptor.options.deleteRecord;
        return this.doAjaxRequest(res, remove2);
      }
    };
    DataManager2.prototype.update = function(keyField, value, tableName, query, original) {
      if (tableName instanceof Query) {
        query = tableName;
        tableName = null;
      }
      var res = this.adaptor.update(this, keyField, value, tableName, query, original);
      var doAjaxRequest = "doAjaxRequest";
      if (this.dataSource.offline) {
        return res;
      }
      if (!isNullOrUndefined(this.adaptor[doAjaxRequest])) {
        return this.adaptor[doAjaxRequest](res);
      } else {
        var update = this.adaptor.options.updateRecord;
        return this.doAjaxRequest(res, update);
      }
    };
    DataManager2.prototype.isCustomDataAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "CustomDataAdaptor";
    };
    DataManager2.prototype.isGraphQLAdaptor = function(dataSource) {
      return this.adaptor.getModuleName && this.adaptor.getModuleName() === "GraphQLAdaptor";
    };
    DataManager2.prototype.successFunc = function(record, request) {
      if (this.isGraphQLAdaptor(this.adaptor)) {
        var data = JSON.parse(record);
        if (!isNullOrUndefined(data["errors"])) {
          this.failureFunc(JSON.stringify(data["errors"]));
        }
      }
      if (this.isCustomDataAdaptor(this.adaptor)) {
        request = extend({}, this.ajaxReqOption, request);
      }
      try {
        DataUtil.parse.parseJson(record);
      } catch (e) {
        record = [];
      }
      record = this.adaptor.processResponse(DataUtil.parse.parseJson(record), this, null, request.httpRequest, request);
      this.ajaxDeffered.resolve(record);
    };
    ;
    DataManager2.prototype.failureFunc = function(e) {
      this.ajaxDeffered.reject([{ error: e }]);
    };
    ;
    DataManager2.prototype.doAjaxRequest = function(res, ajaxFunc) {
      var _this = this;
      res = extend({}, {
        type: "POST",
        contentType: "application/json; charset=utf-8",
        processData: false
      }, res);
      this.ajaxDeffered = new Deferred2();
      if (!this.isCustomDataAdaptor(this.adaptor)) {
        var ajax_3 = new Ajax(res);
        ajax_3.beforeSend = function() {
          _this.beforeSend(ajax_3.httpRequest, ajax_3);
        };
        ajax_3.onSuccess = this.successFunc.bind(this);
        ajax_3.onFailure = this.failureFunc.bind(this);
        ajax_3.send().catch(function(e) {
          return true;
        });
      } else {
        this.ajaxReqOption = res;
        ajaxFunc.call(this, {
          data: res.data,
          onSuccess: this.successFunc.bind(this),
          onFailure: this.failureFunc.bind(this)
        });
      }
      return this.ajaxDeffered.promise;
    };
    return DataManager2;
  }()
);
var Deferred2 = (
  /** @class */
  /* @__PURE__ */ function() {
    function Deferred3() {
      var _this = this;
      this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      this.then = this.promise.then.bind(this.promise);
      this.catch = this.promise.catch.bind(this.promise);
    }
    return Deferred3;
  }()
);

// node_modules/@syncfusion/ej2-lists/src/common/list-base.js
var cssClass = {
  li: "e-list-item",
  ul: "e-list-parent e-ul",
  group: "e-list-group-item",
  icon: "e-list-icon",
  text: "e-list-text",
  check: "e-list-check",
  checked: "e-checked",
  selected: "e-selected",
  expanded: "e-expanded",
  textContent: "e-text-content",
  hasChild: "e-has-child",
  level: "e-level",
  url: "e-list-url",
  collapsible: "e-icon-collapsible",
  disabled: "e-disabled",
  image: "e-list-img",
  iconWrapper: "e-icon-wrapper",
  anchorWrap: "e-anchor-wrap",
  navigable: "e-navigable"
};
var ListBase;
(function(ListBase2) {
  ListBase2.defaultMappedFields = {
    id: "id",
    text: "text",
    url: "url",
    value: "value",
    isChecked: "isChecked",
    enabled: "enabled",
    expanded: "expanded",
    selected: "selected",
    iconCss: "iconCss",
    child: "child",
    isVisible: "isVisible",
    hasChildren: "hasChildren",
    tooltip: "tooltip",
    htmlAttributes: "htmlAttributes",
    urlAttributes: "urlAttributes",
    imageAttributes: "imageAttributes",
    imageUrl: "imageUrl",
    groupBy: null,
    sortBy: null
  };
  var defaultAriaAttributes = {
    level: 1,
    listRole: "presentation",
    itemRole: "presentation",
    groupItemRole: "group",
    itemText: "list-item",
    wrapperRole: "presentation"
  };
  var defaultListBaseOptions = {
    showCheckBox: false,
    showIcon: false,
    enableHtmlSanitizer: false,
    expandCollapse: false,
    fields: ListBase2.defaultMappedFields,
    ariaAttributes: defaultAriaAttributes,
    listClass: "",
    itemClass: "",
    processSubChild: false,
    sortOrder: "None",
    template: null,
    groupTemplate: null,
    headerTemplate: null,
    expandIconClass: "e-icon-collapsible",
    moduleName: "list",
    expandIconPosition: "Right",
    itemNavigable: false
  };
  function createList(createElement8, dataSource, options, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var type = typeofData(dataSource).typeof;
    if (type === "string" || type === "number") {
      return createListFromArray(createElement8, dataSource, isSingleLevel, options, componentInstance);
    } else {
      return createListFromJson(createElement8, dataSource, options, ariaAttributes.level, isSingleLevel, componentInstance);
    }
  }
  ListBase2.createList = createList;
  function createListFromArray(createElement8, dataSource, isSingleLevel, options, componentInstance) {
    var subChild = createListItemFromArray(createElement8, dataSource, isSingleLevel, options, componentInstance);
    return generateUL(createElement8, subChild, null, options);
  }
  ListBase2.createListFromArray = createListFromArray;
  function createListItemFromArray(createElement8, dataSource, isSingleLevel, options, componentInstance) {
    var subChild = [];
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var id = generateId();
    for (var i = 0; i < dataSource.length; i++) {
      if (isNullOrUndefined(dataSource[i])) {
        continue;
      }
      var li = void 0;
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          options: curOpt
        };
        curOpt.itemCreating(curData);
      }
      if (isSingleLevel) {
        li = generateSingleLevelLI(createElement8, dataSource[i], void 0, null, null, [], null, id, i, options);
      } else {
        li = generateLI(createElement8, dataSource[i], void 0, null, null, options, componentInstance);
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: dataSource[i],
          item: li,
          options: curOpt
        };
        curOpt.itemCreated(curData);
      }
      subChild.push(li);
    }
    return subChild;
  }
  ListBase2.createListItemFromArray = createListItemFromArray;
  function createListItemFromJson(createElement8, dataSource, options, level, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var fields = componentInstance && (componentInstance.getModuleName() == "listview" || componentInstance.getModuleName() == "multiselect") ? curOpt.fields : extend({}, ListBase2.defaultMappedFields, curOpt.fields);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var id;
    var checkboxElement = [];
    if (level) {
      ariaAttributes.level = level;
    }
    var child = [];
    var li;
    var anchorElement;
    if (dataSource && dataSource.length && !isNullOrUndefined(typeofData(dataSource).item) && // eslint-disable-next-line no-prototype-builtins
    !typeofData(dataSource).item.hasOwnProperty(fields.id)) {
      id = generateId();
    }
    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], fields);
      if (isNullOrUndefined(dataSource[i])) {
        continue;
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          options: curOpt,
          fields
        };
        curOpt.itemCreating(curData);
      }
      var curItem = dataSource[i];
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        fieldData = getFieldValues(dataSource[i], fields);
      }
      if (fieldData.hasOwnProperty(fields.id) && !isNullOrUndefined(fieldData[fields.id])) {
        id = fieldData[fields.id];
      }
      var innerEle = [];
      if (curOpt.showCheckBox) {
        if (curOpt.itemNavigable && (fieldData[fields.url] || fieldData[fields.urlAttributes])) {
          checkboxElement.push(createElement8("input", { className: cssClass.check, attrs: { type: "checkbox" } }));
        } else {
          innerEle.push(createElement8("input", { className: cssClass.check, attrs: { type: "checkbox" } }));
        }
      }
      if (isSingleLevel === true) {
        if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss])) {
          innerEle.push(createElement8("span", { className: cssClass.icon + " " + fieldData[fields.iconCss] }));
        }
        li = generateSingleLevelLI(
          createElement8,
          curItem,
          fieldData,
          fields,
          curOpt.itemClass,
          innerEle,
          // eslint-disable-next-line no-prototype-builtins
          curItem.hasOwnProperty("isHeader") && curItem.isHeader ? true : false,
          id,
          i,
          options
        );
        anchorElement = li.querySelector("." + cssClass.anchorWrap);
        if (curOpt.itemNavigable && checkboxElement.length) {
          prepend(checkboxElement, li.firstElementChild);
        }
      } else {
        li = generateLI(createElement8, curItem, fieldData, fields, curOpt.itemClass, options, componentInstance);
        li.classList.add(cssClass.level + "-" + ariaAttributes.level);
        li.setAttribute("aria-level", ariaAttributes.level.toString());
        anchorElement = li.querySelector("." + cssClass.anchorWrap);
        if (fieldData.hasOwnProperty(fields.tooltip)) {
          li.setAttribute("title", fieldData[fields.tooltip]);
        }
        if (fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
          setAttribute(li, fieldData[fields.htmlAttributes]);
        }
        if (fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled] === false) {
          li.classList.add(cssClass.disabled);
        }
        if (fieldData.hasOwnProperty(fields.isVisible) && fieldData[fields.isVisible] === false) {
          li.style.display = "none";
        }
        if (fieldData.hasOwnProperty(fields.imageUrl) && !isNullOrUndefined(fieldData[fields.imageUrl]) && !curOpt.template) {
          var attr = { src: fieldData[fields.imageUrl] };
          merge(attr, fieldData[fields.imageAttributes]);
          var imageElemnt = createElement8("img", { className: cssClass.image, attrs: attr });
          if (anchorElement) {
            anchorElement.insertAdjacentElement("afterbegin", imageElemnt);
          } else {
            prepend([imageElemnt], li.firstElementChild);
          }
        }
        if (curOpt.showIcon && fieldData.hasOwnProperty(fields.iconCss) && !isNullOrUndefined(fieldData[fields.iconCss]) && !curOpt.template) {
          var iconElement = createElement8("div", { className: cssClass.icon + " " + fieldData[fields.iconCss] });
          if (anchorElement) {
            anchorElement.insertAdjacentElement("afterbegin", iconElement);
          } else {
            prepend([iconElement], li.firstElementChild);
          }
        }
        if (innerEle.length) {
          prepend(innerEle, li.firstElementChild);
        }
        if (curOpt.itemNavigable && checkboxElement.length) {
          prepend(checkboxElement, li.firstElementChild);
        }
        processSubChild(createElement8, fieldData, fields, dataSource, curOpt, li, ariaAttributes.level);
      }
      if (anchorElement) {
        addClass([li], [cssClass.navigable]);
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: dataSource[i],
          text: fieldData[fields.text],
          item: li,
          options: curOpt,
          fields
        };
        curOpt.itemCreated(curData);
      }
      checkboxElement = [];
      child.push(li);
    }
    return child;
  }
  ListBase2.createListItemFromJson = createListItemFromJson;
  function createListFromJson(createElement8, dataSource, options, level, isSingleLevel, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var li = createListItemFromJson(createElement8, dataSource, options, level, isSingleLevel, componentInstance);
    return generateUL(createElement8, li, curOpt.listClass, options);
  }
  ListBase2.createListFromJson = createListFromJson;
  function getSiblingLI(elementArray, element2, isPrevious) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);
    if (!elementArray || !elementArray.length) {
      return void 0;
    }
    var siblingLI;
    var liIndex;
    var liCollections = Array.prototype.slice.call(elementArray);
    if (element2) {
      liIndex = indexOf(element2, liCollections);
    } else {
      liIndex = isPrevious === true ? liCollections.length : -1;
    }
    siblingLI = liCollections[liIndex + (isPrevious === true ? -1 : 1)];
    while (siblingLI && (!isVisible(siblingLI) || siblingLI.classList.contains(cssClass.disabled))) {
      liIndex = liIndex + (isPrevious === true ? -1 : 1);
      siblingLI = liCollections[liIndex];
    }
    return siblingLI;
  }
  ListBase2.getSiblingLI = getSiblingLI;
  function indexOf(item, elementArray) {
    if (!elementArray || !item) {
      return void 0;
    } else {
      var liCollections = elementArray;
      liCollections = Array.prototype.slice.call(elementArray);
      return liCollections.indexOf(item);
    }
  }
  ListBase2.indexOf = indexOf;
  function groupDataSource(dataSource, fields, sortOrder) {
    if (sortOrder === void 0) {
      sortOrder = "None";
    }
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var cusQuery = new Query().group(curFields.groupBy);
    cusQuery = addSorting(sortOrder, "key", cusQuery);
    var ds = getDataSource(dataSource, cusQuery);
    dataSource = [];
    for (var j = 0; j < ds.length; j++) {
      var itemObj = ds[j].items;
      var grpItem = {};
      var hdr = "isHeader";
      grpItem[curFields.text] = ds[j].key;
      grpItem[hdr] = true;
      var newtext = curFields.text;
      if (newtext === "id") {
        newtext = "text";
        grpItem[newtext] = ds[j].key;
      }
      grpItem._id = "group-list-item-" + (ds[j].key ? ds[j].key.toString().trim() : "undefined");
      grpItem.items = itemObj;
      dataSource.push(grpItem);
      for (var k = 0; k < itemObj.length; k++) {
        dataSource.push(itemObj[k]);
      }
    }
    return dataSource;
  }
  ListBase2.groupDataSource = groupDataSource;
  function addSorting(sortOrder, sortBy, query) {
    if (query === void 0) {
      query = new Query();
    }
    if (sortOrder === "Ascending") {
      query.sortBy(sortBy, "ascending", true);
    } else if (sortOrder === "Descending") {
      query.sortBy(sortBy, "descending", true);
    } else {
      for (var i = 0; i < query.queries.length; i++) {
        if (query.queries[i].fn === "onSortBy") {
          query.queries.splice(i, 1);
        }
      }
    }
    return query;
  }
  ListBase2.addSorting = addSorting;
  function getDataSource(dataSource, query) {
    return new DataManager(dataSource).executeLocal(query);
  }
  ListBase2.getDataSource = getDataSource;
  function createJsonFromElement(element2, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var fields = extend({}, ListBase2.defaultMappedFields, curOpt.fields);
    var curEle = element2.cloneNode(true);
    var jsonAr = [];
    curEle.classList.add("json-parent");
    var childs = curEle.querySelectorAll(".json-parent>li");
    curEle.classList.remove("json-parent");
    for (var i = 0; i < childs.length; i++) {
      var li = childs[i];
      var anchor = li.querySelector("a");
      var ul = li.querySelector("ul");
      var json = {};
      var childNodes = anchor ? anchor.childNodes : li.childNodes;
      var keys2 = Object.keys(childNodes);
      for (var i_1 = 0; i_1 < childNodes.length; i_1++) {
        if (!childNodes[Number(keys2[i_1])].hasChildNodes()) {
          json[fields.text] = childNodes[Number(keys2[i_1])].textContent;
        }
      }
      var attributes_1 = getAllAttributes(li);
      if (attributes_1.id) {
        json[fields.id] = attributes_1.id;
        delete attributes_1.id;
      } else {
        json[fields.id] = generateId();
      }
      if (Object.keys(attributes_1).length) {
        json[fields.htmlAttributes] = attributes_1;
      }
      if (anchor) {
        attributes_1 = getAllAttributes(anchor);
        if (Object.keys(attributes_1).length) {
          json[fields.urlAttributes] = attributes_1;
        }
      }
      if (ul) {
        json[fields.child] = createJsonFromElement(ul, options);
      }
      jsonAr.push(json);
    }
    return jsonAr;
  }
  ListBase2.createJsonFromElement = createJsonFromElement;
  function typeofData(data) {
    var match = { typeof: null, item: null };
    for (var i = 0; i < data.length; i++) {
      if (!isNullOrUndefined(data[i])) {
        return match = { typeof: typeof data[i], item: data[i] };
      }
    }
    return match;
  }
  function setAttribute(element2, elementAttributes) {
    var attr = {};
    merge(attr, elementAttributes);
    if (attr.class) {
      addClass([element2], attr.class.split(" "));
      delete attr.class;
    }
    attributes(element2, attr);
  }
  function getAllAttributes(element2) {
    var attributes2 = {};
    var attr = element2.attributes;
    for (var index = 0; index < attr.length; index++) {
      attributes2[attr[index].nodeName] = attr[index].nodeValue;
    }
    return attributes2;
  }
  function renderContentTemplate(createElement8, template, dataSource, fields, options, componentInstance) {
    cssClass = getModuleClass(defaultListBaseOptions.moduleName);
    var ulElement = createElement8("ul", { className: cssClass.ul, attrs: { role: "presentation" } });
    var curOpt = extend({}, defaultListBaseOptions, options);
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var compiledString = compileTemplate(template);
    var liCollection = [];
    var value;
    var id = generateId();
    for (var i = 0; i < dataSource.length; i++) {
      var fieldData = getFieldValues(dataSource[i], curFields);
      var curItem = dataSource[i];
      var isHeader = curItem.isHeader;
      if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
        value = curItem;
      } else {
        value = fieldData[curFields.value];
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        var curData = {
          dataSource,
          curData: curItem,
          text: value,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreating(curData);
      }
      if (curOpt.itemCreating && typeof curOpt.itemCreating === "function") {
        fieldData = getFieldValues(dataSource[i], curFields);
        if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
          value = curItem;
        } else {
          value = fieldData[curFields.value];
        }
      }
      var li = createElement8("li", {
        id: id + "-" + i,
        className: isHeader ? cssClass.group : cssClass.li,
        attrs: { role: "presentation" }
      });
      if (isHeader) {
        if (typeof dataSource[i] === "string" || typeof dataSource[i] === "number") {
          li.innerText = curItem;
        } else {
          li.innerText = fieldData[curFields.text];
        }
      } else {
        var currentID = isHeader ? curOpt.groupTemplateID : curOpt.templateID;
        if (isHeader) {
          if (componentInstance && componentInstance.getModuleName() != "listview") {
            var compiledElement = compiledString(curItem, componentInstance, "headerTemplate", currentID, !!curOpt.isStringTemplate, null, li);
            if (compiledElement) {
              append(compiledElement, li);
            }
          } else {
            append(compiledString(curItem, componentInstance, "headerTemplate", currentID, !!curOpt.isStringTemplate), li);
          }
        } else {
          if (componentInstance && componentInstance.getModuleName() != "listview") {
            var compiledElement = compiledString(curItem, componentInstance, "template", currentID, !!curOpt.isStringTemplate, null, li);
            if (compiledElement) {
              append(compiledElement, li);
            }
          } else {
            append(compiledString(curItem, componentInstance, "template", currentID, !!curOpt.isStringTemplate), li);
          }
        }
        li.setAttribute("data-value", isNullOrUndefined(value) ? "null" : value);
        li.setAttribute("role", "option");
      }
      if (curOpt.itemCreated && typeof curOpt.itemCreated === "function") {
        var curData = {
          dataSource,
          curData: curItem,
          text: value,
          item: li,
          options: curOpt,
          fields: curFields
        };
        curOpt.itemCreated(curData);
      }
      liCollection.push(li);
    }
    append(liCollection, ulElement);
    return ulElement;
  }
  ListBase2.renderContentTemplate = renderContentTemplate;
  function renderGroupTemplate(groupTemplate, groupDataSource2, fields, headerItems, options, componentInstance) {
    var compiledString = compileTemplate(groupTemplate);
    var curFields = extend({}, ListBase2.defaultMappedFields, fields);
    var curOpt = extend({}, defaultListBaseOptions, options);
    var category = curFields.groupBy;
    for (var _i = 0, headerItems_1 = headerItems; _i < headerItems_1.length; _i++) {
      var header = headerItems_1[_i];
      var headerData = {};
      headerData[category] = header.textContent;
      header.innerHTML = "";
      if (componentInstance && componentInstance.getModuleName() != "listview") {
        var compiledElement = compiledString(headerData, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, header);
        if (compiledElement) {
          append(compiledElement, header);
        }
      } else {
        append(compiledString(headerData, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate), header);
      }
    }
    return headerItems;
  }
  ListBase2.renderGroupTemplate = renderGroupTemplate;
  function generateId() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  ListBase2.generateId = generateId;
  function processSubChild(createElement8, fieldData, fields, ds, options, element2, level) {
    var subDS = fieldData[fields.child] || [];
    var hasChildren = fieldData[fields.hasChildren];
    if (subDS.length) {
      hasChildren = true;
      element2.classList.add(cssClass.hasChild);
      if (options.processSubChild) {
        var subLi = createListFromJson(createElement8, subDS, options, ++level);
        element2.appendChild(subLi);
      }
    }
    if (!!options.expandCollapse && hasChildren && !options.template) {
      element2.firstElementChild.classList.add(cssClass.iconWrapper);
      var expandElement = options.expandIconPosition === "Left" ? prepend : append;
      expandElement([createElement8("div", { className: "e-icons " + options.expandIconClass })], element2.querySelector("." + cssClass.textContent));
    }
  }
  function generateSingleLevelLI(createElement8, item, fieldData, fields, className, innerElements, grpLI, id, index, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var value = item;
    var dataSource;
    if (typeof item !== "string" && typeof item !== "number" && typeof item !== "boolean") {
      dataSource = item;
      text = typeof fieldData[fields.text] === "boolean" || typeof fieldData[fields.text] === "number" ? fieldData[fields.text] : fieldData[fields.text] || "";
      value = fieldData[fields.value];
    }
    var elementID;
    if (!isNullOrUndefined(dataSource) && !isNullOrUndefined(fieldData[fields.id]) && fieldData[fields.id] !== "") {
      elementID = id;
    } else {
      elementID = id + "-" + index;
    }
    var li = createElement8("li", {
      className: (grpLI === true ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
      id: elementID,
      attrs: ariaAttributes.groupItemRole !== "" && ariaAttributes.itemRole !== "" ? { role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole } : {}
    });
    if (dataSource && fieldData.hasOwnProperty(fields.enabled) && fieldData[fields.enabled].toString() === "false") {
      li.classList.add(cssClass.disabled);
    }
    if (grpLI) {
      li.innerText = text;
    } else {
      li.setAttribute("data-value", isNullOrUndefined(value) ? "null" : value);
      li.setAttribute("role", "option");
      if (dataSource && fieldData.hasOwnProperty(fields.htmlAttributes) && fieldData[fields.htmlAttributes]) {
        setAttribute(li, fieldData[fields.htmlAttributes]);
      }
      if (innerElements.length && !curOpt.itemNavigable) {
        append(innerElements, li);
      }
      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        li.appendChild(anchorTag(createElement8, dataSource, fields, text, innerElements, curOpt.itemNavigable));
      } else {
        if (innerElements.length && curOpt.itemNavigable) {
          append(innerElements, li);
        }
        li.appendChild(document.createTextNode(text));
      }
    }
    return li;
  }
  function getModuleClass(moduleName) {
    var moduleClass;
    return moduleClass = {
      li: "e-" + moduleName + "-item",
      ul: "e-" + moduleName + "-parent e-ul",
      group: "e-" + moduleName + "-group-item",
      icon: "e-" + moduleName + "-icon",
      text: "e-" + moduleName + "-text",
      check: "e-" + moduleName + "-check",
      checked: "e-checked",
      selected: "e-selected",
      expanded: "e-expanded",
      textContent: "e-text-content",
      hasChild: "e-has-child",
      level: "e-level",
      url: "e-" + moduleName + "-url",
      collapsible: "e-icon-collapsible",
      disabled: "e-disabled",
      image: "e-" + moduleName + "-img",
      iconWrapper: "e-icon-wrapper",
      anchorWrap: "e-anchor-wrap",
      navigable: "e-navigable"
    };
  }
  function anchorTag(createElement8, dataSource, fields, text, innerElements, isFullNavigation) {
    var fieldData = getFieldValues(dataSource, fields);
    var attr = { href: fieldData[fields.url] };
    if (fieldData.hasOwnProperty(fields.urlAttributes) && fieldData[fields.urlAttributes]) {
      merge(attr, fieldData[fields.urlAttributes]);
      attr.href = fieldData[fields.url] ? fieldData[fields.url] : fieldData[fields.urlAttributes].href;
    }
    var anchorTag2;
    if (!isFullNavigation) {
      anchorTag2 = createElement8("a", { className: cssClass.text + " " + cssClass.url, innerHTML: text });
    } else {
      anchorTag2 = createElement8("a", { className: cssClass.text + " " + cssClass.url });
      var anchorWrapper = createElement8("div", { className: cssClass.anchorWrap });
      if (innerElements && innerElements.length) {
        append(innerElements, anchorWrapper);
      }
      anchorWrapper.appendChild(document.createTextNode(text));
      append([anchorWrapper], anchorTag2);
    }
    setAttribute(anchorTag2, attr);
    return anchorTag2;
  }
  function generateLI(createElement8, item, fieldData, fields, className, options, componentInstance) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    var text = item;
    var uID;
    var grpLI;
    var dataSource;
    if (typeof item !== "string" && typeof item !== "number") {
      dataSource = item;
      text = fieldData[fields.text] || "";
      uID = isNullOrUndefined(fieldData["_id"]) ? fieldData[fields.id] : fieldData["_id"];
      grpLI = item.hasOwnProperty("isHeader") && item.isHeader ? true : false;
    }
    if (options && options.enableHtmlSanitizer) {
      text = text;
    }
    var li = createElement8("li", {
      className: (grpLI === true ? cssClass.group : cssClass.li) + " " + (isNullOrUndefined(className) ? "" : className),
      attrs: ariaAttributes.groupItemRole !== "" && ariaAttributes.itemRole !== "" ? { role: grpLI === true ? ariaAttributes.groupItemRole : ariaAttributes.itemRole } : {}
    });
    if (!isNullOrUndefined(uID) === true) {
      li.setAttribute("data-uid", uID);
    } else {
      li.setAttribute("data-uid", generateId());
    }
    if (grpLI && options && options.groupTemplate) {
      var compiledString = compileTemplate(options.groupTemplate);
      if (componentInstance && componentInstance.getModuleName() != "listview") {
        var compiledElement = compiledString(item, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate, null, li);
        if (compiledElement) {
          append(compiledElement, li);
        }
      } else {
        append(compiledString(item, componentInstance, "groupTemplate", curOpt.groupTemplateID, !!curOpt.isStringTemplate), li);
      }
    } else if (!grpLI && options && options.template) {
      var compiledString = compileTemplate(options.template);
      if (componentInstance && componentInstance.getModuleName() != "listview") {
        var compiledElement = compiledString(item, componentInstance, "template", curOpt.templateID, !!curOpt.isStringTemplate, null, li);
        if (compiledElement) {
          append(compiledElement, li);
        }
      } else {
        append(compiledString(item, componentInstance, "template", curOpt.templateID, !!curOpt.isStringTemplate), li);
      }
    } else {
      var innerDiv = createElement8("div", {
        className: cssClass.textContent,
        attrs: ariaAttributes.wrapperRole !== "" ? { role: ariaAttributes.wrapperRole } : {}
      });
      if (dataSource && (fieldData[fields.url] || fieldData[fields.urlAttributes] && fieldData[fields.urlAttributes].href)) {
        innerDiv.appendChild(anchorTag(createElement8, dataSource, fields, text, null, curOpt.itemNavigable));
      } else {
        var element2 = createElement8("span", {
          className: cssClass.text,
          attrs: ariaAttributes.itemText !== "" ? { role: ariaAttributes.itemText } : {}
        });
        if (options && options.enableHtmlSanitizer) {
          element2.innerText = text;
        } else {
          element2.innerHTML = text;
        }
        innerDiv.appendChild(element2);
      }
      li.appendChild(innerDiv);
    }
    return li;
  }
  function generateUL(createElement8, liElement, className, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    var ariaAttributes = extend({}, defaultAriaAttributes, curOpt.ariaAttributes);
    cssClass = getModuleClass(curOpt.moduleName);
    var ulElement = createElement8("ul", {
      className: cssClass.ul + " " + (isNullOrUndefined(className) ? "" : className),
      attrs: ariaAttributes.listRole !== "" ? { role: ariaAttributes.listRole } : {}
    });
    append(liElement, ulElement);
    return ulElement;
  }
  ListBase2.generateUL = generateUL;
  function generateIcon(createElement8, liElement, className, options) {
    var curOpt = extend({}, defaultListBaseOptions, options);
    cssClass = getModuleClass(curOpt.moduleName);
    var expandElement = curOpt.expandIconPosition === "Left" ? prepend : append;
    expandElement([createElement8("div", {
      className: "e-icons " + curOpt.expandIconClass + " " + (isNullOrUndefined(className) ? "" : className)
    })], liElement.querySelector("." + cssClass.textContent));
    return liElement;
  }
  ListBase2.generateIcon = generateIcon;
})(ListBase || (ListBase = {}));
function getFieldValues(dataItem, fields) {
  var fieldData = {};
  if (isNullOrUndefined(dataItem) || typeof dataItem === "string" || typeof dataItem === "number" || !isNullOrUndefined(dataItem.isHeader)) {
    return dataItem;
  } else {
    for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {
      var field = _a[_i];
      var dataField = fields[field];
      var value = !isNullOrUndefined(dataField) && typeof dataField === "string" ? getValue(dataField, dataItem) : void 0;
      if (!isNullOrUndefined(value)) {
        fieldData[dataField] = value;
      }
    }
  }
  return fieldData;
}
function compileTemplate(template) {
  if (template) {
    try {
      if (document.querySelector(template)) {
        return compile2(document.querySelector(template).innerHTML.trim());
      }
    } catch (e) {
      return compile2(template);
    }
  }
  return void 0;
}

// node_modules/@syncfusion/ej2-lists/src/list-view/list-view.js
var __extends31 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate29 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var effectsConfig = {
  "None": [],
  "SlideLeft": ["SlideRightOut", "SlideLeftOut", "SlideLeftIn", "SlideRightIn"],
  "SlideDown": ["SlideTopOut", "SlideBottomOut", "SlideBottomIn", "SlideTopIn"],
  "Zoom": ["FadeOut", "FadeZoomOut", "FadeZoomIn", "FadeIn"],
  "Fade": ["FadeOut", "FadeOut", "FadeIn", "FadeIn"]
};
var effectsRTLConfig = {
  "None": [],
  "SlideLeft": ["SlideLeftOut", "SlideRightOut", "SlideRightIn", "SlideLeftIn"],
  "SlideDown": ["SlideBottomOut", "SlideTopOut", "SlideTopIn", "SlideBottomIn"],
  "Zoom": ["FadeZoomOut", "FadeOut", "FadeIn", "FadeZoomIn"],
  "Fade": ["FadeOut", "FadeOut", "FadeIn", "FadeIn"]
};
var classNames4 = {
  root: "e-listview",
  hover: "e-hover",
  selected: "e-active",
  focused: "e-focused",
  parentItem: "e-list-parent",
  listItem: "e-list-item",
  listIcon: "e-list-icon",
  textContent: "e-text-content",
  listItemText: "e-list-text",
  groupListItem: "e-list-group-item",
  hasChild: "e-has-child",
  view: "e-view",
  header: "e-list-header",
  headerText: "e-headertext",
  headerTemplateText: "e-headertemplate-text",
  text: "e-text",
  disable: "e-disabled",
  content: "e-content",
  icon: "e-icons",
  backIcon: "e-icon-back",
  checkboxWrapper: "e-checkbox-wrapper",
  checkbox: "e-checkbox",
  checked: "e-check",
  checklist: "e-checklist",
  checkboxIcon: "e-frame",
  checkboxRight: "e-checkbox-right",
  checkboxLeft: "e-checkbox-left",
  listviewCheckbox: "e-listview-checkbox",
  itemCheckList: "e-checklist",
  virtualElementContainer: "e-list-virtualcontainer"
};
var LISTVIEW_TEMPLATE_PROPERTY = "Template";
var LISTVIEW_GROUPTEMPLATE_PROPERTY = "GroupTemplate";
var LISTVIEW_HEADERTEMPLATE_PROPERTY = "HeaderTemplate";
var swipeVelocity = 0.5;
var FieldSettings = (
  /** @class */
  function(_super) {
    __extends31(FieldSettings2, _super);
    function FieldSettings2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate29([
      Property("id")
    ], FieldSettings2.prototype, "id", void 0);
    __decorate29([
      Property("text")
    ], FieldSettings2.prototype, "text", void 0);
    __decorate29([
      Property("isChecked")
    ], FieldSettings2.prototype, "isChecked", void 0);
    __decorate29([
      Property("isVisible")
    ], FieldSettings2.prototype, "isVisible", void 0);
    __decorate29([
      Property("enabled")
    ], FieldSettings2.prototype, "enabled", void 0);
    __decorate29([
      Property("iconCss")
    ], FieldSettings2.prototype, "iconCss", void 0);
    __decorate29([
      Property("child")
    ], FieldSettings2.prototype, "child", void 0);
    __decorate29([
      Property("tooltip")
    ], FieldSettings2.prototype, "tooltip", void 0);
    __decorate29([
      Property("groupBy")
    ], FieldSettings2.prototype, "groupBy", void 0);
    __decorate29([
      Property("text")
    ], FieldSettings2.prototype, "sortBy", void 0);
    __decorate29([
      Property("htmlAttributes")
    ], FieldSettings2.prototype, "htmlAttributes", void 0);
    __decorate29([
      Property("tableName")
    ], FieldSettings2.prototype, "tableName", void 0);
    return FieldSettings2;
  }(ChildProperty)
);
var ListView = (
  /** @class */
  function(_super) {
    __extends31(ListView2, _super);
    function ListView2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.previousSelectedItems = [];
      _this.hiddenItems = [];
      _this.enabledItems = [];
      _this.disabledItems = [];
      return _this;
    }
    ListView2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "htmlAttributes":
            this.setHTMLAttribute();
            break;
          case "cssClass":
            this.setCSSClass(oldProp.cssClass);
            break;
          case "enable":
            this.setEnable();
            break;
          case "width":
          case "height":
            this.setSize();
            break;
          case "enableRtl":
            this.setEnableRTL();
            break;
          case "fields":
            this.listBaseOption.fields = this.fields.properties;
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "headerTitle":
            if (!this.curDSLevel.length) {
              this.header(this.headerTitle, false, "header");
            }
            break;
          case "query":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "showHeader":
            this.header(this.headerTitle, false, "header");
            break;
          case "enableVirtualization":
            if (!isNullOrUndefined(this.contentContainer)) {
              detach(this.contentContainer);
            }
            this.refresh();
            break;
          case "showCheckBox":
          case "checkBoxPosition":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.setCheckbox();
            }
            break;
          case "dataSource":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.reRender();
            }
            break;
          case "sortOrder":
          case "template":
            if (!this.enableVirtualization) {
              this.refresh();
            }
            break;
          case "showIcon":
            if (this.enableVirtualization) {
              this.virtualizationModule.reRenderUiVirtualization();
            } else {
              this.listBaseOption.showIcon = this.showIcon;
              this.curViewDS = this.getSubDS();
              this.resetCurrentList();
            }
            break;
          default:
            break;
        }
      }
    };
    ListView2.prototype.setHTMLAttribute = function() {
      if (Object.keys(this.htmlAttributes).length) {
        attributes(this.element, this.htmlAttributes);
      }
    };
    ListView2.prototype.setCSSClass = function(oldCSSClass) {
      if (this.cssClass) {
        addClass([this.element], this.cssClass.split(" ").filter(function(css) {
          return css;
        }));
      }
      if (oldCSSClass) {
        removeClass([this.element], oldCSSClass.split(" ").filter(function(css) {
          return css;
        }));
      }
    };
    ListView2.prototype.setSize = function() {
      this.element.style.height = formatUnit(this.height);
      this.element.style.width = formatUnit(this.width);
      this.isWindow = this.element.clientHeight ? false : true;
    };
    ListView2.prototype.setEnable = function() {
      this.enableElement(this.element, this.enable);
    };
    ListView2.prototype.setEnableRTL = function() {
      if (this.enableRtl) {
        this.element.classList.add("e-rtl");
      } else {
        this.element.classList.remove("e-rtl");
      }
    };
    ListView2.prototype.enableElement = function(element2, isEnabled) {
      if (isEnabled) {
        element2.classList.remove(classNames4.disable);
      } else {
        element2.classList.add(classNames4.disable);
      }
    };
    ListView2.prototype.header = function(text, showBack, prop) {
      if (this.headerEle === void 0 && this.showHeader) {
        if (this.enableHtmlSanitizer) {
          this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);
        }
        this.headerEle = this.createElement("div", { className: classNames4.header });
        var innerHeaderEle = this.createElement("span", { className: classNames4.headerText, innerHTML: this.headerTitle });
        var textEle = this.createElement("div", { className: classNames4.text, innerHTML: innerHeaderEle.outerHTML });
        var hedBackButton = this.createElement("div", {
          className: classNames4.icon + " " + classNames4.backIcon + " e-but-back",
          attrs: { style: "display:none;" }
        });
        this.headerEle.appendChild(hedBackButton);
        this.headerEle.appendChild(textEle);
        if (this.headerTemplate) {
          var compiledString = compile2(this.headerTemplate);
          var headerTemplateEle = this.createElement("div", { className: classNames4.headerTemplateText });
          var compiledElement = compiledString({}, this, prop, this.LISTVIEW_HEADERTEMPLATE_ID, null, null, this.headerEle);
          if (compiledElement) {
            append(compiledElement, headerTemplateEle);
          }
          append([headerTemplateEle], this.headerEle);
          if (this.isReact) {
            this.renderReactTemplates();
          }
        }
        if (this.headerTemplate && this.headerTitle) {
          textEle.classList.add("header");
        }
        this.element.classList.add("e-has-header");
        prepend([this.headerEle], this.element);
      } else if (this.headerEle) {
        if (this.showHeader) {
          this.headerEle.style.display = "";
          var textEle = this.headerEle.querySelector("." + classNames4.headerText);
          var hedBackButton = this.headerEle.querySelector("." + classNames4.backIcon);
          if (this.enableHtmlSanitizer) {
            text = SanitizeHtmlHelper.sanitize(text);
          }
          textEle.innerHTML = text;
          if (this.headerTemplate && showBack) {
            textEle.parentElement.classList.remove("header");
            this.headerEle.querySelector("." + classNames4.headerTemplateText).classList.add("nested-header");
          }
          if (this.headerTemplate && !showBack) {
            textEle.parentElement.classList.add("header");
            this.headerEle.querySelector("." + classNames4.headerTemplateText).classList.remove("nested-header");
            this.headerEle.querySelector("." + classNames4.headerTemplateText).classList.add("header");
          }
          if (showBack === true) {
            hedBackButton.style.display = "";
          } else {
            hedBackButton.style.display = "none";
          }
        } else {
          this.headerEle.style.display = "none";
        }
      }
    };
    ListView2.prototype.switchView = function(fromView, toView, reverse) {
      var _this = this;
      if (fromView && toView) {
        var fPos_1 = fromView.style.position;
        var overflow_1 = this.element.style.overflow !== "hidden" ? this.element.style.overflow : "";
        fromView.style.position = "absolute";
        fromView.classList.add("e-view");
        var anim = void 0;
        var duration = this.animation.duration;
        if (this.animation.effect) {
          anim = this.enableRtl ? effectsRTLConfig[this.animation.effect] : effectsConfig[this.animation.effect];
        } else {
          var slideLeft = "SlideLeft";
          anim = effectsConfig[slideLeft];
          reverse = this.enableRtl;
          duration = 0;
        }
        this.element.style.overflow = "hidden";
        this.aniObj.animate(fromView, {
          name: reverse === true ? anim[0] : anim[1],
          duration,
          timingFunction: this.animation.easing,
          // eslint-disable-next-line
          end: function(model) {
            fromView.style.display = "none";
            _this.element.style.overflow = overflow_1;
            fromView.style.position = fPos_1;
            fromView.classList.remove("e-view");
          }
        });
        toView.style.display = "";
        this.aniObj.animate(toView, {
          name: reverse === true ? anim[2] : anim[3],
          duration,
          timingFunction: this.animation.easing,
          end: function() {
            _this.trigger("actionComplete");
          }
        });
        this.curUL = toView;
      }
    };
    ListView2.prototype.preRender = function() {
      if (this.template) {
        try {
          if (document.querySelectorAll(this.template).length) {
            this.setProperties({ template: document.querySelector(this.template).innerHTML.trim() }, true);
          }
        } catch (e) {
          compile2(this.template);
        }
      }
      this.listBaseOption = {
        template: this.template,
        headerTemplate: this.headerTemplate,
        groupTemplate: this.groupTemplate,
        expandCollapse: true,
        listClass: "",
        ariaAttributes: {
          itemRole: "option",
          listRole: "presentation",
          itemText: "",
          groupItemRole: "group",
          wrapperRole: "presentation"
        },
        // eslint-disable-next-line
        fields: this.fields.properties,
        sortOrder: this.sortOrder,
        showIcon: this.showIcon,
        itemCreated: this.renderCheckbox.bind(this),
        templateID: "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY,
        groupTemplateID: "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY,
        enableHtmlSanitizer: this.enableHtmlSanitizer
      };
      this.initialization();
    };
    ListView2.prototype.initialization = function() {
      this.curDSLevel = [];
      this.animateOptions = {};
      this.curViewDS = [];
      this.currentLiElements = [];
      this.isNestedList = false;
      this.selectedData = [];
      this.selectedId = [];
      this.LISTVIEW_TEMPLATE_ID = "" + this.element.id + LISTVIEW_TEMPLATE_PROPERTY;
      this.LISTVIEW_GROUPTEMPLATE_ID = "" + this.element.id + LISTVIEW_GROUPTEMPLATE_PROPERTY;
      this.LISTVIEW_HEADERTEMPLATE_ID = "" + this.element.id + LISTVIEW_HEADERTEMPLATE_PROPERTY;
      this.aniObj = new Animation(this.animateOptions);
      this.removeElement(this.curUL);
      this.removeElement(this.ulElement);
      this.removeElement(this.headerEle);
      this.removeElement(this.contentContainer);
      this.curUL = this.ulElement = this.liCollection = this.headerEle = this.contentContainer = void 0;
    };
    ListView2.prototype.renderCheckbox = function(args) {
      if (args.item.classList.contains(classNames4.hasChild)) {
        this.isNestedList = true;
      }
      if (this.showCheckBox && this.isValidLI(args.item)) {
        var checkboxElement = void 0;
        var fieldData = void 0;
        checkboxElement = createCheckBox(this.createElement, false, {
          checked: false,
          enableRtl: this.enableRtl,
          cssClass: classNames4.listviewCheckbox
        });
        checkboxElement.setAttribute("role", "checkbox");
        var frameElement_1 = checkboxElement.querySelector("." + classNames4.checkboxIcon);
        args.item.classList.add(classNames4.itemCheckList);
        args.item.firstElementChild.classList.add(classNames4.checkbox);
        if (typeof this.dataSource[0] !== "string" && typeof this.dataSource[0] !== "number") {
          fieldData = getFieldValues(args.curData, this.listBaseOption.fields);
          if (fieldData[this.listBaseOption.fields.isChecked]) {
            this.checkInternally(args, checkboxElement);
          }
        } else if ((typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number") && this.selectedData.indexOf(args.text) !== -1) {
          this.checkInternally(args, checkboxElement);
        }
        checkboxElement.setAttribute("aria-checked", frameElement_1.classList.contains(classNames4.checked) ? "true" : "false");
        if (this.checkBoxPosition === "Left") {
          checkboxElement.classList.add(classNames4.checkboxLeft);
          args.item.firstElementChild.classList.add(classNames4.checkboxLeft);
          args.item.firstElementChild.insertBefore(checkboxElement, args.item.firstElementChild.childNodes[0]);
        } else {
          checkboxElement.classList.add(classNames4.checkboxRight);
          args.item.firstElementChild.classList.add(classNames4.checkboxRight);
          args.item.firstElementChild.appendChild(checkboxElement);
        }
        this.currentLiElements.push(args.item);
        if (this.checkBoxPosition === "Left") {
          this.virtualCheckBox = args.item.firstElementChild.children[0];
        } else {
          this.virtualCheckBox = args.item.firstElementChild.lastElementChild;
        }
      }
    };
    ListView2.prototype.checkInternally = function(args, checkboxElement) {
      args.item.classList.add(classNames4.selected);
      args.item.setAttribute("aria-selected", "true");
      checkboxElement.querySelector("." + classNames4.checkboxIcon).classList.add(classNames4.checked);
      checkboxElement.setAttribute("aria-checked", "true");
    };
    ListView2.prototype.checkItem = function(item) {
      this.toggleCheckBase(item, true);
    };
    ListView2.prototype.toggleCheckBase = function(item, checked) {
      if (this.showCheckBox) {
        var liElement = item;
        if (item instanceof Object && item.constructor !== HTMLLIElement) {
          liElement = this.getLiFromObjOrElement(item);
        }
        if (!isNullOrUndefined(liElement)) {
          var checkboxIcon = liElement.querySelector("." + classNames4.checkboxIcon);
          if (checked === true) {
            liElement.classList.add(classNames4.selected);
          } else {
            liElement.classList.remove(classNames4.selected);
          }
          liElement.setAttribute("aria-selected", checked ? "true" : "false");
          if (checked === true) {
            checkboxIcon.classList.add(classNames4.checked);
          } else {
            checkboxIcon.classList.remove(classNames4.checked);
          }
          checkboxIcon.parentElement.setAttribute("aria-checked", checked ? "true" : "false");
        }
        this.setSelectedItemData(liElement);
      }
    };
    ListView2.prototype.uncheckItem = function(item) {
      this.toggleCheckBase(item, false);
    };
    ListView2.prototype.checkAllItems = function() {
      this.toggleAllCheckBase(true);
    };
    ListView2.prototype.uncheckAllItems = function() {
      this.toggleAllCheckBase(false);
    };
    ListView2.prototype.toggleAllCheckBase = function(checked) {
      if (this.showCheckBox) {
        for (var i = 0; i < this.liCollection.length; i++) {
          var checkIcon = this.liCollection[i].querySelector("." + classNames4.checkboxIcon);
          if (checkIcon) {
            if (checked) {
              if (!checkIcon.classList.contains(classNames4.checked)) {
                this.checkItem(this.liCollection[i]);
              }
            } else {
              if (checkIcon.classList.contains(classNames4.checked)) {
                this.uncheckItem(this.liCollection[i]);
              }
            }
          }
        }
        if (this.enableVirtualization) {
          this.virtualizationModule.checkedItem(checked);
        }
      }
    };
    ListView2.prototype.setCheckbox = function() {
      if (this.showCheckBox) {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames4.listItem));
        var args = {
          item: void 0,
          curData: void 0,
          dataSource: void 0,
          fields: void 0,
          options: void 0,
          text: ""
        };
        for (var i = 0; i < liCollection.length; i++) {
          var element2 = liCollection[i];
          args.item = element2;
          args.curData = this.getItemData(element2);
          if (element2.querySelector("." + classNames4.checkboxWrapper)) {
            this.removeElement(element2.querySelector("." + classNames4.checkboxWrapper));
          }
          this.renderCheckbox(args);
          if (args.item.classList.contains(classNames4.selected)) {
            this.checkInternally(args, args.item.querySelector("." + classNames4.checkboxWrapper));
          }
        }
      } else {
        var liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames4.itemCheckList));
        for (var i = 0; i < liCollection.length; i++) {
          var element2 = liCollection[i];
          element2.classList.remove(classNames4.selected);
          element2.firstElementChild.classList.remove(classNames4.checkbox);
          this.removeElement(element2.querySelector("." + classNames4.checkboxWrapper));
        }
        if (this.selectedItems) {
          this.selectedItems.item.classList.add(classNames4.selected);
        }
      }
    };
    ListView2.prototype.refreshItemHeight = function() {
      if (this.virtualizationModule) {
        this.virtualizationModule.refreshItemHeight();
      }
    };
    ListView2.prototype.clickHandler = function(e) {
      var target = e.target;
      var classList2 = target.classList;
      var closestElement;
      if (classList2.contains(classNames4.backIcon) || classList2.contains(classNames4.headerText)) {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }
        this.back();
      } else {
        var li = closest(target.parentNode, "." + classNames4.listItem);
        if (li === null) {
          li = target;
        }
        this.removeFocus();
        if (this.enable && this.showCheckBox && this.isValidLI(li)) {
          if (e.target.classList.contains(classNames4.checkboxIcon)) {
            li.classList.add(classNames4.focused);
            if (isNullOrUndefined(li.querySelector("." + classNames4.checked))) {
              var args = {
                curData: void 0,
                dataSource: void 0,
                fields: void 0,
                options: void 0,
                text: void 0,
                item: li
              };
              this.checkInternally(args, args.item.querySelector("." + classNames4.checkboxWrapper));
            } else {
              this.uncheckItem(li);
              li.classList.add(classNames4.focused);
            }
            if (this.enableVirtualization) {
              this.virtualizationModule.setCheckboxLI(li, e);
            }
            if (e) {
              var eventArgs = this.selectEventData(li, e);
              var checkIcon = li.querySelector("." + classNames4.checkboxIcon);
              merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames4.checked) });
              this.trigger("select", eventArgs);
            }
          } else if (li.classList.contains(classNames4.hasChild)) {
            this.removeHover();
            this.removeSelect();
            this.removeSelect(li);
            this.setSelectLI(li, e);
            li.classList.remove(classNames4.selected);
          } else {
            this.setCheckboxLI(li, e);
          }
        } else {
          this.setSelectLI(li, e);
        }
        closestElement = closest(e.target, "li");
        if (!isNullOrUndefined(closestElement)) {
          if (closestElement.classList.contains("e-has-child") && !e.target.parentElement.classList.contains("e-listview-checkbox")) {
            closestElement.classList.add(classNames4.disable);
          }
        }
      }
    };
    ListView2.prototype.removeElement = function(element2) {
      return element2 && element2.parentNode && element2.parentNode.removeChild(element2);
    };
    ListView2.prototype.hoverHandler = function(e) {
      var curLi = closest(e.target.parentNode, "." + classNames4.listItem);
      this.setHoverLI(curLi);
    };
    ListView2.prototype.leaveHandler = function(e) {
      this.removeHover();
    };
    ListView2.prototype.homeKeyHandler = function(e, end) {
      if (Object.keys(this.dataSource).length && this.curUL) {
        if (this.selectedItems) {
          this.selectedItems.item.setAttribute("aria-selected", "false");
        }
        var li = this.curUL.querySelectorAll("." + classNames4.listItem);
        var focusedElement = this.curUL.querySelector("." + classNames4.focused) || this.curUL.querySelector("." + classNames4.selected);
        if (focusedElement) {
          focusedElement.classList.remove(classNames4.focused);
          if (!this.showCheckBox) {
            focusedElement.classList.remove(classNames4.selected);
          }
        }
        var index = !end ? 0 : li.length - 1;
        if (li[index].classList.contains(classNames4.hasChild) || this.showCheckBox) {
          li[index].classList.add(classNames4.focused);
        } else {
          this.setSelectLI(li[index], e);
        }
        if (li[index]) {
          this.element.setAttribute("aria-activedescendant", li[index].id.toString());
        } else {
          this.element.removeAttribute("aria-activedescendant");
        }
      }
    };
    ListView2.prototype.onArrowKeyDown = function(e, prev) {
      var siblingLI;
      var li;
      var hasChild = !isNullOrUndefined(this.curUL.querySelector("." + classNames4.hasChild)) ? true : false;
      if (hasChild || this.showCheckBox) {
        li = this.curUL.querySelector("." + classNames4.focused) || this.curUL.querySelector("." + classNames4.selected);
        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames4.listItem), li, prev);
        if (!isNullOrUndefined(siblingLI)) {
          if (li) {
            li.classList.remove(classNames4.focused);
            if (!this.showCheckBox) {
              li.classList.remove(classNames4.selected);
            }
          }
          if (siblingLI.classList.contains(classNames4.hasChild) || this.showCheckBox) {
            siblingLI.classList.add(classNames4.focused);
          } else {
            this.setSelectLI(siblingLI, e);
          }
        }
      } else {
        li = this.curUL.querySelector("." + classNames4.selected);
        siblingLI = ListBase.getSiblingLI(this.curUL.querySelectorAll("." + classNames4.listItem), li, prev);
        this.setSelectLI(siblingLI, e);
      }
      if (siblingLI) {
        this.element.setAttribute("aria-activedescendant", siblingLI.id.toString());
      } else {
        this.element.removeAttribute("aria-activedescendant");
      }
      return siblingLI;
    };
    ListView2.prototype.arrowKeyHandler = function(e, prev) {
      var _this = this;
      e.preventDefault();
      if (Object.keys(this.dataSource).length && this.curUL) {
        var siblingLI = this.onArrowKeyDown(e, prev);
        var elementTop = this.element.getBoundingClientRect().top;
        var elementHeight = this.element.getBoundingClientRect().height;
        var firstItemBounds = this.curUL.querySelector("." + classNames4.listItem).getBoundingClientRect();
        var heightDiff = void 0;
        var groupItemBounds = void 0;
        if (this.fields.groupBy) {
          groupItemBounds = this.curUL.querySelector("." + classNames4.groupListItem).getBoundingClientRect();
        }
        if (siblingLI) {
          var siblingTop = siblingLI.getBoundingClientRect().top;
          var siblingHeight = siblingLI.getBoundingClientRect().height;
          if (!prev) {
            var height = this.isWindow ? window.innerHeight : elementHeight;
            heightDiff = this.isWindow ? siblingTop + siblingHeight : siblingTop - elementTop + siblingHeight;
            if (heightDiff > height) {
              if (this.isWindow === true) {
                window.scroll(0, pageYOffset + (heightDiff - height));
              } else {
                this.element.scrollTop = this.element.scrollTop + (heightDiff - height);
              }
            }
          } else {
            heightDiff = this.isWindow ? siblingTop : siblingTop - elementTop;
            if (heightDiff < 0) {
              if (this.isWindow === true) {
                window.scroll(0, pageYOffset + heightDiff);
              } else {
                this.element.scrollTop = this.element.scrollTop + heightDiff;
              }
            }
          }
        } else if (this.enableVirtualization && prev && this.virtualizationModule.uiFirstIndex) {
          this.onUIScrolled = function() {
            _this.onArrowKeyDown(e, prev);
            _this.onUIScrolled = void 0;
          };
          heightDiff = this.virtualizationModule.listItemHeight;
          if (this.isWindow === true) {
            window.scroll(0, pageYOffset - heightDiff);
          } else {
            this.element.scrollTop = this.element.scrollTop - heightDiff;
          }
        } else if (prev) {
          if (this.showHeader && this.headerEle) {
            var topHeight = groupItemBounds ? groupItemBounds.top : firstItemBounds.top;
            var headerBounds = this.headerEle.getBoundingClientRect();
            heightDiff = headerBounds.top < 0 ? headerBounds.height - topHeight : 0;
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset - heightDiff);
            } else {
              this.element.scrollTop = 0;
            }
          } else if (this.fields.groupBy) {
            heightDiff = this.isWindow ? groupItemBounds.top < 0 ? groupItemBounds.top : 0 : elementTop - firstItemBounds.top + groupItemBounds.height;
            if (this.isWindow === true) {
              window.scroll(0, pageYOffset + heightDiff);
            } else {
              this.element.scrollTop = this.element.scrollTop - heightDiff;
            }
          }
        }
      }
    };
    ListView2.prototype.enterKeyHandler = function(e) {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var hasChild = !isNullOrUndefined(this.curUL.querySelector("." + classNames4.hasChild)) ? true : false;
        var li = this.curUL.querySelector("." + classNames4.focused);
        if (hasChild && li) {
          li.classList.remove(classNames4.focused);
          if (this.showCheckBox) {
            this.removeSelect();
            this.removeSelect(li);
            this.removeHover();
          }
          this.setSelectLI(li, e);
        }
      }
    };
    ListView2.prototype.spaceKeyHandler = function(e) {
      if (this.enable && this.showCheckBox && Object.keys(this.dataSource).length && this.curUL) {
        var li = this.curUL.querySelector("." + classNames4.focused);
        var checkboxElement = void 0;
        var checkIcon = void 0;
        if (!isNullOrUndefined(li) && isNullOrUndefined(li.querySelector("." + classNames4.checked))) {
          var args = {
            curData: void 0,
            dataSource: void 0,
            fields: void 0,
            options: void 0,
            text: void 0,
            item: li
          };
          checkboxElement = args.item.querySelector("." + classNames4.checkboxWrapper);
          this.checkInternally(args, checkboxElement);
          checkIcon = checkboxElement.querySelector("." + classNames4.checkboxIcon + "." + classNames4.icon);
        } else {
          this.uncheckItem(li);
        }
        var eventArgs = this.selectEventData(li, e);
        merge(eventArgs, { isChecked: checkIcon ? checkIcon.classList.contains(classNames4.checked) : false });
        this.trigger("select", eventArgs);
      }
    };
    ListView2.prototype.keyActionHandler = function(e) {
      switch (e.keyCode) {
        case 36:
          this.homeKeyHandler(e);
          break;
        case 35:
          this.homeKeyHandler(e, true);
          break;
        case 40:
          this.arrowKeyHandler(e);
          break;
        case 38:
          this.arrowKeyHandler(e, true);
          break;
        case 13:
          this.enterKeyHandler(e);
          break;
        case 8:
          if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
            this.uncheckAllItems();
          }
          this.back();
          break;
        case 32:
          this.spaceKeyHandler(e);
          break;
      }
    };
    ListView2.prototype.swipeActionHandler = function(e) {
      if (e.swipeDirection === "Right" && e.velocity > swipeVelocity && e.originalEvent.type === "touchend") {
        if (this.showCheckBox && this.curDSLevel[this.curDSLevel.length - 1]) {
          this.uncheckAllItems();
        }
        this.back();
      }
    };
    ListView2.prototype.focusout = function() {
      if (Object.keys(this.dataSource).length && this.curUL) {
        var focusedElement = this.curUL.querySelector("." + classNames4.focused);
        var activeElement = this.curUL.querySelector("[aria-selected = true]");
        if (focusedElement) {
          focusedElement.classList.remove(classNames4.focused);
          if (activeElement && !this.showCheckBox) {
            activeElement.classList.add(classNames4.selected);
          }
        }
      }
    };
    ListView2.prototype.wireEvents = function() {
      EventHandler.add(this.element, "keydown", this.keyActionHandler, this);
      EventHandler.add(this.element, "click", this.clickHandler, this);
      EventHandler.add(this.element, "mouseover", this.hoverHandler, this);
      EventHandler.add(this.element, "mouseout", this.leaveHandler, this);
      EventHandler.add(this.element, "focusout", this.focusout, this);
      this.touchModule = new Touch(this.element, { swipe: this.swipeActionHandler.bind(this) });
    };
    ListView2.prototype.unWireEvents = function() {
      EventHandler.remove(this.element, "click", this.clickHandler);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "mouseout", this.leaveHandler);
      EventHandler.remove(this.element, "mouseover", this.hoverHandler);
      EventHandler.remove(this.element, "mouseout", this.leaveHandler);
      this.touchModule.destroy();
    };
    ListView2.prototype.removeFocus = function() {
      var focusedLI = this.element.querySelectorAll("." + classNames4.focused);
      for (var _i = 0, focusedLI_1 = focusedLI; _i < focusedLI_1.length; _i++) {
        var ele = focusedLI_1[_i];
        ele.classList.remove(classNames4.focused);
      }
    };
    ListView2.prototype.removeHover = function() {
      var hoverLI = this.element.querySelector("." + classNames4.hover);
      if (hoverLI) {
        hoverLI.classList.remove(classNames4.hover);
      }
    };
    ListView2.prototype.removeSelect = function(li) {
      if (isNullOrUndefined(li)) {
        var selectedLI = this.element.querySelectorAll("." + classNames4.selected);
        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {
          var ele = selectedLI_1[_i];
          if (this.showCheckBox && ele.querySelector("." + classNames4.checked)) {
            continue;
          } else {
            ele.setAttribute("aria-selected", "false");
            ele.classList.remove(classNames4.selected);
          }
        }
      } else {
        li.classList.remove(classNames4.selected);
        li.setAttribute("aria-selected", "false");
      }
    };
    ListView2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(classNames4.listItem) && !li.classList.contains(classNames4.groupListItem) && !li.classList.contains(classNames4.disable);
    };
    ListView2.prototype.setCheckboxLI = function(li, e) {
      if (this.isValidLI(li) && this.enable && this.showCheckBox) {
        if (this.curUL.querySelector("." + classNames4.focused)) {
          this.curUL.querySelector("." + classNames4.focused).classList.remove(classNames4.focused);
        }
        li.classList.add(classNames4.focused);
        var checkboxElement = li.querySelector("." + classNames4.checkboxWrapper);
        var checkIcon = checkboxElement.querySelector("." + classNames4.checkboxIcon + "." + classNames4.icon);
        this.removeHover();
        if (!checkIcon.classList.contains(classNames4.checked)) {
          checkIcon.classList.add(classNames4.checked);
          li.classList.add(classNames4.selected);
          li.setAttribute("aria-selected", "true");
        } else {
          checkIcon.classList.remove(classNames4.checked);
          li.classList.remove(classNames4.selected);
          li.setAttribute("aria-selected", "false");
        }
        checkboxElement.setAttribute("aria-checked", checkIcon.classList.contains(classNames4.checked) ? "true" : "false");
        var eventArgs = this.selectEventData(li, e);
        merge(eventArgs, { isChecked: checkIcon.classList.contains(classNames4.checked) });
        if (this.enableVirtualization) {
          this.virtualizationModule.setCheckboxLI(li, e);
        }
        this.trigger("select", eventArgs);
        this.setSelectedItemData(li);
        this.renderSubList(li);
      }
    };
    ListView2.prototype.selectEventData = function(li, e) {
      var data = this.getItemData(li);
      var fieldData = getFieldValues(data, this.listBaseOption.fields);
      var selectedItem;
      if (!isNullOrUndefined(data) && typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number") {
        selectedItem = { item: li, text: li && li.innerText.trim(), data: this.dataSource };
      } else {
        selectedItem = // eslint-disable-next-line
        {
          item: li,
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          // eslint-disable-next-line
          data
        };
      }
      var eventArgs = {};
      merge(eventArgs, selectedItem);
      if (e) {
        merge(eventArgs, { isInteracted: true, event: e, index: this.curUL && Array.prototype.indexOf.call(this.curUL.children, li) });
      }
      return eventArgs;
    };
    ListView2.prototype.setSelectedItemData = function(li) {
      var data = this.getItemData(li);
      var fieldData = getFieldValues(data, this.listBaseOption.fields);
      if (!isNullOrUndefined(data) && (typeof this.dataSource[0] === "string" || typeof this.dataSource[0] === "number")) {
        this.selectedItems = {
          item: li,
          text: li && li.innerText.trim(),
          data: this.dataSource
        };
      } else {
        this.selectedItems = {
          item: li,
          // eslint-disable-next-line
          text: fieldData && fieldData[this.listBaseOption.fields.text],
          // eslint-disable-next-line
          data
        };
      }
    };
    ListView2.prototype.setSelectLI = function(li, e) {
      if (this.isValidLI(li) && !li.classList.contains(classNames4.selected) && this.enable) {
        if (!this.showCheckBox) {
          this.removeSelect();
        }
        li.classList.add(classNames4.selected);
        li.setAttribute("aria-selected", "true");
        this.removeHover();
        this.setSelectedItemData(li);
        if (this.enableVirtualization) {
          this.virtualizationModule.setSelectLI(li, e);
        }
        var eventArgs = this.selectEventData(li, e);
        this.trigger("select", eventArgs);
        this.selectedLI = li;
        this.renderSubList(li);
      }
    };
    ListView2.prototype.setHoverLI = function(li) {
      if (this.isValidLI(li) && !li.classList.contains(classNames4.hover) && this.enable) {
        var lastLi = this.element.querySelectorAll("." + classNames4.hover);
        if (lastLi && lastLi.length) {
          removeClass(lastLi, classNames4.hover);
        }
        if (!li.classList.contains(classNames4.selected) || this.showCheckBox) {
          li.classList.add(classNames4.hover);
        }
      }
    };
    ListView2.prototype.getSubDS = function() {
      var levelKeys = this.curDSLevel;
      if (levelKeys.length) {
        var ds = this.localData;
        for (var _i = 0, levelKeys_1 = levelKeys; _i < levelKeys_1.length; _i++) {
          var key = levelKeys_1[_i];
          var field = {};
          field[this.fields.id] = key;
          this.curDSJSON = this.findItemFromDS(ds, field);
          var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
          ds = this.curDSJSON ? fieldData[this.fields.child] : ds;
        }
        return ds;
      }
      return this.localData;
    };
    ListView2.prototype.getItemData = function(li) {
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      var fields = this.getElementUID(li);
      var curDS;
      if (isNullOrUndefined(this.element.querySelector("." + classNames4.hasChild)) && this.fields.groupBy) {
        curDS = this.curViewDS;
      } else {
        curDS = dataSource;
      }
      return this.findItemFromDS(curDS, fields);
    };
    ListView2.prototype.findItemFromDS = function(dataSource, fields, parent) {
      var _this = this;
      var resultJSON;
      if (dataSource && dataSource.length && fields) {
        dataSource.some(function(data) {
          var fieldData = (
            // eslint-disable-next-line
            getFieldValues(data, _this.listBaseOption.fields)
          );
          if ((fields[_this.fields.id] || fields[_this.fields.text]) && (!fields[_this.fields.id] || (!isNullOrUndefined(fieldData[_this.fields.id]) && fieldData[_this.fields.id].toString()) === fields[_this.fields.id].toString()) && (!fields[_this.fields.text] || fieldData[_this.fields.text] === fields[_this.fields.text])) {
            resultJSON = parent ? dataSource : data;
          } else if (typeof data !== "object" && dataSource.indexOf(data) !== -1) {
            resultJSON = parent ? dataSource : data;
          } else if (!isNullOrUndefined(fields[_this.fields.id]) && isNullOrUndefined(fieldData[_this.fields.id])) {
            var li = _this.element.querySelector('[data-uid="' + fields[_this.fields.id] + '"]');
            if (li && li.innerText.trim() === fieldData[_this.fields.text]) {
              resultJSON = data;
            }
          } else if (fieldData.hasOwnProperty(_this.fields.child) && fieldData[_this.fields.child].length) {
            resultJSON = _this.findItemFromDS(fieldData[_this.fields.child], fields, parent);
          }
          return !!resultJSON;
        });
      } else {
        resultJSON = dataSource;
      }
      return resultJSON;
    };
    ListView2.prototype.getQuery = function() {
      var columns = [];
      var query = this.query ? this.query : new Query();
      if (!this.query) {
        for (var _i = 0, _a = Object.keys(this.fields.properties); _i < _a.length; _i++) {
          var column = _a[_i];
          if (column !== "tableName" && !!this.fields[column] && this.fields[column] !== ListBase.defaultMappedFields[column] && columns.indexOf(this.fields[column]) === -1) {
            columns.push(this.fields[column]);
          }
        }
        query.select(columns);
        if (this.fields.properties.hasOwnProperty("tableName")) {
          query.from(this.fields.tableName);
        }
      }
      return query;
    };
    ListView2.prototype.setViewDataSource = function(dataSource) {
      if (dataSource === void 0) {
        dataSource = this.localData;
      }
      if (dataSource && this.fields.groupBy) {
        if (this.sortOrder !== "None") {
          this.curViewDS = ListBase.groupDataSource(ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, isNullOrUndefined(this.fields.sortBy) ? this.fields.text : this.fields.sortBy)), this.listBaseOption.fields, this.sortOrder);
        } else {
          this.curViewDS = ListBase.groupDataSource(dataSource, this.listBaseOption.fields, this.sortOrder);
        }
      } else if (dataSource && this.sortOrder !== "None") {
        this.curViewDS = ListBase.getDataSource(dataSource, ListBase.addSorting(this.sortOrder, isNullOrUndefined(this.fields.sortBy) ? this.fields.text : this.fields.sortBy));
      } else {
        this.curViewDS = dataSource;
      }
    };
    ListView2.prototype.isInAnimation = function() {
      return this.curUL.classList.contains(".e-animate");
    };
    ListView2.prototype.renderRemoteLists = function(e, listViewComponent) {
      if (this.isDestroyed) {
        return;
      }
      this.localData = e.result;
      listViewComponent.removeElement(listViewComponent.contentContainer);
      this.renderList();
      this.trigger("actionComplete", e);
    };
    ListView2.prototype.triggerActionFailure = function(e) {
      if (this.isDestroyed) {
        return;
      }
      this.trigger("actionFailure", e);
    };
    ListView2.prototype.setLocalData = function() {
      var _this = this;
      this.trigger("actionBegin");
      var listViewComponent = this;
      if (this.dataSource instanceof DataManager) {
        if (this.dataSource.ready) {
          this.dataSource.ready.then(function(e) {
            _this.isOffline = _this.dataSource.dataSource.offline;
            if (_this.dataSource instanceof DataManager && _this.isOffline) {
              _this.renderRemoteLists(e, listViewComponent);
            }
          }).catch(function(e) {
            _this.triggerActionFailure(e);
          });
        } else {
          this.dataSource.executeQuery(this.getQuery()).then(function(e) {
            _this.renderRemoteLists(e, listViewComponent);
          }).catch(function(e) {
            _this.triggerActionFailure(e);
          });
        }
      } else if (!this.dataSource || !this.dataSource.length) {
        var ul = this.element.querySelector("ul");
        if (ul) {
          remove(ul);
          this.setProperties({ dataSource: ListBase.createJsonFromElement(ul) }, true);
          this.localData = this.dataSource;
          this.renderList();
          this.trigger("actionComplete", { data: this.localData });
        }
      } else {
        this.localData = this.dataSource;
        this.renderList();
        this.trigger("actionComplete", { data: this.localData });
      }
    };
    ListView2.prototype.reRender = function() {
      this.removeElement(this.headerEle);
      this.removeElement(this.ulElement);
      this.removeElement(this.contentContainer);
      if (this.isReact) {
        this.clearTemplate();
      }
      if (Object.keys(window).indexOf("ejsInterop") === -1) {
        this.element.innerHTML = "";
      }
      this.headerEle = this.ulElement = this.liCollection = void 0;
      this.header();
      this.setLocalData();
    };
    ListView2.prototype.resetCurrentList = function() {
      this.setViewDataSource(this.curViewDS);
      this.contentContainer.innerHTML = "";
      this.createList();
      this.renderIntoDom(this.curUL);
    };
    ListView2.prototype.setAttributes = function(liElements) {
      for (var i = 0; i < liElements.length; i++) {
        var element2 = liElements[i];
        if (element2.classList.contains("e-list-item")) {
          element2.setAttribute("id", this.element.id + "_" + element2.getAttribute("data-uid"));
          element2.setAttribute("aria-selected", "false");
          element2.setAttribute("tabindex", "-1");
        }
      }
    };
    ListView2.prototype.createList = function() {
      this.currentLiElements = [];
      this.isNestedList = false;
      this.ulElement = this.curUL = ListBase.createList(this.createElement, this.curViewDS, this.listBaseOption, null, this);
      this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
      this.setAttributes(this.liCollection);
    };
    ListView2.prototype.exceptionEvent = function(e) {
      this.trigger("actionFailure", e);
    };
    ListView2.prototype.UpdateCurrentUL = function() {
      this.ulElement = this.curUL = this.element.querySelector("." + classNames4.parentItem);
      if (this.curUL) {
        this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
      }
    };
    ListView2.prototype.renderSubList = function(li) {
      this.liElement = li;
      var uID = li.getAttribute("data-uid");
      if (li.classList.contains(classNames4.hasChild) && uID) {
        var ul = closest(li.parentNode, "." + classNames4.parentItem);
        var ele = this.element.querySelector("[pid='" + uID + "']");
        this.curDSLevel.push(uID);
        this.setViewDataSource(this.getSubDS());
        if (!ele) {
          var data = this.curViewDS;
          ele = ListBase.createListFromJson(this.createElement, data, this.listBaseOption, this.curDSLevel.length, null, this);
          if (this.isReact) {
            this.renderReactTemplates();
          }
          var lists = ele.querySelectorAll("." + classNames4.listItem);
          this.setAttributes(lists);
          ele.setAttribute("pID", uID);
          ele.style.display = "none";
          this.renderIntoDom(ele);
        }
        this.switchView(ul, ele);
        this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
        if (this.selectedItems) {
          var fieldData = getFieldValues(this.selectedItems.data, this.listBaseOption.fields);
          this.header(fieldData[this.listBaseOption.fields.text], true, "header");
        }
        this.selectedLI = void 0;
      }
    };
    ListView2.prototype.renderIntoDom = function(ele) {
      this.contentContainer.appendChild(ele);
    };
    ListView2.prototype.renderList = function(data) {
      this.setViewDataSource(data);
      if (this.enableVirtualization) {
        if (Object.keys(this.dataSource).length) {
          if ((this.template || this.groupTemplate) && !this.virtualizationModule.isNgTemplate()) {
            if (this.isReact) {
              if (typeof this.template == "string") {
                this.listBaseOption.template = null;
              }
              if (typeof this.groupTemplate == "string") {
                this.listBaseOption.groupTemplate = null;
              }
            } else {
              this.listBaseOption.template = null;
              this.listBaseOption.groupTemplate = null;
            }
            this.listBaseOption.itemCreated = this.virtualizationModule.createUIItem.bind(this.virtualizationModule);
          }
        }
        this.virtualizationModule.uiVirtualization();
      } else {
        this.createList();
        this.contentContainer = this.createElement("div", { className: classNames4.content });
        this.element.appendChild(this.contentContainer);
        this.renderIntoDom(this.ulElement);
        if (this.isReact) {
          this.renderReactTemplates();
        }
      }
    };
    ListView2.prototype.getElementUID = function(obj) {
      var fields = {};
      if (obj instanceof Element) {
        fields[this.fields.id] = obj.getAttribute("data-uid");
      } else {
        fields = obj;
      }
      return fields;
    };
    ListView2.prototype.render = function() {
      this.element.classList.add(classNames4.root);
      attributes(this.element, { role: "list", tabindex: "0" });
      this.setCSSClass();
      this.setEnableRTL();
      this.setEnable();
      this.setSize();
      this.wireEvents();
      this.header();
      this.setLocalData();
      this.setHTMLAttribute();
      this.rippleFn = rippleEffect(this.element, {
        selector: "." + classNames4.listItem
      });
      this.renderComplete();
    };
    ListView2.prototype.destroy = function() {
      if (this.isReact) {
        this.clearTemplate();
      }
      this.unWireEvents();
      var classAr = [
        classNames4.root,
        classNames4.disable,
        "e-rtl",
        "e-has-header",
        "e-lib"
      ].concat(this.cssClass.split(" ").filter(function(css) {
        return css;
      }));
      removeClass([this.element], classAr);
      this.element.removeAttribute("role");
      this.element.removeAttribute("tabindex");
      this.curUL = this.ulElement = this.liCollection = this.headerEle = void 0;
      this.element.innerHTML = "";
      _super.prototype.destroy.call(this);
    };
    ListView2.prototype.back = function() {
      var pID = this.curDSLevel[this.curDSLevel.length - 1];
      if (pID === void 0 || this.isInAnimation()) {
        return;
      }
      this.curDSLevel.pop();
      this.setViewDataSource(this.getSubDS());
      var toUL = this.element.querySelector("[data-uid='" + pID + "']");
      var fromUL = this.curUL;
      if (!toUL) {
        this.createList();
        this.renderIntoDom(this.ulElement);
        toUL = this.curUL;
      } else {
        toUL = toUL.parentElement;
      }
      var fieldData = getFieldValues(this.curDSJSON, this.listBaseOption.fields);
      var text = fieldData[this.fields.text];
      this.switchView(fromUL, toUL, true);
      this.removeFocus();
      var li = this.element.querySelector("[data-uid='" + pID + "']");
      li.classList.remove(classNames4.disable);
      li.classList.add(classNames4.focused);
      if (this.showCheckBox && li.querySelector("." + classNames4.checkboxIcon).classList.contains(classNames4.checked)) {
        li.setAttribute("aria-selected", "true");
      } else {
        li.classList.remove(classNames4.selected);
        li.setAttribute("aria-selected", "false");
      }
      this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
      if (this.enableHtmlSanitizer) {
        this.setProperties({ headerTitle: SanitizeHtmlHelper.sanitize(this.headerTitle) }, true);
      }
      this.header(this.curDSLevel.length ? text : this.headerTitle, this.curDSLevel.length ? true : false, "header");
    };
    ListView2.prototype.selectItem = function(item) {
      if (this.enableVirtualization) {
        this.virtualizationModule.selectItem(item);
      } else if (this.showCheckBox) {
        this.setCheckboxLI(this.getLiFromObjOrElement(item));
      } else {
        if (isNullOrUndefined(item) === true) {
          this.removeSelect();
        } else {
          this.setSelectLI(this.getLiFromObjOrElement(item));
        }
      }
    };
    ListView2.prototype.getLiFromObjOrElement = function(obj) {
      var li;
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (!isNullOrUndefined(obj)) {
        if (typeof dataSource[0] === "string" || typeof dataSource[0] === "number") {
          if (obj instanceof Element) {
            var uid2 = obj.getAttribute("data-uid").toString();
            for (var i = 0; i < this.liCollection.length; i++) {
              if (this.liCollection[i].getAttribute("data-uid").toString() === uid2) {
                li = this.liCollection[i];
                break;
              }
            }
          } else {
            Array.prototype.some.call(this.curUL.querySelectorAll("." + classNames4.listItem), function(item) {
              if (item.innerText.trim() === obj.toString()) {
                li = item;
                return true;
              } else {
                return false;
              }
            });
          }
        } else {
          var resultJSON = this.getItemData(obj);
          var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
          if (resultJSON) {
            li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
            if (!this.enableVirtualization && isNullOrUndefined(li)) {
              var curLi = this.element.querySelectorAll("." + classNames4.listItem);
              for (var i = 0; i < curLi.length; i++) {
                if (curLi[i].innerText.trim() === fieldData[this.fields.text]) {
                  li = curLi[i];
                }
              }
            }
          }
        }
      }
      return li;
    };
    ListView2.prototype.selectMultipleItems = function(item) {
      if (!isNullOrUndefined(item)) {
        for (var i = 0; i < item.length; i++) {
          if (!isNullOrUndefined(item[i])) {
            this.selectItem(item[i]);
          }
        }
      }
    };
    ListView2.prototype.getParentId = function() {
      var parentId = [];
      if (this.isNestedList) {
        for (var i = this.curDSLevel.length - 1; i >= 0; i--) {
          parentId.push(this.curDSLevel[i]);
        }
      }
      return parentId;
    };
    ListView2.prototype.getSelectedItems = function() {
      var finalValue;
      var isCompleted = false;
      this.selectedId = [];
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (this.enableVirtualization && !isCompleted) {
        finalValue = this.virtualizationModule.getSelectedItems();
        isCompleted = true;
      } else if (this.showCheckBox && !isCompleted) {
        var liCollection = this.curUL.getElementsByClassName(classNames4.selected);
        var liTextCollection = [];
        var liDataCollection = [];
        this.selectedId = [];
        var dataParent = [];
        for (var i = 0; i < liCollection.length; i++) {
          if (typeof dataSource[0] === "string" || typeof dataSource[0] === "number") {
            liTextCollection.push(liCollection[i].innerText.trim());
          } else {
            var tempData = this.getItemData(liCollection[i]);
            var fieldData = getFieldValues(tempData, this.listBaseOption.fields);
            if (this.isNestedList) {
              dataParent.push({ data: tempData, parentId: this.getParentId() });
            } else {
              liDataCollection.push(tempData);
            }
            if (fieldData) {
              liTextCollection.push(fieldData[this.listBaseOption.fields.text]);
              this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            } else {
              liTextCollection.push(void 0);
              this.selectedId.push(void 0);
            }
          }
        }
        if ((typeof dataSource[0] === "string" || typeof dataSource[0] === "number") && !isCompleted) {
          finalValue = { item: liCollection, data: dataSource, text: liTextCollection };
          isCompleted = true;
        }
        if (this.isNestedList && !isCompleted) {
          finalValue = { item: liCollection, data: dataParent, text: liTextCollection };
          isCompleted = true;
        } else if (!isCompleted) {
          finalValue = { item: liCollection, data: liDataCollection, text: liTextCollection };
          isCompleted = true;
        }
      } else if (!isCompleted) {
        var liElement = this.element.getElementsByClassName(classNames4.selected)[0];
        var fieldData = getFieldValues(this.getItemData(liElement), this.listBaseOption.fields);
        if ((typeof dataSource[0] === "string" || typeof dataSource[0] === "number") && !isCompleted) {
          finalValue = !isNullOrUndefined(liElement) ? {
            item: liElement,
            data: dataSource,
            text: liElement.innerText.trim()
          } : void 0;
          isCompleted = true;
        } else if (!isCompleted) {
          if (isNullOrUndefined(fieldData) || isNullOrUndefined(liElement)) {
            finalValue = void 0;
            isCompleted = true;
          } else {
            this.selectedId.push(fieldData[this.listBaseOption.fields.id]);
            finalValue = {
              text: fieldData[this.listBaseOption.fields.text],
              item: liElement,
              data: this.getItemData(liElement)
            };
            isCompleted = true;
          }
        }
      }
      return finalValue;
    };
    ListView2.prototype.findItem = function(item) {
      return this.getItemData(item);
    };
    ListView2.prototype.enableItem = function(item) {
      this.setItemState(item, true);
      if (this.enableVirtualization) {
        this.virtualizationModule.enableItem(item);
      }
    };
    ListView2.prototype.disableItem = function(item) {
      this.setItemState(item, false);
      if (this.enableVirtualization) {
        this.virtualizationModule.disableItem(item);
      }
    };
    ListView2.prototype.setItemState = function(item, isEnable) {
      var resultJSON = this.getItemData(item);
      var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
        if (isEnable) {
          if (li) {
            li.classList.remove(classNames4.disable);
          }
          delete resultJSON[this.fields.enabled];
        } else if (!isEnable) {
          if (li) {
            li.classList.add(classNames4.disable);
          }
          resultJSON[this.fields.enabled] = false;
        }
      }
    };
    ListView2.prototype.showItem = function(item) {
      this.showHideItem(item, false, "");
      if (this.enableVirtualization) {
        this.virtualizationModule.showItem(item);
      }
    };
    ListView2.prototype.hideItem = function(item) {
      this.showHideItem(item, true, "none");
      if (this.enableVirtualization) {
        this.virtualizationModule.hideItem(item);
      }
    };
    ListView2.prototype.showHideItem = function(obj, isHide, display) {
      var resultJSON = this.getItemData(obj);
      var fieldData = getFieldValues(resultJSON, this.listBaseOption.fields);
      if (resultJSON) {
        var li = this.element.querySelector('[data-uid="' + fieldData[this.fields.id] + '"]');
        if (li) {
          li.style.display = display;
        }
        if (isHide) {
          resultJSON[this.fields.isVisible] = false;
        } else {
          delete resultJSON[this.fields.isVisible];
        }
      }
    };
    ListView2.prototype.addItem = function(data, fields) {
      if (fields === void 0) {
        fields = void 0;
      }
      var dataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      this.addItemInternally(data, fields, dataSource);
    };
    ListView2.prototype.addItemInternally = function(data, fields, dataSource) {
      if (data instanceof Array) {
        if (this.enableVirtualization) {
          this.virtualizationModule.addItem(data, fields, dataSource);
        } else {
          var ds = this.findItemFromDS(dataSource, fields);
          var child = void 0;
          if (ds) {
            var fieldData = getFieldValues(ds, this.listBaseOption.fields);
            child = fieldData[this.fields.child];
            if (!child) {
              child = [];
            }
            child = child.concat(data);
          }
          if (ds instanceof Array) {
            for (var i = 0; i < data.length; i++) {
              dataSource.push(data[i]);
              this.setViewDataSource(dataSource);
              var targetUL = this.contentContainer ? this.contentContainer.children[0] : null;
              if (this.contentContainer && targetUL) {
                this.addItemIntoDom(data[i], targetUL, this.curViewDS);
              } else {
                this.reRender();
              }
            }
            this.liCollection = this.curUL.querySelectorAll("." + classNames4.listItem);
          } else {
            if (ds) {
              ds[this.fields.child] = child;
              this.addItemInNestedList(ds, data);
            }
          }
        }
      }
    };
    ListView2.prototype.addItemInNestedList = function(targetItemData, itemQueue) {
      var targetItemId = targetItemData[this.fields.id];
      var targetChildDS = targetItemData[this.fields.child];
      var isAlreadyRenderedUL = this.element.querySelector("[pid='" + targetItemId + "']");
      var targetLi = this.element.querySelector("[data-uid='" + targetItemId + "']");
      var targetUL = isAlreadyRenderedUL ? isAlreadyRenderedUL : targetLi ? closest(targetLi, "ul") : null;
      var targetDS = isAlreadyRenderedUL ? targetChildDS : [targetItemData];
      var isTargetEmptyChild = targetLi ? !targetLi.classList.contains(classNames4.hasChild) : false;
      var isRefreshTemplateNeeded = false;
      if (isTargetEmptyChild) {
        var targetRefreshedElement = ListBase.createListItemFromJson(this.createElement, targetDS, this.listBaseOption, null, null, this);
        this.setAttributes(targetRefreshedElement);
        targetUL.insertBefore(targetRefreshedElement[0], targetLi);
        detach(targetLi);
        isRefreshTemplateNeeded = true;
      }
      if (isAlreadyRenderedUL && itemQueue) {
        for (var i = 0; i < itemQueue.length; i++) {
          targetDS.push(itemQueue[i]);
          this.addItemIntoDom(itemQueue[i], targetUL, targetDS);
        }
        isRefreshTemplateNeeded = true;
      }
    };
    ListView2.prototype.addItemIntoDom = function(currentItem, targetUL, curViewDS) {
      var index = curViewDS.indexOf(currentItem);
      this.addListItem(currentItem, index, targetUL, curViewDS);
      var curItemDS = curViewDS[index - 1];
      if (curItemDS && curItemDS.isHeader && curItemDS.items.length === 1) {
        this.addListItem(curItemDS, index - 1, targetUL, curViewDS);
      }
    };
    ListView2.prototype.addListItem = function(dataSource, index, ulElement, curViewDS) {
      var target = this.getLiFromObjOrElement(curViewDS[index + 1]) || this.getLiFromObjOrElement(curViewDS[index + 2]) || null;
      var li = ListBase.createListItemFromJson(this.createElement, [dataSource], this.listBaseOption, null, null, this);
      this.setAttributes(li);
      if (this.template && this.isReact) {
        this.renderReactTemplates();
      }
      if (this.fields.groupBy && curViewDS[index + 1] && curViewDS[index + 1].isHeader) {
        var targetEle = this.getLiFromObjOrElement(curViewDS[index - 1]);
        if (targetEle) {
          target = targetEle.nextElementSibling;
        }
      }
      ulElement.insertBefore(li[0], target);
    };
    ListView2.prototype.removeItem = function(item) {
      var listDataSource = this.dataSource instanceof DataManager ? this.localData : this.dataSource;
      if (this.enableVirtualization) {
        this.virtualizationModule.removeItem(item);
      } else {
        this.removeItemFromList(item, listDataSource);
      }
    };
    ListView2.prototype.removeItemFromList = function(obj, listDataSource) {
      var _this = this;
      var curViewDS = this.curViewDS;
      var fields = obj instanceof Element ? this.getElementUID(obj) : obj;
      var dataSource;
      dataSource = this.findItemFromDS(listDataSource, fields, true);
      if (dataSource) {
        var data_1;
        data_1 = this.findItemFromDS(dataSource, fields);
        var index = curViewDS.indexOf(data_1);
        var li = this.getLiFromObjOrElement(obj);
        var groupLi = void 0;
        this.validateNestedView(li);
        if (this.fields.groupBy && this.curViewDS[index - 1] && curViewDS[index - 1].isHeader && curViewDS[index - 1].items.length === 1) {
          if (li && li.previousElementSibling.classList.contains(classNames4.groupListItem) && (isNullOrUndefined(li.nextElementSibling) || li.nextElementSibling && li.nextElementSibling.classList.contains(classNames4.groupListItem))) {
            groupLi = li.previousElementSibling;
          }
        }
        if (li) {
          detach(li);
        }
        if (groupLi) {
          detach(groupLi);
        }
        var foundData = dataSource.length - 1 <= 0 ? this.findParent(
          this.localData,
          this.fields.id,
          // eslint-disable-next-line
          function(value) {
            return value === data_1[_this.fields.id];
          },
          null
        ) : null;
        var dsIndex = dataSource.indexOf(data_1);
        dataSource.splice(dsIndex, 1);
        this.setViewDataSource(listDataSource);
        if (foundData && foundData.parent && Array.isArray(foundData.parent[this.fields.child]) && foundData.parent[this.fields.child].length <= 0) {
          var parentLi = this.getLiFromObjOrElement(foundData.parent);
          if (parentLi) {
            var li_1 = ListBase.createListItemFromJson(this.createElement, [foundData.parent], this.listBaseOption, null, null, this);
            this.setAttributes(li_1);
            parentLi.parentElement.insertBefore(li_1[0], parentLi);
            parentLi.parentElement.removeChild(parentLi);
          }
        }
        if (dataSource.length <= 0) {
          this.back();
        }
        this.liCollection = Array.prototype.slice.call(this.element.querySelectorAll("." + classNames4.listItem));
      }
    };
    ListView2.prototype.validateNestedView = function(li) {
      var liID = li ? li.getAttribute("data-uid").toString().toLowerCase() : null;
      if (liID && this.curDSLevel && this.curDSLevel.length > 0) {
        while (this.curDSLevel.some(function(id) {
          return id.toString().toLowerCase() === liID;
        })) {
          this.back();
        }
      }
    };
    ListView2.prototype.removeMultipleItems = function(item) {
      if (item.length) {
        for (var i = 0; i < item.length; i++) {
          this.removeItem(item[i]);
        }
      }
    };
    ListView2.prototype.findParent = function(dataSource, id, callback, parent) {
      if (dataSource.hasOwnProperty(id) && callback(dataSource[id]) === true) {
        return extend({}, dataSource);
      }
      for (var i = 0; i < Object.keys(dataSource).length; i++) {
        if (dataSource[Object.keys(dataSource)[i]] && typeof dataSource[Object.keys(dataSource)[i]] === "object") {
          var result = this.findParent(dataSource[Object.keys(dataSource)[i]], id, callback, dataSource);
          if (result != null) {
            if (!result.parent) {
              result.parent = parent;
            }
            return result;
          }
        }
      }
      return null;
    };
    ListView2.prototype.getModuleName = function() {
      return "listview";
    };
    ListView2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableVirtualization) {
        modules.push({ args: [this], member: "virtualization" });
      }
      return modules;
    };
    ListView2.prototype.getPersistData = function() {
      return this.addOnPersist([
        "cssClass",
        "enableRtl",
        "htmlAttributes",
        "enable",
        "fields",
        "animation",
        "headerTitle",
        "sortOrder",
        "showIcon",
        "height",
        "width",
        "showCheckBox",
        "checkBoxPosition"
      ]);
    };
    __decorate29([
      Property("")
    ], ListView2.prototype, "cssClass", void 0);
    __decorate29([
      Property(false)
    ], ListView2.prototype, "enableVirtualization", void 0);
    __decorate29([
      Property({})
    ], ListView2.prototype, "htmlAttributes", void 0);
    __decorate29([
      Property(true)
    ], ListView2.prototype, "enable", void 0);
    __decorate29([
      Property([])
    ], ListView2.prototype, "dataSource", void 0);
    __decorate29([
      Property()
    ], ListView2.prototype, "query", void 0);
    __decorate29([
      Complex(ListBase.defaultMappedFields, FieldSettings)
    ], ListView2.prototype, "fields", void 0);
    __decorate29([
      Property({ effect: "SlideLeft", duration: 400, easing: "ease" })
    ], ListView2.prototype, "animation", void 0);
    __decorate29([
      Property("None")
    ], ListView2.prototype, "sortOrder", void 0);
    __decorate29([
      Property(false)
    ], ListView2.prototype, "showIcon", void 0);
    __decorate29([
      Property(false)
    ], ListView2.prototype, "showCheckBox", void 0);
    __decorate29([
      Property("Left")
    ], ListView2.prototype, "checkBoxPosition", void 0);
    __decorate29([
      Property("")
    ], ListView2.prototype, "headerTitle", void 0);
    __decorate29([
      Property(false)
    ], ListView2.prototype, "showHeader", void 0);
    __decorate29([
      Property(false)
    ], ListView2.prototype, "enableHtmlSanitizer", void 0);
    __decorate29([
      Property("")
    ], ListView2.prototype, "height", void 0);
    __decorate29([
      Property("")
    ], ListView2.prototype, "width", void 0);
    __decorate29([
      Property(null)
    ], ListView2.prototype, "template", void 0);
    __decorate29([
      Property(null)
    ], ListView2.prototype, "headerTemplate", void 0);
    __decorate29([
      Property(null)
    ], ListView2.prototype, "groupTemplate", void 0);
    __decorate29([
      Event2()
    ], ListView2.prototype, "select", void 0);
    __decorate29([
      Event2()
    ], ListView2.prototype, "actionBegin", void 0);
    __decorate29([
      Event2()
    ], ListView2.prototype, "actionComplete", void 0);
    __decorate29([
      Event2()
    ], ListView2.prototype, "actionFailure", void 0);
    ListView2 = __decorate29([
      NotifyPropertyChanges
    ], ListView2);
    return ListView2;
  }(Component)
);

// node_modules/@syncfusion/ej2-lists/src/list-view/virtualization.js
var listElementCount = 1.5;
var windowElementCount = 3;
var Virtualization = (
  /** @class */
  function() {
    function Virtualization2(instance) {
      this.elementDifference = 0;
      this.listViewInstance = instance;
    }
    Virtualization2.prototype.isNgTemplate = function() {
      return !isNullOrUndefined(this.listViewInstance.templateRef) && typeof this.listViewInstance.templateRef !== "string";
    };
    Virtualization2.prototype.uiVirtualization = function() {
      this.wireScrollEvent(false);
      var curViewDS = this.listViewInstance.curViewDS;
      var firstDs = curViewDS.slice(0, 1);
      this.listViewInstance.ulElement = this.listViewInstance.curUL = ListBase.createList(
        // eslint-disable-next-line
        this.listViewInstance.createElement,
        firstDs,
        this.listViewInstance.listBaseOption,
        null,
        this.listViewInstance
      );
      this.listViewInstance.contentContainer = this.listViewInstance.createElement("div", { className: classNames4.content });
      this.listViewInstance.element.appendChild(this.listViewInstance.contentContainer);
      this.listViewInstance.contentContainer.appendChild(this.listViewInstance.ulElement);
      this.listItemHeight = this.listViewInstance.ulElement.firstElementChild.getBoundingClientRect().height;
      this.expectedDomItemCount = this.ValidateItemCount(1e4);
      this.domItemCount = this.ValidateItemCount(Object.keys(this.listViewInstance.curViewDS).length);
      this.uiFirstIndex = 0;
      this.uiLastIndex = this.domItemCount - 1;
      var otherDs = curViewDS.slice(1, this.domItemCount);
      var listItems = ListBase.createListItemFromJson(
        // eslint-disable-next-line
        this.listViewInstance.createElement,
        otherDs,
        this.listViewInstance.listBaseOption,
        null,
        null,
        this.listViewInstance
      );
      append(listItems, this.listViewInstance.ulElement);
      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
      this.topElement = this.listViewInstance.createElement("div");
      this.listViewInstance.ulElement.insertBefore(this.topElement, this.listViewInstance.ulElement.firstElementChild);
      this.bottomElement = this.listViewInstance.createElement("div");
      this.listViewInstance.ulElement.insertBefore(this.bottomElement, null);
      this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
      this.topElement.style.height = "0px";
      this.bottomElement.style.height = this.totalHeight + "px";
      this.topElementHeight = 0;
      this.bottomElementHeight = this.totalHeight;
      this.listDiff = 0;
      this.uiIndicesInitialization();
    };
    Virtualization2.prototype.wireScrollEvent = function(destroy2) {
      if (!destroy2) {
        if (this.listViewInstance.isWindow) {
          this.onVirtualScroll = this.onVirtualUiScroll.bind(this);
          window.addEventListener("scroll", this.onVirtualScroll);
        } else {
          EventHandler.add(this.listViewInstance.element, "scroll", this.onVirtualUiScroll, this);
        }
      } else {
        if (this.listViewInstance.isWindow === true) {
          window.removeEventListener("scroll", this.onVirtualScroll);
          window.removeEventListener("scroll", this.updateUl);
        } else {
          EventHandler.remove(this.listViewInstance.element, "scroll", this.onVirtualUiScroll);
          EventHandler.remove(this.listViewInstance.element, "scroll", this.updateUlContainer);
        }
      }
    };
    Virtualization2.prototype.updateUlContainer = function(e) {
      var listDiff;
      var virtualElementContainer = this.listViewInstance.ulElement.querySelector("." + classNames4.virtualElementContainer);
      if (isNullOrUndefined(this.listViewInstance.liElementHeight)) {
        this.listViewInstance.updateLiElementHeight();
      }
      if (this.listViewInstance.isWindow) {
        listDiff = Math.round(e.target.documentElement.scrollTop / this.listViewInstance.liElementHeight) - 2;
      } else {
        listDiff = Math.round(e.target.scrollTop / this.listViewInstance.liElementHeight) - 2;
      }
      if ((listDiff - 1) * this.listViewInstance.liElementHeight < 0) {
        virtualElementContainer.style.top = "0px";
      } else {
        virtualElementContainer.style.top = listDiff * this.listViewInstance.liElementHeight + "px";
      }
    };
    Virtualization2.prototype.ValidateItemCount = function(dataSourceLength) {
      var height = parseFloat(formatUnit(this.listViewInstance.height));
      var itemCount;
      if (this.listViewInstance.isWindow) {
        itemCount = Math.round(window.innerHeight / this.listItemHeight * windowElementCount);
      } else {
        if (typeof this.listViewInstance.height === "string" && this.listViewInstance.height.indexOf("%") !== -1) {
          itemCount = Math.round(this.listViewInstance.element.getBoundingClientRect().height / this.listItemHeight * listElementCount);
        } else {
          itemCount = Math.round(height / this.listItemHeight * listElementCount);
        }
      }
      if (itemCount > dataSourceLength) {
        itemCount = dataSourceLength;
      }
      return itemCount;
    };
    Virtualization2.prototype.uiIndicesInitialization = function() {
      this.uiIndices = { "activeIndices": [], "disabledItemIndices": [], "hiddenItemIndices": [] };
      var data = this.listViewInstance.curViewDS;
      for (var i = 0; i < data.length; i++) {
        if (this.listViewInstance.showCheckBox && data[i][this.listViewInstance.fields.isChecked]) {
          this.uiIndices.activeIndices.push(i);
        }
        if (!isNullOrUndefined(data[i][this.listViewInstance.fields.enabled]) && !data[i][this.listViewInstance.fields.enabled]) {
          this.uiIndices.disabledItemIndices.push(i);
        }
      }
      if (this.isNgTemplate()) {
        var items = this.listViewInstance.element.querySelectorAll("." + classNames4.listItem);
        for (var index = 0; index < items.length; index++) {
          items[index].context = this.listViewInstance.viewContainerRef.get(index).context;
        }
      }
    };
    Virtualization2.prototype.refreshItemHeight = function() {
      if (this.listViewInstance.curViewDS.length) {
        var curViewDS = this.listViewInstance.curViewDS;
        this.listItemHeight = this.topElement.nextSibling.getBoundingClientRect().height;
        this.totalHeight = Object.keys(curViewDS).length * this.listItemHeight - this.domItemCount * this.listItemHeight;
        this.bottomElementHeight = this.totalHeight;
        this.bottomElement.style.height = this.totalHeight + "px";
      }
    };
    Virtualization2.prototype.getscrollerHeight = function(startingHeight) {
      return this.listViewInstance.isWindow ? pageYOffset - startingHeight <= 0 ? 0 : pageYOffset - startingHeight : this.listViewInstance.element.scrollTop - startingHeight <= 0 ? 0 : this.listViewInstance.element.scrollTop - startingHeight;
    };
    Virtualization2.prototype.onVirtualUiScroll = function(e) {
      var _a;
      var startingHeight;
      if (this.listViewInstance.isWindow) {
        startingHeight = this.listViewInstance.ulElement.getBoundingClientRect().top - document.documentElement.getBoundingClientRect().top;
      } else {
        startingHeight = this.listViewInstance.headerEle ? this.listViewInstance.headerEle.getBoundingClientRect().height : 0;
      }
      this.scrollPosition = isNullOrUndefined(this.scrollPosition) ? 0 : this.scrollPosition;
      var scroll = this.getscrollerHeight(startingHeight);
      this.topElementHeight = this.listItemHeight * Math.floor(scroll / this.listItemHeight);
      this.bottomElementHeight = this.totalHeight - this.topElementHeight;
      _a = scroll <= this.totalHeight ? [this.topElementHeight, this.bottomElementHeight] : [this.totalHeight, 0], this.topElementHeight = _a[0], this.bottomElementHeight = _a[1];
      if (this.topElementHeight !== parseFloat(this.topElement.style.height)) {
        this.topElement.style.height = this.topElementHeight + "px";
        this.bottomElement.style.height = this.bottomElementHeight + "px";
        if (scroll > this.scrollPosition) {
          var listDiff = Math.round(this.topElementHeight / this.listItemHeight - this.listDiff);
          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, true);
          } else {
            this.onNormalScroll(listDiff, true);
          }
        } else {
          var listDiff = Math.round(this.listDiff - this.topElementHeight / this.listItemHeight);
          if (listDiff > this.expectedDomItemCount + 5) {
            this.onLongScroll(listDiff, false);
          } else {
            this.onNormalScroll(listDiff, false);
          }
        }
      }
      this.listDiff = Math.round(this.topElementHeight / this.listItemHeight);
      if (typeof this.listViewInstance.onUIScrolled === "function") {
        this.listViewInstance.onUIScrolled();
      }
      this.scrollPosition = scroll;
    };
    Virtualization2.prototype.onLongScroll = function(listDiff, isScrollingDown) {
      var index = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
      var elements = this.listViewInstance.ulElement.querySelectorAll("li");
      for (var i = 0; i < elements.length; i++) {
        this.updateUI(elements[i], index);
        index++;
      }
      this.uiLastIndex = isScrollingDown ? this.uiLastIndex + listDiff : this.uiLastIndex - listDiff;
      this.uiFirstIndex = isScrollingDown ? this.uiFirstIndex + listDiff : this.uiFirstIndex - listDiff;
    };
    Virtualization2.prototype.onNormalScroll = function(listDiff, isScrollingDown) {
      if (isScrollingDown) {
        for (var i = 0; i < listDiff; i++) {
          var index = ++this.uiLastIndex;
          this.updateUI(this.topElement.nextElementSibling, index, this.bottomElement);
          this.uiFirstIndex++;
        }
      } else {
        for (var i = 0; i < listDiff; i++) {
          var index = --this.uiFirstIndex;
          var target = this.topElement.nextSibling;
          this.updateUI(this.bottomElement.previousElementSibling, index, target);
          this.uiLastIndex--;
        }
      }
    };
    Virtualization2.prototype.updateUiContent = function(element2, index) {
      var curViewDs = this.listViewInstance.curViewDS;
      if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
        element2.dataset.uid = ListBase.generateId();
        element2.getElementsByClassName(classNames4.listItemText)[0].innerHTML = this.listViewInstance.curViewDS[index].toString();
      } else {
        element2.dataset.uid = curViewDs[index][this.listViewInstance.fields.id] ? (
          // eslint-disable-next-line
          curViewDs[index][this.listViewInstance.fields.id]
        ) : ListBase.generateId();
        element2.getElementsByClassName(classNames4.listItemText)[0].innerHTML = // eslint-disable-next-line
        curViewDs[index][this.listViewInstance.fields.text];
      }
      if (this.listViewInstance.showIcon) {
        if (element2.querySelector("." + classNames4.listIcon)) {
          detach(element2.querySelector("." + classNames4.listIcon));
        }
        if (this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]) {
          var textContent = element2.querySelector("." + classNames4.textContent);
          var target = this.listViewInstance.createElement("div", {
            className: classNames4.listIcon + " " + this.listViewInstance.curViewDS[index][this.listViewInstance.fields.iconCss]
          });
          textContent.insertBefore(target, element2.querySelector("." + classNames4.listItemText));
        }
      }
      if (this.listViewInstance.showCheckBox && this.listViewInstance.fields.groupBy) {
        if (!this.checkListWrapper) {
          this.checkListWrapper = this.listViewInstance.curUL.querySelector("." + classNames4.checkboxWrapper).cloneNode(true);
        }
        var textContent = element2.querySelector("." + classNames4.textContent);
        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element2.querySelector("." + classNames4.checkboxWrapper)) {
            element2.classList.remove(classNames4.checklist);
            textContent.classList.remove(classNames4.checkbox);
            detach(element2.querySelector("." + classNames4.checkboxWrapper));
          }
        } else {
          if (!element2.querySelector("." + classNames4.checkboxWrapper)) {
            element2.classList.add(classNames4.checklist);
            textContent.classList.add(classNames4.checkbox);
            textContent.insertBefore(this.checkListWrapper.cloneNode(true), element2.querySelector("." + classNames4.listItemText));
          }
        }
      }
    };
    Virtualization2.prototype.changeElementAttributes = function(element2, index) {
      element2.classList.remove(classNames4.disable);
      if (this.uiIndices.disabledItemIndices.length && this.uiIndices.disabledItemIndices.indexOf(index) !== -1) {
        element2.classList.add(classNames4.disable);
      }
      element2.style.display = "";
      if (this.uiIndices.hiddenItemIndices.length && this.uiIndices.hiddenItemIndices.indexOf(index) !== -1) {
        element2.style.display = "none";
      }
      if (this.listViewInstance.showCheckBox) {
        var checklistElement = element2.querySelector("." + classNames4.checkboxWrapper);
        element2.classList.remove(classNames4.selected);
        element2.classList.remove(classNames4.focused);
        if (checklistElement) {
          checklistElement.removeAttribute("aria-checked");
          checklistElement.firstElementChild.classList.remove(classNames4.checked);
        }
        if (this.uiIndices.activeIndices.length && this.uiIndices.activeIndices.indexOf(index) !== -1 && !this.listViewInstance.curUL.querySelector(classNames4.selected)) {
          element2.classList.add(classNames4.selected);
          checklistElement.firstElementChild.classList.add(classNames4.checked);
          checklistElement.setAttribute("aria-checked", "true");
          if (this.activeIndex === index) {
            element2.classList.add(classNames4.focused);
          }
        }
      } else {
        element2.classList.remove(classNames4.selected);
        element2.removeAttribute("aria-selected");
        if (!isNullOrUndefined(this.activeIndex) && this.activeIndex === index && !this.listViewInstance.curUL.querySelector(classNames4.selected)) {
          element2.classList.add(classNames4.selected);
          element2.setAttribute("aria-selected", "true");
        }
      }
      if (this.listViewInstance.fields.groupBy) {
        if (this.listViewInstance.curViewDS[index].isHeader) {
          if (element2.classList.contains(classNames4.listItem)) {
            element2.classList.remove(classNames4.listItem);
            element2.setAttribute("role", "group");
            element2.classList.add(classNames4.groupListItem);
          }
        } else {
          if (element2.classList.contains(classNames4.groupListItem)) {
            element2.classList.remove(classNames4.groupListItem);
            element2.setAttribute("role", "listitem");
            element2.classList.add(classNames4.listItem);
          }
        }
      }
    };
    Virtualization2.prototype.findDSAndIndexFromId = function(ds, fields) {
      var _this = this;
      var resultJSON = {};
      fields = this.listViewInstance.getElementUID(fields);
      if (!isNullOrUndefined(fields)) {
        ds.some(function(data, index) {
          if (fields[_this.listViewInstance.fields.id] && // eslint-disable-next-line
          fields[_this.listViewInstance.fields.id] === (data[_this.listViewInstance.fields.id] && data[_this.listViewInstance.fields.id]) || fields === data) {
            resultJSON.index = index;
            resultJSON.data = data;
            return true;
          } else {
            return false;
          }
        });
      }
      return resultJSON;
    };
    Virtualization2.prototype.getSelectedItems = function() {
      var _this = this;
      if (!isNullOrUndefined(this.activeIndex) || this.listViewInstance.showCheckBox && this.uiIndices.activeIndices.length) {
        var dataCollection = [];
        var textCollection = [];
        if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
          var curViewDS_1 = this.listViewInstance.curViewDS;
          if (this.listViewInstance.showCheckBox) {
            var indices = this.uiIndices.activeIndices;
            for (var i = 0; i < indices.length; i++) {
              dataCollection.push(curViewDS_1[indices[i]]);
            }
            return {
              text: dataCollection,
              // eslint-disable-next-line
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function(index) {
                return _this.listViewInstance.dataSource.indexOf(curViewDS_1[index]);
              })
            };
          } else {
            return {
              text: curViewDS_1[this.activeIndex],
              data: curViewDS_1[this.activeIndex],
              index: this.listViewInstance.dataSource.indexOf(curViewDS_1[this.activeIndex])
            };
          }
        } else {
          var curViewDS_2 = this.listViewInstance.curViewDS;
          var text = this.listViewInstance.fields.text;
          if (this.listViewInstance.showCheckBox) {
            var indexArray = this.uiIndices.activeIndices;
            for (var i = 0; i < indexArray.length; i++) {
              textCollection.push(curViewDS_2[indexArray[i]][text]);
              dataCollection.push(curViewDS_2[indexArray[i]]);
            }
            var dataSource_1 = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: textCollection,
              // eslint-disable-next-line
              data: dataCollection,
              index: this.uiIndices.activeIndices.map(function(index) {
                return dataSource_1.indexOf(curViewDS_2[index]);
              })
            };
          } else {
            var dataSource = this.listViewInstance.dataSource instanceof DataManager ? curViewDS_2 : this.listViewInstance.dataSource;
            return {
              text: curViewDS_2[this.activeIndex][this.listViewInstance.fields.text],
              // eslint-disable-next-line
              data: curViewDS_2[this.activeIndex],
              index: dataSource.indexOf(curViewDS_2[this.activeIndex])
            };
          }
        }
      } else {
        return void 0;
      }
    };
    Virtualization2.prototype.selectItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        var isSelected = this.activeIndex === resutJSON.index;
        var isChecked = void 0;
        this.activeIndex = resutJSON.index;
        if (this.listViewInstance.showCheckBox) {
          if (this.uiIndices.activeIndices.indexOf(resutJSON.index) === -1) {
            isChecked = true;
            this.uiIndices.activeIndices.push(resutJSON.index);
          } else {
            isChecked = false;
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(resutJSON.index), 1);
          }
          if (this.listViewInstance.curUL.querySelector("." + classNames4.focused)) {
            this.listViewInstance.curUL.querySelector("." + classNames4.focused).classList.remove(classNames4.focused);
          }
        }
        if (this.listViewInstance.getLiFromObjOrElement(obj)) {
          if (this.listViewInstance.showCheckBox) {
            this.listViewInstance.setCheckboxLI(this.listViewInstance.getLiFromObjOrElement(obj));
          } else {
            this.listViewInstance.setSelectLI(this.listViewInstance.getLiFromObjOrElement(obj));
          }
        } else {
          var eventArgs = void 0;
          if (typeof this.listViewInstance.dataSource[0] === "string" || typeof this.listViewInstance.dataSource[0] === "number") {
            eventArgs = {
              text: this.listViewInstance.curViewDS[this.activeIndex],
              data: this.listViewInstance.curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          } else {
            var curViewDS = this.listViewInstance.curViewDS;
            eventArgs = {
              text: curViewDS[this.activeIndex][this.listViewInstance.fields.text],
              data: curViewDS[this.activeIndex],
              index: this.activeIndex
            };
          }
          if (this.listViewInstance.showCheckBox) {
            eventArgs.isChecked = isChecked;
            this.listViewInstance.trigger("select", eventArgs);
          } else if (!isSelected) {
            this.listViewInstance.removeSelect();
            this.listViewInstance.trigger("select", eventArgs);
          }
        }
      } else if (isNullOrUndefined(obj) && !this.listViewInstance.showCheckBox) {
        this.listViewInstance.removeSelect();
        this.activeIndex = void 0;
      }
    };
    Virtualization2.prototype.enableItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(resutJSON.index), 1);
      }
    };
    Virtualization2.prototype.disableItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length && this.uiIndices.disabledItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.disabledItemIndices.push(resutJSON.index);
      }
    };
    Virtualization2.prototype.showItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index), 1);
      }
    };
    Virtualization2.prototype.hideItem = function(obj) {
      var resutJSON = this.findDSAndIndexFromId(this.listViewInstance.curViewDS, obj);
      if (Object.keys(resutJSON).length && this.uiIndices.hiddenItemIndices.indexOf(resutJSON.index) === -1) {
        this.uiIndices.hiddenItemIndices.push(resutJSON.index);
      }
    };
    Virtualization2.prototype.removeItem = function(obj) {
      var dataSource;
      var curViewDS = this.listViewInstance.curViewDS;
      var resutJSON = this.findDSAndIndexFromId(curViewDS, obj);
      if (Object.keys(resutJSON).length) {
        dataSource = resutJSON.data;
        if (curViewDS[resutJSON.index - 1] && curViewDS[resutJSON.index - 1].isHeader && curViewDS[resutJSON.index - 1].items.length === 1) {
          this.removeUiItem(resutJSON.index - 1);
          this.removeUiItem(resutJSON.index - 1);
        } else {
          this.removeUiItem(resutJSON.index);
        }
      }
      var listDataSource = this.listViewInstance.dataSource instanceof DataManager ? this.listViewInstance.localData : this.listViewInstance.dataSource;
      var index = listDataSource.indexOf(dataSource);
      if (index !== -1) {
        listDataSource.splice(index, 1);
        this.listViewInstance.setViewDataSource(listDataSource);
      }
      this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
    };
    Virtualization2.prototype.setCheckboxLI = function(li, e) {
      var index = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
      if (li.classList.contains(classNames4.selected)) {
        if (this.uiIndices.activeIndices.indexOf(index) === -1) {
          this.uiIndices.activeIndices.push(index);
        }
      } else {
        this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
      }
    };
    Virtualization2.prototype.setSelectLI = function(li, e) {
      this.activeIndex = Array.prototype.indexOf.call(this.listViewInstance.curUL.querySelectorAll("li"), li) + this.uiFirstIndex;
    };
    Virtualization2.prototype.checkedItem = function(checked) {
      if (checked) {
        this.uiIndices.activeIndices = [];
        this.activeIndex = void 0;
        var data = this.listViewInstance.curViewDS;
        for (var index = 0; index < data.length; index++) {
          if (!data[index].isHeader) {
            this.uiIndices.activeIndices.push(index);
          }
        }
      } else {
        this.activeIndex = void 0;
        this.uiIndices.activeIndices = [];
      }
    };
    Virtualization2.prototype.addUiItem = function(index) {
      var curViewDs = this.listViewInstance.curViewDS;
      this.changeUiIndices(index, true);
      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex++;
      }
      if (this.listViewInstance.showCheckBox && curViewDs[index][this.listViewInstance.fields.isChecked]) {
        this.uiIndices.activeIndices.push(index);
      }
      if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
        this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + "px";
      }
      if (parseFloat(this.bottomElement.style.height)) {
        var liItem = this.listViewInstance.curUL.lastElementChild.previousSibling;
        var target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
        if (target) {
          this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) + this.listItemHeight + "px";
          this.updateUI(liItem, index, target);
        }
      } else {
        var liItem = this.listViewInstance.curUL.firstElementChild.nextSibling;
        var target = void 0;
        if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
          target = this.listViewInstance.curUL.lastElementChild;
        } else {
          target = this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 1]) || this.listViewInstance.getLiFromObjOrElement(curViewDs[index + 2]);
        }
        this.topElement.style.height = parseFloat(this.topElement.style.height) + this.listItemHeight + "px";
        this.uiFirstIndex++;
        this.uiLastIndex++;
        if (target) {
          this.updateUI(liItem, index, target);
          if (this.listViewInstance.isWindow === true) {
            window.scrollTo(0, pageYOffset + this.listItemHeight);
          } else {
            this.listViewInstance.element.scrollTop += this.listItemHeight;
          }
        }
      }
      this.totalHeight += this.listItemHeight;
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };
    Virtualization2.prototype.removeUiItem = function(index) {
      this.totalHeight -= this.listItemHeight;
      var curViewDS = this.listViewInstance.curViewDS[index];
      var liItem = this.listViewInstance.getLiFromObjOrElement(curViewDS);
      this.listViewInstance.curViewDS.splice(index, 1);
      if (this.activeIndex && this.activeIndex >= index) {
        this.activeIndex--;
      }
      if (liItem) {
        if (this.domItemCount > Object.keys(this.listViewInstance.curViewDS).length) {
          detach(liItem);
          this.domItemCount--;
          this.uiLastIndex--;
          this.totalHeight = 0;
        } else {
          if (liItem.classList.contains(classNames4.disable)) {
            liItem.classList.remove(classNames4.disable);
            this.uiIndices.disabledItemIndices.splice(this.uiIndices.disabledItemIndices.indexOf(index), 1);
          }
          if (liItem.style.display === "none") {
            liItem.style.display = "";
            this.uiIndices.hiddenItemIndices.splice(this.uiIndices.hiddenItemIndices.indexOf(index), 1);
          }
          if (this.listViewInstance.showCheckBox && liItem.classList.contains(classNames4.selected)) {
            this.listViewInstance.removeSelect();
            this.uiIndices.activeIndices.splice(this.uiIndices.activeIndices.indexOf(index), 1);
            var checklistElement = liItem.querySelector("." + classNames4.checkboxWrapper);
            checklistElement.removeAttribute("aria-checked");
            checklistElement.firstElementChild.classList.remove(classNames4.checked);
            if (liItem.classList.contains(classNames4.focused)) {
              liItem.classList.remove(classNames4.focused);
              this.activeIndex = void 0;
            }
          } else if (liItem.classList.contains(classNames4.selected)) {
            this.listViewInstance.removeSelect();
            this.activeIndex = void 0;
          }
          if (!parseFloat(this.bottomElement.style.height) && !parseFloat(this.topElement.style.height)) {
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else if (parseFloat(this.bottomElement.style.height)) {
            this.bottomElement.style.height = parseFloat(this.bottomElement.style.height) - this.listItemHeight + "px";
            this.updateUI(liItem, this.uiLastIndex, this.bottomElement);
          } else {
            this.topElement.style.height = parseFloat(this.topElement.style.height) - this.listItemHeight + "px";
            this.updateUI(liItem, this.uiFirstIndex - 1, this.topElement.nextSibling);
            this.uiLastIndex--;
            this.uiFirstIndex--;
          }
        }
      }
      this.changeUiIndices(index, false);
      this.listDiff = Math.round(parseFloat(this.topElement.style.height) / this.listItemHeight);
    };
    Virtualization2.prototype.changeUiIndices = function(index, increment) {
      var keys2 = Object.keys(this.uiIndices);
      for (var ind = 0; ind < keys2.length; ind++) {
        this.uiIndices[keys2[ind]] = this.uiIndices[keys2[ind]].map(function(i) {
          if (i >= index) {
            return increment ? ++i : --i;
          } else {
            return i;
          }
        });
      }
    };
    Virtualization2.prototype.addItem = function(data, fields, dataSource) {
      for (var i = 0; i < data.length; i++) {
        var currentItem = data[i];
        dataSource.push(currentItem);
        this.listViewInstance.setViewDataSource(dataSource);
        if (!this.domItemCount) {
          if ((this.listViewInstance.template || this.listViewInstance.groupTemplate) && !this.isNgTemplate()) {
            this.listViewInstance.listBaseOption.template = null;
            this.listViewInstance.listBaseOption.groupTemplate = null;
            this.listViewInstance.listBaseOption.itemCreated = this.createUIItem.bind(this);
          }
          this.uiVirtualization();
        } else if (this.domItemCount < this.expectedDomItemCount) {
          var ds = this.listViewInstance.findItemFromDS(dataSource, fields);
          if (ds instanceof Array) {
            if (this.listViewInstance.ulElement) {
              var index = this.listViewInstance.curViewDS.indexOf(currentItem);
              this.createAndInjectNewItem(currentItem, index);
              var curViewDS = this.listViewInstance.curViewDS[index - 1];
              if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
                --index;
                this.createAndInjectNewItem(curViewDS, index);
              }
            }
            this.listViewInstance.liCollection = this.listViewInstance.curUL.querySelectorAll("li");
          }
        } else {
          var index = this.listViewInstance.curViewDS.indexOf(currentItem);
          this.addUiItem(index);
          var curViewDS = this.listViewInstance.curViewDS[index - 1];
          if (curViewDS && curViewDS.isHeader && curViewDS.items.length === 1) {
            this.addUiItem(index - 1);
          }
        }
      }
    };
    Virtualization2.prototype.createAndInjectNewItem = function(itemData, index) {
      var target;
      var li = ListBase.createListItemFromJson(
        this.listViewInstance.createElement,
        // eslint-disable-next-line
        [itemData],
        this.listViewInstance.listBaseOption,
        null,
        null,
        this.listViewInstance
      );
      if (Object.keys(this.listViewInstance.curViewDS).length - 1 === index) {
        target = this.listViewInstance.curUL.lastElementChild;
      } else {
        target = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 1]) || this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index + 2]);
      }
      if (this.listViewInstance.fields.groupBy && this.listViewInstance.curViewDS[index + 1] && this.listViewInstance.curViewDS[index + 1].isHeader) {
        var targetEle = this.listViewInstance.getLiFromObjOrElement(this.listViewInstance.curViewDS[index - 1]);
        if (targetEle) {
          target = targetEle.nextElementSibling;
        }
      }
      this.listViewInstance.ulElement.insertBefore(li[0], target);
      this.domItemCount++;
      if (this.bottomElementHeight <= 0) {
        this.uiLastIndex++;
      }
      this.refreshItemHeight();
    };
    Virtualization2.prototype.createUIItem = function(args) {
      var virtualTemplate = this.listViewInstance.template;
      var template = this.listViewInstance.createElement("div");
      var commonTemplate = '<div class="e-text-content" role="presentation"> <span class="e-list-text"> ${' + this.listViewInstance.fields.text + "} </span></div>";
      if (this.listViewInstance.isReact) {
        commonTemplate = null;
      }
      if (this.listViewInstance.showCheckBox) {
        this.listViewInstance.renderCheckbox(args);
        if (!isNullOrUndefined(this.listViewInstance.virtualCheckBox) && !isNullOrUndefined(this.listViewInstance.virtualCheckBox.outerHTML)) {
          var div = document.createElement("div");
          div.innerHTML = this.listViewInstance.template || commonTemplate;
          if (div.children && div.children[0]) {
            div.children[0].classList.add("e-checkbox");
            if (this.listViewInstance.checkBoxPosition === "Left") {
              div.children[0].classList.add("e-checkbox-left");
            } else {
              div.children[0].classList.add("e-checkbox-right");
            }
            if (this.listViewInstance.checkBoxPosition === "Left") {
              div.children[0].insertBefore(this.listViewInstance.virtualCheckBox, div.childNodes[0].children[0]);
            } else {
              div.children[0].appendChild(this.listViewInstance.virtualCheckBox);
            }
            this.listViewInstance.template = div.innerHTML;
          }
        }
        template.innerHTML = this.listViewInstance.template;
        this.listViewInstance.template = virtualTemplate;
      } else {
        template.innerHTML = this.listViewInstance.template || commonTemplate;
      }
      var templateElements = template.getElementsByTagName("*");
      var groupTemplate = this.listViewInstance.createElement("div");
      if (this.listViewInstance.fields.groupBy) {
        groupTemplate.innerHTML = this.listViewInstance.groupTemplate || commonTemplate;
      }
      var groupTemplateElements = groupTemplate.getElementsByTagName("*");
      if (args.curData.isHeader) {
        this.headerData = args.curData;
      }
      this.templateData = args.curData.isHeader ? args.curData.items[0] : args.curData;
      if (!this.listViewInstance.isReact || typeof this.listViewInstance.template == "string" && !args.item.classList.contains("e-list-group-item") || typeof this.listViewInstance.groupTemplate == "string" && args.item.classList.contains("e-list-group-item")) {
        args.item.innerHTML = "";
      }
      args.item.context = { data: args.curData, nodes: { flatTemplateNodes: [], groupTemplateNodes: [] } };
      for (var i = 0; i < templateElements.length; i++) {
        this.compileTemplate(templateElements[i], args.item, false);
      }
      for (var i = 0; i < groupTemplateElements.length; i++) {
        this.compileTemplate(groupTemplateElements[i], args.item, true);
      }
      args.item.context.template = args.curData.isHeader ? template.firstElementChild : groupTemplate.firstElementChild;
      args.item.context.type = args.curData.isHeader ? "flatList" : "groupList";
      var element2 = args.curData.isHeader ? groupTemplate : template;
      if (element2.firstElementChild) {
        args.item.insertBefore(element2.firstElementChild, null);
      }
    };
    Virtualization2.prototype.compileTemplate = function(element2, item, isHeader) {
      this.textProperty(element2, item, isHeader);
      this.classProperty(element2, item, isHeader);
      this.attributeProperty(element2, item, isHeader);
    };
    Virtualization2.prototype.onChange = function(newData, listElement) {
      listElement.context.data = newData;
      var groupTemplateNodes = listElement.context.nodes.groupTemplateNodes;
      var flatTemplateNodes = listElement.context.nodes.flatTemplateNodes;
      if (!isNullOrUndefined(newData.isHeader) && newData.isHeader && listElement.context.type === "groupList") {
        var element2 = listElement.firstElementChild;
        detach(listElement.firstElementChild);
        listElement.insertBefore(listElement.context.template, null);
        listElement.context.template = element2;
        listElement.context.type = "flatList";
        for (var i = 0; i < groupTemplateNodes.length; i++) {
          groupTemplateNodes[i].onChange(newData);
        }
      } else if (!newData.isHeader && listElement.context.type === "flatList") {
        var element2 = listElement.firstElementChild;
        detach(listElement.firstElementChild);
        listElement.insertBefore(listElement.context.template, null);
        listElement.context.template = element2;
        listElement.context.type = "groupList";
        for (var i = 0; i < flatTemplateNodes.length; i++) {
          flatTemplateNodes[i].onChange(newData);
        }
      } else if (!newData.isHeader) {
        for (var i = 0; i < flatTemplateNodes.length; i++) {
          flatTemplateNodes[i].onChange(newData);
        }
      } else {
        for (var i = 0; i < groupTemplateNodes.length; i++) {
          groupTemplateNodes[i].onChange(newData);
        }
      }
    };
    Virtualization2.prototype.updateContextData = function(listElement, node, isHeader) {
      if (isHeader) {
        listElement.context.nodes.groupTemplateNodes.push(node);
      } else {
        listElement.context.nodes.flatTemplateNodes.push(node);
      }
    };
    Virtualization2.prototype.classProperty = function(element2, listElement, isHeader) {
      var regex2 = new RegExp("\\${([^}]*)}", "g");
      var resultantOutput = [];
      var regexMatch;
      while (regexMatch !== null) {
        var match = regex2.exec(element2.className);
        resultantOutput.push(match);
        regexMatch = match;
        if (regexMatch === null) {
          resultantOutput.pop();
        }
      }
      if (resultantOutput && resultantOutput.length) {
        var _loop_1 = function(i2) {
          var classNameMatch = resultantOutput[i2];
          var classFunction;
          if (classNameMatch[1].indexOf("?") !== -1 && classNameMatch[1].indexOf(":") !== -1) {
            classFunction = new Function("data", "return " + classNameMatch[1].replace(/\$/g, "data."));
          } else {
            classFunction = new Function("data", "return data." + classNameMatch[1]);
          }
          var subNode = {};
          if (isHeader) {
            subNode.bindedvalue = classFunction(this_1.headerData);
          } else {
            subNode.bindedvalue = classFunction(this_1.templateData);
          }
          subNode.onChange = function(value) {
            if (subNode.bindedvalue) {
              removeClass([element2], subNode.bindedvalue.split(" ").filter(function(css) {
                return css;
              }));
            }
            var newCss = classFunction(value);
            if (newCss) {
              addClass([element2], newCss.split(" ").filter(function(css) {
                return css;
              }));
            }
            subNode.bindedvalue = newCss;
          };
          var className = classNameMatch[0].split(" ");
          for (var i_1 = 0; i_1 < className.length; i_1++) {
            element2.classList.remove(className[i_1]);
          }
          if (subNode.bindedvalue) {
            addClass([element2], subNode.bindedvalue.split(" ").filter(function(css) {
              return css;
            }));
          }
          this_1.updateContextData(listElement, subNode, isHeader);
        };
        var this_1 = this;
        for (var i = 0; i < resultantOutput.length; i++) {
          _loop_1(i);
        }
      }
    };
    Virtualization2.prototype.attributeProperty = function(element2, listElement, isHeader) {
      var attributeNames = [];
      for (var i = 0; i < element2.attributes.length; i++) {
        attributeNames.push(element2.attributes[i].nodeName);
      }
      if (attributeNames.indexOf("class") !== -1) {
        attributeNames.splice(attributeNames.indexOf("class"), 1);
      }
      var _loop_2 = function(i2) {
        var attributeName = attributeNames[i2];
        var attrNameMatch = new RegExp("\\${([^}]*)}", "g").exec(attributeName) || [];
        var attrValueMatch = new RegExp("\\${([^}]*)}", "g").exec(element2.getAttribute(attributeName)) || [];
        var attributeNameFunction;
        var attributeValueFunction;
        if (attrNameMatch.length || attrValueMatch.length) {
          if (attrNameMatch[1]) {
            attributeNameFunction = new Function("data", "return data." + attrNameMatch[1]);
          }
          if (attrValueMatch[1]) {
            if (attrValueMatch[1].indexOf("?") !== -1 && attrValueMatch[1].indexOf(":") !== -1) {
              attributeValueFunction = new Function("data", "return " + attrValueMatch[1].replace(/\$/g, "data."));
            } else {
              attributeValueFunction = new Function("data", "return data." + attrValueMatch[1]);
            }
          }
          var subNode_1 = {};
          if (isHeader) {
            subNode_1.bindedvalue = [
              attrNameMatch[1] === void 0 ? void 0 : attributeNameFunction(this_2.headerData),
              attrValueMatch[1] === void 0 ? void 0 : attributeValueFunction(this_2.headerData)
            ];
          } else {
            subNode_1.bindedvalue = [
              attrNameMatch[1] === void 0 ? void 0 : attributeNameFunction(this_2.templateData),
              attrValueMatch[1] === void 0 ? void 0 : attributeValueFunction(this_2.templateData)
            ];
          }
          subNode_1.attrName = subNode_1.bindedvalue[0] === void 0 ? attributeName : subNode_1.bindedvalue[0];
          subNode_1.onChange = function(value) {
            var bindedvalue = subNode_1.bindedvalue[1] === void 0 ? element2.getAttribute(subNode_1.attrName) : attributeValueFunction(value);
            element2.removeAttribute(subNode_1.attrName);
            subNode_1.attrName = subNode_1.bindedvalue[0] === void 0 ? subNode_1.attrName : attributeNameFunction(value);
            element2.setAttribute(subNode_1.attrName, bindedvalue);
            subNode_1.bindedvalue = [
              subNode_1.bindedvalue[0] === void 0 ? void 0 : attributeNameFunction(value),
              subNode_1.bindedvalue[1] === void 0 ? void 0 : attributeValueFunction(value)
            ];
          };
          var attributeValue = subNode_1.bindedvalue[1] === void 0 ? element2.getAttribute(attributeName) : subNode_1.bindedvalue[1];
          element2.removeAttribute(attributeName);
          element2.setAttribute(subNode_1.attrName, attributeValue);
          this_2.updateContextData(listElement, subNode_1, isHeader);
        }
      };
      var this_2 = this;
      for (var i = 0; i < attributeNames.length; i++) {
        _loop_2(i);
      }
    };
    Virtualization2.prototype.textProperty = function(element2, listElement, isHeader) {
      var regex2 = new RegExp("\\${([^}]*)}", "g");
      var resultantOutput = [];
      var regexMatch;
      while (regexMatch !== null) {
        var match = regex2.exec(element2.innerText);
        resultantOutput.push(match);
        regexMatch = match;
        if (regexMatch === null) {
          resultantOutput.pop();
        }
      }
      var isChildHasTextContent = Array.prototype.some.call(element2.children, function(element3) {
        if (new RegExp("\\${([^}]*)}", "g").exec(element3.innerText)) {
          return true;
        } else {
          return false;
        }
      });
      if (resultantOutput && resultantOutput.length && !isChildHasTextContent) {
        var _loop_3 = function(i2) {
          var textPropertyMatch = resultantOutput[i2];
          var subNode = {};
          var textFunction;
          if (textPropertyMatch[1].indexOf("?") !== -1 && textPropertyMatch[1].indexOf(":") !== -1) {
            textFunction = new Function("data", "return " + textPropertyMatch[1].replace(/\$/g, "data."));
          } else {
            textFunction = new Function("data", "return data." + textPropertyMatch[1]);
          }
          if (isHeader) {
            subNode.bindedvalue = textFunction(this_3.headerData);
          } else {
            subNode.bindedvalue = textFunction(this_3.templateData);
          }
          subNode.onChange = function(value) {
            element2.innerText = element2.innerText.replace(subNode.bindedvalue, textFunction(value));
            subNode.bindedvalue = textFunction(value);
          };
          element2.innerText = element2.innerText.replace(textPropertyMatch[0], subNode.bindedvalue);
          this_3.updateContextData(listElement, subNode, isHeader);
        };
        var this_3 = this;
        for (var i = 0; i < resultantOutput.length; i++) {
          _loop_3(i);
        }
      }
    };
    Virtualization2.prototype.reRenderUiVirtualization = function() {
      this.wireScrollEvent(true);
      if (this.listViewInstance.contentContainer) {
        detach(this.listViewInstance.contentContainer);
      }
      this.listViewInstance.preRender();
      this.domItemCount = 0;
      this.listViewInstance.header();
      this.listViewInstance.setLocalData();
    };
    Virtualization2.prototype.updateUI = function(element2, index, targetElement2) {
      var onChange = this.isNgTemplate() ? this.onNgChange : this.onChange;
      if (this.listViewInstance.template || this.listViewInstance.groupTemplate) {
        var curViewDS = this.listViewInstance.curViewDS[index];
        element2.dataset.uid = curViewDS[this.listViewInstance.fields.id] ? (
          // eslint-disable-next-line
          curViewDS[this.listViewInstance.fields.id]
        ) : ListBase.generateId();
        onChange(curViewDS, element2, this);
      } else {
        this.updateUiContent(element2, index);
      }
      this.changeElementAttributes(element2, index);
      if (targetElement2) {
        this.listViewInstance.ulElement.insertBefore(element2, targetElement2);
      }
    };
    Virtualization2.prototype.onNgChange = function(newData, listElement, virtualThis) {
      var templateCompiler = compile2(virtualThis.listViewInstance.template);
      var resultElement = templateCompiler(newData);
      while (listElement.lastChild) {
        listElement.removeChild(listElement.lastChild);
      }
      listElement.appendChild(resultElement[0]);
    };
    Virtualization2.prototype.getModuleName = function() {
      return "virtualization";
    };
    Virtualization2.prototype.destroy = function() {
      this.wireScrollEvent(true);
    };
    return Virtualization2;
  }()
);

// node_modules/@syncfusion/ej2-lists/src/sortable/sortable.js
var __extends32 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate30 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Sortable = (
  /** @class */
  function(_super) {
    __extends32(Sortable2, _super);
    function Sortable2(element2, options) {
      var _this = _super.call(this, options, element2) || this;
      _this.getHelper = function(e) {
        var target = _this.getSortableElement(e.sender.target);
        if (!_this.isValidTarget(target, _this)) {
          return false;
        }
        var element3;
        if (_this.helper) {
          element3 = _this.helper({ sender: target, element: e.element });
        } else {
          element3 = target.cloneNode(true);
          element3.style.width = target.offsetWidth + "px";
          element3.style.height = target.offsetHeight + "px";
        }
        addClass([element3], ["e-sortableclone"]);
        document.body.appendChild(element3);
        return element3;
      };
      _this.onDrag = function(e) {
        _this.trigger("drag", { event: e.event, element: _this.element, target: e.target });
        var newInst = _this.getSortableInstance(e.target);
        var target = _this.getSortableElement(e.target, newInst);
        if ((_this.isValidTarget(target, newInst) || e.target.className.indexOf("e-list-group-item") > -1) && (_this.curTarget !== target || !isNullOrUndefined(newInst.placeHolder)) && (newInst.placeHolderElement ? newInst.placeHolderElement !== e.target : true)) {
          if (e.target.className.indexOf("e-list-group-item") > -1) {
            target = e.target;
          }
          _this.curTarget = target;
          if (_this.target === target) {
            return;
          }
          var oldIdx = _this.getIndex(newInst.placeHolderElement, newInst);
          var placeHolder = _this.getPlaceHolder(target, newInst);
          var newIdx = void 0;
          if (placeHolder) {
            oldIdx = isNullOrUndefined(oldIdx) ? _this.getIndex(_this.target) : oldIdx;
            newIdx = _this.getIndex(target, newInst, e.event);
            var isPlaceHolderPresent = _this.isPlaceHolderPresent(newInst);
            if (isPlaceHolderPresent && oldIdx === newIdx) {
              return;
            }
            if (isPlaceHolderPresent) {
              remove(newInst.placeHolderElement);
            }
            newInst.placeHolderElement = placeHolder;
            if (e.target.className.indexOf("e-list-group-item") > -1) {
              newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
            } else if (newInst.element !== _this.element && newIdx === newInst.element.childElementCount) {
              newInst.element.appendChild(newInst.placeHolderElement);
            } else {
              newInst.element.insertBefore(newInst.placeHolderElement, newInst.element.children[newIdx]);
            }
            _this.refreshDisabled(oldIdx, newIdx, newInst);
          } else {
            oldIdx = isNullOrUndefined(oldIdx) ? _this.getIndex(_this.target) : _this.getIndex(target, newInst) < oldIdx || !oldIdx ? oldIdx : oldIdx - 1;
            newIdx = _this.getIndex(target, newInst);
            var idx = newInst.element !== _this.element ? newIdx : oldIdx < newIdx ? newIdx + 1 : newIdx;
            _this.updateItemClass(newInst);
            newInst.element.insertBefore(_this.target, newInst.element.children[idx]);
            _this.refreshDisabled(oldIdx, newIdx, newInst);
            _this.curTarget = _this.target;
            _this.trigger("drop", {
              droppedElement: _this.target,
              element: newInst.element,
              previousIndex: oldIdx,
              currentIndex: newIdx,
              target: e.target,
              helper: document.getElementsByClassName("e-sortableclone")[0],
              event: e.event,
              scope: _this.scope
            });
          }
        }
        newInst = _this.getSortableInstance(_this.curTarget);
        if (isNullOrUndefined(target) && e.target !== newInst.placeHolderElement) {
          if (_this.isPlaceHolderPresent(newInst)) {
            _this.removePlaceHolder(newInst);
          }
        } else {
          var placeHolders = [].slice.call(document.getElementsByClassName("e-sortable-placeholder"));
          var inst_1;
          placeHolders.forEach(function(placeHolder2) {
            inst_1 = _this.getSortableInstance(placeHolder2);
            if (inst_1.element && inst_1 !== newInst) {
              _this.removePlaceHolder(inst_1);
            }
          });
        }
      };
      _this.onDragStart = function(e) {
        _this.target = _this.getSortableElement(e.target);
        var cancelDrag = false;
        _this.target.classList.add("e-grabbed");
        _this.curTarget = _this.target;
        e.helper = document.getElementsByClassName("e-sortableclone")[0];
        var args = { cancel: false, element: _this.element, target: _this.target };
        _this.trigger("beforeDragStart", args, function(observedArgs) {
          if (observedArgs.cancel) {
            cancelDrag = observedArgs.cancel;
            _this.onDragStop(e);
          }
        });
        if (cancelDrag) {
          return;
        }
        if (isBlazor) {
          _this.trigger("dragStart", {
            event: e.event,
            element: _this.element,
            target: _this.target,
            bindEvents: e.bindEvents,
            dragElement: e.dragElement
          });
        } else {
          _this.trigger("dragStart", { event: e.event, element: _this.element, target: _this.target });
        }
      };
      _this.onDragStop = function(e) {
        var dropInst = _this.getSortableInstance(_this.curTarget);
        var prevIdx;
        var curIdx;
        var handled;
        prevIdx = _this.getIndex(_this.target);
        var isPlaceHolderPresent = _this.isPlaceHolderPresent(dropInst);
        if (isPlaceHolderPresent) {
          var curIdx_1 = _this.getIndex(dropInst.placeHolderElement, dropInst);
          var args = {
            previousIndex: prevIdx,
            currentIndex: curIdx_1,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false,
            handled: false
          };
          _this.trigger("beforeDrop", args, function(observedArgs) {
            if (!observedArgs.cancel) {
              handled = observedArgs.handled;
              _this.updateItemClass(dropInst);
              if (observedArgs.handled) {
                var ele = _this.target.cloneNode(true);
                _this.target.classList.remove("e-grabbed");
                _this.target = ele;
              }
              dropInst.element.insertBefore(_this.target, dropInst.placeHolderElement);
              var curIdx_2 = _this.getIndex(_this.target, dropInst);
              prevIdx = _this === dropInst && prevIdx - curIdx_2 > 1 ? prevIdx - 1 : prevIdx;
              _this.trigger("drop", {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx_2,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope,
                handled
              });
            }
            remove(dropInst.placeHolderElement);
          });
        }
        dropInst = _this.getSortableInstance(e.target);
        curIdx = dropInst.element.childElementCount;
        prevIdx = _this.getIndex(_this.target);
        if (dropInst.element === e.target || !isPlaceHolderPresent && _this.curTarget === _this.target) {
          var beforeDropArgs = {
            previousIndex: prevIdx,
            currentIndex: _this.curTarget === _this.target ? prevIdx : curIdx,
            target: e.target,
            droppedElement: _this.target,
            helper: e.helper,
            cancel: false
          };
          _this.trigger("beforeDrop", beforeDropArgs, function(observedArgs) {
            if (dropInst.element === e.target && !observedArgs.cancel) {
              _this.updateItemClass(dropInst);
              dropInst.element.appendChild(_this.target);
              _this.trigger("drop", {
                event: e.event,
                element: dropInst.element,
                previousIndex: prevIdx,
                currentIndex: curIdx,
                target: e.target,
                helper: e.helper,
                droppedElement: _this.target,
                scopeName: _this.scope
              });
            }
          });
        }
        _this.target.classList.remove("e-grabbed");
        _this.target = null;
        _this.curTarget = null;
        remove(e.helper);
        getComponent(_this.element, Draggable).intDestroy(e.event);
      };
      _this.bind();
      return _this;
    }
    Sortable_1 = Sortable2;
    Sortable2.prototype.bind = function() {
      if (!this.element.id) {
        this.element.id = getUniqueID("sortable");
      }
      if (!this.itemClass) {
        this.itemClass = "e-sort-item";
        this.dataBind();
      }
      this.initializeDraggable();
    };
    Sortable2.prototype.initializeDraggable = function() {
      new Draggable(this.element, {
        helper: this.getHelper,
        dragStart: this.onDragStart,
        drag: this.onDrag,
        dragStop: this.onDragStop,
        dragTarget: "." + this.itemClass,
        enableTapHold: true,
        tapHoldThreshold: 200,
        queryPositionInfo: this.queryPositionInfo,
        distance: 5
      });
    };
    Sortable2.prototype.getPlaceHolder = function(target, instance) {
      if (instance.placeHolder) {
        var placeHolderElement = instance.placeHolder({ element: instance.element, grabbedElement: this.target, target });
        placeHolderElement.classList.add("e-sortable-placeholder");
        return placeHolderElement;
      }
      return null;
    };
    Sortable2.prototype.isValidTarget = function(target, instance) {
      return target && compareElementParent(target, instance.element) && target.classList.contains(instance.itemClass) && !target.classList.contains("e-disabled");
    };
    Sortable2.prototype.removePlaceHolder = function(instance) {
      remove(instance.placeHolderElement);
      instance.placeHolderElement = null;
    };
    Sortable2.prototype.updateItemClass = function(instance) {
      if (this !== instance) {
        this.target.classList.remove(this.itemClass);
        this.target.classList.add(instance.itemClass);
      }
    };
    Sortable2.prototype.getSortableInstance = function(element2) {
      element2 = closest(element2, ".e-" + this.getModuleName());
      if (element2) {
        var inst = getComponent(element2, Sortable_1);
        return inst.scope && this.scope && inst.scope === this.scope ? inst : this;
      } else {
        return this;
      }
    };
    Sortable2.prototype.refreshDisabled = function(oldIdx, newIdx, instance) {
      if (instance === this) {
        var element2 = void 0;
        var increased = oldIdx < newIdx;
        var disabledIdx = void 0;
        var start = increased ? oldIdx : newIdx;
        var end = increased ? newIdx : oldIdx;
        while (start <= end) {
          element2 = this.element.children[start];
          if (element2.classList.contains("e-disabled")) {
            disabledIdx = this.getIndex(element2);
            this.element.insertBefore(element2, this.element.children[increased ? disabledIdx + 2 : disabledIdx - 1]);
            start = increased ? disabledIdx + 2 : disabledIdx + 1;
          } else {
            start++;
          }
        }
      }
    };
    Sortable2.prototype.getIndex = function(target, instance, e) {
      if (instance === void 0) {
        instance = this;
      }
      var idx;
      var placeHolderPresent;
      [].slice.call(instance.element.children).forEach(function(element2, index) {
        if (element2.classList.contains("e-sortable-placeholder")) {
          placeHolderPresent = true;
        }
        if (element2 === target) {
          idx = index;
          if (!isNullOrUndefined(e)) {
            if (placeHolderPresent) {
              idx -= 1;
            }
            var offset = target.getBoundingClientRect();
            var clientY = offset.bottom - (offset.bottom - offset.top) / 2;
            idx = e.clientY <= clientY ? idx : idx + 1;
          }
          return;
        }
      });
      return idx;
    };
    Sortable2.prototype.getSortableElement = function(element2, instance) {
      if (instance === void 0) {
        instance = this;
      }
      return closest(element2, "." + instance.itemClass);
    };
    Sortable2.prototype.queryPositionInfo = function(value) {
      value.left = pageXOffset ? parseFloat(value.left) - pageXOffset + "px" : value.left;
      value.top = pageYOffset ? parseFloat(value.top) - pageYOffset + "px" : value.top;
      return value;
    };
    Sortable2.prototype.isPlaceHolderPresent = function(instance) {
      return instance.placeHolderElement && !!closest(instance.placeHolderElement, "#" + instance.element.id);
    };
    Sortable2.prototype.moveTo = function(destination, targetIndexes, insertBefore) {
      moveTo(this.element, destination, targetIndexes, insertBefore);
    };
    Sortable2.prototype.destroy = function() {
      if (this.itemClass === "e-sort-item") {
        this.itemClass = null;
        this.dataBind();
      }
      getComponent(this.element, Draggable).destroy();
      _super.prototype.destroy.call(this);
    };
    Sortable2.prototype.getModuleName = function() {
      return "sortable";
    };
    Sortable2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "itemClass":
            [].slice.call(this.element.children).forEach(function(element2) {
              if (element2.classList.contains(oldProp.itemClass)) {
                element2.classList.remove(oldProp.itemClass);
              }
              if (newProp.itemClass) {
                element2.classList.add(newProp.itemClass);
              }
            });
            break;
        }
      }
    };
    var Sortable_1;
    __decorate30([
      Property(false)
    ], Sortable2.prototype, "enableAnimation", void 0);
    __decorate30([
      Property(null)
    ], Sortable2.prototype, "itemClass", void 0);
    __decorate30([
      Property(null)
    ], Sortable2.prototype, "scope", void 0);
    __decorate30([
      Property()
    ], Sortable2.prototype, "helper", void 0);
    __decorate30([
      Property()
    ], Sortable2.prototype, "placeHolder", void 0);
    __decorate30([
      Event2()
    ], Sortable2.prototype, "drag", void 0);
    __decorate30([
      Event2()
    ], Sortable2.prototype, "beforeDragStart", void 0);
    __decorate30([
      Event2()
    ], Sortable2.prototype, "dragStart", void 0);
    __decorate30([
      Event2()
    ], Sortable2.prototype, "beforeDrop", void 0);
    __decorate30([
      Event2()
    ], Sortable2.prototype, "drop", void 0);
    Sortable2 = Sortable_1 = __decorate30([
      NotifyPropertyChanges
    ], Sortable2);
    return Sortable2;
  }(Base)
);
function moveTo(from, to, targetIndexes, insertBefore) {
  var targetElements = [];
  if (!to) {
    to = from;
  }
  if (targetIndexes && targetIndexes.length) {
    targetIndexes.forEach(function(index) {
      targetElements.push(from.children[index]);
    });
  } else {
    targetElements = [].slice.call(from.children);
  }
  if (isNullOrUndefined(insertBefore)) {
    targetElements.forEach(function(target) {
      to.appendChild(target);
    });
  } else {
    var insertElement_1 = to.children[insertBefore];
    targetElements.forEach(function(target) {
      to.insertBefore(target, insertElement_1);
    });
  }
}

// node_modules/@syncfusion/ej2-calendars/src/daterangepicker/daterangepicker.js
var __extends33 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate31 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATERANGEWRAPPER = "e-date-range-wrapper";
var INPUTCONTAINER2 = "e-input-group";
var DATERANGEICON = "e-input-group-icon e-range-icon e-icons";
var POPUP2 = "e-popup";
var LEFTCALENDER = "e-left-calendar";
var RIGHTCALENDER = "e-right-calendar";
var LEFTCONTAINER = "e-left-container";
var RIGHTCONTAINER = "e-right-container";
var ROOT7 = "e-daterangepicker";
var LIBRARY2 = "e-lib";
var CONTROL4 = "e-control";
var ERROR4 = "e-error";
var ACTIVE3 = "e-active";
var STARTENDCONTAINER = "e-start-end";
var STARTDATE = "e-start-date";
var ENDDATE = "e-end-date";
var STARTBUTTON = "e-start-btn";
var INPUTFOCUS2 = "e-input-focus";
var ENDBUTTON = "e-end-btn";
var RANGEHOVER = "e-range-hover";
var OTHERMONTH3 = "e-other-month";
var STARTLABEL = "e-start-label";
var ENDLABEL = "e-end-label";
var DISABLED7 = "e-disabled";
var SELECTED4 = "e-selected";
var CALENDAR = "e-calendar";
var NEXTICON2 = "e-next";
var PREVICON2 = "e-prev";
var HEADER2 = "e-header";
var TITLE2 = "e-title";
var ICONCONTAINER2 = "e-icon-container";
var RANGECONTAINER = "e-date-range-container";
var RANGEHEADER = "e-range-header";
var PRESETS = "e-presets";
var FOOTER2 = "e-footer";
var RANGEBORDER = "e-range-border";
var TODAY3 = "e-today";
var FOCUSDATE = "e-focused-date";
var CONTENT3 = "e-content";
var DAYSPAN = "e-day-span";
var WEEKNUMBER3 = "e-week-number";
var DATEDISABLED = "e-date-disabled";
var ICONDISABLED = "e-icon-disabled";
var CALENDARCONTAINER = "e-calendar-container";
var SEPARATOR = "e-separator";
var APPLY2 = "e-apply";
var CANCEL2 = "e-cancel";
var DEVICE4 = "e-device";
var OVERLAY3 = "e-overlay";
var CHANGEICON = "e-change-icon e-icons";
var LISTCLASS = "e-list-item";
var RTL10 = "e-rtl";
var HOVER = "e-hover";
var OVERFLOW2 = "e-range-overflow";
var OFFSETVALUE2 = 4;
var PRIMARY2 = "e-primary";
var FLAT2 = "e-flat";
var CSS2 = "e-css";
var ZOOMIN2 = "e-zoomin";
var NONEDITABLE = "e-non-edit";
var DAYHEADERLONG2 = "e-daterange-day-header-lg";
var HIDDENELEMENT2 = "e-daterange-hidden";
var wrapperAttr3 = ["title", "class", "style"];
var Presets = (
  /** @class */
  function(_super) {
    __extends33(Presets2, _super);
    function Presets2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate31([
      Property()
    ], Presets2.prototype, "label", void 0);
    __decorate31([
      Property()
    ], Presets2.prototype, "start", void 0);
    __decorate31([
      Property()
    ], Presets2.prototype, "end", void 0);
    return Presets2;
  }(ChildProperty)
);
var DateRangePicker = (
  /** @class */
  function(_super) {
    __extends33(DateRangePicker2, _super);
    function DateRangePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.isCustomRange = false;
      _this.isCustomWindow = false;
      _this.presetsItem = [];
      _this.liCollections = [];
      _this.previousEleValue = "";
      _this.isKeyPopup = false;
      _this.dateDisabled = false;
      _this.isRangeIconClicked = false;
      _this.isMaxDaysClicked = false;
      _this.disabledDays = [];
      _this.preventBlur = false;
      _this.preventFocus = false;
      _this.invalidValueString = null;
      _this.isAngular = false;
      _this.preventChange = false;
      _this.dateRangeOptions = options;
      return _this;
    }
    DateRangePicker2.prototype.render = function() {
      this.initialize();
      this.setProperties({ startDate: this.startValue }, true);
      this.setProperties({ endDate: this.endValue }, true);
      this.setModelValue();
      this.setDataAttribute(false);
      if (this.element.hasAttribute("data-val")) {
        this.element.setAttribute("data-val", "false");
      }
      this.renderComplete();
    };
    DateRangePicker2.prototype.preRender = function() {
      this.keyInputConfigs = {
        altDownArrow: "alt+downarrow",
        escape: "escape",
        enter: "enter",
        tab: "tab",
        altRightArrow: "alt+rightarrow",
        altLeftArrow: "alt+leftarrow",
        moveUp: "uparrow",
        moveDown: "downarrow",
        spacebar: "space"
      };
      this.defaultConstant = {
        placeholder: this.placeholder,
        startLabel: "Start Date",
        endLabel: "End Date",
        customRange: "Custom Range",
        applyText: "Apply",
        cancelText: "Cancel",
        selectedDays: "Selected Days",
        days: "days"
      };
      this.isMobile = window.matchMedia("(max-width:550px)").matches;
      this.inputElement = this.element;
      this.angularTag = null;
      if (this.element.tagName === "EJS-DATERANGEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT7, CONTROL4, LIBRARY2]);
      this.updateHtmlAttributeToElement();
      if (this.element.getAttribute("id")) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2-datetimepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, { "id": this.element.id + "_input" });
        }
      }
      this.checkInvalidRange(this.value);
      if (!this.invalidValueString && typeof this.value === "string") {
        var rangeArray = this.value.split(" " + this.separator + " ");
        this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
      }
      this.initProperty();
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      _super.prototype.preRender.call(this);
      this.navNextFunction = this.navNextMonth.bind(this);
      this.navPrevFunction = this.navPrevMonth.bind(this);
      this.deviceNavNextFunction = this.deviceNavNext.bind(this);
      this.deviceNavPrevFunction = this.deviceNavPrevious.bind(this);
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.formElement = closest(this.element, "form");
    };
    DateRangePicker2.prototype.updateValue = function() {
      if (this.value && this.value.length > 0) {
        if (this.value[0] instanceof Date && !isNaN(+this.value[0])) {
          this.setProperties({ startDate: this.value[0] }, true);
          this.startValue = this.value[0];
        } else if (typeof this.value[0] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.startValue = null;
            this.setValue();
          } else {
            this.setProperties({ startDate: new Date(this.checkValue(this.value[0])) }, true);
            this.startValue = new Date(this.checkValue(this.value[0]));
          }
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value[1] instanceof Date && !isNaN(+this.value[1])) {
          this.setProperties({ endDate: this.value[1] }, true);
          this.endValue = this.value[1];
        } else if (typeof this.value[1] === "string") {
          if (+this.value[0] === 0 || isNaN(+new Date(this.checkValue(this.value[0])))) {
            this.setProperties({ endDate: null }, true);
            this.endValue = null;
            this.setValue();
          } else {
            this.setProperties({ endDate: new Date(this.checkValue(this.value[1])) }, true);
            this.endValue = new Date(this.checkValue(this.value[1]));
            this.setValue();
          }
        } else {
          this.setProperties({ endDate: null }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (this.value && this.value.start) {
        if (this.value.start instanceof Date && !isNaN(+this.value.start)) {
          this.setProperties({ startDate: this.value.start }, true);
          this.startValue = this.value.start;
        } else if (typeof this.value.start === "string") {
          this.setProperties({ startDate: new Date(this.checkValue(this.value.start)) }, true);
          this.startValue = new Date(this.checkValue(this.value.start));
        } else {
          this.startValue = null;
          this.setValue();
        }
        if (this.value.end instanceof Date && !isNaN(+this.value.end)) {
          this.setProperties({ endDate: this.value.end }, true);
          this.endValue = this.value.end;
        } else if (typeof this.value.end === "string") {
          this.setProperties({ endDate: new Date(this.checkValue(this.value.end)) }, true);
          this.endValue = new Date(this.checkValue(this.value.end));
          this.setValue();
        } else {
          this.setProperties({ endDate: null }, true);
          this.endValue = null;
          this.setValue();
        }
      } else if (isNullOrUndefined(this.value)) {
        this.endValue = this.checkDateValue(new Date(this.checkValue(this.endDate)));
        this.startValue = this.checkDateValue(new Date(this.checkValue(this.startDate)));
        this.setValue();
      }
    };
    DateRangePicker2.prototype.initProperty = function() {
      this.globalize = new Internationalization(this.locale);
      this.checkFormat();
      this.checkView();
      if (isNullOrUndefined(this.firstDayOfWeek) || this.firstDayOfWeek > 6 || this.firstDayOfWeek < 0) {
        this.setProperties({ firstDayOfWeek: this.globalize.getFirstDayOfWeek() }, true);
      }
      this.updateValue();
    };
    DateRangePicker2.prototype.checkFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (this.format.skeleton !== "" && !isNullOrUndefined(this.format.skeleton)) {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({ skeleton: skeletonString, type: "date" });
        } else {
          this.formatString = null;
        }
      } else {
        this.formatString = null;
      }
    };
    DateRangePicker2.prototype.initialize = function() {
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.checkHtmlAttributes(false);
      merge(this.defaultKeyConfigs, { shiftTab: "shift+tab" });
      var start = this.checkDateValue(new Date(this.checkValue(this.startValue)));
      this.setProperties({ startDate: start }, true);
      this.setProperties({ endValue: this.checkDateValue(new Date(this.checkValue(this.endValue))) }, true);
      this.setValue();
      this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(this.min))) }, true);
      this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(this.max))) }, true);
      this.l10n = new L10n("daterangepicker", this.defaultConstant, this.locale);
      this.l10n.setLocale(this.locale);
      this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      this.processPresets();
      this.createInput();
      this.updateHtmlAttributeToWrapper();
      this.setRangeAllowEdit();
      this.bindEvents();
    };
    DateRangePicker2.prototype.setDataAttribute = function(isDynamic) {
      var attributes2 = {};
      if (!isDynamic) {
        for (var i = 0; i < this.element.attributes.length; i++) {
          attributes2[this.element.attributes[i].name] = this.element.getAttribute(this.element.attributes[i].name);
        }
      } else {
        attributes2 = this.htmlAttributes;
      }
      for (var _i = 0, _a = Object.keys(attributes2); _i < _a.length; _i++) {
        var pro = _a[_i];
        if (pro.indexOf("data") === 0) {
          this.firstHiddenChild.setAttribute(pro, attributes2[pro]);
          this.secondHiddenChild.setAttribute(pro, attributes2[pro]);
        }
      }
    };
    DateRangePicker2.prototype.setRangeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, { "readonly": "" });
      }
      this.updateClearIconState();
    };
    DateRangePicker2.prototype.updateClearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [NONEDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [NONEDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [NONEDITABLE]);
      }
    };
    DateRangePicker2.prototype.validationAttribute = function(element2, input) {
      var name = element2.getAttribute("name") ? element2.getAttribute("name") : element2.getAttribute("id");
      input.setAttribute("name", name);
      element2.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(element2.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = element2.getAttribute(attributes2[i]);
        input.setAttribute(attributes2[i], attr);
        element2.removeAttribute(attributes2[i]);
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr3.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassValue = this.htmlAttributes[key].replace(/\s+/g, " ").trim();
              if (updatedClassValue !== "") {
                addClass([this.inputWrapper.container], updatedClassValue.split(" "));
              }
            } else if (key === "style") {
              var dateRangeStyle = this.inputWrapper.container.getAttribute(key);
              dateRangeStyle = !isNullOrUndefined(dateRangeStyle) ? dateRangeStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
              this.inputWrapper.container.setAttribute(key, dateRangeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttr3.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes[key]);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateCssClass = function(cssNewClass, cssOldClass) {
      if (!isNullOrUndefined(cssOldClass)) {
        cssOldClass = cssOldClass.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssNewClass)) {
        cssNewClass = cssNewClass.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssNewClass, [this.inputWrapper.container], cssOldClass);
      if (this.popupWrapper) {
        Input.setCssClass(cssNewClass, [this.popupWrapper], cssOldClass);
      }
    };
    DateRangePicker2.prototype.processPresets = function() {
      this.presetsItem = [];
      var i = 0;
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        for (var _i = 0, _a = this.presets; _i < _a.length; _i++) {
          var range = _a[_i];
          var id = range.label.replace(/\s+/g, "") + "_" + ++i;
          if (typeof range.end === "string") {
            this.presetsItem.push({
              id,
              text: range.label,
              end: new Date(this.checkValue(range.end)),
              start: new Date(this.checkValue(range.start))
            });
          } else {
            this.presetsItem.push({ id, text: range.label, start: range.start, end: range.end });
          }
        }
        var startDate = isNullOrUndefined(this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
        var endDate = isNullOrUndefined(this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
        this.presetsItem.push({ id: "custom_range", text: this.l10n.getConstant("customRange"), start: startDate, end: endDate });
        if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
          this.isCustomRange = true;
          this.activeIndex = this.presetsItem.length - 1;
        }
      }
    };
    DateRangePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
      if (!this.isMobile) {
        this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
        this.inputKeyboardModule = new KeyboardEvents(this.inputElement, {
          eventName: "keydown",
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyInputConfigs
        });
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (this.enabled) {
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.inputElement.tabIndex = -1;
      }
    };
    DateRangePicker2.prototype.unBindEvents = function() {
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.resetHandler);
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.inputKeyboardModule)) {
          this.inputKeyboardModule.destroy();
        }
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      this.inputElement.tabIndex = -1;
    };
    DateRangePicker2.prototype.updateHiddenInput = function() {
      if (this.firstHiddenChild && this.secondHiddenChild) {
        var format = { type: "datetime", skeleton: "yMd" };
        if (typeof this.startDate === "string") {
          this.startDate = this.globalize.parseDate(this.startDate, format);
        }
        if (typeof this.endDate === "string") {
          this.endDate = this.globalize.parseDate(this.endDate, format);
        }
        this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format) || this.inputElement.value;
        this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format) || this.inputElement.value;
        this.dispatchEvent(this.firstHiddenChild, "focusout");
        this.dispatchEvent(this.firstHiddenChild, "change");
      }
    };
    DateRangePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.resetHandler, this);
      }
    };
    DateRangePicker2.prototype.resetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.valueType = this.value;
      e.preventDefault();
      this.clear();
      var clearedArgs = {
        event: e
      };
      this.setProperties({ endDate: this.checkDateValue(this.endValue) }, true);
      this.setProperties({ startDate: this.checkDateValue(this.startValue) }, true);
      this.trigger("cleared", clearedArgs);
      this.changeTrigger(e);
      this.clearRange();
      this.hide(e);
    };
    DateRangePicker2.prototype.restoreValue = function() {
      this.previousEleValue = this.inputElement.value;
      this.previousStartValue = this.startValue;
      this.previousEndValue = this.endValue;
      this.valueType = null;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
      this.setValue();
      this.setModelValue();
    };
    DateRangePicker2.prototype.formResetHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.formElement && e.target === this.formElement && !this.inputElement.disabled) {
        var val = this.inputElement.getAttribute("value");
        if (!isNullOrUndefined(this.startCopy)) {
          if (!isNullOrUndefined(this.value) && !isNullOrUndefined(this.value.start)) {
            this.setProperties({ value: { start: this.startCopy, end: this.endCopy } }, true);
            this.startValue = this.value.start;
            this.endValue = this.value.end;
          } else {
            this.setProperties({ value: [this.startCopy, this.endCopy] }, true);
            this.startValue = this.value[0];
            this.endValue = this.value[1];
          }
          this.setProperties({ startDate: this.startValue, endDate: this.endValue }, true);
        } else {
          this.setProperties({ value: null, startDate: null, endDate: null }, true);
          this.startValue = this.endValue = null;
        }
        if (this.element.tagName === "EJS-DATERANGEPICKER") {
          this.setProperties({ value: null, startDate: null, endDate: null }, true);
          val = "";
          this.startValue = this.endValue = null;
          this.inputElement.setAttribute("value", "");
        }
        this.restoreValue();
        if (this.inputElement) {
          Input.setValue(val, this.inputElement, this.floatLabelType, this.showClearButton);
          this.errorClass();
        }
      }
    };
    DateRangePicker2.prototype.clear = function() {
      if (this.startValue !== null) {
        this.startValue = null;
      }
      if (this.endValue !== null) {
        this.endValue = null;
      }
      if (this.value && this.value.start) {
        this.setProperties({ value: { start: null, end: null } }, true);
      }
      if (this.value !== null && this.value.length > 0) {
        this.setProperties({ value: null }, true);
      }
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      if (!isNullOrUndefined(this.applyButton)) {
        this.applyButton.disabled = this.applyButton.element.disabled = true;
      }
      this.removeSelection();
    };
    DateRangePicker2.prototype.rangeIconHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isMobile) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      this.targetElement = null;
      if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
        this.applyFunction(e);
      } else {
        this.isRangeIconClicked = true;
        this.inputWrapper.container.children[0].focus();
        this.show(null, e);
        if (!this.isMobile) {
          if (!isNullOrUndefined(this.leftCalendar)) {
            this.isRangeIconClicked = false;
            this.calendarFocus();
            this.isRangeIconClicked = true;
          }
        }
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
    };
    DateRangePicker2.prototype.checkHtmlAttributes = function(isDynamic) {
      this.globalize = new Internationalization(this.locale);
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : [
        "startDate",
        "endDate",
        "minDays",
        "maxDays",
        "min",
        "max",
        "disabled",
        "readonly",
        "style",
        "name",
        "placeholder",
        "type",
        "value"
      ];
      var format = { format: this.formatString, type: "date", skeleton: "yMd" };
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["enabled"] === void 0 || isDynamic) {
                var disabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ enabled: !disabled }, !isDynamic);
              }
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateRangeOptions) || this.dateRangeOptions["value"] === void 0 || isDynamic) {
                var value = this.inputElement.getAttribute(prop);
                this.setProperties(setValue(prop, value, {}), !isDynamic);
              }
              break;
            case "style":
              this.inputElement.setAttribute("style", "" + this.inputElement.getAttribute(prop));
              break;
            case "min":
              if (isNullOrUndefined(this.min) || +this.min === +new Date(1900, 0, 1) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", "" + this.inputElement.getAttribute(prop));
              break;
            case "max":
              if (isNullOrUndefined(this.max) || +this.max === +new Date(2099, 11, 31) || isDynamic) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.setProperties(setValue(prop, dateValue, {}), !isDynamic);
              }
              break;
            case "startDate":
              if (isNullOrUndefined(this.startDate)) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.startValue = dateValue;
                this.setValue();
              }
              break;
            case "endDate":
              if (isNullOrUndefined(this.endDate)) {
                var dateValue = this.globalize.parseDate(this.inputElement.getAttribute(prop), format);
                this.endValue = dateValue;
                this.setValue();
              }
              break;
            case "minDays":
              if (isNullOrUndefined(this.minDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "maxDays":
              if (isNullOrUndefined(this.maxDays)) {
                this.setProperties(setValue(prop, parseInt(this.inputElement.getAttribute(prop), 10), {}), true);
              }
              break;
            case "type":
              if (this.inputElement.getAttribute(prop) !== "text") {
                this.inputElement.setAttribute("type", "text");
              }
              break;
          }
        }
      }
    };
    DateRangePicker2.prototype.createPopup = function() {
      for (var i = 0; i < this.presetsItem.length; i++) {
        if (i !== this.presetsItem.length - 1 && this.presetsItem[i].id === "custom_range") {
          this.presetsItem.splice(i, 1);
        }
      }
      this.activeIndex = this.presetsItem.length - 1;
      this.isCustomRange = true;
      for (var i = 0; i <= this.presetsItem.length - 2; i++) {
        var startDate = this.presetsItem[i].start;
        var endDate = this.presetsItem[i].end;
        if (this.startValue && this.endValue) {
          if (+new Date(startDate.setHours(0, 0, 0, 0)) === +new Date(this.startValue.setHours(0, 0, 0, 0)) && +new Date(endDate.setHours(0, 0, 0, 0)) === +new Date(this.endValue.setHours(0, 0, 0, 0))) {
            this.activeIndex = i;
            this.isCustomRange = false;
          }
        }
      }
      this.popupWrapper = createElement("div", { id: this.element.id + "_popup", className: ROOT7 + " " + POPUP2 });
      this.adjustLongHeaderWidth();
      var isPreset = !this.isCustomRange || this.isMobile;
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && isPreset) {
        this.isCustomWindow = false;
        this.createPresets();
        this.listRippleEffect();
        this.renderPopup();
      } else {
        this.isCustomWindow = true;
        this.renderControl();
      }
    };
    DateRangePicker2.prototype.renderControl = function() {
      this.createControl();
      this.bindCalendarEvents();
      this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        this.disabledDateRender();
      }
      this.updateHeader();
    };
    DateRangePicker2.prototype.clearCalendarEvents = function() {
      EventHandler.clearEvents(this.leftCalPrevIcon);
      EventHandler.clearEvents(this.leftCalNextIcon);
      EventHandler.clearEvents(this.rightCalPrevIcon);
      EventHandler.clearEvents(this.rightCalNextIcon);
    };
    DateRangePicker2.prototype.updateNavIcons = function() {
      _super.prototype.iconHandler.call(this);
    };
    DateRangePicker2.prototype.calendarIconEvent = function() {
      this.clearCalendarEvents();
      if (this.leftCalPrevIcon && !this.leftCalPrevIcon.classList.contains(DISABLED7)) {
        EventHandler.add(this.leftCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.leftCalNextIcon && !this.leftCalNextIcon.classList.contains(DISABLED7)) {
        EventHandler.add(this.leftCalNextIcon, "mousedown", this.navNextFunction);
      }
      if (this.rightCalPrevIcon && !this.rightCalPrevIcon.classList.contains(DISABLED7)) {
        EventHandler.add(this.rightCalPrevIcon, "mousedown", this.navPrevFunction);
      }
      if (this.rightCalNextIcon && !this.rightCalNextIcon.classList.contains(DISABLED7)) {
        EventHandler.add(this.rightCalNextIcon, "mousedown", this.navNextFunction);
      }
    };
    DateRangePicker2.prototype.bindCalendarEvents = function() {
      if (!this.isMobile) {
        this.updateNavIcons();
        this.calendarIconEvent();
        this.calendarIconRipple();
        this.headerTitleElement = this.popupObj.element.querySelector("." + RIGHTCALENDER + " ." + HEADER2 + " ." + TITLE2);
        this.headerTitleElement = this.popupObj.element.querySelector("." + LEFTCALENDER + " ." + HEADER2 + " ." + TITLE2);
        this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
        this.leftKeyboardModule = new KeyboardEvents(this.leftCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
        this.rightKeyboardModule = new KeyboardEvents(this.rightCalendar, {
          eventName: "keydown",
          keyAction: this.keyInputHandler.bind(this),
          keyConfigs: this.defaultKeyConfigs
        });
      } else {
        this.deviceCalendarEvent();
        EventHandler.add(this.startButton.element, "click", this.deviceHeaderClick, this);
        EventHandler.add(this.endButton.element, "click", this.deviceHeaderClick, this);
      }
      if (this.start === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.calendarIconRipple = function() {
      rippleEffect(this.leftCalPrevIcon, { selector: ".e-prev", duration: 400, isCenterRipple: true });
      rippleEffect(this.leftCalNextIcon, { selector: ".e-next", duration: 400, isCenterRipple: true });
      rippleEffect(this.rightCalPrevIcon, { selector: ".e-prev", duration: 400, isCenterRipple: true });
      rippleEffect(this.rightCalNextIcon, { selector: ".e-next", duration: 400, isCenterRipple: true });
    };
    DateRangePicker2.prototype.deviceCalendarEvent = function() {
      EventHandler.clearEvents(this.nextIcon);
      EventHandler.clearEvents(this.previousIcon);
      rippleEffect(this.nextIcon, { selector: ".e-prev", duration: 400, isCenterRipple: true });
      rippleEffect(this.previousIcon, { selector: ".e-next", duration: 400, isCenterRipple: true });
      if (this.nextIcon && !this.nextIcon.classList.contains(DISABLED7)) {
        EventHandler.add(this.nextIcon, "mousedown", this.deviceNavNextFunction);
      }
      if (this.previousIcon && !this.previousIcon.classList.contains(DISABLED7)) {
        EventHandler.add(this.previousIcon, "mousedown", this.deviceNavPrevFunction);
      }
    };
    DateRangePicker2.prototype.deviceNavNext = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigateNext(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.deviceNavPrevious = function(e) {
      var calendar = closest(e.target, "." + CALENDAR);
      this.updateDeviceCalendar(calendar);
      this.navigatePrevious(e);
      this.deviceNavigation();
    };
    DateRangePicker2.prototype.updateDeviceCalendar = function(calendar) {
      if (calendar) {
        this.previousIcon = calendar.querySelector("." + PREVICON2);
        this.nextIcon = calendar.querySelector("." + NEXTICON2);
        this.calendarElement = calendar;
        this.deviceCalendar = calendar;
        this.contentElement = calendar.querySelector("." + CONTENT3);
        this.tableBodyElement = select("." + CONTENT3 + " tbody", calendar);
        this.table = calendar.querySelector("." + CONTENT3).getElementsByTagName("table")[0];
        this.headerTitleElement = calendar.querySelector("." + HEADER2 + " ." + TITLE2);
        this.headerElement = calendar.querySelector("." + HEADER2);
      }
    };
    DateRangePicker2.prototype.deviceHeaderClick = function(event) {
      var element2 = event.currentTarget;
      if (element2.classList.contains(STARTBUTTON) && !isNullOrUndefined(this.startValue)) {
        this.endButton.element.classList.remove(ACTIVE3);
        this.startButton.element.classList.add(ACTIVE3);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + STARTDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.removeClassDisabled();
      } else if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        this.startButton.element.classList.remove(ACTIVE3);
        this.endButton.element.classList.add(ACTIVE3);
        var calendar = this.popupObj.element.querySelector("." + CALENDAR);
        this.updateDeviceCalendar(calendar);
        if (isNullOrUndefined(this.calendarElement.querySelector("." + ENDDATE + ":not(.e-other-month)"))) {
          this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
          remove(this.tableBodyElement);
          this.createContentBody();
          this.deviceNavigation();
        }
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        this.selectableDates();
      }
    };
    DateRangePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      this.preventBlur = false;
      var focusArguments = {
        model: this
      };
      if (!this.preventFocus) {
        this.trigger("focus", focusArguments);
      }
      this.updateClearIconState();
      this.updateHiddenInput();
      if (this.openOnFocus && !this.preventFocus) {
        this.preventFocus = true;
        this.show();
      } else {
        this.preventFocus = true;
      }
    };
    DateRangePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (!this.preventBlur) {
        var value = this.inputElement.value;
        if (!isNullOrUndefined(this.presetsItem)) {
          if (this.presetsItem.length > 0 && this.previousEleValue !== this.inputElement.value) {
            this.activeIndex = this.presetsItem.length - 1;
            this.isCustomRange = true;
          }
        }
        if (!isNullOrUndefined(value) && value.trim() !== "") {
          var range = value.split(" " + this.separator + " ");
          if (range.length > 1) {
            this.invalidValueString = null;
            var dateOptions = { format: this.formatString, type: "date", skeleton: "yMd" };
            var startDate = this.globalize.parseDate(range[0].trim(), dateOptions);
            var endDate = this.globalize.parseDate(range[1].trim(), dateOptions);
            if (!isNullOrUndefined(startDate) && !isNaN(+startDate) && !isNullOrUndefined(endDate) && !isNaN(+endDate)) {
              var prevStartVal = this.startValue;
              this.startValue = startDate;
              var prevEndVal = this.endValue;
              this.endValue = endDate;
              this.setValue();
              this.refreshControl();
              if (value !== this.previousEleValue) {
                this.changeTrigger(e);
              }
              if (!this.preventBlur && document.activeElement !== this.inputElement) {
                this.preventFocus = false;
                var blurArguments = {
                  model: this
                };
                this.trigger("blur", blurArguments);
              }
              this.updateHiddenInput();
              if (this.isMobile && this.isPopupOpen()) {
                this.startValue = prevStartVal;
                this.endValue = prevEndVal;
              }
              return;
            } else {
              if (!this.strictMode) {
                this.startValue = null;
                this.endValue = null;
                this.setValue();
              }
            }
          } else {
            if (!this.strictMode) {
              this.startValue = null;
              this.endValue = null;
              this.setValue();
            }
          }
        }
        if (!this.strictMode) {
          if (isNullOrUndefined(this.popupObj)) {
            this.currentDate = null;
          }
          this.previousStartValue = this.previousEndValue = null;
          this.startValue = null;
          this.endValue = null;
          this.setValue();
        } else {
          if (!isNullOrUndefined(value) && value.trim() === "") {
            this.startValue = null;
            this.endValue = null;
          }
          Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
          this.updateInput();
        }
        this.errorClass();
        this.changeTrigger(e);
        if (!this.preventBlur && document.activeElement !== this.inputElement) {
          this.preventFocus = false;
          var blurArguments = {
            model: this
          };
          this.trigger("blur", blurArguments);
        }
      }
      this.updateHiddenInput();
    };
    DateRangePicker2.prototype.clearRange = function() {
      this.previousStartValue = this.previousEndValue = null;
      this.currentDate = null;
    };
    DateRangePicker2.prototype.errorClass = function() {
      var inputStr = this.inputElement.value.trim();
      if ((isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) && inputStr !== "" || (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max) || (this.startValue && this.isDateDisabled(this.startValue) || this.endValue && this.isDateDisabled(this.endValue))) && inputStr !== "") {
        addClass([this.inputWrapper.container], ERROR4);
        attributes(this.inputElement, { "aria-invalid": "true" });
      } else {
        if (this.inputWrapper) {
          removeClass([this.inputWrapper.container], ERROR4);
          attributes(this.inputElement, { "aria-invalid": "false" });
        }
      }
    };
    DateRangePicker2.prototype.keyCalendarUpdate = function(isLeftCalendar, ele) {
      this.removeFocusedDate();
      if (isLeftCalendar) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.leftCalendar;
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        ele = this.rightCalendar;
      }
      this.updateCalendarElement(ele);
      this.table.focus();
      return ele;
    };
    DateRangePicker2.prototype.navInCalendar = function(e, isLeftCalendar, leftLimit, rightLimit, ele) {
      var view = this.getViewNumber(this.currentView());
      var date;
      var min = this.min;
      var max;
      if (!isNullOrUndefined(this.maxDays) && this.isMaxDaysClicked && !isNullOrUndefined(this.startValue)) {
        max = new Date((/* @__PURE__ */ new Date(+this.startValue)).setDate(this.startValue.getDate() + (this.maxDays - 1)));
      } else {
        max = this.max;
      }
      switch (e.action) {
        case "moveRight":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, 1, e, max, min);
          if (isLeftCalendar && +date === +rightLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.keyboardNavigate(1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveLeft":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addDay(date, -1, e, max, min);
          if (!isLeftCalendar) {
            if (+date === +leftLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
          }
          this.keyboardNavigate(-1, view, e, max, min);
          this.keyNavigation(ele, e);
          break;
        case "moveUp":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, -7, e, max, min);
            if (+date <= +leftLimit && !isLeftCalendar) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            this.keyboardNavigate(-7, view, e, max, min);
          } else {
            this.keyboardNavigate(-4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "moveDown":
          if (view === 0) {
            date = /* @__PURE__ */ new Date(+this.currentDate);
            this.addDay(date, 7, e, max, min);
            if (isLeftCalendar && +date >= +rightLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            this.keyboardNavigate(7, view, e, max, min);
          } else {
            this.keyboardNavigate(4, view, e, this.max, this.min);
          }
          this.keyNavigation(ele, e);
          break;
        case "home":
          this.currentDate = this.firstDay(this.currentDate);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
        case "end":
          this.currentDate = this.lastDay(this.currentDate, view);
          remove(this.tableBodyElement);
          if (view === 0) {
            this.renderMonths(e);
          } else if (view === 1) {
            this.renderYears(e);
          } else {
            this.renderDecades(e);
          }
          this.keyNavigation(ele, e);
          break;
      }
    };
    DateRangePicker2.prototype.keyInputHandler = function(e, value) {
      var date;
      var view = this.getViewNumber(this.currentView());
      var rightDateLimit = new Date(this.rightCalCurrentDate.getFullYear(), this.rightCalCurrentDate.getMonth(), 1);
      var leftDateLimit = new Date(this.leftCalCurrentDate.getFullYear(), this.leftCalCurrentDate.getMonth() + 1, 0);
      var ele = closest(e.target, "." + RIGHTCALENDER);
      ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
      var isLeftCalendar = ele.classList.contains(LEFTCALENDER);
      this.updateCalendarElement(ele);
      var selectedDate = this.tableBodyElement.querySelector("tr td.e-selected");
      var focusedDate = ele.querySelector("tr td." + FOCUSDATE);
      var startDate = ele.querySelector("tr td." + STARTDATE);
      var endDate = ele.querySelector("tr td." + ENDDATE);
      var depthValue = this.getViewNumber(this.depth);
      var levelRestrict = view === depthValue && this.getViewNumber(this.start) >= depthValue;
      var leftCalendar = closest(e.target, "." + LEFTCALENDER);
      var rightCalendar = closest(e.target, "." + RIGHTCALENDER);
      var presetElement = closest(e.target, "." + PRESETS);
      if (!isNullOrUndefined(focusedDate)) {
        this.currentDate = this.currentDate;
      } else if (!isNullOrUndefined(endDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else if (!isNullOrUndefined(startDate) && !this.dateDisabled) {
        this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
      } else if (!this.dateDisabled) {
        this.currentDate.setDate(1);
      }
      this.effect = "";
      switch (e.action) {
        case "altUpArrow":
          if (this.isPopupOpen()) {
            this.hide(e);
            this.preventFocus = true;
            this.inputElement.focus();
            addClass([this.inputWrapper.container], [INPUTFOCUS2]);
          }
          break;
        case "select":
          if (levelRestrict) {
            var element2 = !isNullOrUndefined(focusedDate) ? focusedDate : startDate;
            if (!isNullOrUndefined(element2) && !element2.classList.contains(DISABLED7)) {
              this.selectRange(null, element2);
            }
          } else {
            if (!isNullOrUndefined(selectedDate) && !levelRestrict || !isNullOrUndefined(focusedDate)) {
              if (!isNullOrUndefined(this.value)) {
                if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                  value = this.startDate;
                } else {
                  value = this.endDate;
                }
              }
              this.controlDown = e;
              this.contentClick(null, --view, focusedDate || selectedDate, value);
            }
          }
          e.preventDefault();
          break;
        case "controlHome":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 0, 1);
            if (!isLeftCalendar && +yearDate < +leftDateLimit) {
              ele = this.keyCalendarUpdate(true, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 0, 1));
            this.keyNavigation(ele, e);
          }
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else if (!isNullOrUndefined(rightCalendar)) {
            if (!isNullOrUndefined(this.presetElement)) {
              this.presetElement.focus();
              this.removeFocusedDate();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(presetElement)) {
              this.cancelButton.element.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(leftCalendar)) {
            if (this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.cancelButton.element.focus();
            }
          } else {
            if (!isNullOrUndefined(rightCalendar)) {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "controlUp":
          if (this.calendarElement.classList.contains(LEFTCALENDER)) {
            this.calendarNavigation(e, this.calendarElement);
          } else {
            this.calendarNavigation(e, this.calendarElement);
          }
          e.preventDefault();
          break;
        case "controlDown":
          if ((!isNullOrUndefined(selectedDate) || !isNullOrUndefined(focusedDate)) && !levelRestrict) {
            if (!isNullOrUndefined(this.value)) {
              if (this.calendarElement.classList.contains(LEFTCALENDER)) {
                value = this.startDate;
              } else {
                value = this.endDate;
              }
            }
            this.controlDown = e;
            this.contentClick(null, --view, selectedDate || focusedDate, value);
          }
          e.preventDefault();
          break;
        case "controlEnd":
          {
            var yearDate = new Date(this.currentDate.getFullYear(), 11, 31);
            if (isLeftCalendar && +yearDate > +rightDateLimit) {
              ele = this.keyCalendarUpdate(false, ele);
            }
            _super.prototype.navigateTo.call(this, "Month", new Date(this.currentDate.getFullYear(), 11, 31));
            this.keyNavigation(ele, e);
          }
          break;
        case "pageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addMonths(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "pageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addMonths(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addMonths(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageUp":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, -1);
          if (!isLeftCalendar && +date <= +leftDateLimit) {
            ele = this.keyCalendarUpdate(true, ele);
          }
          this.addYears(this.currentDate, -1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftPageDown":
          date = /* @__PURE__ */ new Date(+this.currentDate);
          this.addYears(date, 1);
          if (isLeftCalendar && +date >= +rightDateLimit) {
            ele = this.keyCalendarUpdate(false, ele);
          }
          this.addYears(this.currentDate, 1);
          _super.prototype.navigateTo.call(this, "Month", this.currentDate);
          this.keyNavigation(ele, e);
          break;
        case "shiftTab":
          if (!isNullOrUndefined(this.presetElement)) {
            this.presetElement.setAttribute("tabindex", "0");
            this.presetElement.focus();
            this.removeFocusedDate();
          }
          e.preventDefault();
          break;
        case "spacebar":
          if (this.applyButton && !this.applyButton.disabled) {
            this.applyFunction(e);
          }
          break;
        default:
          this.navInCalendar(e, isLeftCalendar, leftDateLimit, rightDateLimit, ele);
          this.checkMinMaxDays();
      }
      this.presetHeight();
    };
    DateRangePicker2.prototype.keyNavigation = function(calendar, e) {
      this.bindCalendarCellEvents(calendar);
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      } else {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.updateNavIcons();
      this.calendarIconEvent();
      this.updateRange([calendar]);
      this.dateDisabled = this.isDateDisabled(this.currentDate);
      e.preventDefault();
    };
    DateRangePicker2.prototype.inputHandler = function(e) {
      switch (e.action) {
        case "altDownArrow":
          if (!this.isPopupOpen()) {
            if (this.inputElement.value === "") {
              this.clear();
              this.changeTrigger(e);
              this.clearRange();
            }
            this.show(null, e);
            this.isRangeIconClicked = false;
            if (!this.isMobile) {
              if (!isNullOrUndefined(this.leftCalendar)) {
                this.calendarFocus();
              }
            }
            this.isKeyPopup = true;
          }
          break;
        case "escape":
          if (this.isPopupOpen()) {
            this.hide(e);
          }
          break;
        case "enter":
          if (document.activeElement === this.inputElement) {
            this.inputBlurHandler(e);
            this.hide(e);
          }
          break;
        case "tab":
          if (document.activeElement === this.inputElement && this.isPopupOpen()) {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.bindCalendarCellEvents = function(calendar) {
      var tdCells;
      if (calendar) {
        tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
      } else {
        tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
      }
      for (var _i = 0, tdCells_1 = tdCells; _i < tdCells_1.length; _i++) {
        var cell = tdCells_1[_i];
        EventHandler.clearEvents(cell);
        var disabledCell = cell.classList.contains(DISABLED7) || cell.classList.contains(DATEDISABLED);
        if (!disabledCell && !cell.classList.contains(WEEKNUMBER3)) {
          if (!this.isMobile) {
            EventHandler.add(cell, "mouseover", this.hoverSelection, this);
          }
          EventHandler.add(cell, "mousedown", this.selectRange, this);
        }
      }
    };
    DateRangePicker2.prototype.removeFocusedDate = function() {
      var isDate = !isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.endValue);
      var focusedDate = this.popupObj.element.querySelectorAll("." + CALENDAR + " ." + FOCUSDATE);
      for (var _i = 0, focusedDate_1 = focusedDate; _i < focusedDate_1.length; _i++) {
        var ele = focusedDate_1[_i];
        var today = /* @__PURE__ */ new Date();
        var eleDate = this.getIdValue(null, ele);
        if (this.depth === "Month" && this.currentView() === "Month" && (!ele.classList.contains(TODAY3) || ele.classList.contains(TODAY3) && isDate) || this.depth === "Year" && this.currentView() === "Year" && (!this.isSameMonth(today, eleDate) && !this.isSameYear(today, eleDate) || isDate) || this.depth === "Decade" && this.currentView() === "Decade" && (!this.isSameYear(today, eleDate) || isDate)) {
          ele.classList.remove(FOCUSDATE);
          if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(ENDDATE)) {
            ele.removeAttribute("aria-label");
          }
        }
      }
    };
    DateRangePicker2.prototype.hoverSelection = function(event, element2) {
      var currentElement = element2 || event.currentTarget;
      var currentDate = this.getIdValue(null, currentElement);
      if (!isNullOrUndefined(this.startValue) && +this.startValue >= +this.min && +this.startValue <= +this.max) {
        if (!this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue) && isNullOrUndefined(this.endValue) && isNullOrUndefined(this.startValue) || !isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
          var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td");
          for (var _i = 0, tdCells_2 = tdCells; _i < tdCells_2.length; _i++) {
            var ele = tdCells_2[_i];
            var isDisabledCell = !ele.classList.contains(DISABLED7) || ele.classList.contains(DATEDISABLED);
            if (!ele.classList.contains(WEEKNUMBER3) && isDisabledCell) {
              var eleDate = this.getIdValue(null, ele);
              var startDateValue = /* @__PURE__ */ new Date(+this.startValue);
              var eleDateValue = /* @__PURE__ */ new Date(+eleDate);
              if (eleDateValue.setHours(0, 0, 0, 0) >= startDateValue.setHours(0, 0, 0, 0) && +eleDate <= +currentDate) {
                addClass([ele], RANGEHOVER);
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.isSameStartEnd = function(startVal, endVal) {
      var isSame = false;
      if (this.depth === "Month") {
        if (startVal.setHours(0, 0, 0, 0) === endVal.setHours(0, 0, 0, 0)) {
          isSame = true;
        }
      } else if (this.depth === "Year") {
        if (startVal.getFullYear() === endVal.getFullYear() && startVal.getMonth() === endVal.getMonth()) {
          isSame = true;
        }
      } else if (this.depth === "Decade") {
        if (startVal.getFullYear() === endVal.getFullYear()) {
          isSame = true;
        }
      }
      return isSame;
    };
    DateRangePicker2.prototype.updateRange = function(elementCollection) {
      if (!isNullOrUndefined(this.startValue)) {
        for (var _i = 0, elementCollection_1 = elementCollection; _i < elementCollection_1.length; _i++) {
          var calendar = elementCollection_1[_i];
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          for (var _a = 0, tdCells_3 = tdCells; _a < tdCells_3.length; _a++) {
            var ele = tdCells_3[_a];
            if (!ele.classList.contains(WEEKNUMBER3) && !ele.classList.contains(DISABLED7)) {
              var eleDate = this.getIdValue(null, ele);
              var eleDateValue = this.getIdValue(null, ele);
              if (!isNullOrUndefined(this.endValue)) {
                if (this.currentView() === this.depth && +eleDateValue.setHours(0, 0, 0, 0) >= +(/* @__PURE__ */ new Date(+this.startValue)).setHours(0, 0, 0, 0) && +eleDateValue.setHours(0, 0, 0, 0) <= +(/* @__PURE__ */ new Date(+this.endValue)).setHours(0, 0, 0, 0) && !this.isSameStartEnd(/* @__PURE__ */ new Date(+this.startValue), /* @__PURE__ */ new Date(+this.endValue)) && +(/* @__PURE__ */ new Date(+this.startValue)).setHours(0, 0, 0, 0) >= +this.min && +(/* @__PURE__ */ new Date(+this.endValue)).setHours(0, 0, 0, 0) <= +this.max && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], RANGEHOVER);
                }
              } else {
                removeClass([ele], [RANGEHOVER]);
              }
              if (ele.classList.contains(SELECTED4) && ele.classList.contains(ENDDATE) && +eleDateValue !== +this.endValue) {
                removeClass([ele], [SELECTED4]);
                removeClass([ele], [ENDDATE]);
              }
              if (ele.classList.contains(RANGEHOVER) && +eleDateValue > +this.endValue) {
                removeClass([ele], [RANGEHOVER]);
              }
              if (!ele.classList.contains(OTHERMONTH3)) {
                var startDateValue = /* @__PURE__ */ new Date(+this.startValue);
                var eleDateValue_1 = /* @__PURE__ */ new Date(+eleDate);
                if (this.currentView() === this.depth && +eleDateValue_1.setHours(0, 0, 0, 0) === +startDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) >= +startDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [STARTDATE, SELECTED4]);
                  this.addSelectedAttributes(ele, this.startValue, true);
                }
                var endDateValue = /* @__PURE__ */ new Date(+this.endValue);
                if (this.currentView() === "Year") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), eleDateValue_1.getMonth() + 1, 0);
                } else if (this.currentView() === "Decade") {
                  eleDateValue_1 = new Date(eleDateValue_1.getFullYear(), 11, 31);
                }
                if (this.currentView() === this.depth && !isNullOrUndefined(this.endValue) && +eleDateValue_1.setHours(0, 0, 0, 0) === +endDateValue.setHours(0, 0, 0, 0) && +eleDateValue_1.setHours(0, 0, 0, 0) <= +endDateValue.setHours(0, 0, 0, 0) && +this.startValue >= +this.min && !this.inputWrapper.container.classList.contains("e-error") && !(this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue))) {
                  addClass([ele], [ENDDATE, SELECTED4]);
                  this.addSelectedAttributes(ele, this.startValue, false);
                }
                if (+eleDate === +this.startValue && !isNullOrUndefined(this.endValue) && +eleDate === +this.endValue) {
                  this.addSelectedAttributes(ele, this.endValue, false, true);
                }
              }
            }
          }
        }
      }
    };
    DateRangePicker2.prototype.checkMinMaxDays = function() {
      if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
        if (!this.isMobile) {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + LEFTCALENDER));
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + RIGHTCALENDER));
        } else {
          this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
        }
      }
    };
    DateRangePicker2.prototype.rangeArgs = function(e) {
      var inputValue;
      var range;
      var startDate = !isNullOrUndefined(this.startValue) ? this.globalize.formatDate(this.startValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      var endDate = !isNullOrUndefined(this.endValue) ? this.globalize.formatDate(this.endValue, {
        format: this.formatString,
        type: "date",
        skeleton: "yMd"
      }) : null;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        inputValue = startDate + " " + this.separator + " " + endDate;
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
      } else {
        inputValue = "";
        range = 0;
      }
      var args = {
        value: this.value,
        startDate: this.startValue,
        endDate: this.endValue,
        daySpan: range,
        event: e || null,
        element: this.element,
        isInteracted: !isNullOrUndefined(e),
        text: inputValue
      };
      return args;
    };
    DateRangePicker2.prototype.otherMonthSelect = function(ele, isStartDate, sameDate) {
      var value = +this.getIdValue(null, ele);
      var dateIdString = '*[id^="/id"]:not(.e-other-month)'.replace("/id", "" + value);
      var tdCell = this.popupObj && this.popupObj.element.querySelector(dateIdString);
      if (!isNullOrUndefined(tdCell)) {
        if (isStartDate) {
          addClass([tdCell], [STARTDATE, SELECTED4]);
          this.addSelectedAttributes(tdCell, this.startValue, true);
        } else {
          addClass([tdCell], [ENDDATE, SELECTED4]);
          this.addSelectedAttributes(tdCell, this.endValue, true);
        }
        if (sameDate) {
          this.addSelectedAttributes(ele, this.endValue, false, true);
        }
      }
    };
    DateRangePicker2.prototype.selectRange = function(event, element2) {
      var leftCalendar;
      var rightCalendar;
      if (event) {
        event.preventDefault();
      }
      var date = isNullOrUndefined(event) ? this.getIdValue(null, element2) : this.getIdValue(event, null);
      var y = date.getFullYear();
      var m = date.getMonth();
      var firstDay = new Date(y, m, 1);
      var lastDay = new Date(y, m + 1, 0);
      var firstMonth = new Date(y, 0, 1);
      var lastMonth = new Date(y, 11, 31);
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        if (!this.isMobile || this.isMobile && !this.endButton.element.classList.contains(ACTIVE3)) {
          this.removeSelection();
        }
      } else if (this.isMobile && this.startButton.element.classList.contains(ACTIVE3)) {
        this.removeSelection();
      }
      var ele = element2 || event.currentTarget;
      if (isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.previousStartValue)) {
          date.setHours(this.previousStartValue.getHours());
          date.setMinutes(this.previousStartValue.getMinutes());
          date.setSeconds(this.previousStartValue.getSeconds());
        }
        this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
        this.endValue = null;
        this.setValue();
        addClass([ele], STARTDATE);
        this.addSelectedAttributes(ele, this.startValue, true);
        if (ele.classList.contains(OTHERMONTH3)) {
          this.otherMonthSelect(ele, true);
        }
        this.checkMinMaxDays();
        this.applyButton.disabled = true;
        this.applyButton.element.disabled = true;
        if (this.isMobile) {
          this.endButton.element.classList.add(ACTIVE3);
          this.startButton.element.classList.remove(ACTIVE3);
          this.endButton.element.removeAttribute("disabled");
          this.selectableDates();
        }
        this.trigger("select", this.rangeArgs(event));
      } else {
        if (+date === +this.startValue || +date > +this.startValue) {
          if (+date === +this.startValue && !isNullOrUndefined(this.minDays) && this.minDays > 1) {
            return;
          }
          this.endValue = null;
          this.setValue();
          if (this.isMobile || element2) {
            this.hoverSelection(event, element2);
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            date.setHours(this.previousEndValue.getHours());
            date.setMinutes(this.previousEndValue.getMinutes());
            date.setSeconds(this.previousEndValue.getSeconds());
          }
          this.endValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? lastDay : lastMonth;
          this.setValue();
          var endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          if (this.isMobile) {
            this.startButton.element.classList.remove(ACTIVE3);
            this.endButton.element.classList.add(ACTIVE3);
            for (var _i = 0, endEle_1 = endEle; _i < endEle_1.length; _i++) {
              var ele_1 = endEle_1[_i];
              ele_1.removeAttribute("aria-label");
              if (!ele_1.classList.contains(STARTDATE)) {
                ele_1.setAttribute("aria-selected", "false");
                removeClass([ele_1], [ENDDATE, SELECTED4]);
              } else {
                this.addSelectedAttributes(ele_1, this.startValue, true);
                removeClass([ele_1], [ENDDATE]);
              }
            }
          }
          addClass([ele], ENDDATE);
          if (+this.endValue === +this.startValue) {
            this.addSelectedAttributes(ele, this.endValue, false, true);
          } else {
            this.addSelectedAttributes(ele, this.endValue, false);
          }
          if (ele.classList.contains(OTHERMONTH3)) {
            if (+this.endValue === +this.startValue) {
              this.otherMonthSelect(ele, false, true);
            } else {
              this.otherMonthSelect(ele, false);
            }
          }
          endEle = this.popupObj.element.querySelectorAll("." + ENDDATE);
          for (var _a = 0, endEle_2 = endEle; _a < endEle_2.length; _a++) {
            var ele_2 = endEle_2[_a];
            if (ele_2.classList.contains(STARTDATE)) {
              removeClass([ele_2], [RANGEHOVER]);
            }
          }
          this.applyButton.disabled = false;
          this.applyButton.element.disabled = false;
          if (!this.isMobile) {
            this.removeClassDisabled();
          }
          this.disabledDateRender();
          this.trigger("select", this.rangeArgs(event));
        } else if (+date < +this.startValue) {
          this.removeClassDisabled();
          this.startValue = this.depth === "Month" ? new Date(this.checkValue(date)) : this.depth === "Year" ? firstDay : firstMonth;
          this.setValue();
          this.removeSelectedAttributes();
          removeClass(this.popupObj.element.querySelectorAll("." + STARTDATE), [STARTDATE, SELECTED4]);
          addClass([ele], STARTDATE);
          this.addSelectedAttributes(ele, this.startValue, true);
          if (ele.classList.contains(OTHERMONTH3)) {
            this.otherMonthSelect(ele, true);
          }
          this.checkMinMaxDays();
        }
      }
      if (event) {
        leftCalendar = closest(event.target, "." + LEFTCALENDER);
      }
      if (!isNullOrUndefined(leftCalendar)) {
        this.leftCalendar.children[1].firstElementChild.focus();
      } else {
        if (event) {
          rightCalendar = event && closest(event.target, "." + RIGHTCALENDER);
        }
        if (!isNullOrUndefined(rightCalendar)) {
          this.rightCalendar.children[1].firstElementChild.focus();
        }
      }
      addClass([ele], SELECTED4);
      this.updateHeader();
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.selectableDates = function() {
      if (!isNullOrUndefined(this.startValue)) {
        var tdCells = this.calendarElement.querySelectorAll("." + CALENDAR + " td");
        var isStartDate = false;
        if (this.currentView() === this.depth) {
          for (var _i = 0, tdCells_4 = tdCells; _i < tdCells_4.length; _i++) {
            var ele = tdCells_4[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER3)) {
              if (!ele.classList.contains(DISABLED7)) {
                var eleDate = this.getIdValue(null, ele);
                if (+eleDate < +this.startValue) {
                  addClass([ele], [DATEDISABLED, DISABLED7, OVERLAY3]);
                  EventHandler.clearEvents(ele);
                  continue;
                } else {
                  break;
                }
              }
            }
            if (ele.classList.contains(STARTDATE) && !ele.classList.contains(OTHERMONTH3)) {
              isStartDate = true;
              break;
            }
          }
          if (isStartDate) {
            if (!this.previousIcon.classList.contains(DISABLED7)) {
              addClass([this.previousIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
            }
          }
        } else {
          for (var _a = 0, tdCells_5 = tdCells; _a < tdCells_5.length; _a++) {
            var ele = tdCells_5[_a];
            var startMonth = this.startValue.getMonth();
            var startYear = this.startValue.getFullYear();
            var element2 = this.getIdValue(null, ele);
            if (!this.startButton.element.classList.contains(ACTIVE3) && (this.currentView() === "Year" && element2.getMonth() < startMonth && element2.getFullYear() <= startYear || this.currentView() === "Decade" && element2.getMonth() <= startMonth && element2.getFullYear() < startYear)) {
              addClass([ele], [DISABLED7]);
            } else {
              break;
            }
          }
          if (tdCells[0].classList.contains(DISABLED7)) {
            this.previousIconHandler(true);
          } else if (tdCells[tdCells.length - 1].classList.contains(DISABLED7)) {
            this.nextIconHandler(true);
          }
        }
      }
    };
    DateRangePicker2.prototype.updateMinMaxDays = function(calendar) {
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue) || this.isMobile && this.endButton.element.classList.contains(ACTIVE3)) {
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 || !isNullOrUndefined(this.maxDays) && this.maxDays > 0) {
          var startValueSelected = this.removeTimeValueFromDate(this.startValue);
          var minDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.minDays - 1)));
          var maxDate = new Date((/* @__PURE__ */ new Date(+startValueSelected)).setDate(startValueSelected.getDate() + (this.maxDays - 1)));
          minDate = !isNullOrUndefined(this.minDays) && this.minDays > 0 ? minDate : null;
          maxDate = !isNullOrUndefined(this.maxDays) && this.maxDays > 0 ? maxDate : null;
          if (this.currentView() === "Year") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear(), minDate.getMonth(), 0);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);
          } else if (this.currentView() === "Decade") {
            minDate = isNullOrUndefined(minDate) ? null : new Date(minDate.getFullYear() - 1, 11, 1);
            maxDate = isNullOrUndefined(maxDate) ? null : new Date(maxDate.getFullYear(), 0, 1);
          }
          var tdCells = calendar.querySelectorAll("." + CALENDAR + " td");
          var maxEle = void 0;
          for (var _i = 0, tdCells_6 = tdCells; _i < tdCells_6.length; _i++) {
            var ele = tdCells_6[_i];
            if (!ele.classList.contains(STARTDATE) && !ele.classList.contains(WEEKNUMBER3)) {
              var eleDate = this.getIdValue(null, ele);
              eleDate = this.removeTimeValueFromDate(eleDate);
              if (!isNullOrUndefined(minDate) && +eleDate === +minDate && ele.classList.contains(DISABLED7)) {
                minDate.setDate(minDate.getDate() + 1);
              }
              if (!ele.classList.contains(DISABLED7)) {
                if (+eleDate <= +startValueSelected) {
                  continue;
                }
                if (!isNullOrUndefined(minDate) && +eleDate < +minDate) {
                  addClass([ele], [DATEDISABLED, DISABLED7, OVERLAY3]);
                  EventHandler.clearEvents(ele);
                }
                if (!isNullOrUndefined(maxDate) && +eleDate > +maxDate) {
                  addClass([ele], [DATEDISABLED, DISABLED7, OVERLAY3]);
                  this.isMaxDaysClicked = true;
                  EventHandler.clearEvents(ele);
                  if (isNullOrUndefined(maxEle) && !ele.classList.contains(OTHERMONTH3)) {
                    maxEle = ele;
                  }
                }
              }
            }
          }
          if (!isNullOrUndefined(maxEle)) {
            if (this.isMobile) {
              if (!this.nextIcon.classList.contains(DISABLED7)) {
                addClass([this.nextIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
              }
            } else {
              var calendar_1 = closest(maxEle, "." + RIGHTCALENDER);
              calendar_1 = isNullOrUndefined(calendar_1) ? this.leftCalendar : calendar_1;
              var isLeftCalendar = calendar_1.classList.contains(LEFTCALENDER);
              if (!isLeftCalendar) {
                if (!this.rightCalNextIcon.classList.contains(DISABLED7)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
                }
              } else {
                if (!this.rightCalNextIcon.classList.contains(DISABLED7)) {
                  addClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
                }
                if (!this.leftCalNextIcon.classList.contains(DISABLED7)) {
                  addClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
                }
                if (!this.rightCalPrevIcon.classList.contains(DISABLED7)) {
                  addClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
                }
              }
            }
          }
        }
      } else {
        this.isMaxDaysClicked = false;
      }
    };
    DateRangePicker2.prototype.removeTimeValueFromDate = function(value) {
      var dateValue = new Date(value.getFullYear(), value.getMonth(), value.getDate());
      return dateValue;
    };
    DateRangePicker2.prototype.removeClassDisabled = function() {
      var tdCells = this.popupObj.element.querySelectorAll("." + CALENDAR + " td." + DATEDISABLED);
      for (var _i = 0, tdCells_7 = tdCells; _i < tdCells_7.length; _i++) {
        var ele = tdCells_7[_i];
        if (ele.classList.contains(DATEDISABLED)) {
          removeClass([ele], [DATEDISABLED, DISABLED7, OVERLAY3]);
          EventHandler.add(ele, "click", this.selectRange, this);
          if (!this.isMobile) {
            EventHandler.add(ele, "mouseover", this.hoverSelection, this);
          }
        }
      }
      if (this.isMobile) {
        if (this.nextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.nextIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
        }
        if (this.previousIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.previousIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
        }
      } else {
        if (this.rightCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalNextIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
        }
        if (this.rightCalPrevIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.rightCalPrevIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
        }
        if (this.leftCalNextIcon.classList.contains(ICONDISABLED)) {
          removeClass([this.leftCalNextIcon], [ICONDISABLED, DISABLED7, OVERLAY3]);
        }
      }
    };
    DateRangePicker2.prototype.updateHeader = function() {
      var format = { type: "date", skeleton: "yMMMd" };
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = range.toString() + " " + this.l10n.getConstant("days");
      } else {
        this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
      }
      if (!this.isMobile) {
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        }
        if (!isNullOrUndefined(this.startValue)) {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.startButton.element.textContent = this.globalize.formatDate(this.startValue, format);
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
        }
        if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
          this.endButton.element.textContent = this.globalize.formatDate(this.endValue, format);
        } else {
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
        }
      }
      if (this.isDateDisabled(this.startValue) || this.isDateDisabled(this.endValue) || (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue)) {
        if (!this.isMobile) {
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
          this.popupObj.element.querySelector("." + STARTLABEL).textContent = this.l10n.getConstant("startLabel");
          this.popupObj.element.querySelector("." + ENDLABEL).textContent = this.l10n.getConstant("endLabel");
        } else {
          this.startButton.element.textContent = this.l10n.getConstant("startLabel");
          this.endButton.element.textContent = this.l10n.getConstant("endLabel");
          this.popupObj.element.querySelector("." + DAYSPAN).textContent = this.l10n.getConstant("selectedDays");
        }
      }
      if (this.popupObj.element.querySelector("#custom_range")) {
        this.popupObj.element.querySelector("#custom_range").textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
      }
    };
    DateRangePicker2.prototype.removeSelection = function() {
      this.startValue = null;
      this.endValue = null;
      this.setValue();
      this.removeSelectedAttributes();
      if (this.popupObj) {
        if (this.popupObj.element.querySelectorAll("." + SELECTED4).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + SELECTED4), [STARTDATE, ENDDATE, SELECTED4]);
        }
        if (this.popupObj.element.querySelectorAll("." + FOCUSDATE).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + FOCUSDATE), FOCUSDATE);
        }
        if (this.popupObj.element.querySelectorAll("." + RANGEHOVER).length > 0) {
          removeClass(this.popupObj.element.querySelectorAll("." + RANGEHOVER), [RANGEHOVER]);
        }
      }
    };
    DateRangePicker2.prototype.addSelectedAttributes = function(ele, date, isStartDate, sameDate) {
      if (ele) {
        var title = this.globalize.formatDate(date, { type: "date", skeleton: "full" });
        if (!isNullOrUndefined(sameDate) && sameDate) {
          ele.setAttribute("aria-label", "The current start and end date is " + title);
        } else {
          ele.setAttribute("aria-label", "The current " + (isStartDate ? "start" : "end") + " date is " + title);
        }
        ele.setAttribute("aria-selected", "true");
      }
    };
    DateRangePicker2.prototype.removeSelectedAttributes = function() {
      if (this.popupObj) {
        var start = this.popupObj.element.querySelectorAll("." + STARTDATE);
        for (var _i = 0, start_1 = start; _i < start_1.length; _i++) {
          var ele = start_1[_i];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
        var end = this.popupObj.element.querySelectorAll("." + ENDDATE);
        for (var _a = 0, end_1 = end; _a < end_1.length; _a++) {
          var ele = end_1[_a];
          ele.setAttribute("aria-selected", "false");
          ele.removeAttribute("aria-label");
        }
      }
    };
    DateRangePicker2.prototype.updateCalendarElement = function(calendar) {
      if (calendar.classList.contains(LEFTCALENDER)) {
        this.calendarElement = this.leftCalendar;
        this.currentDate = this.leftCalCurrentDate;
        this.previousIcon = this.leftCalPrevIcon;
        this.nextIcon = this.leftCalNextIcon;
      } else {
        this.calendarElement = this.rightCalendar;
        this.currentDate = this.rightCalCurrentDate;
        this.previousIcon = this.rightCalPrevIcon;
        this.nextIcon = this.rightCalNextIcon;
      }
      this.contentElement = calendar.querySelector("." + CONTENT3);
      this.tableBodyElement = select("." + CONTENT3 + " tbody", calendar);
      this.table = calendar.querySelector("." + CONTENT3).getElementsByTagName("table")[0];
      this.headerTitleElement = calendar.querySelector("." + HEADER2 + " ." + TITLE2);
      this.headerElement = calendar.querySelector("." + HEADER2);
    };
    DateRangePicker2.prototype.navPrevMonth = function(e) {
      e.preventDefault();
      var ele = closest(e.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(e.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigatePrevious(e);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.deviceNavigation = function(ele) {
      this.deviceCalendarEvent();
      this.updateRange([this.popupObj.element.querySelector("." + CALENDAR)]);
      if (this.endButton.element.classList.contains(ACTIVE3)) {
        this.updateMinMaxDays(this.popupObj.element.querySelector("." + CALENDAR));
      }
      if (this.endButton.element.classList.contains(ACTIVE3)) {
        this.selectableDates();
      }
      if (this.currentView() === this.depth) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
    };
    DateRangePicker2.prototype.updateControl = function(calendar) {
      if (calendar.classList.contains(RIGHTCALENDER)) {
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      } else {
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
      }
      this.calendarIconEvent();
      if (this.depth === "Month" && this.leftCalendar.querySelector(".e-content").classList.contains("e-month") && this.rightCalendar.querySelector(".e-content").classList.contains("e-month") || this.depth === "Year" && this.leftCalendar.querySelector(".e-content").classList.contains("e-year") && this.rightCalendar.querySelector(".e-content").classList.contains("e-year") || this.depth === "Decade" && this.leftCalendar.querySelector(".e-content").classList.contains("e-decade") && this.rightCalendar.querySelector(".e-content").classList.contains("e-decade") || this.isMobile) {
        this.bindCalendarCellEvents();
      }
      this.removeFocusedDate();
      this.updateRange([calendar]);
    };
    DateRangePicker2.prototype.navNextMonth = function(event) {
      event.preventDefault();
      var ele = closest(event.target, "." + LEFTCALENDER);
      ele = isNullOrUndefined(ele) ? closest(event.target, "." + RIGHTCALENDER) : ele;
      this.updateCalendarElement(ele);
      this.navigateNext(event);
      if (!isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.updateMinMaxDays(ele);
      }
      this.updateControl(ele);
    };
    DateRangePicker2.prototype.isPopupOpen = function() {
      if (!isNullOrUndefined(this.popupObj) && this.popupObj.element.classList.contains(POPUP2)) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.createRangeHeader = function() {
      var labelContainer = this.createElement("div", { className: STARTENDCONTAINER });
      if (!this.isMobile) {
        var startLabel = this.createElement("a", { className: STARTLABEL });
        var endLabel = this.createElement("a", { className: ENDLABEL });
        var changeIcon = this.createElement("span", { className: CHANGEICON });
        attributes(startLabel, { "aria-atomic": "true", "aria-live": "assertive", "aria-label": "Start Date", "role": "button" });
        attributes(endLabel, { "aria-atomic": "true", "aria-live": "assertive", "aria-label": "End Date", "role": "button" });
        labelContainer.appendChild(startLabel);
        labelContainer.appendChild(changeIcon);
        labelContainer.appendChild(endLabel);
        startLabel.textContent = this.l10n.getConstant("startLabel");
        endLabel.textContent = this.l10n.getConstant("endLabel");
      } else {
        var endBtn = this.createElement("button", { className: ENDBUTTON });
        var startBtn = this.createElement("button", { className: STARTBUTTON });
        this.startButton = new Button({ content: this.l10n.getConstant("startLabel") }, startBtn);
        this.endButton = new Button({ content: this.l10n.getConstant("endLabel") }, endBtn);
        labelContainer.appendChild(startBtn);
        labelContainer.appendChild(endBtn);
      }
      return labelContainer;
    };
    DateRangePicker2.prototype.disableInput = function() {
      if (this.strictMode) {
        if (!isNullOrUndefined(this.previousStartValue) && !isNullOrUndefined(this.previousEndValue)) {
          this.startValue = this.previousStartValue;
          this.endValue = this.previousEndValue;
          this.setValue();
          this.updateInput();
        }
      } else {
        this.updateInput();
        this.clearRange();
        this.setProperties({ startDate: null }, true);
        this.setProperties({ endDate: null }, true);
        this.startValue = null;
        this.endValue = null;
        this.setValue();
        this.errorClass();
      }
      this.setProperties({ enabled: false }, true);
      Input.setEnabled(this.enabled, this.inputElement);
      this.bindEvents();
    };
    DateRangePicker2.prototype.validateMinMax = function() {
      this.min = isNullOrUndefined(this.min) || !+this.min ? this.min = new Date(1900, 0, 1) : this.min;
      this.max = isNullOrUndefined(this.max) || !+this.max ? this.max = new Date(2099, 11, 31) : this.max;
      if (!(this.min <= this.max)) {
        this.disableInput();
        return;
      }
      if (!isNullOrUndefined(this.minDays) && !isNullOrUndefined(this.maxDays)) {
        if (this.maxDays > 0 && this.minDays > 0 && this.minDays > this.maxDays) {
          this.maxDays = null;
        }
      }
      if (!isNullOrUndefined(this.minDays) && this.minDays < 0) {
        this.minDays = null;
      }
      if (!isNullOrUndefined(this.maxDays) && this.maxDays < 0) {
        this.maxDays = null;
      }
    };
    DateRangePicker2.prototype.validateRangeStrict = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (+this.startValue <= +this.min) {
          this.startValue = this.min;
          this.setValue();
        } else if (+this.startValue >= +this.min && +this.startValue >= +this.max) {
          this.startValue = this.max;
        }
      }
      if (!isNullOrUndefined(this.endValue)) {
        if (+this.endValue > +this.max) {
          this.endValue = this.max;
          this.setValue();
        } else if (+this.endValue < +this.min) {
          this.endValue = this.min;
          this.setValue();
        }
      }
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateRange = function() {
      this.validateMinMaxDays();
    };
    DateRangePicker2.prototype.validateMinMaxDays = function() {
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        var range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        if (!isNullOrUndefined(this.minDays) && this.minDays > 0 && !(range >= this.minDays)) {
          if (this.strictMode) {
            var date = /* @__PURE__ */ new Date(+this.startValue);
            date.setDate(date.getDate() + (this.minDays - 1));
            if (+date > +this.max) {
              this.endValue = this.max;
              this.setValue();
            } else {
              this.endValue = date;
              this.setValue();
            }
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
        if (!isNullOrUndefined(this.maxDays) && this.maxDays > 0 && !(range <= this.maxDays)) {
          if (this.strictMode) {
            this.endValue = /* @__PURE__ */ new Date(+this.startValue);
            this.endValue.setDate(this.endValue.getDate() + (this.maxDays - 1));
            this.setValue();
          } else {
            this.startValue = null;
            this.endValue = null;
            this.setValue();
          }
        }
      }
    };
    DateRangePicker2.prototype.renderCalendar = function() {
      this.calendarElement = this.createElement("div");
      this.calendarElement.classList.add(CALENDAR);
      if (this.enableRtl) {
        this.calendarElement.classList.add(RTL10);
      }
      attributes(this.calendarElement, { "role": "calendar" });
      _super.prototype.createHeader.call(this);
      _super.prototype.createContent.call(this);
    };
    DateRangePicker2.prototype.isSameMonth = function(start, end) {
      if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameYear = function(start, end) {
      if (start.getFullYear() === end.getFullYear()) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.isSameDecade = function(start, end) {
      var startYear = start.getFullYear();
      var endYear = end.getFullYear();
      if (startYear - startYear % 10 === endYear - endYear % 10) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.startMonthCurrentDate = function() {
      if (this.isSameMonth(this.min, this.max) || +this.currentDate > +this.max || this.isSameMonth(this.currentDate, this.max)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.max);
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
      } else if (this.currentDate < this.min) {
        this.currentDate = new Date(this.checkValue(this.min));
      }
    };
    DateRangePicker2.prototype.selectNextMonth = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameMonth(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setDate(1);
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setDate(1);
        var month2 = this.currentDate.getMonth() + 1;
        this.currentDate.setMonth(month2);
      }
    };
    DateRangePicker2.prototype.selectNextYear = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameYear(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        this.currentDate.setMonth(0);
        var yr = this.currentDate.getFullYear() + 1;
        this.currentDate.setFullYear(yr);
        return;
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setMonth(0);
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 1);
      }
    };
    DateRangePicker2.prototype.selectNextDecade = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !this.isSameDecade(this.endValue, this.currentDate) && !this.isDateDisabled(this.endValue) && !this.isDateDisabled(this.startValue)) {
        this.currentDate = /* @__PURE__ */ new Date(+this.endValue);
      } else {
        var decyr = this.currentDate.getFullYear() + 10;
        this.currentDate.setFullYear(decyr);
        return;
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue || !isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 10);
      }
    };
    DateRangePicker2.prototype.selectStartMonth = function() {
      if (!isNullOrUndefined(this.startValue)) {
        if (!isNullOrUndefined(this.max) && this.isSameMonth(this.startValue, this.max)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.max);
          this.currentDate.setDate(1);
          this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        } else if (!(this.startValue >= this.min && this.startValue <= this.max) || this.isDateDisabled(this.startValue)) {
          this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        } else {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
      } else {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
        this.startMonthCurrentDate();
      }
      if (!isNullOrUndefined(this.endValue) && +this.endValue > +this.max || !isNullOrUndefined(this.startValue) && +this.startValue < +this.min || !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue) && +this.startValue > +this.endValue) {
        this.currentDate = new Date((/* @__PURE__ */ new Date()).setHours(0, 0, 0, 0));
      }
      this.startMonthCurrentDate();
    };
    DateRangePicker2.prototype.createCalendar = function() {
      var calendarContainer = this.createElement("div", { className: CALENDARCONTAINER });
      if (!this.isMobile) {
        this.selectStartMonth();
        this.renderCalendar();
        this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        this.calendarElement.classList.add(LEFTCALENDER);
        this.leftCalPrevIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + PREVICON2);
        this.leftCalNextIcon = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + NEXTICON2);
        this.leftTitle = this.calendarElement.querySelector("." + LEFTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + LEFTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER2).appendChild(this.leftCalNextIcon);
        this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER2).appendChild(this.leftCalPrevIcon);
        prepend([this.leftCalPrevIcon], this.calendarElement.querySelector("." + LEFTCALENDER + " ." + HEADER2));
        this.leftCalendar = this.calendarElement;
        var leftContainer = this.createElement("div", { className: LEFTCONTAINER });
        var rightContainer = this.createElement("div", { className: RIGHTCONTAINER });
        leftContainer.appendChild(this.leftCalendar);
        calendarContainer.appendChild(leftContainer);
        if (!this.isMobile) {
          EventHandler.add(this.leftTitle, "click", this.leftNavTitle, this);
        }
        if (this.start === "Month") {
          this.selectNextMonth();
        }
        if (this.start === "Year") {
          this.selectNextYear();
        }
        if (this.start === "Decade") {
          this.selectNextDecade();
        }
        this.renderCalendar();
        this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
        addClass([this.calendarElement], RIGHTCALENDER);
        this.rightCalendar = this.calendarElement;
        removeClass([this.leftCalendar && this.leftCalendar.querySelector(".e-content tbody")], "e-zoomin");
        removeClass([this.rightCalendar && this.rightCalendar.querySelector(".e-content tbody")], "e-zoomin");
        this.rightCalPrevIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + PREVICON2);
        this.rightCalNextIcon = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + NEXTICON2);
        this.rightTitle = this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + TITLE2);
        remove(this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("table").setAttribute("tabindex", "-1");
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER2).appendChild(this.rightCalNextIcon);
        this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER2).appendChild(this.rightCalPrevIcon);
        prepend([this.rightCalPrevIcon], this.calendarElement.querySelector("." + RIGHTCALENDER + " ." + HEADER2));
        rightContainer.appendChild(this.rightCalendar);
        calendarContainer.appendChild(rightContainer);
        if (!this.isMobile) {
          EventHandler.add(this.rightTitle, "click", this.rightNavTitle, this);
        }
      } else {
        if (!isNullOrUndefined(this.startValue)) {
          this.currentDate = /* @__PURE__ */ new Date(+this.startValue);
        }
        _super.prototype.validateDate.call(this);
        _super.prototype.minMaxUpdate.call(this);
        _super.prototype.render.call(this);
        var prevIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + PREVICON2);
        var nextIcon = this.calendarElement.querySelector("." + CALENDAR + " ." + NEXTICON2);
        remove(this.calendarElement.querySelector("." + CALENDAR + " ." + ICONCONTAINER2));
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2).appendChild(nextIcon);
        this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2).appendChild(prevIcon);
        prepend([prevIcon], this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2));
        this.deviceCalendar = this.calendarElement;
        calendarContainer.appendChild(this.calendarElement);
        this.headerTitleElement = this.calendarElement.querySelector("." + CALENDAR + " ." + HEADER2 + " ." + TITLE2);
      }
      return calendarContainer;
    };
    DateRangePicker2.prototype.leftNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.leftCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.calendarNavigation = function(e, element2) {
      this.table = element2.querySelector("table");
      this.headerTitleElement = element2.querySelector(".e-title");
      this.tableBodyElement = element2.querySelector("tbody");
      this.tableHeadElement = element2.querySelector("thead");
      this.contentElement = element2.querySelector(".e-content");
      this.updateCalendarElement(element2);
      _super.prototype.navigateTitle.call(this, e);
      this.updateNavIcons();
    };
    DateRangePicker2.prototype.rightNavTitle = function(e) {
      if (this.isPopupOpen()) {
        this.calendarElement = this.rightCalendar;
        this.calendarNavigation(e, this.calendarElement);
      }
    };
    DateRangePicker2.prototype.clickEventEmitter = function(e) {
      if (!this.isMobile) {
        if (closest(e.target, ".e-calendar.e-left-calendar")) {
          this.calendarElement = this.leftCalendar;
          this.updateCalendarElement(this.leftCalendar);
        } else {
          this.calendarElement = this.rightCalendar;
          this.updateCalendarElement(this.rightCalendar);
        }
      }
    };
    DateRangePicker2.prototype.currentView = function() {
      return _super.prototype.currentView.call(this);
    };
    DateRangePicker2.prototype.getCalendarView = function(view) {
      if (view === "Year") {
        return "Year";
      } else if (view === "Decade") {
        return "Decade";
      } else {
        return "Month";
      }
    };
    DateRangePicker2.prototype.navigatedEvent = function(e) {
      this.trigger("navigated", this.navigatedArgs);
      if (!isNullOrUndefined(this.popupObj)) {
        var element2 = void 0;
        var view = this.getCalendarView(this.currentView());
        if (this.isMobile) {
          if (view === this.depth) {
            this.bindCalendarCellEvents();
            this.deviceNavigation();
            this.removeFocusedDate();
            this.checkMinMaxDays();
          } else {
            this.selectableDates();
          }
        } else {
          if (!this.isMobile && view === this.depth) {
            element2 = this.calendarElement.classList.contains("e-left-calendar") ? this.leftCalendar : this.rightCalendar;
            if (element2 === this.leftCalendar && (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown))) {
              this.leftCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.leftCalCurrentDate;
              this.updateCalendarElement(this.leftCalendar);
              this.updateControl(this.leftCalendar);
              this.updateCalendarElement(this.rightCalendar);
              _super.prototype.navigateTo.call(this, view, this.rightCalCurrentDate);
              this.updateControl(this.rightCalendar);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            } else if (e && !e.currentTarget.children[0].classList.contains("e-icons") || !isNullOrUndefined(this.controlDown)) {
              this.rightCalCurrentDate = /* @__PURE__ */ new Date(+this.currentDate);
              this.effect = "";
              this.currentDate = this.rightCalCurrentDate;
              this.updateCalendarElement(this.rightCalendar);
              this.updateControl(this.rightCalendar);
              this.updateCalendarElement(this.leftCalendar);
              if (this.startValue && isNullOrUndefined(this.endValue)) {
                if (view === "Month" && this.startValue.getMonth() < this.rightCalCurrentDate.getMonth() && this.startValue.getFullYear() <= this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else if (view === "Year" && this.startValue.getFullYear() < this.rightCalCurrentDate.getFullYear()) {
                  _super.prototype.navigateTo.call(this, view, /* @__PURE__ */ new Date(+this.startValue));
                } else {
                  _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
                }
              } else {
                _super.prototype.navigateTo.call(this, view, this.leftCalCurrentDate);
              }
              this.updateControl(this.leftCalendar);
              this.updateNavIcons();
              this.calendarIconEvent();
              this.calendarIconRipple();
              this.controlDown = null;
            }
            this.checkMinMaxDays();
          } else {
            this.updateNavIcons();
            this.calendarIconEvent();
          }
        }
      }
    };
    DateRangePicker2.prototype.createControl = function() {
      var controlContainer = this.createElement("div", { className: RANGECONTAINER });
      var headerContainer = this.createElement("div", { className: RANGEHEADER });
      var labelContainer = this.createRangeHeader();
      headerContainer.appendChild(labelContainer);
      var daySpan = this.createElement("div", { className: DAYSPAN });
      attributes(daySpan, { "aria-label": "Selected Days" });
      daySpan.textContent = this.l10n.getConstant("selectedDays");
      headerContainer.appendChild(daySpan);
      var separator = this.createElement("div", { className: SEPARATOR });
      var calendarContainer = this.createCalendar();
      controlContainer.appendChild(headerContainer);
      controlContainer.appendChild(separator);
      controlContainer.appendChild(calendarContainer);
      var footerSection = this.createElement("div", { className: FOOTER2 });
      var cancelBtn = this.createElement("button", { className: CANCEL2 + " " + FLAT2 + " " + CSS2 });
      var applyBtn = this.createElement("button");
      addClass([applyBtn], [APPLY2, FLAT2, PRIMARY2, CSS2]);
      footerSection.appendChild(applyBtn);
      footerSection.appendChild(cancelBtn);
      var enable = !isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue);
      this.cancelButton = new Button({ content: this.l10n.getConstant("cancelText") }, cancelBtn);
      this.applyButton = new Button({ content: this.l10n.getConstant("applyText"), disabled: !enable }, applyBtn);
      EventHandler.add(applyBtn, "click", this.applyFunction, this);
      EventHandler.add(cancelBtn, "click", this.cancelFunction, this);
      this.popupWrapper.appendChild(controlContainer);
      if (!this.isMobile) {
        if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
          this.createPresets();
          this.listRippleEffect();
          addClass([controlContainer], RANGEBORDER);
          addClass([this.popupWrapper], "e-preset-wrapper");
          var presets2 = this.popupWrapper.querySelector("." + PRESETS);
          presets2.style.height = this.popupWrapper.querySelector("." + RANGECONTAINER).getBoundingClientRect().height + "px";
        }
      }
      this.popupWrapper.appendChild(footerSection);
      if (this.isMobile) {
        this.deviceHeaderUpdate();
      }
      this.renderPopup();
    };
    DateRangePicker2.prototype.cancelFunction = function(eve) {
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      eve.preventDefault();
      if (this.isKeyPopup) {
        this.inputElement.focus();
        this.isKeyPopup = false;
      }
      this.startValue = null;
      this.endValue = null;
      this.removeSelection();
      this.hide(eve);
    };
    DateRangePicker2.prototype.deviceHeaderUpdate = function() {
      if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
        this.endButton.element.setAttribute("disabled", "");
        this.startButton.element.classList.add(ACTIVE3);
      } else if (!isNullOrUndefined(this.startValue)) {
        this.startButton.element.classList.add(ACTIVE3);
      }
    };
    DateRangePicker2.prototype.applyFunction = function(eve) {
      var isValueChanged = false;
      if (eve.type !== "touchstart") {
        eve.preventDefault();
      }
      if (this.closeEventArgs && this.closeEventArgs.cancel) {
        this.startValue = this.popupWrapper.querySelector(".e-start-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-start-date"));
        this.endValue = this.popupWrapper.querySelector(".e-end-date") && this.getIdValue(null, this.popupWrapper.querySelector(".e-end-date"));
        this.setValue();
      }
      if (document.activeElement !== this.inputElement) {
        this.preventFocus = true;
        this.inputElement.focus();
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
      }
      if (eve.type !== "touchstart" && this.closeEventArgs && !this.closeEventArgs.cancel) {
        eve.preventDefault();
      }
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
        this.previousEleValue = this.inputElement.value;
        Input.setValue(this.rangeArgs(eve).text, this.inputElement, this.floatLabelType, this.showClearButton);
        if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
          isValueChanged = true;
        }
        this.changeTrigger(eve);
        this.hide(eve ? eve : null);
        this.errorClass();
        isValueChanged = true;
      } else {
        this.hide(eve ? eve : null);
      }
      if (!closest(eve.target, "." + INPUTCONTAINER2) && !isValueChanged) {
        this.focusOut();
      }
      if (!this.isMobile) {
        this.isKeyPopup = false;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.children[1].focus();
          this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
          this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
            eventName: "keydown",
            keyConfigs: this.keyInputConfigs,
            keyAction: this.popupKeyActionHandle.bind(this)
          });
        }
      }
    };
    DateRangePicker2.prototype.onMouseClick = function(event, item) {
      if (event.type === "touchstart") {
        return;
      }
      var target = item || event.target;
      var li = closest(target, "." + LISTCLASS);
      var isClick = li && li.classList.contains(ACTIVE3);
      if (li && li.classList.contains(LISTCLASS)) {
        this.setListSelection(li, event);
      }
      this.preventFocus = true;
      this.inputElement.focus();
      if (!this.isMobile) {
        this.preventFocus = true;
        if (li && li.classList.contains(LISTCLASS) && li.getAttribute("id") === "custom_range") {
          this.leftCalendar.children[1].firstElementChild.focus();
        } else {
          if (!isClick && event.type === "keydown") {
            this.inputElement.focus();
          }
        }
      }
    };
    DateRangePicker2.prototype.onMouseOver = function(event) {
      var li = closest(event.target, "." + LISTCLASS);
      if (li && li.classList.contains(LISTCLASS) && !li.classList.contains(HOVER)) {
        addClass([li], HOVER);
      }
    };
    DateRangePicker2.prototype.onMouseLeave = function(event) {
      var item = closest(event.target, "." + HOVER);
      if (!isNullOrUndefined(item)) {
        removeClass([item], HOVER);
      }
    };
    DateRangePicker2.prototype.setListSelection = function(li, event) {
      if (li && (!li.classList.contains(ACTIVE3) || this.isMobile && li.classList.contains(ACTIVE3))) {
        if (this.isMobile && li.classList.contains(ACTIVE3)) {
          this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
          var values_1 = this.presetsItem[this.activeIndex];
          if (values_1.id === "custom_range") {
            this.renderCustomPopup();
            return;
          }
          return;
        }
        this.removeListSelection();
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        addClass([li], ACTIVE3);
        li.setAttribute("aria-selected", "true");
        var values = this.presetsItem[this.activeIndex];
        if (values.id === "custom_range") {
          this.renderCustomPopup();
        } else {
          this.applyPresetRange(values, event);
        }
      }
    };
    DateRangePicker2.prototype.removeListSelection = function() {
      var item = this.presetElement.querySelector("." + ACTIVE3);
      if (!isNullOrUndefined(item)) {
        removeClass([item], ACTIVE3);
        item.removeAttribute("aria-selected");
      }
    };
    DateRangePicker2.prototype.setValue = function() {
      this.modelValue = [this.startValue, this.endValue];
    };
    DateRangePicker2.prototype.applyPresetRange = function(values, e) {
      this.hide(null);
      this.presetsItem[this.presetsItem.length - 1].start = null;
      this.presetsItem[this.presetsItem.length - 1].end = null;
      this.startValue = values.start;
      this.endValue = values.end;
      this.setValue();
      this.refreshControl();
      this.trigger("select", this.rangeArgs(e));
      this.changeTrigger(e);
      this.previousEleValue = this.inputElement.value;
      this.isCustomRange = false;
      this.leftCalendar = this.rightCalendar = null;
      if (this.isKeyPopup) {
        this.isRangeIconClicked = false;
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.showPopup = function(element2, event) {
      this.presetHeight();
      if (this.zIndex === 1e3) {
        this.popupObj.show(null, this.element);
      } else {
        this.popupObj.show(null, null);
      }
      if (this.isMobile) {
        this.popupObj.refreshPosition();
      }
    };
    DateRangePicker2.prototype.renderCustomPopup = function() {
      this.isCustomWindow = true;
      this.popupObj.hide();
      this.popupWrapper = this.createElement("div", { id: this.element.id + "_popup", className: ROOT7 + " " + POPUP2 });
      this.renderControl();
      this.openEventArgs.appendTo.appendChild(this.popupWrapper);
      this.showPopup();
      this.isCustomRange = true;
      if (!this.isMobile) {
        this.calendarFocus();
      }
    };
    DateRangePicker2.prototype.listRippleEffect = function() {
      for (var _i = 0, _a = this.liCollections; _i < _a.length; _i++) {
        var li = _a[_i];
        rippleEffect(li);
      }
    };
    DateRangePicker2.prototype.createPresets = function() {
      if (!isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label)) {
        this.presetElement = this.createElement("div", { className: PRESETS, attrs: { "tabindex": "0" } });
        var listTag = ListBase.createList(this.createElement, this.presetsItem, null, true);
        attributes(listTag, { "role": "listbox", "aria-hidden": "false", "id": this.element.id + "_options" });
        this.presetElement.appendChild(listTag);
        this.popupWrapper.appendChild(this.presetElement);
        var customElement = this.presetElement.querySelector("#custom_range");
        if (!isNullOrUndefined(customElement)) {
          customElement.textContent = this.l10n.getConstant("customRange") !== "" ? this.l10n.getConstant("customRange") : "Custom Range";
        }
        this.liCollections = this.presetElement.querySelectorAll("." + LISTCLASS);
        this.wireListEvents();
        if (this.isMobile) {
          this.presetElement.style.width = this.inputWrapper.container.getBoundingClientRect().width + "px";
        }
        if (!isNullOrUndefined(this.activeIndex) && this.activeIndex > -1) {
          addClass([this.liCollections[this.activeIndex]], ACTIVE3);
        }
      }
    };
    DateRangePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.presetElement, "click", this.onMouseClick, this);
      if (!this.isMobile) {
        EventHandler.add(this.presetElement, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.presetElement, "mouseout", this.onMouseLeave, this);
      }
    };
    DateRangePicker2.prototype.unWireListEvents = function() {
      if (!isNullOrUndefined(this.presetElement)) {
        EventHandler.remove(this.presetElement, "click touchstart", this.onMouseClick);
        if (!this.isMobile) {
          EventHandler.remove(this.presetElement, "mouseover", this.onMouseOver);
          EventHandler.remove(this.presetElement, "mouseout", this.onMouseLeave);
        }
      }
    };
    DateRangePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.popupWrapper.classList.add("e-control");
      var popupWidth = this.popupWrapper.getBoundingClientRect().width;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass.trim() !== "") {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (this.isMobile && this.isCustomWindow) {
        this.modal = this.createElement("div");
        document.body.appendChild(this.modal);
      }
      this.popupObj = new Popup(this.popupWrapper, {
        relateTo: this.isMobile && this.isCustomWindow ? document.body : !isNullOrUndefined(this.targetElement) ? this.targetElement : this.inputWrapper.container,
        position: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? { X: "left", Y: "bottom" } : { X: "center", Y: "center" } : this.enableRtl ? { X: "left", Y: "bottom" } : { X: "right", Y: "bottom" },
        offsetX: this.isMobile || this.enableRtl ? 0 : -popupWidth,
        offsetY: OFFSETVALUE2,
        collision: this.isMobile ? !isUndefined(this.presets[0].start && this.presets[0].end && this.presets[0].label) && !this.isCustomWindow ? { X: "fit" } : { X: "fit", Y: "fit" } : { X: "fit", Y: "flip" },
        targetType: this.isMobile && this.isCustomWindow ? "container" : "relative",
        enableRtl: this.enableRtl,
        zIndex: this.zIndex,
        open: function() {
          attributes(_this.inputElement, { "aria-expanded": "true" });
          addClass([_this.inputWrapper.buttons[0]], ACTIVE3);
          if (!_this.isMobile) {
            if (_this.cancelButton) {
              _this.btnKeyboardModule = new KeyboardEvents(_this.cancelButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: { tab: "tab", altRightArrow: "alt+rightarrow", altLeftArrow: "alt+leftarrow" }
              });
              _this.btnKeyboardModule = new KeyboardEvents(_this.applyButton.element, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: { altRightArrow: "alt+rightarrow", altLeftArrow: "alt+leftarrow" }
              });
            }
            if (!isNullOrUndefined(_this.leftCalendar)) {
              if (!_this.isRangeIconClicked) {
                _this.calendarFocus();
              }
            }
            if (!isNullOrUndefined(_this.presetElement)) {
              _this.keyInputConfigs = extend(_this.keyInputConfigs, _this.keyConfigs);
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.presetKeyActionHandler.bind(_this),
                keyConfigs: _this.keyInputConfigs
              });
              _this.presetKeyboardModule = new KeyboardEvents(_this.presetElement, {
                eventName: "keydown",
                keyAction: _this.popupKeyActionHandle.bind(_this),
                keyConfigs: { altRightArrow: "alt+rightarrow", altLeftArrow: "alt+leftarrow" }
              });
              if (isNullOrUndefined(_this.leftCalendar)) {
                _this.preventBlur = true;
                _this.presetElement.focus();
              } else {
                _this.presetElement.setAttribute("tabindex", "-1");
              }
            }
            _this.popupKeyBoardHandler();
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.add(document, "keydown", _this.popupCloseHandler, _this);
          }
        },
        close: function() {
          attributes(_this.inputElement, { "aria-expanded": "false" });
          removeClass([_this.inputWrapper.buttons[0]], ACTIVE3);
          if (_this.isRangeIconClicked) {
            _this.inputWrapper.container.children[1].focus();
          }
          if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label)) {
            _this.unWireListEvents();
          }
          if (!isNullOrUndefined(_this.popupObj)) {
            if (!isNullOrUndefined(_this.popupObj.element.parentElement)) {
              detach(_this.popupObj.element);
            }
            _this.popupObj.destroy();
            _this.popupObj = null;
          }
          if (_this.isMobile && !Browser.isDevice) {
            EventHandler.remove(document, "keydown", _this.popupCloseHandler);
          }
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (this.isMobile) {
        this.popupObj.element.classList.add(DEVICE4);
        if (!this.isMobile) {
          this.popupObj.element.classList.add("e-bigger");
        }
      }
      if (this.isMobile && this.isCustomWindow) {
        addClass([this.modal], [DEVICE4, ROOT7, "e-range-modal"]);
        document.body.className += " " + OVERFLOW2;
        this.modal.style.display = "block";
      }
      EventHandler.add(document, "mousedown touchstart", this.documentHandler, this);
    };
    DateRangePicker2.prototype.popupCloseHandler = function(e) {
      switch (e.keyCode) {
        case 27:
          this.hide(e);
          break;
      }
    };
    DateRangePicker2.prototype.calendarFocus = function() {
      var startDate = this.popupObj && this.popupObj.element.querySelector("." + STARTDATE);
      if (startDate) {
        var ele = closest(startDate, "." + RIGHTCALENDER);
        ele = isNullOrUndefined(ele) ? this.leftCalendar : ele;
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          ele.children[1].firstElementChild.focus();
        }
        addClass([startDate], FOCUSDATE);
      } else {
        if (this.isRangeIconClicked) {
          this.inputWrapper.container.focus();
        } else {
          this.preventBlur = true;
          this.leftCalendar.children[1].firstElementChild.focus();
        }
      }
    };
    DateRangePicker2.prototype.presetHeight = function() {
      var presets2 = this.popupObj && this.popupObj.element.querySelector("." + PRESETS);
      var rangeContainer = this.popupObj && this.popupObj.element.querySelector("." + RANGECONTAINER);
      if (!isNullOrUndefined(presets2) && !isNullOrUndefined(rangeContainer)) {
        presets2.style.height = rangeContainer.getBoundingClientRect().height + "px";
      }
    };
    DateRangePicker2.prototype.presetKeyActionHandler = function(e) {
      switch (e.action) {
        case "moveDown":
          this.listMoveDown(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "moveUp":
          this.listMoveUp(e);
          this.setScrollPosition();
          e.preventDefault();
          break;
        case "enter":
          {
            var hvrItem = this.getHoverLI();
            var actItem = this.getActiveLI();
            if (!isNullOrUndefined(this.leftCalendar) && !isNullOrUndefined(actItem)) {
              if (isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem) && actItem === hvrItem) {
                this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(actItem);
                var values = this.presetsItem[this.activeIndex];
                if (values.id === "custom_range") {
                  this.calendarFocus();
                  actItem.classList.remove(HOVER);
                  e.preventDefault();
                  return;
                }
              }
            }
            if (!isNullOrUndefined(hvrItem) || !isNullOrUndefined(actItem)) {
              this.onMouseClick(e, hvrItem || actItem);
            }
            e.preventDefault();
          }
          break;
        case "tab":
          if (this.leftCalendar) {
            var item = this.getHoverLI();
            if (!isNullOrUndefined(item)) {
              item.classList.remove(HOVER);
            }
          } else {
            this.hide(e);
            e.preventDefault();
          }
          break;
      }
    };
    DateRangePicker2.prototype.listMoveDown = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER);
          addClass([li], HOVER);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.nextElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER);
        }
      } else {
        addClass([this.liCollections[0]], HOVER);
      }
    };
    DateRangePicker2.prototype.listMoveUp = function(e) {
      var hvrItem = this.getHoverLI();
      var actItem = this.getActiveLI();
      if (!isNullOrUndefined(hvrItem)) {
        var li = hvrItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          removeClass([hvrItem], HOVER);
          addClass([li], HOVER);
        }
      } else if (!isNullOrUndefined(actItem)) {
        var li = actItem.previousElementSibling;
        if (!isNullOrUndefined(li) && li.classList.contains(LISTCLASS)) {
          addClass([li], HOVER);
        }
      }
    };
    DateRangePicker2.prototype.getHoverLI = function() {
      var item = this.presetElement.querySelector("." + HOVER);
      return item;
    };
    DateRangePicker2.prototype.getActiveLI = function() {
      var item = this.presetElement.querySelector("." + ACTIVE3);
      return item;
    };
    DateRangePicker2.prototype.popupKeyBoardHandler = function() {
      this.popupKeyboardModule = new KeyboardEvents(this.popupWrapper, {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: { escape: "escape" }
      });
      this.keyInputConfigs = extend(this.keyInputConfigs, this.keyConfigs);
      this.popupKeyboardModule = new KeyboardEvents(this.inputWrapper.container.children[1], {
        eventName: "keydown",
        keyAction: this.popupKeyActionHandle.bind(this),
        keyConfigs: this.keyInputConfigs
      });
    };
    DateRangePicker2.prototype.setScrollPosition = function() {
      var listHeight = this.presetElement.getBoundingClientRect().height;
      var hover = this.presetElement.querySelector("." + HOVER);
      var active = this.presetElement.querySelector("." + ACTIVE3);
      var element2 = !isNullOrUndefined(hover) ? hover : active;
      if (!isNullOrUndefined(element2)) {
        var nextEle = element2.nextElementSibling;
        var height = nextEle ? nextEle.offsetTop : element2.offsetTop;
        var liHeight = element2.getBoundingClientRect().height;
        if (height + element2.offsetTop > listHeight) {
          this.presetElement.scrollTop = nextEle ? height - (listHeight / 2 + liHeight / 2) : height;
        } else {
          this.presetElement.scrollTop = 0;
        }
      }
    };
    DateRangePicker2.prototype.popupKeyActionHandle = function(e) {
      var presetElement = closest(e.target, "." + PRESETS);
      switch (e.action) {
        case "escape":
          if (this.isPopupOpen()) {
            if (this.isKeyPopup) {
              this.inputElement.focus();
              this.isKeyPopup = false;
            }
            this.hide(e);
          } else {
            this.inputWrapper.container.children[1].blur();
          }
          break;
        case "enter":
          if (!this.isPopupOpen()) {
            this.show(null, e);
          } else {
            this.inputWrapper.container.children[1].focus();
          }
          break;
        case "tab":
          this.hide(e);
          break;
        case "altRightArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.cancelButton.element.focus();
          } else {
            if (document.activeElement === this.cancelButton.element && this.applyButton.element.disabled !== true) {
              this.applyButton.element.focus();
            } else {
              this.leftCalendar.children[1].firstElementChild.focus();
            }
          }
          e.preventDefault();
          break;
        case "altLeftArrow":
          if (!isNullOrUndefined(presetElement)) {
            this.rightCalendar.children[1].firstElementChild.focus();
          } else {
            if (document.activeElement === this.applyButton.element && this.applyButton.element.disabled !== true) {
              this.cancelButton.element.focus();
            } else {
              if (!isNullOrUndefined(this.presetElement) && document.activeElement === this.cancelButton.element) {
                this.presetElement.focus();
              } else {
                this.rightCalendar.children[1].firstElementChild.focus();
              }
            }
          }
          e.preventDefault();
          break;
      }
    };
    DateRangePicker2.prototype.documentHandler = function(e) {
      if (isNullOrUndefined(this.popupObj)) {
        return;
      }
      var target = e.target;
      if (!this.inputWrapper.container.contains(target) || !isNullOrUndefined(this.popupObj) && !closest(target, '[id="' + this.popupWrapper.id + '"]')) {
        if (e.type !== "touchstart" && (e.type === "mousedown" || this.closeEventArgs && !this.closeEventArgs.cancel)) {
          e.preventDefault();
        }
      }
      if ((isNullOrUndefined(this.targetElement) || !isNullOrUndefined(this.targetElement) && !(target === this.targetElement)) && !closest(target, '[id="' + this.popupWrapper.id + '"]') && !(closest(target, "." + INPUTCONTAINER2) === this.inputWrapper.container) && !(closest(target, ".e-daterangepicker.e-popup") && !target.classList.contains("e-day"))) {
        this.preventBlur = false;
        if (this.isPopupOpen() && document.body.contains(this.popupObj.element)) {
          this.applyFunction(e);
          if (!this.isMobile) {
            this.isRangeIconClicked = false;
          }
        }
      }
    };
    DateRangePicker2.prototype.createInput = function() {
      var updatedCssClassValue = this.cssClass;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        floatLabelType: this.floatLabelType,
        element: this.inputElement,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [DATERANGEICON]
      }, this.createElement);
      attributes(this.inputElement, {
        "aria-readonly": this.readonly ? "true" : "false",
        "tabindex": "0",
        "aria-haspopup": "true",
        "aria-activedescendant": "null",
        "aria-owns": this.element.id + "_popup",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false"
      });
      Input.addAttributes({ "aria-label": "select" }, this.inputWrapper.buttons[0]);
      if (!isNullOrUndefined(this.placeholder) && this.placeholder.trim() !== "") {
        Input.addAttributes({ "aria-placeholder": this.placeholder }, this.inputElement);
      }
      this.setEleWidth(this.width);
      addClass([this.inputWrapper.container], DATERANGEWRAPPER);
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, { "name": this.element.id });
      }
      if (this.inputElement.type === "hidden") {
        this.inputWrapper.container.style.display = "none";
      }
      this.refreshControl();
      this.previousEleValue = this.inputElement.value;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.startCopy = this.startDate;
      this.endCopy = this.endDate;
    };
    DateRangePicker2.prototype.setEleWidth = function(width) {
      if (typeof width === "string") {
        this.inputWrapper.container.style.width = this.width;
      } else if (typeof width === "number") {
        this.inputWrapper.container.style.width = formatUnit(this.width);
      } else {
        this.inputWrapper.container.style.width = "100%";
      }
    };
    DateRangePicker2.prototype.adjustLongHeaderWidth = function() {
      if (this.dayHeaderFormat === "Wide") {
        addClass([this.popupWrapper], DAYHEADERLONG2);
      }
    };
    DateRangePicker2.prototype.refreshControl = function() {
      this.validateMinMax();
      if (this.strictMode) {
        this.validateRangeStrict();
      }
      var isDisabled = this.disabledDates();
      if (this.strictMode && isDisabled) {
        this.startValue = this.previousStartValue;
        this.setProperties({ startDate: this.startValue }, true);
        this.endValue = this.previousEndValue;
        this.setProperties({ endDate: this.endValue }, true);
        this.setValue();
      }
      this.updateInput();
      if (!this.strictMode) {
        this.validateRange();
      }
      if (!this.strictMode && isDisabled) {
        this.clearRange();
      }
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue) && !isDisabled) {
        this.disabledDateRender();
      }
      this.errorClass();
      this.previousStartValue = isNullOrUndefined(this.startValue) || isNaN(+this.startValue) ? null : /* @__PURE__ */ new Date(+this.startValue);
      this.previousEndValue = isNullOrUndefined(this.endValue) || isNaN(+this.endValue) ? null : /* @__PURE__ */ new Date(+this.endValue);
    };
    DateRangePicker2.prototype.updateInput = function() {
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        var formatOption = { format: this.formatString, type: "date", skeleton: "yMd" };
        var startDate = this.globalize.formatDate(this.startValue, formatOption);
        var endDate = this.globalize.formatDate(this.endValue, formatOption);
        Input.setValue(startDate + " " + this.separator + " " + endDate, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousStartValue = /* @__PURE__ */ new Date(+this.startValue);
        this.previousEndValue = /* @__PURE__ */ new Date(+this.endValue);
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        Input.setValue(this.invalidValueString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
    };
    DateRangePicker2.prototype.checkInvalidRange = function(value) {
      if (!isNullOrUndefined(value)) {
        var invalid = false;
        var startinvalue = void 0;
        var endinvalue = void 0;
        var startString = null;
        var endString = null;
        var valueString = null;
        var startObject = false;
        var endObject = false;
        var invalidobject = false;
        if (typeof value === "string") {
          var range = value.split(" " + this.separator + " ");
          if (range.length === 2) {
            startString = range[0];
            endString = range[1];
          } else {
            invalid = true;
            valueString = value;
          }
        } else {
          if (value.length > 0) {
            startinvalue = value[0];
            endinvalue = value[1];
          } else {
            startinvalue = value.start;
            endinvalue = value.end;
          }
          if (!(startinvalue instanceof Date) && typeof startinvalue !== "object") {
            startString = this.getstringvalue(startinvalue);
          } else if (startinvalue instanceof Date) {
            startObject = true;
          } else if (!isNullOrUndefined(startinvalue)) {
            invalidobject = true;
          }
          if (!(endinvalue instanceof Date) && typeof endinvalue !== "object") {
            endString = this.getstringvalue(endinvalue);
          } else if (endinvalue instanceof Date) {
            endObject = true;
          } else if (!isNullOrUndefined(endinvalue)) {
            invalidobject = true;
          }
        }
        if (isNullOrUndefined(startString) && !startObject && !isNullOrUndefined(endString) || !isNullOrUndefined(startString) && !endObject && isNullOrUndefined(endString)) {
          invalid = true;
        }
        if (invalidobject) {
          startString = endString = valueString = null;
          invalid = true;
        }
        if (startString) {
          invalid = invalid || this.checkInvalidValue(startString);
        }
        if (endString) {
          invalid = invalid || this.checkInvalidValue(endString);
        }
        if (invalid) {
          if (startObject && !invalidobject) {
            startString = startinvalue.toLocaleDateString();
          }
          if (endObject && !invalidobject) {
            endString = endinvalue.toLocaleDateString();
          }
          if (!isNullOrUndefined(startString) && !isNullOrUndefined(endString)) {
            valueString = startString + " " + this.separator + " " + endString;
          } else if (!isNullOrUndefined(startString)) {
            valueString = startString;
          } else if (!isNullOrUndefined(endString)) {
            valueString = endString;
          }
          this.invalidValueString = valueString;
          this.setProperties({ value: null }, true);
          this.setProperties({ startValue: null }, true);
          this.setProperties({ endValue: null }, true);
          this.startDate = null;
          this.endDate = null;
        }
      }
    };
    DateRangePicker2.prototype.getstringvalue = function(value) {
      var stringValue = null;
      if (!isNullOrUndefined(value) && typeof value === "number") {
        stringValue = value.toString();
      } else if (!isNullOrUndefined(value) && typeof value === "string") {
        stringValue = "" + value;
      }
      return stringValue;
    };
    DateRangePicker2.prototype.checkInvalidValue = function(value) {
      var valueString = value;
      var invalid = false;
      var formatOpt = null;
      formatOpt = { format: this.formatString, type: "date", skeleton: "yMd" };
      if (typeof valueString !== "string") {
        invalid = true;
      } else {
        var globalize = new Internationalization(this.locale);
        if (!this.checkDateValue(globalize.parseDate(valueString, formatOpt))) {
          var extISOStr = null;
          var basISOString = null;
          extISOStr = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOStr.test(valueString) && !basISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(valueString) || isNaN(+new Date(this.checkValue(valueString)))) {
            invalid = true;
          }
        }
      }
      return invalid;
    };
    DateRangePicker2.prototype.isDateDisabled = function(date) {
      if (isNullOrUndefined(date)) {
        return false;
      }
      var value = /* @__PURE__ */ new Date(+date);
      if (+value < +this.min || +value > +this.max) {
        return true;
      }
      this.virtualRenderCellArgs = {
        date: value,
        isDisabled: false
      };
      var args = this.virtualRenderCellArgs;
      this.virtualRenderCellEvent(args);
      if (args.isDisabled) {
        return true;
      }
      return false;
    };
    DateRangePicker2.prototype.disabledDateRender = function() {
      this.disabledDays = [];
      this.disabledDayCnt = null;
      var localDate = /* @__PURE__ */ new Date(+this.startValue);
      var count = 0;
      while (+localDate <= +this.endValue && +this.endValue <= +this.max) {
        this.virtualRenderCellArgs = {
          date: localDate,
          isDisabled: false
        };
        var args = this.virtualRenderCellArgs;
        this.virtualRenderCellEvent(args);
        if (args.isDisabled) {
          this.disabledDays.push(/* @__PURE__ */ new Date(+args.date));
          if (+localDate > +this.startValue && +localDate < +this.endValue) {
            count++;
          }
        }
        this.addDay(localDate, 1, null, this.max, this.min);
      }
      this.disabledDayCnt = count;
    };
    DateRangePicker2.prototype.virtualRenderCellEvent = function(args) {
      extend(this.virtualRenderCellArgs, { name: "renderDayCell" });
      this.trigger("renderDayCell", args);
    };
    DateRangePicker2.prototype.disabledDates = function() {
      var isStartDisabled = false;
      var isEndDisabled = false;
      if (!isNullOrUndefined(this.endValue) && !isNullOrUndefined(this.startValue)) {
        isStartDisabled = this.isDateDisabled(this.startValue);
        isEndDisabled = this.isDateDisabled(this.endValue);
        if (!this.isPopupOpen()) {
          this.currentDate = null;
        }
        this.setValue();
      }
      return isStartDisabled || isEndDisabled;
    };
    DateRangePicker2.prototype.setModelValue = function() {
      if (!this.value && this.startDate === null && this.endDate === null) {
        this.setProperties({ value: null }, true);
      } else if (this.value === null || this.value.start === null) {
        if (this.value === null) {
          this.setProperties({ value: [this.startDate, this.endDate] }, true);
        } else if (this.value.start === null) {
          this.setProperties({ value: { start: this.startDate, end: this.endDate } }, true);
        }
      } else {
        if (this.value && this.value.length > 0 || this.valueType && this.valueType.length > 0) {
          if (+this.startDate !== +this.value[0] || +this.endDate !== +this.value[1]) {
            this.setProperties({ value: [this.startDate, this.endDate] }, true);
          }
          if (this.value && this.value[0] == null && this.value[1] == null) {
            this.setProperties({ value: null }, true);
          }
        } else {
          if (this.value && this.value.start) {
            this.setProperties({ value: { start: this.startDate, end: this.endDate } }, true);
          }
        }
      }
      this.createHiddenInput();
    };
    DateRangePicker2.prototype.dispatchEvent = function(element2, type) {
      var evt = document.createEvent("HTMLEvents");
      evt.initEvent(type, false, true);
      element2.dispatchEvent(evt);
      this.firstHiddenChild.dispatchEvent(evt);
    };
    DateRangePicker2.prototype.changeTrigger = function(e) {
      if (+this.initStartDate !== +this.startValue || +this.initEndDate !== +this.endValue) {
        this.setProperties({ endDate: this.checkDateValue(this.endValue) }, true);
        this.setProperties({ startDate: this.checkDateValue(this.startValue) }, true);
        this.setModelValue();
        if (this.isAngular && this.preventChange) {
          this.preventChange = false;
        } else {
          this.trigger("change", this.rangeArgs(e));
        }
      }
      this.previousEleValue = this.inputElement.value;
      this.initStartDate = this.checkDateValue(this.startValue);
      this.initEndDate = this.checkDateValue(this.endValue);
    };
    DateRangePicker2.prototype.navigateTo = function(view, date) {
      if (this.isPopupOpen()) {
        if (view.toLowerCase() === "month") {
          view = "Month";
        } else if (view.toLowerCase() === "year") {
          view = "Year";
        } else if (view.toLowerCase() === "decade") {
          view = "Decade";
        } else {
          return;
        }
        if (this.getViewNumber(view) < this.getViewNumber(this.depth)) {
          view = this.depth;
        }
        if (this.isMobile) {
          _super.prototype.navigateTo.call(this, view, date);
        } else {
          if (date < this.min) {
            date = /* @__PURE__ */ new Date(+this.min);
          } else if (date >= this.max) {
            date = /* @__PURE__ */ new Date(+this.max);
          }
          if (view === "Month" && this.isSameMonth(date, this.max)) {
            date = new Date(this.max.getFullYear(), this.max.getMonth() - 1, this.min.getDate());
          } else if (view === "Year" && this.isSameYear(date, this.max)) {
            date = new Date(this.max.getFullYear() - 1, this.max.getMonth(), this.max.getDate());
          } else if (view === "Decade" && this.isSameDecade(date, this.max)) {
            date = new Date(this.max.getFullYear() - 10, this.max.getMonth(), this.max.getDate());
          }
          this.leftCalCurrentDate = date;
          this.navigate(this.leftCalendar, this.leftCalCurrentDate, view);
          if (view === "Month") {
            date = new Date(this.currentDate.setMonth(this.currentDate.getMonth() + 1));
          } else if (view === "Year") {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 1));
          } else {
            date = new Date(this.currentDate.setFullYear(this.currentDate.getFullYear() + 10));
          }
          this.rightCalCurrentDate = date;
          this.navigate(this.rightCalendar, this.rightCalCurrentDate, view);
          this.leftKeyboardModule = this.rightKeyboardModule = null;
          this.updateNavIcons();
        }
        if (this.currentView() === this.depth) {
          this.bindCalendarCellEvents();
        }
        this.removeFocusedDate();
        this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
      }
    };
    DateRangePicker2.prototype.navigate = function(calendar, date, view) {
      this.calendarElement = calendar;
      this.table = calendar.querySelector("table");
      this.tableBodyElement = calendar.querySelector("tbody");
      this.headerTitleElement = calendar.querySelector(".e-title");
      this.tableHeadElement = calendar.querySelector("thead");
      this.contentElement = calendar.querySelector(".e-content");
      this.previousIcon = calendar.querySelector(".e-prev");
      this.nextIcon = calendar.querySelector(".e-next");
      this.effect = ZOOMIN2;
      _super.prototype.navigateTo.call(this, view, date);
    };
    DateRangePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        addClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.inputElement.focus();
      }
    };
    DateRangePicker2.prototype.focusOut = function() {
      var isBlur = this.preventBlur;
      if (document.activeElement === this.inputElement) {
        removeClass([this.inputWrapper.container], [INPUTFOCUS2]);
        this.preventBlur = false;
        this.inputElement.blur();
        this.preventBlur = isBlur;
      }
    };
    DateRangePicker2.prototype.destroy = function() {
      this.unBindEvents();
      this.hide(null);
      var ariaAttrs = {
        "aria-readonly": this.readonly ? "true" : "false",
        "tabindex": "0",
        "aria-haspopup": "true",
        "aria-activedescendant": "null",
        "aria-owns": this.element.id + "_popup",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "aria-disabled": !this.enabled ? "true" : "false",
        "autocorrect": "off",
        "autocapitalize": "off",
        "aria-invalid": "false",
        "spellcheck": "false"
      };
      if (this.inputElement) {
        removeClass([this.inputElement], [ROOT7]);
        EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
        Input.removeAttributes(ariaAttrs, this.inputElement);
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.inputElement.classList.remove("e-input");
        if (!isNullOrUndefined(this.inputWrapper)) {
          EventHandler.remove(this.inputWrapper.buttons[0], "mousedown", this.rangeIconHandler);
          if (this.angularTag === null) {
            this.inputWrapper.container.parentElement.appendChild(this.inputElement);
          }
          detach(this.inputWrapper.container);
        }
      }
      if (!isNullOrUndefined(this.inputKeyboardModule) && !this.isMobile) {
        this.inputKeyboardModule.destroy();
      }
      if (this.popupObj) {
        if (!this.isMobile) {
          this.clearCalendarEvents();
        }
      }
      _super.prototype.destroy.call(this);
      this.inputWrapper = this.popupWrapper = this.popupObj = this.cloneElement = this.presetElement = null;
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
      if (!isNullOrUndefined(this.firstHiddenChild) && !isNullOrUndefined(this.secondHiddenChild)) {
        detach(this.firstHiddenChild);
        detach(this.secondHiddenChild);
        this.firstHiddenChild = this.secondHiddenChild = null;
        this.inputElement.setAttribute("name", this.element.getAttribute("data-name"));
        this.inputElement.removeAttribute("data-name");
      }
    };
    DateRangePicker2.prototype.ensureInputAttribute = function() {
      var attr = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        attr[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < attr.length; i++) {
        if (isNullOrUndefined(this.cloneElement.getAttribute(attr[i]))) {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
          this.inputElement.removeAttribute(attr[i]);
        } else {
          if (attr[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(attr[i]);
          }
          this.inputElement.setAttribute(attr[i], this.cloneElement.getAttribute(attr[i]));
        }
      }
    };
    DateRangePicker2.prototype.getModuleName = function() {
      return "daterangepicker";
    };
    DateRangePicker2.prototype.getPersistData = function() {
      var keyEntity = ["startDate", "endDate", "value"];
      return this.addOnPersist(keyEntity);
    };
    DateRangePicker2.prototype.getSelectedRange = function() {
      var range;
      if (!isNullOrUndefined(this.startValue) && !isNullOrUndefined(this.endValue)) {
        range = Math.round(Math.abs((this.removeTimeValueFromDate(this.startValue).getTime() - this.removeTimeValueFromDate(this.endValue).getTime()) / (1e3 * 60 * 60 * 24))) + 1;
        this.disabledDateRender();
        if (!isNullOrUndefined(this.disabledDayCnt)) {
          range = range - this.disabledDayCnt;
          this.disabledDayCnt = null;
        }
      } else {
        range = 0;
      }
      return { startDate: this.startValue, endDate: this.endValue, daySpan: range };
    };
    DateRangePicker2.prototype.show = function(element2, event) {
      var _this = this;
      if (this.isMobile && this.popupObj) {
        this.popupObj.refreshPosition();
      }
      if (this.enabled && this.readonly || !this.enabled || this.popupObj) {
        return;
      } else {
        if (!this.isPopupOpen()) {
          if (element2) {
            this.targetElement = element2;
          }
          this.createPopup();
          if (this.isMobile || Browser.isDevice) {
            this.mobileRangePopupWrap = this.createElement("div", { className: "e-daterangepick-mob-popup-wrap" });
            document.body.appendChild(this.mobileRangePopupWrap);
          }
          this.openEventArgs = {
            popup: this.popupObj || null,
            cancel: false,
            date: this.inputElement.value,
            model: this,
            event: event ? event : null,
            appendTo: this.isMobile || Browser.isDevice ? this.mobileRangePopupWrap : document.body
          };
          var eventArgs = this.openEventArgs;
          this.trigger("open", eventArgs, function(eventArgs2) {
            _this.openEventArgs = eventArgs2;
            if (!_this.openEventArgs.cancel) {
              _this.openEventArgs.appendTo.appendChild(_this.popupWrapper);
              _this.showPopup(element2, event);
              var isPreset = !_this.isCustomRange || _this.isMobile && _this.isCustomRange;
              if (!isUndefined(_this.presets[0].start && _this.presets[0].end && _this.presets[0].label) && isPreset) {
                _this.setScrollPosition();
              }
              _this.checkMinMaxDays();
              if (_this.isMobile && !isNullOrUndefined(_this.startDate) && isNullOrUndefined(_this.endDate)) {
                _this.endButton.element.classList.add(ACTIVE3);
                _this.startButton.element.classList.remove(ACTIVE3);
                _this.endButton.element.removeAttribute("disabled");
                _this.selectableDates();
              }
              _super.prototype.setOverlayIndex.call(
                _this,
                _this.mobileRangePopupWrap,
                _this.popupObj.element,
                _this.modal,
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                _this.isMobile || Browser.isDevice
              );
            }
          });
        }
      }
    };
    DateRangePicker2.prototype.hide = function(event) {
      var _this = this;
      if (this.popupObj) {
        if (isNullOrUndefined(this.previousEndValue) && isNullOrUndefined(this.previousStartValue)) {
          this.clearRange();
        } else {
          if (!isNullOrUndefined(this.previousStartValue)) {
            this.startValue = new Date(this.checkValue(this.previousStartValue));
            this.setValue();
            this.currentDate = new Date(this.checkValue(this.startValue));
          } else {
            this.startValue = null;
            this.setValue();
          }
          if (!isNullOrUndefined(this.previousEndValue)) {
            this.endValue = new Date(this.checkValue(this.previousEndValue));
            this.setValue();
          } else {
            this.endValue = null;
            this.setValue();
          }
        }
        if (this.isPopupOpen()) {
          this.closeEventArgs = {
            cancel: false,
            popup: this.popupObj,
            date: this.inputElement.value,
            model: this,
            event: event ? event : null
          };
          var eventArgs = this.closeEventArgs;
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.closeEventArgs = eventArgs2;
            if (!_this.closeEventArgs.cancel) {
              if (_this.isMobile) {
                if (!isNullOrUndefined(_this.startButton) && !isNullOrUndefined(_this.endButton)) {
                  EventHandler.remove(_this.startButton.element, "click touchstart", _this.deviceHeaderClick);
                  EventHandler.remove(_this.endButton.element, "click touchstart", _this.deviceHeaderClick);
                }
              }
              if (_this.popupObj) {
                _this.popupObj.hide();
                if (_this.preventBlur) {
                  _this.inputElement.focus();
                  addClass([_this.inputWrapper.container], [INPUTFOCUS2]);
                }
              }
              if (!_this.isMobile) {
                if (!isNullOrUndefined(_this.leftKeyboardModule) && !isNullOrUndefined(_this.rightKeyboardModule)) {
                  _this.leftKeyboardModule.destroy();
                  _this.rightKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.presetElement)) {
                  _this.presetKeyboardModule.destroy();
                }
                if (!isNullOrUndefined(_this.cancelButton)) {
                  _this.btnKeyboardModule.destroy();
                }
              }
              _this.targetElement = null;
              removeClass([document.body], OVERFLOW2);
              EventHandler.remove(document, "mousedown touchstart", _this.documentHandler);
              if (_this.isMobile && _this.modal) {
                _this.modal.style.display = "none";
                _this.modal.outerHTML = "";
                _this.modal = null;
              }
              if (_this.isMobile || Browser.isDevice) {
                if (!isNullOrUndefined(_this.mobileRangePopupWrap)) {
                  _this.mobileRangePopupWrap.remove();
                  _this.mobileRangePopupWrap = null;
                }
              }
              _this.isKeyPopup = _this.dateDisabled = false;
            } else {
              removeClass([_this.inputWrapper.buttons[0]], ACTIVE3);
            }
            _this.updateClearIconState();
            _this.updateHiddenInput();
            if (_this.isMobile && _this.allowEdit && !_this.readonly) {
              _this.inputElement.removeAttribute("readonly");
            }
          });
        }
      } else {
        this.updateClearIconState();
        this.updateHiddenInput();
        if (this.isMobile && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    DateRangePicker2.prototype.setLocale = function() {
      this.globalize = new Internationalization(this.locale);
      this.l10n.setLocale(this.locale);
      this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
      Input.setPlaceholder(this.placeholder, this.inputElement);
      this.updateInput();
      this.updateHiddenInput();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.refreshChange = function() {
      this.checkView();
      this.refreshControl();
      this.changeTrigger();
    };
    DateRangePicker2.prototype.setDate = function() {
      Input.setValue("", this.inputElement, this.floatLabelType, this.showClearButton);
      this.refreshChange();
    };
    DateRangePicker2.prototype.enableInput = function() {
      if (+this.min <= +this.max) {
        this.setProperties({ enabled: true }, true);
        Input.setEnabled(this.enabled, this.inputElement);
        if (this.element.hasAttribute("disabled")) {
          this.bindEvents();
        }
      }
    };
    DateRangePicker2.prototype.clearModelvalue = function(newProp, oldProp) {
      this.setProperties({ startDate: null }, true);
      this.setProperties({ endDate: null }, true);
      if (oldProp.value && oldProp.value.length > 0) {
        this.setProperties({ value: null }, true);
      } else if (oldProp.value && oldProp.value.start) {
        this.setProperties({ value: { start: null, end: null } }, true);
      } else if (oldProp.value && !oldProp.value.start) {
        this.setProperties({ value: { start: null, end: null } }, true);
      }
      this.updateValue();
      this.setDate();
    };
    DateRangePicker2.prototype.createHiddenInput = function() {
      if (isNullOrUndefined(this.firstHiddenChild) && isNullOrUndefined(this.secondHiddenChild)) {
        this.firstHiddenChild = this.createElement("input");
        this.secondHiddenChild = this.createElement("input");
      }
      if (!isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        this.inputElement.setAttribute("data-name", this.inputElement.getAttribute("name"));
        this.inputElement.removeAttribute("name");
      }
      attributes(this.firstHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT2
      });
      attributes(this.secondHiddenChild, {
        "type": "text",
        "name": this.inputElement.getAttribute("data-name"),
        "class": HIDDENELEMENT2
      });
      var format = { type: "datetime", skeleton: "yMd" };
      this.firstHiddenChild.value = this.startDate && this.globalize.formatDate(this.startDate, format);
      this.secondHiddenChild.value = this.endDate && this.globalize.formatDate(this.endDate, format);
      this.inputElement.parentElement.appendChild(this.firstHiddenChild);
      this.inputElement.parentElement.appendChild(this.secondHiddenChild);
    };
    DateRangePicker2.prototype.setMinMaxDays = function() {
      if (this.isPopupOpen()) {
        this.removeClassDisabled();
        this.checkMinMaxDays();
        if (this.isMobile) {
          this.selectableDates();
        }
        if (!this.strictMode && (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue))) {
          this.removeSelection();
        } else {
          this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
        }
        this.updateHeader();
      }
    };
    DateRangePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      var format = { format: this.formatString, type: "date", skeleton: "yMd" };
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        var openPopup = ["maxDays", "minDays", "value"];
        if (openPopup.indexOf(prop) < 0) {
          this.hide(null);
        }
        switch (prop) {
          case "width":
            this.setEleWidth(this.width);
            break;
          case "separator":
            this.previousEleValue = this.inputElement.value;
            this.setProperties({ separator: newProp.separator }, true);
            this.updateInput();
            this.changeTrigger();
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            this.setProperties({ placeholder: newProp.placeholder }, true);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            this.inputElement.setAttribute("aria-readonly", "" + this.readonly);
            this.setRangeAllowEdit();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "enabled":
            this.setProperties({ enabled: newProp.enabled }, true);
            Input.setEnabled(this.enabled, this.inputElement);
            if (this.enabled) {
              this.inputElement.setAttribute("tabindex", this.tabIndex);
            } else {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "allowEdit":
            this.setRangeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({ enableRtl: newProp.enableRtl }, true);
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            break;
          case "format":
            this.setProperties({ format: newProp.format }, true);
            this.checkFormat();
            this.updateInput();
            this.changeTrigger();
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
            Input.setPlaceholder(this.placeholder, this.inputElement);
            this.setLocale();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.setDataAttribute(true);
            this.checkHtmlAttributes(true);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "startDate":
            if (typeof newProp.startDate === "string") {
              newProp.startDate = this.globalize.parseDate(newProp.startDate, format);
            }
            if (+this.initStartDate !== +newProp.startDate) {
              this.startValue = this.checkDateValue(new Date(this.checkValue(newProp.startDate)));
              this.setDate();
              this.setValue();
            }
            break;
          case "endDate":
            if (typeof newProp.endDate === "string") {
              newProp.endDate = this.globalize.parseDate(newProp.endDate, format);
            }
            if (+this.initEndDate !== +newProp.endDate) {
              this.endValue = this.checkDateValue(new Date(this.checkValue(newProp.endDate)));
              this.setDate();
              this.setValue();
            }
            break;
          case "value":
            this.invalidValueString = null;
            this.checkInvalidRange(newProp.value);
            if (typeof newProp.value === "string") {
              if (!this.invalidValueString) {
                var rangeArray = newProp.value.split(" " + this.separator + " ");
                this.value = [new Date(rangeArray[0]), new Date(rangeArray[1])];
                this.updateValue();
                this.setDate();
              } else {
                this.clearModelvalue(newProp, oldProp);
              }
            } else {
              if (!isNullOrUndefined(newProp.value) && newProp.value.length > 0 || !isNullOrUndefined(newProp.value) && newProp.value.start) {
                this.valueType = newProp.value;
                if (newProp.value[0] === null || newProp.value.start === null) {
                  if (newProp.value.length === 1 || newProp.value.start) {
                    this.clearModelvalue(newProp, oldProp);
                  } else if (newProp.value[1] === null || newProp.value.start === null) {
                    this.clearModelvalue(newProp, oldProp);
                  }
                } else if (+this.initStartDate !== +newProp.value[0] || +this.initEndDate !== +newProp.value[1] || +this.initStartDate !== +(newProp.value.start || +this.initEndDate !== +newProp.value.start)) {
                  if (newProp.value.length === 1) {
                    this.modelValue = newProp.value;
                  } else if (newProp.value.start) {
                    this.modelValue = newProp.value;
                  }
                  this.updateValue();
                  this.setDate();
                }
              } else {
                if (isNullOrUndefined(this.value) || newProp.value.start == null) {
                  this.valueType = newProp.value;
                  this.startValue = null;
                  this.endValue = null;
                  this.clearModelvalue(newProp, oldProp);
                }
              }
            }
            if (this.isPopupOpen()) {
              if (isNullOrUndefined(this.startValue) && isNullOrUndefined(this.endValue)) {
                this.removeSelection();
                if (this.isMobile) {
                  this.deviceHeaderUpdate();
                }
                return;
              }
              if (this.isMobile) {
                this.navigate(this.deviceCalendar, this.startValue, this.currentView());
                this.deviceHeaderUpdate();
              } else {
                this.navigate(this.leftCalendar, this.startValue, this.currentView());
                this.updateControl(this.leftCalendar);
                this.navigate(this.rightCalendar, this.endValue, this.currentView());
                this.updateControl(this.rightCalendar);
              }
              this.updateRange(this.isMobile ? [this.calendarElement] : [this.leftCalendar, this.rightCalendar]);
              this.updateHeader();
              this.applyButton.disabled = this.applyButton.element.disabled = false;
            }
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            break;
          case "minDays":
            this.setProperties({ minDays: newProp.minDays }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "maxDays":
            this.setProperties({ maxDays: newProp.maxDays }, true);
            this.refreshChange();
            this.setMinMaxDays();
            break;
          case "min":
            this.setProperties({ min: this.checkDateValue(new Date(this.checkValue(newProp.min))) }, true);
            this.previousEleValue = this.inputElement.value;
            this.enableInput();
            this.refreshChange();
            break;
          case "max":
            this.setProperties({ max: this.checkDateValue(new Date(this.checkValue(newProp.max))) }, true);
            this.enableInput();
            this.refreshChange();
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.setProperties({ strictMode: newProp.strictMode }, true);
            this.refreshChange();
            break;
          case "presets":
            this.setProperties({ presets: newProp.presets }, true);
            this.processPresets();
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            break;
          case "start":
            this.setProperties({ start: newProp.start }, true);
            this.refreshChange();
            break;
          case "depth":
            this.setProperties({ depth: newProp.depth }, true);
            this.refreshChange();
            break;
        }
      }
    };
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "value", void 0);
    __decorate31([
      Property(false)
    ], DateRangePicker2.prototype, "enablePersistence", void 0);
    __decorate31([
      Property(new Date(1900, 0, 1))
    ], DateRangePicker2.prototype, "min", void 0);
    __decorate31([
      Property(new Date(2099, 11, 31))
    ], DateRangePicker2.prototype, "max", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "locale", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate31([
      Property(false)
    ], DateRangePicker2.prototype, "weekNumber", void 0);
    __decorate31([
      Property("Gregorian")
    ], DateRangePicker2.prototype, "calendarMode", void 0);
    __decorate31([
      Property(false)
    ], DateRangePicker2.prototype, "openOnFocus", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "created", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "destroyed", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "change", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "cleared", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "navigated", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "renderDayCell", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "startDate", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "endDate", void 0);
    __decorate31([
      Collection([{}], Presets)
    ], DateRangePicker2.prototype, "presets", void 0);
    __decorate31([
      Property("")
    ], DateRangePicker2.prototype, "width", void 0);
    __decorate31([
      Property(1e3)
    ], DateRangePicker2.prototype, "zIndex", void 0);
    __decorate31([
      Property(true)
    ], DateRangePicker2.prototype, "showClearButton", void 0);
    __decorate31([
      Property(true)
    ], DateRangePicker2.prototype, "showTodayButton", void 0);
    __decorate31([
      Property("Month")
    ], DateRangePicker2.prototype, "start", void 0);
    __decorate31([
      Property("Month")
    ], DateRangePicker2.prototype, "depth", void 0);
    __decorate31([
      Property("")
    ], DateRangePicker2.prototype, "cssClass", void 0);
    __decorate31([
      Property("-")
    ], DateRangePicker2.prototype, "separator", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "minDays", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "maxDays", void 0);
    __decorate31([
      Property(false)
    ], DateRangePicker2.prototype, "strictMode", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "keyConfigs", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "format", void 0);
    __decorate31([
      Property(true)
    ], DateRangePicker2.prototype, "enabled", void 0);
    __decorate31([
      Property(false)
    ], DateRangePicker2.prototype, "readonly", void 0);
    __decorate31([
      Property(true)
    ], DateRangePicker2.prototype, "allowEdit", void 0);
    __decorate31([
      Property("Never")
    ], DateRangePicker2.prototype, "floatLabelType", void 0);
    __decorate31([
      Property(null)
    ], DateRangePicker2.prototype, "placeholder", void 0);
    __decorate31([
      Property({})
    ], DateRangePicker2.prototype, "htmlAttributes", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "open", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "close", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "select", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "focus", void 0);
    __decorate31([
      Event2()
    ], DateRangePicker2.prototype, "blur", void 0);
    DateRangePicker2 = __decorate31([
      NotifyPropertyChanges
    ], DateRangePicker2);
    return DateRangePicker2;
  }(CalendarBase)
);

// node_modules/@syncfusion/ej2-calendars/src/timepicker/timepicker.js
var __extends34 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate32 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WRAPPERCLASS = "e-time-wrapper";
var POPUP3 = "e-popup";
var ERROR5 = "e-error";
var POPUPDIMENSION = "240px";
var DAY = (/* @__PURE__ */ new Date()).getDate();
var MONTH3 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR3 = (/* @__PURE__ */ new Date()).getFullYear();
var ROOT8 = "e-timepicker";
var LIBRARY3 = "e-lib";
var CONTROL5 = "e-control";
var CONTENT4 = "e-content";
var SELECTED5 = "e-active";
var HOVER2 = "e-hover";
var NAVIGATION = "e-navigation";
var DISABLED8 = "e-disabled";
var ICONANIMATION = "e-icon-anim";
var FOCUS = "e-input-focus";
var LISTCLASS2 = "e-list-item";
var HALFPOSITION = 2;
var ANIMATIONDURATION = 50;
var OVERFLOW3 = "e-time-overflow";
var OFFSETVAL = 4;
var EDITABLE = "e-non-edit";
var wrapperAttributes2 = ["title", "class", "style"];
var TimePickerBase;
(function(TimePickerBase2) {
  function createListItems(createdEl, min, max, globalize, timeFormat, step) {
    var formatOptions;
    if (this.calendarMode === "Gregorian") {
      formatOptions = { format: timeFormat, type: "time" };
    } else {
      formatOptions = { format: timeFormat, type: "time", calendar: "islamic" };
    }
    var start;
    var interval = step * 6e4;
    var listItems = [];
    var timeCollections = [];
    start = +min.setMilliseconds(0);
    var end = +max.setMilliseconds(0);
    while (end >= start) {
      timeCollections.push(start);
      listItems.push(globalize.formatDate(new Date(start), { format: timeFormat, type: "time" }));
      start += interval;
    }
    var listTag = ListBase.createList(createdEl, listItems, null, true);
    return { collection: timeCollections, list: listTag };
  }
  TimePickerBase2.createListItems = createListItems;
})(TimePickerBase || (TimePickerBase = {}));
var TimeMaskPlaceholder = (
  /** @class */
  function(_super) {
    __extends34(TimeMaskPlaceholder2, _super);
    function TimeMaskPlaceholder2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate32([
      Property("day")
    ], TimeMaskPlaceholder2.prototype, "day", void 0);
    __decorate32([
      Property("month")
    ], TimeMaskPlaceholder2.prototype, "month", void 0);
    __decorate32([
      Property("year")
    ], TimeMaskPlaceholder2.prototype, "year", void 0);
    __decorate32([
      Property("day of the week")
    ], TimeMaskPlaceholder2.prototype, "dayOfTheWeek", void 0);
    __decorate32([
      Property("hour")
    ], TimeMaskPlaceholder2.prototype, "hour", void 0);
    __decorate32([
      Property("minute")
    ], TimeMaskPlaceholder2.prototype, "minute", void 0);
    __decorate32([
      Property("second")
    ], TimeMaskPlaceholder2.prototype, "second", void 0);
    return TimeMaskPlaceholder2;
  }(ChildProperty)
);
var TimePicker = (
  /** @class */
  function(_super) {
    __extends34(TimePicker2, _super);
    function TimePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.liCollections = [];
      _this.timeCollections = [];
      _this.disableItemCollection = [];
      _this.invalidValueString = null;
      _this.isAngular = false;
      _this.preventChange = false;
      _this.maskedDateValue = "";
      _this.moduleName = _this.getModuleName();
      _this.timeOptions = options;
      return _this;
    }
    TimePicker2.prototype.preRender = function() {
      this.keyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.cloneElement = this.element.cloneNode(true);
      removeClass([this.cloneElement], [ROOT8, CONTROL5, LIBRARY3]);
      this.inputElement = this.element;
      this.angularTag = null;
      this.formElement = closest(this.element, "form");
      if (this.element.tagName === "EJS-TIMEPICKER") {
        this.angularTag = this.element.tagName;
        this.inputElement = this.createElement("input");
        this.element.appendChild(this.inputElement);
      }
      this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
      this.element.removeAttribute("tabindex");
      this.openPopupEventArgs = {
        appendTo: document.body
      };
    };
    TimePicker2.prototype.render = function() {
      this.initialize();
      this.createInputElement();
      this.updateHtmlAttributeToWrapper();
      this.setTimeAllowEdit();
      this.setEnable();
      this.validateInterval();
      this.bindEvents();
      this.validateDisable();
      this.setValue(this.getFormattedValue(this.value));
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType == "Always" || !this.floatLabelType || !this.placeholder)) {
        this.updateInputValue(this.maskedDateValue);
        this.checkErrorState(this.maskedDateValue);
      }
      this.anchor = this.inputElement;
      this.inputElement.setAttribute("value", this.inputElement.value);
      this.inputEleValue = this.getDateObject(this.inputElement.value);
      this.renderComplete();
    };
    TimePicker2.prototype.setTimeAllowEdit = function() {
      if (this.allowEdit) {
        if (!this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      } else {
        attributes(this.inputElement, { "readonly": "" });
      }
      this.clearIconState();
    };
    TimePicker2.prototype.clearIconState = function() {
      if (!this.allowEdit && this.inputWrapper && !this.readonly) {
        if (this.inputElement.value === "") {
          removeClass([this.inputWrapper.container], [EDITABLE]);
        } else {
          addClass([this.inputWrapper.container], [EDITABLE]);
        }
      } else if (this.inputWrapper) {
        removeClass([this.inputWrapper.container], [EDITABLE]);
      }
    };
    TimePicker2.prototype.validateDisable = function() {
      this.setMinMax(this.initMin, this.initMax);
      this.popupCreation();
      this.popupObj.destroy();
      this.popupWrapper = this.popupObj = null;
      if (!isNaN(+this.value) && this.value !== null) {
        if (!this.valueIsDisable(this.value)) {
          if (this.strictMode) {
            this.resetState();
          }
          this.initValue = null;
          this.initMax = this.getDateObject(this.initMax);
          this.initMin = this.getDateObject(this.initMin);
          this.timeCollections = this.liCollections = [];
          this.setMinMax(this.initMin, this.initMax);
        }
      }
    };
    TimePicker2.prototype.validationAttribute = function(target, input) {
      var name = target.getAttribute("name") ? target.getAttribute("name") : target.getAttribute("id");
      input.setAttribute("name", name);
      target.removeAttribute("name");
      var attributes2 = ["required", "aria-required", "form"];
      for (var i = 0; i < attributes2.length; i++) {
        if (isNullOrUndefined(target.getAttribute(attributes2[i]))) {
          continue;
        }
        var attr = target.getAttribute(attributes2[i]);
        input.setAttribute(attributes2[i], attr);
        target.removeAttribute(attributes2[i]);
      }
    };
    TimePicker2.prototype.initialize = function() {
      this.globalize = new Internationalization(this.locale);
      this.defaultCulture = new Internationalization("en");
      this.checkTimeFormat();
      this.checkInvalidValue(this.value);
      this.setProperties({ value: this.checkDateValue(new Date(this.checkInValue(this.value))) }, true);
      this.setProperties({ min: this.checkDateValue(new Date(this.checkInValue(this.min))) }, true);
      this.setProperties({ max: this.checkDateValue(new Date(this.checkInValue(this.max))) }, true);
      this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkInValue(this.scrollTo))) }, true);
      if (this.angularTag !== null) {
        this.validationAttribute(this.element, this.inputElement);
      }
      this.updateHtmlAttributeToElement();
      this.checkAttributes(false);
      var localeText = { placeholder: this.placeholder };
      this.l10n = new L10n("timepicker", localeText, this.locale);
      this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      this.initValue = this.checkDateValue(this.value);
      this.initMin = this.checkDateValue(this.min);
      this.initMax = this.checkDateValue(this.max);
      this.isNavigate = this.isPreventBlur = this.isTextSelected = false;
      this.activeIndex = this.valueWithMinutes = this.prevDate = null;
      if (!isNullOrUndefined(this.element.getAttribute("id"))) {
        if (this.angularTag !== null) {
          this.inputElement.id = this.element.getAttribute("id") + "_input";
        }
      } else {
        this.element.id = getUniqueID("ej2_timepicker");
        if (this.angularTag !== null) {
          attributes(this.inputElement, { "id": this.element.id + "_input" });
        }
      }
      if (isNullOrUndefined(this.inputElement.getAttribute("name"))) {
        attributes(this.inputElement, { "name": this.element.id });
      }
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.checkTimeFormat = function() {
      if (this.format) {
        if (typeof this.format === "string") {
          this.formatString = this.format;
        } else if (!isNullOrUndefined(this.format.skeleton) && this.format.skeleton !== "") {
          var skeletonString = this.format.skeleton;
          this.formatString = this.globalize.getDatePattern({ type: "time", skeleton: skeletonString });
        } else {
          this.formatString = this.globalize.getDatePattern({ type: "time", skeleton: "short" });
        }
      } else {
        this.formatString = null;
      }
    };
    TimePicker2.prototype.checkDateValue = function(value) {
      return !isNullOrUndefined(value) && value instanceof Date && !isNaN(+value) ? value : null;
    };
    TimePicker2.prototype.createInputElement = function() {
      var updatedCssClassesValue = this.cssClass;
      var isBindClearAction = this.enableMask ? false : true;
      if (!isNullOrUndefined(this.cssClass) && this.cssClass !== "") {
        updatedCssClassesValue = this.cssClass.replace(/\s+/g, " ").trim();
      }
      this.inputWrapper = Input.createInput({
        element: this.inputElement,
        bindClearAction: isBindClearAction,
        floatLabelType: this.floatLabelType,
        properties: {
          readonly: this.readonly,
          placeholder: this.placeholder,
          cssClass: updatedCssClassesValue,
          enabled: this.enabled,
          enableRtl: this.enableRtl,
          showClearButton: this.showClearButton
        },
        buttons: [" e-input-group-icon e-time-icon e-icons"]
      }, this.createElement);
      this.inputWrapper.container.style.width = this.setWidth(this.width);
      attributes(this.inputElement, {
        "aria-haspopup": "true",
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-activedescendant": "null",
        "aria-owns": this.element.id + "_options",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "false",
        "aria-invalid": "false"
      });
      if (!this.isNullOrEmpty(this.inputStyle)) {
        Input.addAttributes({ "style": this.inputStyle }, this.inputElement);
      }
      addClass([this.inputWrapper.container], WRAPPERCLASS);
    };
    TimePicker2.prototype.getCldrDateTimeFormat = function() {
      var culture = new Internationalization(this.locale);
      var cldrTime;
      var dateFormat = culture.getDatePattern({ skeleton: "yMd" });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.cldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.checkInvalidValue = function(value) {
      var isInvalid = false;
      if (typeof value !== "object" && !isNullOrUndefined(value)) {
        var valueString = value;
        if (typeof valueString === "string") {
          valueString = valueString.trim();
        }
        var valueExpression = null;
        var valueExp = null;
        if (typeof value === "number") {
          valueString = value.toString();
        } else if (typeof value === "string") {
          if (!/^[a-zA-Z0-9- ]*$/.test(value)) {
            valueExpression = this.setCurrentDate(this.getDateObject(value));
            if (isNullOrUndefined(valueExpression)) {
              valueExpression = this.checkDateValue(this.globalize.parseDate(valueString, {
                format: this.getCldrDateTimeFormat(),
                type: "datetime"
              }));
              if (isNullOrUndefined(valueExpression)) {
                valueExpression = this.checkDateValue(this.globalize.parseDate(valueString, {
                  format: this.formatString,
                  type: "dateTime",
                  skeleton: "yMd"
                }));
              }
            }
          }
        }
        valueExp = this.globalize.parseDate(valueString, {
          format: this.getCldrDateTimeFormat(),
          type: "datetime"
        });
        valueExpression = !isNullOrUndefined(valueExp) && valueExp instanceof Date && !isNaN(+valueExp) ? valueExp : null;
        if (isNullOrUndefined(valueExpression) && valueString.replace(/\s/g, "").length) {
          var extISOString = null;
          var basicISOString = null;
          extISOString = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          basicISOString = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
          if (!extISOString.test(valueString) && !basicISOString.test(valueString) || /^[a-zA-Z0-9- ]*$/.test(value) || isNaN(+/* @__PURE__ */ new Date("" + valueString))) {
            isInvalid = true;
          } else {
            valueExpression = /* @__PURE__ */ new Date("" + valueString);
          }
        }
        if (isInvalid) {
          if (!this.strictMode) {
            this.invalidValueString = valueString;
          }
          this.setProperties({ value: null }, true);
          this.initValue = null;
        } else {
          this.setProperties({ value: valueExpression }, true);
          this.initValue = this.value;
        }
      }
    };
    TimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this.enableMask) {
        modules.push({ args: [this], member: "MaskedDateTime" });
      }
      return modules;
    };
    TimePicker2.prototype.cldrFormat = function(type) {
      var cldrDateTimeString;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTimeString = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTimeString = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTimeString;
    };
    TimePicker2.prototype.destroy = function() {
      this.hide();
      this.unBindEvents();
      var ariaAttribute = {
        "aria-haspopup": "true",
        "aria-autocomplete": "list",
        "tabindex": "0",
        "aria-activedescendant": "null",
        "aria-owns": this.element.id + "_options",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-disabled": "true",
        "aria-invalid": "false"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
        if (this.angularTag === null) {
          this.inputWrapper.container.parentElement.appendChild(this.inputElement);
        }
        if (!isNullOrUndefined(this.cloneElement.getAttribute("tabindex"))) {
          this.inputElement.setAttribute("tabindex", this.tabIndex);
        } else {
          this.inputElement.removeAttribute("tabindex");
        }
        this.ensureInputAttribute();
        this.enableElement([this.inputElement]);
        this.inputElement.classList.remove("e-input");
        if (isNullOrUndefined(this.cloneElement.getAttribute("disabled"))) {
          Input.setEnabled(true, this.inputElement, this.floatLabelType);
        }
      }
      if (this.inputWrapper.container) {
        detach(this.inputWrapper.container);
      }
      this.inputWrapper = this.popupWrapper = this.cloneElement = void 0;
      this.liCollections = this.timeCollections = this.disableItemCollection = [];
      if (!isNullOrUndefined(this.rippleFn)) {
        this.rippleFn();
      }
      _super.prototype.destroy.call(this);
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    TimePicker2.prototype.ensureInputAttribute = function() {
      var propertyList = [];
      for (var i = 0; i < this.inputElement.attributes.length; i++) {
        propertyList[i] = this.inputElement.attributes[i].name;
      }
      for (var i = 0; i < propertyList.length; i++) {
        if (!isNullOrUndefined(this.cloneElement.getAttribute(propertyList[i]))) {
          this.inputElement.setAttribute(propertyList[i], this.cloneElement.getAttribute(propertyList[i]));
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = this.cloneElement.getAttribute(propertyList[i]);
          }
        } else {
          this.inputElement.removeAttribute(propertyList[i]);
          if (propertyList[i].toLowerCase() === "value") {
            this.inputElement.value = "";
          }
        }
      }
    };
    TimePicker2.prototype.popupCreation = function() {
      this.popupWrapper = this.createElement("div", {
        className: ROOT8 + " " + POPUP3,
        attrs: { "id": this.element.id + "_popup", "style": "visibility:hidden" }
      });
      if (!isNullOrUndefined(this.cssClass)) {
        this.popupWrapper.className += " " + this.cssClass;
      }
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.generateList();
        append([this.listWrapper], this.popupWrapper);
      }
      this.openPopupEventArgs.appendTo.appendChild(this.popupWrapper);
      this.addSelection();
      this.renderPopup();
      detach(this.popupWrapper);
    };
    TimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION, 10);
      var popupHeight = this.popupWrapper.getBoundingClientRect().height;
      return popupHeight > height ? height : popupHeight;
    };
    TimePicker2.prototype.generateList = function() {
      this.createListItems();
      this.wireListEvents();
      var rippleModel = { duration: 300, selector: "." + LISTCLASS2 };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS2);
    };
    TimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      this.popupObj = new Popup(this.popupWrapper, {
        width: this.setPopupWidth(this.width),
        zIndex: this.zIndex,
        targetType: "relative",
        position: Browser.isDevice ? { X: "center", Y: "center" } : { X: "left", Y: "bottom" },
        collision: Browser.isDevice ? { X: "fit", Y: "fit" } : { X: "flip", Y: "flip" },
        enableRtl: this.enableRtl,
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        offsetY: OFFSETVAL,
        open: function() {
          _this.popupWrapper.style.visibility = "visible";
          addClass([_this.inputWrapper.buttons[0]], SELECTED5);
        },
        close: function() {
          removeClass([_this.inputWrapper.buttons[0]], SELECTED5);
          _this.unWireListEvents();
          _this.inputElement.setAttribute("aria-activedescendant", "null");
          remove(_this.popupObj.element);
          _this.popupObj.destroy();
          _this.popupWrapper.innerHTML = "";
          _this.listWrapper = _this.popupWrapper = _this.listTag = void 0;
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      if (!Browser.isDevice) {
        this.popupObj.collision = { X: "none", Y: "flip" };
      }
      this.popupObj.element.style.maxHeight = POPUPDIMENSION;
    };
    TimePicker2.prototype.getFormattedValue = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, { skeleton: "medium", type: "time" });
      }
    };
    TimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = !this.isNullOrEmpty(this.initValue);
        if (this.checkDateValue(dateValue)) {
          var date = value ? this.initValue.getDate() : DAY;
          var month2 = value ? this.initValue.getMonth() : MONTH3;
          var year = value ? this.initValue.getFullYear() : YEAR3;
          return new Date(year, month2, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds());
        }
      }
      return null;
    };
    TimePicker2.prototype.updateHtmlAttributeToWrapper = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes2.indexOf(key) > -1) {
            if (key === "class") {
              var updatedClassesValue = this.htmlAttributes[key].replace(/\s+/g, " ").trim();
              if (updatedClassesValue !== "") {
                addClass([this.inputWrapper.container], updatedClassesValue.split(" "));
              }
            } else if (key === "style") {
              var timeStyle = this.inputWrapper.container.getAttribute(key);
              timeStyle = !isNullOrUndefined(timeStyle) ? timeStyle + this.htmlAttributes[key] : this.htmlAttributes[key];
              this.inputWrapper.container.setAttribute(key, timeStyle);
            } else {
              this.inputWrapper.container.setAttribute(key, this.htmlAttributes[key]);
            }
          }
        }
      }
    };
    TimePicker2.prototype.updateHtmlAttributeToElement = function() {
      if (!isNullOrUndefined(this.htmlAttributes)) {
        for (var _i = 0, _a = Object.keys(this.htmlAttributes); _i < _a.length; _i++) {
          var key = _a[_i];
          if (wrapperAttributes2.indexOf(key) < 0) {
            this.inputElement.setAttribute(key, this.htmlAttributes[key]);
          }
        }
      }
    };
    TimePicker2.prototype.updateCssClass = function(cssClassNew, cssClassOld) {
      if (!isNullOrUndefined(cssClassOld)) {
        cssClassOld = cssClassOld.replace(/\s+/g, " ").trim();
      }
      if (!isNullOrUndefined(cssClassNew)) {
        cssClassNew = cssClassNew.replace(/\s+/g, " ").trim();
      }
      Input.setCssClass(cssClassNew, [this.inputWrapper.container], cssClassOld);
      if (this.popupWrapper) {
        Input.setCssClass(cssClassNew, [this.popupWrapper], cssClassOld);
      }
    };
    TimePicker2.prototype.removeErrorClass = function() {
      removeClass([this.inputWrapper.container], ERROR5);
      attributes(this.inputElement, { "aria-invalid": "false" });
    };
    TimePicker2.prototype.checkErrorState = function(val) {
      var value = this.getDateObject(val);
      if (this.validateState(value) && !this.invalidValueString || this.enableMask && this.inputElement.value === this.maskedDateValue) {
        this.removeErrorClass();
      } else {
        addClass([this.inputWrapper.container], ERROR5);
        attributes(this.inputElement, { "aria-invalid": "true" });
      }
    };
    TimePicker2.prototype.validateInterval = function() {
      if (!isNullOrUndefined(this.step) && this.step > 0) {
        this.enableElement([this.inputWrapper.buttons[0]]);
      } else {
        this.disableTimeIcon();
      }
    };
    TimePicker2.prototype.disableTimeIcon = function() {
      this.disableElement([this.inputWrapper.buttons[0]]);
      this.hide();
    };
    TimePicker2.prototype.disableElement = function(element2) {
      addClass(element2, DISABLED8);
    };
    TimePicker2.prototype.enableElement = function(element2) {
      removeClass(element2, DISABLED8);
    };
    TimePicker2.prototype.selectInputText = function() {
      this.inputElement.setSelectionRange(0, this.inputElement.value.length);
    };
    TimePicker2.prototype.setCursorToEnd = function() {
      this.inputElement.setSelectionRange(this.inputElement.value.length, this.inputElement.value.length);
    };
    TimePicker2.prototype.getMeridianText = function() {
      var meridian;
      if (this.locale === "en" || this.locale === "en-US") {
        meridian = getValue("dayPeriods.format.wide", getDefaultDateObject());
      } else {
        var gregorianFormat = ".dates.calendars.gregorian.dayPeriods.format.abbreviated";
        var mainVal = "main.";
        meridian = getValue(mainVal + "" + this.locale + gregorianFormat, cldrData);
      }
      return meridian;
    };
    TimePicker2.prototype.getCursorSelection = function() {
      var input = this.inputElement;
      var start = 0;
      var end = 0;
      if (!isNaN(input.selectionStart)) {
        start = input.selectionStart;
        end = input.selectionEnd;
      }
      return { start: Math.abs(start), end: Math.abs(end) };
    };
    TimePicker2.prototype.getActiveElement = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        return this.popupWrapper.querySelectorAll("." + SELECTED5);
      } else {
        return null;
      }
    };
    TimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    TimePicker2.prototype.setWidth = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width.match(/px|%|em/) ? width : formatUnit(width);
      } else {
        width = "100%";
      }
      return width;
    };
    TimePicker2.prototype.setPopupWidth = function(width) {
      width = this.setWidth(width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    TimePicker2.prototype.setScrollPosition = function() {
      var element2 = this.selectedElement;
      if (!isNullOrUndefined(element2)) {
        this.findScrollTop(element2);
      } else if (this.popupWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    TimePicker2.prototype.findScrollTop = function(element2) {
      var listHeight = this.getPopupHeight();
      var nextEle = element2.nextElementSibling;
      var height = nextEle ? nextEle.offsetTop : element2.offsetTop;
      var liHeight = element2.getBoundingClientRect().height;
      if (height + element2.offsetTop > listHeight) {
        this.popupWrapper.scrollTop = nextEle ? height - (listHeight / HALFPOSITION + liHeight / HALFPOSITION) : height;
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.setScrollTo = function() {
      var element2;
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          var initialTime = this.timeCollections[0];
          var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
          element2 = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
        }
      } else {
        this.popupWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element2)) {
        this.findScrollTop(element2);
      } else {
        this.popupWrapper.scrollTop = 0;
      }
    };
    TimePicker2.prototype.getText = function() {
      return isNullOrUndefined(this.checkDateValue(this.value)) ? "" : this.getValue(this.value);
    };
    TimePicker2.prototype.getValue = function(value) {
      return isNullOrUndefined(this.checkDateValue(value)) ? null : this.globalize.formatDate(value, {
        format: this.cldrTimeFormat(),
        type: "time"
      });
    };
    TimePicker2.prototype.cldrDateFormat = function() {
      var cldrDate;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDate = getValue("dateFormats.short", getDefaultDateObject());
      } else {
        cldrDate = this.getCultureDateObject(cldrData, "" + this.locale);
      }
      return cldrDate;
    };
    TimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.formatString)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    TimePicker2.prototype.dateToNumeric = function() {
      var cldrTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrTime = getValue("timeFormats.medium", getDefaultDateObject());
      } else {
        cldrTime = getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.medium", cldrData);
      }
      return cldrTime;
    };
    TimePicker2.prototype.getExactDateTime = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      } else {
        return this.globalize.formatDate(value, { format: this.dateToNumeric(), type: "time" });
      }
    };
    TimePicker2.prototype.setValue = function(value) {
      var time = this.checkValue(value);
      if (!this.strictMode && !this.validateState(time)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        if (this.isNullOrEmpty(time)) {
          this.initValue = null;
          this.validateMinMax(this.value, this.min, this.max);
        } else {
          this.initValue = this.compareFormatChange(time);
        }
      }
      this.updateInput(true, this.initValue);
    };
    TimePicker2.prototype.compareFormatChange = function(value) {
      if (isNullOrUndefined(value)) {
        return null;
      }
      return value !== this.getText() ? this.getDateObject(value) : this.getDateObject(this.value);
    };
    TimePicker2.prototype.updatePlaceHolder = function() {
      Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
    };
    TimePicker2.prototype.updateInputValue = function(value) {
      Input.setValue(value, this.inputElement, this.floatLabelType, this.showClearButton);
    };
    TimePicker2.prototype.preventEventBubbling = function(e) {
      e.preventDefault();
      this.interopAdaptor.invokeMethodAsync("OnTimeIconClick");
    };
    TimePicker2.prototype.popupHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      e.preventDefault();
      if (this.isPopupOpen()) {
        this.closePopup(0, e);
      } else {
        this.inputElement.focus();
        this.show(e);
      }
    };
    TimePicker2.prototype.mouseDownHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.readonly) {
        this.inputElement.setSelectionRange(0, 0);
        EventHandler.add(this.inputElement, "mouseup", this.mouseUpHandler, this);
      }
    };
    TimePicker2.prototype.mouseUpHandler = function(event) {
      if (!this.readonly) {
        event.preventDefault();
        if (this.enableMask) {
          event.preventDefault();
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
          return;
        } else {
          EventHandler.remove(this.inputElement, "mouseup", this.mouseUpHandler);
          var curPos = this.getCursorSelection();
          if (!(curPos.start === 0 && curPos.end === this.inputElement.value.length)) {
            if (this.inputElement.value.length > 0) {
              this.cursorDetails = this.focusSelection();
            }
            this.inputElement.setSelectionRange(this.cursorDetails.start, this.cursorDetails.end);
          }
        }
      }
    };
    TimePicker2.prototype.focusSelection = function() {
      var regex2 = new RegExp("^[a-zA-Z0-9]+$");
      var split = this.inputElement.value.split("");
      split.push(" ");
      var curPos = this.getCursorSelection();
      var start = 0;
      var end = 0;
      var isSeparator = false;
      if (!this.isTextSelected) {
        for (var i = 0; i < split.length; i++) {
          if (!regex2.test(split[i])) {
            end = i;
            isSeparator = true;
          }
          if (isSeparator) {
            if (curPos.start >= start && curPos.end <= end) {
              end = end;
              this.isTextSelected = true;
              break;
            } else {
              start = i + 1;
              isSeparator = false;
            }
          }
        }
      } else {
        start = curPos.start;
        end = curPos.end;
        this.isTextSelected = false;
      }
      return { start, end };
    };
    TimePicker2.prototype.inputHandler = function(event) {
      if (!this.readonly && this.enabled) {
        if (event.action !== "right" && event.action !== "left" && event.action !== "tab") {
          event.preventDefault();
        }
        switch (event.action) {
          case "home":
          case "end":
          case "up":
          case "down":
            if (this.enableMask && !this.readonly && !this.isPopupOpen()) {
              event.preventDefault();
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event
              });
            }
            if (!this.enableMask || this.isPopupOpen()) {
              this.keyHandler(event);
            }
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.updateValue(this.valueWithMinutes, event);
            } else {
              this.updateValue(this.inputElement.value, event);
            }
            this.hide();
            this.isNavigate = false;
            if (this.isPopupOpen()) {
              event.stopPropagation();
            }
            break;
          case "open":
            this.show(event);
            break;
          case "escape":
            this.updateInputValue(this.objToString(this.value));
            if (this.enableMask) {
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
              this.createMask();
            }
            this.previousState(this.value);
            this.hide();
            break;
          case "close":
            this.hide();
            break;
          case "right":
          case "left":
          case "tab":
          case "shiftTab":
            if (!this.isPopupOpen() && this.enableMask && !this.readonly) {
              if (this.inputElement.selectionStart == 0 && this.inputElement.selectionEnd == this.inputElement.value.length || this.inputElement.selectionEnd !== this.inputElement.value.length && event.action == "tab" || this.inputElement.selectionStart !== 0 && event.action == "shiftTab" || (event.action == "left" || event.action == "right")) {
                event.preventDefault();
              }
              this.notify("keyDownHandler", {
                module: "MaskedDateTime",
                e: event
              });
            }
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    TimePicker2.prototype.onMouseClick = function(event) {
      var target = event.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS2);
      this.setSelection(li, event);
      if (li && li.classList.contains(LISTCLASS2)) {
        this.hide();
      }
    };
    TimePicker2.prototype.closePopup = function(delay, e) {
      var _this = this;
      if (this.isPopupOpen() && this.popupWrapper) {
        var args = {
          popup: this.popupObj,
          event: e || null,
          cancel: false,
          name: "open"
        };
        removeClass([document.body], OVERFLOW3);
        this.trigger("close", args, function(args2) {
          if (!args2.cancel) {
            var animModel = {
              name: "FadeOut",
              duration: ANIMATIONDURATION,
              delay: delay ? delay : 0
            };
            _this.popupObj.hide(new Animation(animModel));
            removeClass([_this.inputWrapper.container], [ICONANIMATION]);
            attributes(_this.inputElement, { "aria-expanded": "false" });
            EventHandler.remove(document, "mousedown touchstart", _this.documentClickHandler);
          }
          if (Browser.isDevice && _this.modal) {
            _this.modal.style.display = "none";
            _this.modal.outerHTML = "";
            _this.modal = null;
          }
          if (Browser.isDevice) {
            if (!isNullOrUndefined(_this.mobileTimePopupWrap)) {
              _this.mobileTimePopupWrap.remove();
              _this.mobileTimePopupWrap = null;
            }
          }
          if (Browser.isDevice && _this.allowEdit && !_this.readonly) {
            _this.inputElement.removeAttribute("readonly");
          }
        });
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
      }
    };
    TimePicker2.prototype.disposeServerPopup = function() {
      if (this.popupWrapper) {
        this.popupWrapper.style.visibility = "hidden";
        this.popupWrapper.style.top = "-9999px";
        this.popupWrapper.style.left = "-9999px";
        this.popupWrapper.style.width = "0px";
        this.popupWrapper.style.height = "0px";
      }
    };
    TimePicker2.prototype.checkValueChange = function(event, isNavigation) {
      if (!this.strictMode && !this.validateState(this.valueWithMinutes)) {
        if (this.checkDateValue(this.valueWithMinutes) === null) {
          this.initValue = this.valueWithMinutes = null;
        }
        this.setProperties({ value: this.compareFormatChange(this.inputElement.value) }, true);
        this.initValue = this.valueWithMinutes = this.compareFormatChange(this.inputElement.value);
        this.prevValue = this.inputElement.value;
        if (+this.prevDate !== +this.value) {
          this.changeEvent(event);
        }
      } else {
        if (!isNavigation) {
          if (this.prevValue !== this.inputElement.value || isNullOrUndefined(this.checkDateValue(this.value))) {
            this.valueProcess(event, this.compareFormatChange(this.inputElement.value));
          }
        } else {
          var value = this.getDateObject(new Date(this.timeCollections[this.activeIndex]));
          if (+this.prevDate !== +value) {
            this.valueProcess(event, value);
          }
        }
      }
    };
    TimePicker2.prototype.onMouseOver = function(event) {
      var currentLi = closest(event.target, "." + LISTCLASS2);
      this.setHover(currentLi, HOVER2);
    };
    TimePicker2.prototype.setHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeHover(className);
        addClass([li], className);
        if (className === NAVIGATION) {
          li.setAttribute("aria-selected", "true");
        }
      }
    };
    TimePicker2.prototype.setSelection = function(li, event) {
      if (this.isValidLI(li)) {
        this.checkValue(li.getAttribute("data-value"));
        if (this.enableMask) {
          this.notify("setMaskSelection", {
            module: "MaskedDateTime"
          });
        }
        this.selectedElement = li;
        this.activeIndex = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], SELECTED5);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.checkValueChange(event, true);
      }
    };
    TimePicker2.prototype.onMouseLeave = function() {
      this.removeHover(HOVER2);
    };
    TimePicker2.prototype.scrollHandler = function() {
      if (this.getModuleName() === "timepicker" && Browser.isDevice) {
        return;
      } else {
        this.hide();
      }
    };
    TimePicker2.prototype.setMinMax = function(minVal, maxVal) {
      if (isNullOrUndefined(this.checkDateValue(minVal))) {
        this.initMin = this.getDateObject("12:00:00 AM");
      }
      if (isNullOrUndefined(this.checkDateValue(maxVal))) {
        this.initMax = this.getDateObject("11:59:59 PM");
      }
    };
    TimePicker2.prototype.validateMinMax = function(dateVal, minVal, maxVal) {
      var value = dateVal instanceof Date ? dateVal : this.getDateObject(dateVal);
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        dateVal = this.strictOperation(this.initMin, this.initMax, dateVal, value);
      } else if (+this.createDateObj(this.getFormattedValue(this.initMin)) > +this.createDateObj(this.getFormattedValue(this.initMax))) {
        this.disableTimeIcon();
      }
      if (this.strictMode) {
        dateVal = this.valueIsDisable(dateVal) ? dateVal : null;
      }
      this.checkErrorState(dateVal);
      return dateVal;
    };
    TimePicker2.prototype.valueIsDisable = function(value) {
      if (this.disableItemCollection.length > 0) {
        if (this.disableItemCollection.length === this.timeCollections.length) {
          return false;
        }
        var time = value instanceof Date ? this.objToString(value) : value;
        for (var index = 0; index < this.disableItemCollection.length; index++) {
          if (time === this.disableItemCollection[index]) {
            return false;
          }
        }
      }
      return true;
    };
    TimePicker2.prototype.validateState = function(val) {
      if (!this.strictMode) {
        if (this.valueIsDisable(val)) {
          var value = typeof val === "string" ? this.setCurrentDate(this.getDateObject(val)) : this.setCurrentDate(this.getDateObject(val));
          var maxValue = this.setCurrentDate(this.getDateObject(this.initMax));
          var minValue = this.setCurrentDate(this.getDateObject(this.initMin));
          if (!isNullOrUndefined(this.checkDateValue(value))) {
            if (+value > +maxValue || +value < +minValue) {
              return false;
            }
          } else {
            if (+maxValue < +minValue || this.inputElement.value !== "") {
              return false;
            }
          }
        } else {
          return false;
        }
      }
      return true;
    };
    TimePicker2.prototype.strictOperation = function(minimum, maximum, dateVal, val) {
      var maxValue = this.createDateObj(this.getFormattedValue(maximum));
      var minValue = this.createDateObj(this.getFormattedValue(minimum));
      var value = this.createDateObj(this.getFormattedValue(val));
      if (this.strictMode) {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          this.initValue = this.getDateObject(maxValue);
          this.updateInputValue(this.getValue(this.initValue));
          if (this.enableMask) {
            this.createMask();
          }
          return this.inputElement.value;
        } else if (+minValue >= +value) {
          return this.getDateObject(minValue);
        } else if (+value >= +maxValue || +minValue === +maxValue) {
          return this.getDateObject(maxValue);
        }
      } else {
        if (+minValue > +maxValue) {
          this.disableTimeIcon();
          if (!isNaN(+this.createDateObj(dateVal))) {
            return dateVal;
          }
        }
      }
      return dateVal;
    };
    TimePicker2.prototype.bindEvents = function() {
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.popupHandler, this);
      EventHandler.add(this.inputElement, "blur", this.inputBlurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.inputFocusHandler, this);
      EventHandler.add(this.inputElement, "change", this.inputChangeHandler, this);
      EventHandler.add(this.inputElement, "input", this.inputEventHandler, this);
      if (this.enableMask) {
        EventHandler.add(this.inputElement, "keydown", this.keydownHandler, this);
      }
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
      if (this.formElement) {
        EventHandler.add(this.formElement, "reset", this.formResetHandler, this);
      }
      if (!Browser.isDevice) {
        this.keyConfigure = extend(this.keyConfigure, this.keyConfigs);
        this.inputEvent = new KeyboardEvents(this.inputWrapper.container, {
          keyAction: this.inputHandler.bind(this),
          keyConfigs: this.keyConfigure,
          eventName: "keydown"
        });
        if (this.showClearButton && this.inputElement) {
          EventHandler.add(this.inputElement, "mousedown", this.mouseDownHandler, this);
        }
      }
    };
    TimePicker2.prototype.keydownHandler = function(e) {
      switch (e.code) {
        case "Delete":
          if (this.enableMask && !this.popupObj && !this.readonly) {
            this.notify("keyDownHandler", {
              module: "MaskedDateTime",
              e
            });
          }
          break;
        default:
          break;
      }
    };
    TimePicker2.prototype.formResetHandler = function() {
      if (!this.enabled) {
        return;
      }
      if (!this.inputElement.disabled) {
        var timeValue = this.inputElement.getAttribute("value");
        var val = this.checkDateValue(this.inputEleValue);
        if (this.element.tagName === "EJS-TIMEPICKER") {
          val = null;
          timeValue = "";
          this.inputElement.setAttribute("value", "");
        }
        this.setProperties({ value: val }, true);
        this.prevDate = this.value;
        this.valueWithMinutes = this.value;
        this.initValue = this.value;
        if (this.inputElement) {
          this.updateInputValue(timeValue);
          if (this.enableMask) {
            if (!timeValue) {
              this.updateInputValue(this.maskedDateValue);
            }
            this.createMask();
          }
          this.checkErrorState(timeValue);
          this.prevValue = this.inputElement.value;
        }
      }
    };
    TimePicker2.prototype.inputChangeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.stopPropagation();
    };
    TimePicker2.prototype.inputEventHandler = function() {
      if (this.enableMask) {
        this.notify("inputHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.unBindEvents = function() {
      if (this.inputWrapper) {
        EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.popupHandler);
      }
      EventHandler.remove(this.inputElement, "blur", this.inputBlurHandler);
      EventHandler.remove(this.inputElement, "focus", this.inputFocusHandler);
      EventHandler.remove(this.inputElement, "change", this.inputChangeHandler);
      EventHandler.remove(this.inputElement, "input", this.inputEventHandler);
      if (this.inputEvent) {
        this.inputEvent.destroy();
      }
      EventHandler.remove(this.inputElement, "mousedown touchstart", this.mouseDownHandler);
      if (this.showClearButton && !isNullOrUndefined(this.inputWrapper.clearButton)) {
        EventHandler.remove(this.inputWrapper.clearButton, "mousedown touchstart", this.clearHandler);
      }
      if (this.formElement) {
        EventHandler.remove(this.formElement, "reset", this.formResetHandler);
      }
    };
    TimePicker2.prototype.bindClearEvent = function() {
      if (this.showClearButton && this.inputWrapper.clearButton) {
        EventHandler.add(this.inputWrapper.clearButton, "mousedown", this.clearHandler, this);
      }
    };
    TimePicker2.prototype.raiseClearedEvent = function(e) {
      var clearedArgs = {
        event: e
      };
      this.trigger("cleared", clearedArgs);
    };
    TimePicker2.prototype.clearHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      e.preventDefault();
      if (!isNullOrUndefined(this.value)) {
        this.clear(e);
      } else {
        this.resetState();
        this.raiseClearedEvent(e);
      }
      if (this.popupWrapper) {
        this.popupWrapper.scrollTop = 0;
      }
      if (this.enableMask) {
        this.notify("clearHandler", {
          module: "MaskedDateTime"
        });
      }
    };
    TimePicker2.prototype.clear = function(event) {
      this.setProperties({ value: null }, true);
      this.initValue = null;
      this.resetState();
      this.raiseClearedEvent(event);
      this.changeEvent(event);
    };
    TimePicker2.prototype.setZIndex = function() {
      if (this.popupObj) {
        this.popupObj.zIndex = this.zIndex;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["step", "disabled", "readonly", "style", "name", "value", "min", "max", "placeholder"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "disabled":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? false : true;
                this.setProperties({ enabled }, !isDynamic);
              }
              break;
            case "style":
              this.inputStyle = this.inputElement.getAttribute(prop);
              break;
            case "readonly":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "readonly" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "placeholder":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({ min: value }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.setProperties({ max: value }, !isDynamic);
                }
              }
              break;
            case "value":
              if (isNullOrUndefined(this.timeOptions) || this.timeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!isNullOrUndefined(this.checkDateValue(value))) {
                  this.initValue = value;
                  this.updateInput(false, this.initValue);
                  this.setProperties({ value }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    TimePicker2.prototype.setCurrentDate = function(value) {
      if (isNullOrUndefined(this.checkDateValue(value))) {
        return null;
      }
      return new Date(YEAR3, MONTH3, DAY, value.getHours(), value.getMinutes(), value.getSeconds());
    };
    TimePicker2.prototype.getTextFormat = function() {
      var time = 0;
      if (this.cldrTimeFormat().split(" ")[0] === "a" || this.cldrTimeFormat().indexOf("a") === 0) {
        time = 1;
      } else if (this.cldrTimeFormat().indexOf("a") < 0) {
        var strArray = this.cldrTimeFormat().split(" ");
        for (var i = 0; i < strArray.length; i++) {
          if (strArray[i].toLowerCase().indexOf("h") >= 0) {
            time = i;
            break;
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.updateValue = function(value, event) {
      var val;
      if (this.isNullOrEmpty(value)) {
        this.resetState();
      } else {
        val = this.checkValue(value);
        if (this.strictMode) {
          var inputVal = val === null && value.trim().length > 0 ? this.previousState(this.prevDate) : this.inputElement.value;
          this.updateInputValue(inputVal);
          if (this.enableMask) {
            if (!inputVal) {
              this.updateInputValue(this.maskedDateValue);
            }
            if (isNullOrUndefined(val) && value != this.maskedDateValue) {
              this.createMask();
            }
            if (isNullOrUndefined(val) && value == this.maskedDateValue) {
              this.updateInputValue(this.maskedDateValue);
            }
          }
        }
      }
      this.checkValueChange(event, typeof value === "string" ? false : true);
    };
    TimePicker2.prototype.previousState = function(date) {
      var value = this.getDateObject(date);
      for (var i = 0; i < this.timeCollections.length; i++) {
        if (+value === this.timeCollections[i]) {
          this.activeIndex = i;
          this.selectedElement = this.liCollections[i];
          this.valueWithMinutes = new Date(this.timeCollections[i]);
          break;
        }
      }
      return this.prevValue;
    };
    TimePicker2.prototype.resetState = function() {
      this.removeSelection();
      Input.setValue("", this.inputElement, this.floatLabelType, false);
      this.valueWithMinutes = this.activeIndex = null;
      if (!this.strictMode) {
        this.checkErrorState(null);
      }
    };
    TimePicker2.prototype.objToString = function(val) {
      if (isNullOrUndefined(this.checkDateValue(val))) {
        return null;
      } else {
        return this.globalize.formatDate(val, { format: this.cldrTimeFormat(), type: "time" });
      }
    };
    TimePicker2.prototype.checkValue = function(value) {
      if (!this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.validateValue(date, value);
      }
      this.resetState();
      return this.valueWithMinutes = null;
    };
    TimePicker2.prototype.validateValue = function(date, value) {
      var time;
      var val = this.validateMinMax(value, this.min, this.max);
      var newval = this.createDateObj(val);
      if (this.getFormattedValue(newval) !== this.getFormattedValue(this.value)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = this.objToString(this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = this.objToString(this.valueWithMinutes);
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        var value_1 = val.trim().length > 0 ? val : "";
        this.updateInputValue(value_1);
        if (this.enableMask) {
          if (!value_1) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      } else {
        this.updateInputValue(time);
        if (this.enableMask) {
          if (time == "") {
            this.updateInputValue(this.maskedDateValue);
          }
          if (isNullOrUndefined(time) && value != this.maskedDateValue) {
            this.createMask();
          }
          if (isNullOrUndefined(time) && value == this.maskedDateValue) {
            this.updateInputValue(this.maskedDateValue);
          }
        }
      }
      return time;
    };
    TimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    TimePicker2.prototype.findNextElement = function(event) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var timeVal = null;
      var count = this.liCollections.length;
      var collections = this.timeCollections;
      if (!isNullOrUndefined(this.checkDateValue(value)) || !isNullOrUndefined(this.activeIndex)) {
        if (event.action === "home") {
          var index = this.validLiElement(0);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else if (event.action === "end") {
          var index = this.validLiElement(collections.length - 1, true);
          timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
          this.activeIndex = index;
        } else {
          if (event.action === "down") {
            for (var i = 0; i < count; i++) {
              if (+value < this.timeCollections[i]) {
                var index = this.validLiElement(i);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === count - 1) {
                var index = this.validLiElement(0);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          } else {
            for (var i = count - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                var index = this.validLiElement(i, true);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              } else if (i === 0) {
                var index = this.validLiElement(count - 1);
                timeVal = +this.createDateObj(new Date(this.timeCollections[index]));
                this.activeIndex = index;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(isNullOrUndefined(timeVal) ? null : new Date(timeVal));
      } else {
        this.selectNextItem(event);
      }
    };
    TimePicker2.prototype.selectNextItem = function(event) {
      var index = this.validLiElement(0, event.action === "down" ? false : true);
      this.activeIndex = index;
      this.selectedElement = this.liCollections[index];
      this.elementValue(new Date(this.timeCollections[index]));
    };
    TimePicker2.prototype.elementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value))) {
        this.checkValue(value);
      }
    };
    TimePicker2.prototype.validLiElement = function(index, backward) {
      var elementIndex = null;
      var items = isNullOrUndefined(this.popupWrapper) ? this.liCollections : this.popupWrapper.querySelectorAll("." + LISTCLASS2);
      var isCheck = true;
      if (items.length) {
        if (backward) {
          for (var i = index; i >= 0; i--) {
            if (!items[i].classList.contains(DISABLED8)) {
              elementIndex = i;
              break;
            } else if (i === 0) {
              if (isCheck) {
                index = i = items.length;
                isCheck = false;
              }
            }
          }
        } else {
          for (var i = index; i <= items.length - 1; i++) {
            if (!items[i].classList.contains(DISABLED8)) {
              elementIndex = i;
              break;
            } else if (i === items.length - 1) {
              if (isCheck) {
                index = i = -1;
                isCheck = false;
              }
            }
          }
        }
      }
      return elementIndex;
    };
    TimePicker2.prototype.keyHandler = function(event) {
      if (isNullOrUndefined(this.step) || this.step <= 0 || this.inputWrapper.buttons[0].classList.contains(DISABLED8)) {
        return;
      }
      var count = this.timeCollections.length;
      if (isNullOrUndefined(this.getActiveElement()) || this.getActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            var index = this.validLiElement(0, event.action === "down" ? false : true);
            this.activeIndex = index;
            this.selectedElement = this.liCollections[index];
            this.elementValue(new Date(this.timeCollections[index]));
          } else {
            this.findNextElement(event);
          }
        } else {
          this.findNextElement(event);
        }
      } else {
        var nextItem = void 0;
        if (event.keyCode >= 37 && event.keyCode <= 40) {
          var index = event.keyCode === 40 || event.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === count ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? count - 1 : this.activeIndex;
          this.activeIndex = index = this.validLiElement(this.activeIndex, event.keyCode === 40 || event.keyCode === 39 ? false : true);
          nextItem = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event.action === "home") {
          var index = this.validLiElement(0);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        } else if (event.action === "end") {
          var index = this.validLiElement(count - 1, true);
          this.activeIndex = index;
          nextItem = this.timeCollections[index];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.elementValue(new Date(nextItem));
      }
      this.isNavigate = true;
      this.setHover(this.selectedElement, NAVIGATION);
      this.setActiveDescendant();
      this.selectInputText();
      if (this.isPopupOpen() && this.selectedElement !== null && (!event || event.type !== "click")) {
        this.setScrollPosition();
      }
    };
    TimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.timeFormats.short", ld);
    };
    TimePicker2.prototype.getCultureDateObject = function(ld, c) {
      return getValue("main." + c + ".dates.calendars.gregorian.dateFormats.short", ld);
    };
    TimePicker2.prototype.wireListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    TimePicker2.prototype.unWireListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        if (!Browser.isDevice) {
          EventHandler.remove(this.listWrapper, "mouseover", this.onMouseOver);
          EventHandler.remove(this.listWrapper, "mouseout", this.onMouseLeave);
        }
      }
    };
    TimePicker2.prototype.valueProcess = function(event, value) {
      var result = isNullOrUndefined(this.checkDateValue(value)) ? null : value;
      if (+this.prevDate !== +result) {
        this.initValue = result;
        this.changeEvent(event);
      }
    };
    TimePicker2.prototype.changeEvent = function(e) {
      this.addSelection();
      this.updateInput(true, this.initValue);
      var eventArgs = {
        event: e || null,
        value: this.value,
        text: this.inputElement.value,
        isInteracted: !isNullOrUndefined(e),
        element: this.element
      };
      eventArgs.value = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      this.prevDate = this.valueWithMinutes || this.getDateObject(this.inputElement.value);
      if (this.isAngular && this.preventChange) {
        this.preventChange = false;
      } else {
        this.trigger("change", eventArgs);
      }
      this.invalidValueString = null;
      this.checkErrorState(this.value);
    };
    TimePicker2.prototype.updateInput = function(isUpdate, date) {
      if (isUpdate) {
        this.prevValue = this.getValue(date);
      }
      this.prevDate = this.valueWithMinutes = date;
      if (typeof date !== "number" || (this.value && +(/* @__PURE__ */ new Date(+this.value)).setMilliseconds(0)) !== +date) {
        this.setProperties({ value: date }, true);
        if (this.enableMask) {
          this.createMask();
        }
      }
      if (!this.strictMode && isNullOrUndefined(this.value) && this.invalidValueString) {
        this.checkErrorState(this.invalidValueString);
        this.updateInputValue(this.invalidValueString);
      }
      this.clearIconState();
    };
    TimePicker2.prototype.setActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement)) {
        attributes(this.inputElement, { "aria-activedescendant": this.selectedElement.getAttribute("id") });
      } else {
        attributes(this.inputElement, { "aria-activedescendant": "null" });
      }
    };
    TimePicker2.prototype.removeSelection = function() {
      this.removeHover(HOVER2);
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + SELECTED5);
        if (items.length) {
          removeClass(items, SELECTED5);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.removeHover = function(className) {
      var hoveredItem = this.getHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
        if (className === NAVIGATION) {
          hoveredItem[0].removeAttribute("aria-selected");
        }
      }
    };
    TimePicker2.prototype.getHoverItem = function(className) {
      var hoveredItem;
      if (!isNullOrUndefined(this.popupWrapper)) {
        hoveredItem = this.popupWrapper.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    TimePicker2.prototype.setActiveClass = function() {
      if (!isNullOrUndefined(this.popupWrapper)) {
        var items = this.popupWrapper.querySelectorAll("." + LISTCLASS2);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.getDateObject(this.valueWithMinutes)) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              break;
            }
          }
        }
      }
    };
    TimePicker2.prototype.addSelection = function() {
      this.selectedElement = null;
      this.removeSelection();
      this.setActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], SELECTED5);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    TimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS2) && !li.classList.contains(DISABLED8);
    };
    TimePicker2.prototype.createDateObj = function(val) {
      var formatStr = null;
      var today = this.globalize.formatDate(/* @__PURE__ */ new Date(), { format: formatStr, skeleton: "short", type: "date" });
      var value = null;
      if (typeof val === "string") {
        if (val.toUpperCase().indexOf("AM") > -1 || val.toUpperCase().indexOf("PM") > -1) {
          today = this.defaultCulture.formatDate(/* @__PURE__ */ new Date(), { format: formatStr, skeleton: "short", type: "date" });
          value = isNaN(+/* @__PURE__ */ new Date(today + " " + val)) ? null : new Date((/* @__PURE__ */ new Date(today + " " + val)).setMilliseconds(0));
          if (isNullOrUndefined(value)) {
            value = this.timeParse(today, val);
          }
        } else {
          value = this.timeParse(today, val);
        }
      } else if (val instanceof Date) {
        value = val;
      }
      return value;
    };
    TimePicker2.prototype.timeParse = function(today, val) {
      var value;
      value = this.globalize.parseDate(today + " " + val, {
        format: this.cldrDateFormat() + " " + this.cldrTimeFormat(),
        type: "datetime"
      });
      value = isNullOrUndefined(value) ? this.globalize.parseDate(today + " " + val, {
        format: this.cldrDateFormat() + " " + this.dateToNumeric(),
        type: "datetime"
      }) : value;
      value = isNullOrUndefined(value) ? value : new Date(value.setMilliseconds(0));
      return value;
    };
    TimePicker2.prototype.createListItems = function() {
      var _this = this;
      this.listWrapper = this.createElement("div", { className: CONTENT4, attrs: { "tabindex": "0" } });
      var start;
      var interval = this.step * 6e4;
      var listItems = [];
      this.timeCollections = [];
      this.disableItemCollection = [];
      start = +this.getDateObject(this.initMin).setMilliseconds(0);
      var end = +this.getDateObject(this.initMax).setMilliseconds(0);
      while (end >= start) {
        this.timeCollections.push(start);
        listItems.push(this.globalize.formatDate(new Date(start), { format: this.cldrTimeFormat(), type: "time" }));
        start += interval;
      }
      var listBaseOptions = {
        itemCreated: function(args) {
          var eventArgs = {
            element: args.item,
            text: args.text,
            value: _this.getDateObject(args.text),
            isDisabled: false
          };
          _this.trigger("itemRender", eventArgs, function(eventArgs2) {
            if (eventArgs2.isDisabled) {
              eventArgs2.element.classList.add(DISABLED8);
            }
            if (eventArgs2.element.classList.contains(DISABLED8)) {
              _this.disableItemCollection.push(eventArgs2.element.getAttribute("data-value"));
            }
          });
        }
      };
      this.listTag = ListBase.createList(this.createElement, listItems, listBaseOptions, true);
      attributes(this.listTag, { "role": "listbox", "aria-hidden": "false", "id": this.element.id + "_options" });
      append([this.listTag], this.listWrapper);
    };
    TimePicker2.prototype.documentClickHandler = function(event) {
      var target = event.target;
      if (!isNullOrUndefined(this.popupObj) && (this.inputWrapper.container.contains(target) || this.popupObj.element && this.popupObj.element.contains(target)) && event.type !== "touchstart") {
        event.preventDefault();
      }
      if (!closest(target, '[id="' + this.popupObj.element.id + '"]') && target !== this.inputElement && target !== (this.inputWrapper && this.inputWrapper.buttons[0]) && target !== (this.inputWrapper && this.inputWrapper.clearButton) && target !== (this.inputWrapper && this.inputWrapper.container)) {
        if (this.isPopupOpen()) {
          this.hide();
          this.focusOut();
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = (Browser.isIE || Browser.info.name === "edge") && document.activeElement === this.inputElement && target === this.popupWrapper;
        }
      }
    };
    TimePicker2.prototype.setEnableRtl = function() {
      Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
      if (this.popupObj) {
        this.popupObj.enableRtl = this.enableRtl;
        this.popupObj.dataBind();
      }
    };
    TimePicker2.prototype.setEnable = function() {
      Input.setEnabled(this.enabled, this.inputElement, this.floatLabelType);
      if (this.enabled) {
        removeClass([this.inputWrapper.container], DISABLED8);
        attributes(this.inputElement, { "aria-disabled": "false" });
        this.inputElement.setAttribute("tabindex", this.tabIndex);
      } else {
        this.hide();
        addClass([this.inputWrapper.container], DISABLED8);
        attributes(this.inputElement, { "aria-disabled": "true" });
        this.inputElement.tabIndex = -1;
      }
    };
    TimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.initMin = this.checkDateValue(new Date(this.checkInValue(date.min)));
        this.setProperties({ min: this.initMin }, true);
      } else {
        this.initMax = this.checkDateValue(new Date(this.checkInValue(date.max)));
        this.setProperties({ max: this.initMax }, true);
      }
      if (this.inputElement.value === "") {
        this.validateMinMax(this.value, this.min, this.max);
      } else {
        this.checkValue(this.inputElement.value);
      }
      this.checkValueChange(null, false);
    };
    TimePicker2.prototype.inputBlurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isPreventBlur && this.isPopupOpen()) {
        this.inputElement.focus();
        return;
      }
      this.closePopup(0, e);
      if (this.enableMask && this.maskedDateValue && this.placeholder && this.floatLabelType !== "Always") {
        if (this.inputElement.value == this.maskedDateValue && !this.value && (this.floatLabelType == "Auto" || this.floatLabelType == "Never" || this.placeholder)) {
          this.updateInputValue("");
        }
      }
      removeClass([this.inputWrapper.container], [FOCUS]);
      var blurArguments = {
        model: this
      };
      this.trigger("blur", blurArguments);
      if (this.getText() !== this.inputElement.value) {
        this.updateValue(this.inputElement.value, e);
      } else if (this.inputElement.value.trim().length === 0) {
        this.resetState();
      }
      this.cursorDetails = null;
      this.isNavigate = false;
      if (this.inputElement.value === "") {
        this.invalidValueString = null;
      }
    };
    TimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [FOCUS]);
        var blurArguments = {
          model: this
        };
        this.trigger("blur", blurArguments);
      }
    };
    TimePicker2.prototype.isPopupOpen = function() {
      if (this.popupWrapper && this.popupWrapper.classList.contains("" + ROOT8)) {
        return true;
      }
      return false;
    };
    TimePicker2.prototype.inputFocusHandler = function() {
      if (!this.enabled) {
        return;
      }
      var focusArguments = {
        model: this
      };
      if (!this.readonly && !Browser.isDevice && !this.enableMask) {
        this.selectInputText();
      }
      if (this.enableMask && !this.inputElement.value && this.placeholder) {
        if (this.maskedDateValue && !this.value && (this.floatLabelType == "Auto" || this.floatLabelType == "Never" || this.placeholder)) {
          this.updateInputValue(this.maskedDateValue);
          this.inputElement.selectionStart = 0;
          this.inputElement.selectionEnd = this.inputElement.value.length;
        }
      }
      this.trigger("focus", focusArguments);
      this.clearIconState();
      if (this.openOnFocus) {
        this.show();
      }
    };
    TimePicker2.prototype.focusIn = function() {
      if (document.activeElement !== this.inputElement && this.enabled) {
        this.inputElement.focus();
      }
    };
    TimePicker2.prototype.hide = function() {
      this.closePopup(100, null);
      this.clearIconState();
    };
    TimePicker2.prototype.show = function(event) {
      var _this = this;
      if (this.enabled && this.readonly || !this.enabled || this.popupWrapper) {
        return;
      } else {
        this.popupCreation();
        if (Browser.isDevice && this.listWrapper) {
          this.modal = this.createElement("div");
          this.modal.className = "" + ROOT8 + " e-time-modal";
          document.body.className += " " + OVERFLOW3;
          document.body.appendChild(this.modal);
        }
        if (Browser.isDevice) {
          this.mobileTimePopupWrap = this.createElement("div", { className: "e-timepicker-mob-popup-wrap" });
          document.body.appendChild(this.mobileTimePopupWrap);
        }
        this.openPopupEventArgs = {
          popup: this.popupObj || null,
          cancel: false,
          event: event || null,
          name: "open",
          appendTo: Browser.isDevice ? this.mobileTimePopupWrap : document.body
        };
        var eventArgs = this.openPopupEventArgs;
        this.trigger("open", eventArgs, function(eventArgs2) {
          _this.openPopupEventArgs = eventArgs2;
          if (!_this.openPopupEventArgs.cancel && !_this.inputWrapper.buttons[0].classList.contains(DISABLED8)) {
            _this.openPopupEventArgs.appendTo.appendChild(_this.popupWrapper);
            _this.popupAlignment(_this.openPopupEventArgs);
            _this.setScrollPosition();
            if (!Browser.isDevice) {
              _this.inputElement.focus();
            }
            var openAnimation = {
              name: "FadeIn",
              duration: ANIMATIONDURATION
            };
            _this.popupObj.refreshPosition(_this.anchor);
            if (_this.zIndex === 1e3) {
              _this.popupObj.show(new Animation(openAnimation), _this.element);
            } else {
              _this.popupObj.show(new Animation(openAnimation), null);
            }
            _this.setActiveDescendant();
            attributes(_this.inputElement, { "aria-expanded": "true" });
            addClass([_this.inputWrapper.container], FOCUS);
            EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
            _this.setOverlayIndex(_this.mobileTimePopupWrap, _this.popupObj.element, _this.modal, Browser.isDevice);
          } else {
            _this.popupObj.destroy();
            _this.popupWrapper = _this.listTag = void 0;
            _this.liCollections = _this.timeCollections = _this.disableItemCollection = [];
            _this.popupObj = null;
          }
        });
      }
    };
    TimePicker2.prototype.setOverlayIndex = function(popupWrapper, timePopupElement, modal, isDevice) {
      if (isDevice && !isNullOrUndefined(timePopupElement) && !isNullOrUndefined(modal) && !isNullOrUndefined(popupWrapper)) {
        var index = parseInt(timePopupElement.style.zIndex, 10) ? parseInt(timePopupElement.style.zIndex, 10) : 1e3;
        modal.style.zIndex = (index - 1).toString();
        popupWrapper.style.zIndex = index.toString();
      }
    };
    TimePicker2.prototype.formatValues = function(type) {
      var value;
      if (typeof type === "number") {
        value = formatUnit(type);
      } else if (typeof type === "string") {
        value = type.match(/px|%|em/) ? type : isNaN(parseInt(type, 10)) ? type : formatUnit(type);
      }
      return value;
    };
    TimePicker2.prototype.popupAlignment = function(args) {
      args.popup.position.X = this.formatValues(args.popup.position.X);
      args.popup.position.Y = this.formatValues(args.popup.position.Y);
      if (!isNaN(parseFloat(args.popup.position.X)) || !isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.relateTo = this.anchor = document.body;
        this.popupObj.targetType = "container";
      }
      if (!isNaN(parseFloat(args.popup.position.X))) {
        this.popupObj.offsetX = parseFloat(args.popup.position.X);
      }
      if (!isNaN(parseFloat(args.popup.position.Y))) {
        this.popupObj.offsetY = parseFloat(args.popup.position.Y);
      }
      if (!Browser.isDevice) {
        switch (args.popup.position.X) {
          case "left":
            break;
          case "right":
            args.popup.offsetX = this.containerStyle.width;
            break;
          case "center":
            args.popup.offsetX = -(this.containerStyle.width / 2);
            break;
        }
        switch (args.popup.position.Y) {
          case "top":
            break;
          case "bottom":
            break;
          case "center":
            args.popup.offsetY = -(this.containerStyle.height / 2);
            break;
        }
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.inputWrapper.container;
          this.anchor = this.inputElement;
          this.popupObj.targetType = "relative";
        }
      } else {
        if (args.popup.position.X === "center" && args.popup.position.Y === "center") {
          this.popupObj.relateTo = this.anchor = document.body;
          this.popupObj.offsetY = 0;
          this.popupObj.targetType = "container";
          this.popupObj.collision = { X: "fit", Y: "fit" };
        }
      }
    };
    TimePicker2.prototype.getPersistData = function() {
      var keyEntity = ["value"];
      return this.addOnPersist(keyEntity);
    };
    TimePicker2.prototype.getModuleName = function() {
      return "timepicker";
    };
    TimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            this.inputElement.setAttribute("aria-placeholder", newProp.placeholder);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement, this.floatLabelType);
            if (this.readonly) {
              this.hide();
            }
            this.setTimeAllowEdit();
            break;
          case "enabled":
            this.setProperties({ enabled: newProp.enabled }, true);
            this.setEnable();
            break;
          case "allowEdit":
            this.setTimeAllowEdit();
            break;
          case "enableRtl":
            this.setProperties({ enableRtl: newProp.enableRtl }, true);
            this.setEnableRtl();
            break;
          case "cssClass":
            this.updateCssClass(newProp.cssClass, oldProp.cssClass);
            break;
          case "zIndex":
            this.setProperties({ zIndex: newProp.zIndex }, true);
            this.setZIndex();
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            break;
          case "showClearButton":
            Input.setClearButton(this.showClearButton, this.inputElement, this.inputWrapper);
            this.bindClearEvent();
            break;
          case "locale":
            this.setProperties({ locale: newProp.locale }, true);
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.updatePlaceHolder();
            this.setValue(this.value);
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "width":
            setStyleAttribute(this.inputWrapper.container, { "width": this.setWidth(newProp.width) });
            this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
            break;
          case "format":
            this.setProperties({ format: newProp.format }, true);
            this.checkTimeFormat();
            this.setValue(this.value);
            if (this.enableMask) {
              this.createMask();
              if (!this.value) {
                this.updateInputValue(this.maskedDateValue);
              }
            }
            break;
          case "value":
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            if (!this.invalidValueString) {
              if (typeof newProp.value === "string") {
                this.setProperties({ value: this.checkDateValue(new Date(newProp.value)) }, true);
                newProp.value = this.value;
              } else {
                if ((newProp.value && +(/* @__PURE__ */ new Date(+newProp.value)).setMilliseconds(0)) !== +this.value) {
                  newProp.value = this.checkDateValue(/* @__PURE__ */ new Date("" + newProp.value));
                }
              }
              this.initValue = newProp.value;
              newProp.value = this.compareFormatChange(this.checkValue(newProp.value));
            } else {
              this.updateInputValue(this.invalidValueString);
              this.checkErrorState(this.invalidValueString);
            }
            this.checkValueChange(null, false);
            if (this.isPopupOpen()) {
              this.setScrollPosition();
            }
            if (this.isAngular && this.preventChange) {
              this.preventChange = false;
            }
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            break;
          case "strictMode":
            this.invalidValueString = null;
            if (newProp.strictMode) {
              this.checkErrorState(null);
            }
            this.setProperties({ strictMode: newProp.strictMode }, true);
            this.checkValue(this.inputElement.value);
            this.checkValueChange(null, false);
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo)))) {
              if (this.popupWrapper) {
                this.setScrollTo();
              }
              this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkInValue(newProp.scrollTo))) }, true);
            } else {
              this.setProperties({ scrollTo: null }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              this.updateInputValue(this.maskedDateValue);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.updateInputValue("");
              }
            }
            break;
        }
      }
    };
    TimePicker2.prototype.checkInValue = function(inValue) {
      if (inValue instanceof Date) {
        return inValue.toUTCString();
      } else {
        return "" + inValue;
      }
    };
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "width", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "cssClass", void 0);
    __decorate32([
      Property(false)
    ], TimePicker2.prototype, "strictMode", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "keyConfigs", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "format", void 0);
    __decorate32([
      Property(true)
    ], TimePicker2.prototype, "enabled", void 0);
    __decorate32([
      Property(false)
    ], TimePicker2.prototype, "readonly", void 0);
    __decorate32([
      Property({})
    ], TimePicker2.prototype, "htmlAttributes", void 0);
    __decorate32([
      Property("Never")
    ], TimePicker2.prototype, "floatLabelType", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "placeholder", void 0);
    __decorate32([
      Property(1e3)
    ], TimePicker2.prototype, "zIndex", void 0);
    __decorate32([
      Property(false)
    ], TimePicker2.prototype, "enablePersistence", void 0);
    __decorate32([
      Property(true)
    ], TimePicker2.prototype, "showClearButton", void 0);
    __decorate32([
      Property(30)
    ], TimePicker2.prototype, "step", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "scrollTo", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "value", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "min", void 0);
    __decorate32([
      Property(null)
    ], TimePicker2.prototype, "max", void 0);
    __decorate32([
      Property(true)
    ], TimePicker2.prototype, "allowEdit", void 0);
    __decorate32([
      Property(false)
    ], TimePicker2.prototype, "openOnFocus", void 0);
    __decorate32([
      Property(false)
    ], TimePicker2.prototype, "enableMask", void 0);
    __decorate32([
      Property({ day: "day", month: "month", year: "year", hour: "hour", minute: "minute", second: "second", dayOfTheWeek: "day of the week" })
    ], TimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "change", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "created", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "destroyed", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "open", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "itemRender", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "close", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "cleared", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "blur", void 0);
    __decorate32([
      Event2()
    ], TimePicker2.prototype, "focus", void 0);
    TimePicker2 = __decorate32([
      NotifyPropertyChanges
    ], TimePicker2);
    return TimePicker2;
  }(Component)
);

// node_modules/@syncfusion/ej2-calendars/src/datetimepicker/datetimepicker.js
var __extends35 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __decorate33 = function(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DATEWRAPPER2 = "e-date-wrapper";
var DATEPICKERROOT = "e-datepicker";
var DATETIMEWRAPPER = "e-datetime-wrapper";
var DAY2 = (/* @__PURE__ */ new Date()).getDate();
var MONTH4 = (/* @__PURE__ */ new Date()).getMonth();
var YEAR4 = (/* @__PURE__ */ new Date()).getFullYear();
var HOUR = (/* @__PURE__ */ new Date()).getHours();
var MINUTE = (/* @__PURE__ */ new Date()).getMinutes();
var SECOND = (/* @__PURE__ */ new Date()).getSeconds();
var MILLISECOND = (/* @__PURE__ */ new Date()).getMilliseconds();
var ROOT9 = "e-datetimepicker";
var DATETIMEPOPUPWRAPPER = "e-datetimepopup-wrapper";
var INPUTWRAPPER3 = "e-input-group-icon";
var POPUP4 = "e-popup";
var TIMEICON = "e-time-icon";
var INPUTFOCUS3 = "e-input-focus";
var POPUPDIMENSION2 = "250px";
var ICONANIMATION2 = "e-icon-anim";
var DISABLED9 = "e-disabled";
var ERROR6 = "e-error";
var CONTENT5 = "e-content";
var NAVIGATION2 = "e-navigation";
var ACTIVE4 = "e-active";
var HOVER3 = "e-hover";
var ICONS2 = "e-icons";
var HALFPOSITION2 = 2;
var LISTCLASS3 = "e-list-item";
var ANIMATIONDURATION2 = 100;
var OVERFLOW4 = "e-time-overflow";
var DateTimePicker = (
  /** @class */
  function(_super) {
    __extends35(DateTimePicker2, _super);
    function DateTimePicker2(options, element2) {
      var _this = _super.call(this, options, element2) || this;
      _this.valueWithMinutes = null;
      _this.scrollInvoked = false;
      _this.moduleName = _this.getModuleName();
      _this.dateTimeOptions = options;
      return _this;
    }
    DateTimePicker2.prototype.focusHandler = function() {
      if (!this.enabled) {
        return;
      }
      addClass([this.inputWrapper.container], INPUTFOCUS3);
    };
    DateTimePicker2.prototype.focusIn = function() {
      _super.prototype.focusIn.call(this);
    };
    DateTimePicker2.prototype.focusOut = function() {
      if (document.activeElement === this.inputElement) {
        this.inputElement.blur();
        removeClass([this.inputWrapper.container], [INPUTFOCUS3]);
      }
    };
    DateTimePicker2.prototype.blurHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (this.isTimePopupOpen() && this.isPreventBlur) {
        this.inputElement.focus();
        return;
      }
      removeClass([this.inputWrapper.container], INPUTFOCUS3);
      var blurArguments = {
        model: this
      };
      if (this.isTimePopupOpen()) {
        this.hide(e);
      }
      this.trigger("blur", blurArguments);
    };
    DateTimePicker2.prototype.destroy = function() {
      if (this.popupObject && this.popupObject.element.classList.contains(POPUP4)) {
        this.popupObject.destroy();
        detach(this.dateTimeWrapper);
        this.dateTimeWrapper = void 0;
        this.liCollections = this.timeCollections = [];
        if (!isNullOrUndefined(this.rippleFn)) {
          this.rippleFn();
        }
      }
      var ariaAttribute = {
        "aria-live": "assertive",
        "aria-atomic": "true",
        "aria-invalid": "false",
        "aria-haspopup": "true",
        "aria-activedescendant": "null",
        "autocorrect": "off",
        "autocapitalize": "off",
        "spellcheck": "false",
        "aria-owns": this.element.id + "_options",
        "aria-expanded": "false",
        "role": "combobox",
        "autocomplete": "off"
      };
      if (this.inputElement) {
        Input.removeAttributes(ariaAttribute, this.inputElement);
        this.inputElement.removeAttribute("aria-placeholder");
      }
      if (this.isCalendar()) {
        if (this.popupWrapper) {
          detach(this.popupWrapper);
        }
        this.popupObject = this.popupWrapper = null;
        this.keyboardHandler.destroy();
      }
      this.unBindInputEvents();
      _super.prototype.destroy.call(this);
    };
    DateTimePicker2.prototype.render = function() {
      this.timekeyConfigure = {
        enter: "enter",
        escape: "escape",
        end: "end",
        tab: "tab",
        home: "home",
        down: "downarrow",
        up: "uparrow",
        left: "leftarrow",
        right: "rightarrow",
        open: "alt+downarrow",
        close: "alt+uparrow"
      };
      this.valueWithMinutes = null;
      this.previousDateTime = null;
      this.isPreventBlur = false;
      this.cloneElement = this.element.cloneNode(true);
      this.dateTimeFormat = this.cldrDateTimeFormat();
      this.initValue = this.value;
      _super.prototype.updateHtmlAttributeToElement.call(this);
      this.checkAttributes(false);
      var localeText = { placeholder: this.placeholder };
      this.l10n = new L10n("datetimepicker", localeText, this.locale);
      this.setProperties({ placeholder: this.placeholder || this.l10n.getConstant("placeholder") }, true);
      _super.prototype.render.call(this);
      this.createInputElement();
      _super.prototype.updateHtmlAttributeToWrapper.call(this);
      this.bindInputEvents();
      if (this.enableMask) {
        this.notify("createMask", {
          module: "MaskedDateTime"
        });
      }
      this.setValue();
      if (this.enableMask && !this.value && this.maskedDateValue && (this.floatLabelType == "Always" || !this.floatLabelType || !this.placeholder)) {
        Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkValue(this.scrollTo))) }, true);
      this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      if (this.element.tagName === "EJS-DATETIMEPICKER") {
        this.tabIndex = this.element.hasAttribute("tabindex") ? this.element.getAttribute("tabindex") : "0";
        this.element.removeAttribute("tabindex");
        if (!this.enabled) {
          this.inputElement.tabIndex = -1;
        }
      }
      this.renderComplete();
    };
    DateTimePicker2.prototype.setValue = function() {
      this.initValue = this.validateMinMaxRange(this.value);
      if (!this.strictMode && this.isDateObject(this.initValue)) {
        var value = this.validateMinMaxRange(this.initValue);
        Input.setValue(this.getFormattedValue(value), this.inputElement, this.floatLabelType, this.showClearButton);
        this.setProperties({ value }, true);
      } else {
        if (isNullOrUndefined(this.value)) {
          this.initValue = null;
          this.setProperties({ value: null }, true);
        }
      }
      this.valueWithMinutes = this.value;
      _super.prototype.updateInput.call(this);
    };
    DateTimePicker2.prototype.validateMinMaxRange = function(value) {
      var result = value;
      if (this.isDateObject(value)) {
        result = this.validateValue(value);
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
        }
      }
      this.checkValidState(result);
      return result;
    };
    DateTimePicker2.prototype.checkValidState = function(value) {
      this.isValidState = true;
      if (!this.strictMode) {
        if (+value > +this.max || +value < +this.min) {
          this.isValidState = false;
        }
      }
      this.checkErrorState();
    };
    DateTimePicker2.prototype.checkErrorState = function() {
      if (this.isValidState) {
        removeClass([this.inputWrapper.container], ERROR6);
      } else {
        addClass([this.inputWrapper.container], ERROR6);
      }
      attributes(this.inputElement, { "aria-invalid": this.isValidState ? "false" : "true" });
    };
    DateTimePicker2.prototype.validateValue = function(value) {
      var dateVal = value;
      if (this.strictMode) {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = this.max;
        } else if (+value < +this.min) {
          dateVal = this.min;
        } else if (+value > +this.max) {
          dateVal = this.max;
        }
      } else {
        if (+this.min > +this.max) {
          this.disablePopupButton(true);
          dateVal = value;
        }
      }
      return dateVal;
    };
    DateTimePicker2.prototype.disablePopupButton = function(isDisable) {
      if (isDisable) {
        addClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED9);
        this.hide();
      } else {
        removeClass([this.inputWrapper.buttons[0], this.timeIcon], DISABLED9);
      }
    };
    DateTimePicker2.prototype.getFormattedValue = function(value) {
      var dateOptions;
      if (!isNullOrUndefined(value)) {
        if (this.calendarMode === "Gregorian") {
          dateOptions = { format: this.cldrDateTimeFormat(), type: "dateTime", skeleton: "yMd" };
        } else {
          dateOptions = { format: this.cldrDateTimeFormat(), type: "dateTime", skeleton: "yMd", calendar: "islamic" };
        }
        return this.globalize.formatDate(value, dateOptions);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.isDateObject = function(value) {
      return !isNullOrUndefined(value) && !isNaN(+value) ? true : false;
    };
    DateTimePicker2.prototype.createInputElement = function() {
      removeClass([this.inputElement], DATEPICKERROOT);
      removeClass([this.inputWrapper.container], DATEWRAPPER2);
      addClass([this.inputWrapper.container], DATETIMEWRAPPER);
      addClass([this.inputElement], ROOT9);
      this.renderTimeIcon();
    };
    DateTimePicker2.prototype.renderTimeIcon = function() {
      this.timeIcon = Input.appendSpan(INPUTWRAPPER3 + " " + TIMEICON + " " + ICONS2, this.inputWrapper.container);
    };
    DateTimePicker2.prototype.bindInputEvents = function() {
      EventHandler.add(this.timeIcon, "mousedown", this.timeHandler, this);
      EventHandler.add(this.inputWrapper.buttons[0], "mousedown", this.dateHandler, this);
      EventHandler.add(this.inputElement, "blur", this.blurHandler, this);
      EventHandler.add(this.inputElement, "focus", this.focusHandler, this);
      this.defaultKeyConfigs = extend(this.defaultKeyConfigs, this.keyConfigs);
      this.keyboardHandler = new KeyboardEvents(this.inputElement, {
        eventName: "keydown",
        keyAction: this.inputKeyAction.bind(this),
        keyConfigs: this.defaultKeyConfigs
      });
    };
    DateTimePicker2.prototype.unBindInputEvents = function() {
      EventHandler.remove(this.timeIcon, "mousedown touchstart", this.timeHandler);
      EventHandler.remove(this.inputWrapper.buttons[0], "mousedown touchstart", this.dateHandler);
      if (this.inputElement) {
        EventHandler.remove(this.inputElement, "blur", this.blurHandler);
        EventHandler.remove(this.inputElement, "focus", this.focusHandler);
      }
      if (this.keyboardHandler) {
        this.keyboardHandler.destroy();
      }
    };
    DateTimePicker2.prototype.cldrTimeFormat = function() {
      var cldrTime;
      if (this.isNullOrEmpty(this.timeFormat)) {
        if (this.locale === "en" || this.locale === "en-US") {
          cldrTime = getValue("timeFormats.short", getDefaultDateObject());
        } else {
          cldrTime = this.getCultureTimeObject(cldrData, "" + this.locale);
        }
      } else {
        cldrTime = this.timeFormat;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.cldrDateTimeFormat = function() {
      var cldrTime;
      var culture = new Internationalization(this.locale);
      var dateFormat = culture.getDatePattern({ skeleton: "yMd" });
      if (this.isNullOrEmpty(this.formatString)) {
        cldrTime = dateFormat + " " + this.getCldrFormat("time");
      } else {
        cldrTime = this.formatString;
      }
      return cldrTime;
    };
    DateTimePicker2.prototype.getCldrFormat = function(type) {
      var cldrDateTime;
      if (this.locale === "en" || this.locale === "en-US") {
        cldrDateTime = getValue("timeFormats.short", getDefaultDateObject());
      } else {
        cldrDateTime = this.getCultureTimeObject(cldrData, "" + this.locale);
      }
      return cldrDateTime;
    };
    DateTimePicker2.prototype.isNullOrEmpty = function(value) {
      if (isNullOrUndefined(value) || typeof value === "string" && value.trim() === "") {
        return true;
      } else {
        return false;
      }
    };
    DateTimePicker2.prototype.getCultureTimeObject = function(ld, c) {
      if (this.calendarMode === "Gregorian") {
        return getValue("main." + this.locale + ".dates.calendars.gregorian.timeFormats.short", ld);
      } else {
        return getValue("main." + this.locale + ".dates.calendars.islamic.timeFormats.short", ld);
      }
    };
    DateTimePicker2.prototype.timeHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      this.isIconClicked = true;
      if (Browser.isDevice) {
        this.inputElement.setAttribute("readonly", "");
      }
      if (e.currentTarget === this.timeIcon) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        }
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        } else {
          this.inputElement.focus();
          this.popupCreation("time", e);
          addClass([this.inputWrapper.container], [INPUTFOCUS3]);
        }
      }
      this.isIconClicked = false;
    };
    DateTimePicker2.prototype.dateHandler = function(e) {
      if (!this.enabled) {
        return;
      }
      if (e.currentTarget === this.inputWrapper.buttons[0]) {
        e.preventDefault();
      }
      if (this.enabled && !this.readonly) {
        if (this.isTimePopupOpen()) {
          this.closePopup(e);
        }
        if (!isNullOrUndefined(this.popupWrapper)) {
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.show = function(type, e) {
      if (this.enabled && this.readonly || !this.enabled) {
        return;
      } else {
        if (type === "time" && !this.dateTimeWrapper) {
          if (this.isDatePopupOpen()) {
            this.hide(e);
          }
          this.popupCreation("time", e);
        } else if (!this.popupObj) {
          if (this.isTimePopupOpen()) {
            this.hide(e);
          }
          _super.prototype.show.call(this);
          this.popupCreation("date", e);
        }
      }
    };
    DateTimePicker2.prototype.toggle = function(e) {
      if (this.isDatePopupOpen()) {
        _super.prototype.hide.call(this, e);
        this.show("time", null);
      } else if (this.isTimePopupOpen()) {
        this.hide(e);
        _super.prototype.show.call(this, null, e);
        this.popupCreation("date", null);
      } else {
        this.show(null, e);
      }
    };
    DateTimePicker2.prototype.listCreation = function() {
      var dateObject;
      if (this.calendarMode === "Gregorian") {
        dateObject = this.globalize.parseDate(this.inputElement.value, {
          format: this.cldrDateTimeFormat(),
          type: "datetime"
        });
      } else {
        dateObject = this.globalize.parseDate(this.inputElement.value, {
          format: this.cldrDateTimeFormat(),
          type: "datetime",
          calendar: "islamic"
        });
      }
      var value = isNullOrUndefined(this.value) ? this.inputElement.value !== "" ? dateObject : /* @__PURE__ */ new Date() : this.value;
      this.valueWithMinutes = value;
      this.listWrapper = createElement("div", { className: CONTENT5, attrs: { "tabindex": "0" } });
      var min = this.startTime(value);
      var max = this.endTime(value);
      var listDetails = TimePickerBase.createListItems(this.createElement, min, max, this.globalize, this.cldrTimeFormat(), this.step);
      this.timeCollections = listDetails.collection;
      this.listTag = listDetails.list;
      attributes(this.listTag, { "role": "listbox", "aria-hidden": "false", "id": this.element.id + "_options" });
      append([listDetails.list], this.listWrapper);
      this.wireTimeListEvents();
      var rippleModel = { duration: 300, selector: "." + LISTCLASS3 };
      this.rippleFn = rippleEffect(this.listWrapper, rippleModel);
      this.liCollections = this.listWrapper.querySelectorAll("." + LISTCLASS3);
    };
    DateTimePicker2.prototype.popupCreation = function(type, e) {
      if (Browser.isDevice) {
        this.element.setAttribute("readonly", "readonly");
      }
      if (type === "date") {
        if (!this.readonly && this.popupWrapper) {
          addClass([this.popupWrapper], DATETIMEPOPUPWRAPPER);
          attributes(this.popupWrapper, { "id": this.element.id + "_datepopup" });
        }
      } else {
        if (!this.readonly) {
          this.dateTimeWrapper = createElement("div", {
            className: ROOT9 + " " + POPUP4,
            attrs: { "id": this.element.id + "_timepopup", "style": "visibility:hidden ; display:block" }
          });
          if (!isNullOrUndefined(this.cssClass)) {
            this.dateTimeWrapper.className += " " + this.cssClass;
          }
          if (!isNullOrUndefined(this.step) && this.step > 0) {
            this.listCreation();
            append([this.listWrapper], this.dateTimeWrapper);
          }
          document.body.appendChild(this.dateTimeWrapper);
          this.addTimeSelection();
          this.renderPopup();
          this.setTimeScrollPosition();
          this.openPopup(e);
          this.popupObject.refreshPosition(this.inputElement);
        }
      }
    };
    DateTimePicker2.prototype.openPopup = function(e) {
      var _this = this;
      this.preventArgs = {
        cancel: false,
        popup: this.popupObject,
        event: e || null
      };
      var eventArgs = this.preventArgs;
      this.trigger("open", eventArgs, function(eventArgs2) {
        _this.preventArgs = eventArgs2;
        if (!_this.preventArgs.cancel && !_this.readonly) {
          var openAnimation = {
            name: "FadeIn",
            duration: ANIMATIONDURATION2
          };
          if (_this.zIndex === 1e3) {
            _this.popupObject.show(new Animation(openAnimation), _this.element);
          } else {
            _this.popupObject.show(new Animation(openAnimation), null);
          }
          addClass([_this.inputWrapper.container], [ICONANIMATION2]);
          attributes(_this.inputElement, { "aria-expanded": "true" });
          EventHandler.add(document, "mousedown touchstart", _this.documentClickHandler, _this);
        }
      });
    };
    DateTimePicker2.prototype.documentClickHandler = function(event) {
      var target = event.target;
      if (!isNullOrUndefined(this.popupObject) && (this.inputWrapper.container.contains(target) || this.popupObject.element && this.popupObject.element.contains(target)) && event.type !== "touchstart") {
        event.preventDefault();
      }
      if (!closest(target, '[id="' + (this.popupObject && this.popupObject.element.id + '"]')) && target !== this.inputElement && target !== this.timeIcon && target !== this.inputWrapper.container) {
        if (this.isTimePopupOpen()) {
          this.hide(event);
          this.focusOut();
        }
      } else if (target !== this.inputElement) {
        if (!Browser.isDevice) {
          this.isPreventBlur = document.activeElement === this.inputElement && (Browser.isIE || Browser.info.name === "edge") && target === this.popupObject.element;
        }
      }
    };
    DateTimePicker2.prototype.isTimePopupOpen = function() {
      return this.dateTimeWrapper && this.dateTimeWrapper.classList.contains("" + ROOT9) ? true : false;
    };
    DateTimePicker2.prototype.isDatePopupOpen = function() {
      return this.popupWrapper && this.popupWrapper.classList.contains("" + DATETIMEPOPUPWRAPPER) ? true : false;
    };
    DateTimePicker2.prototype.renderPopup = function() {
      var _this = this;
      this.containerStyle = this.inputWrapper.container.getBoundingClientRect();
      if (Browser.isDevice) {
        this.timeModal = createElement("div");
        this.timeModal.className = "" + ROOT9 + " e-time-modal";
        document.body.className += " " + OVERFLOW4;
        this.timeModal.style.display = "block";
        document.body.appendChild(this.timeModal);
      }
      var offset = 4;
      this.popupObject = new Popup(this.dateTimeWrapper, {
        width: this.setPopupWidth(),
        zIndex: this.zIndex,
        targetType: "container",
        collision: Browser.isDevice ? { X: "fit", Y: "fit" } : { X: "flip", Y: "flip" },
        relateTo: Browser.isDevice ? document.body : this.inputWrapper.container,
        position: Browser.isDevice ? { X: "center", Y: "center" } : { X: "left", Y: "bottom" },
        enableRtl: this.enableRtl,
        offsetY: offset,
        open: function() {
          _this.dateTimeWrapper.style.visibility = "visible";
          addClass([_this.timeIcon], ACTIVE4);
          if (!Browser.isDevice) {
            _this.timekeyConfigure = extend(_this.timekeyConfigure, _this.keyConfigs);
            _this.inputEvent = new KeyboardEvents(_this.inputWrapper.container, {
              keyAction: _this.timeKeyActionHandle.bind(_this),
              keyConfigs: _this.timekeyConfigure,
              eventName: "keydown"
            });
          }
        },
        close: function() {
          removeClass([_this.timeIcon], ACTIVE4);
          _this.unWireTimeListEvents();
          _this.inputElement.setAttribute("aria-activedescendant", "null");
          remove(_this.popupObject.element);
          _this.popupObject.destroy();
          _this.dateTimeWrapper.innerHTML = "";
          _this.listWrapper = _this.dateTimeWrapper = void 0;
          if (_this.inputEvent) {
            _this.inputEvent.destroy();
          }
        },
        targetExitViewport: function() {
          if (!Browser.isDevice) {
            _this.hide();
          }
        }
      });
      this.popupObject.element.style.maxHeight = POPUPDIMENSION2;
    };
    DateTimePicker2.prototype.setDimension = function(width) {
      if (typeof width === "number") {
        width = formatUnit(width);
      } else if (typeof width === "string") {
        width = width;
      } else {
        width = "100%";
      }
      return width;
    };
    DateTimePicker2.prototype.setPopupWidth = function() {
      var width = this.setDimension(this.width);
      if (width.indexOf("%") > -1) {
        var inputWidth = this.containerStyle.width * parseFloat(width) / 100;
        width = inputWidth.toString() + "px";
      }
      return width;
    };
    DateTimePicker2.prototype.wireTimeListEvents = function() {
      EventHandler.add(this.listWrapper, "click", this.onMouseClick, this);
      if (!Browser.isDevice) {
        EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
        EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
      }
    };
    DateTimePicker2.prototype.unWireTimeListEvents = function() {
      if (this.listWrapper) {
        EventHandler.remove(this.listWrapper, "click", this.onMouseClick);
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
        if (!Browser.isDevice) {
          EventHandler.add(this.listWrapper, "mouseover", this.onMouseOver, this);
          EventHandler.add(this.listWrapper, "mouseout", this.onMouseLeave, this);
        }
      }
    };
    DateTimePicker2.prototype.onMouseOver = function(event) {
      var currentLi = closest(event.target, "." + LISTCLASS3);
      this.setTimeHover(currentLi, HOVER3);
    };
    DateTimePicker2.prototype.onMouseLeave = function() {
      this.removeTimeHover(HOVER3);
    };
    DateTimePicker2.prototype.setTimeHover = function(li, className) {
      if (this.enabled && this.isValidLI(li) && !li.classList.contains(className)) {
        this.removeTimeHover(className);
        addClass([li], className);
      }
    };
    DateTimePicker2.prototype.getPopupHeight = function() {
      var height = parseInt(POPUPDIMENSION2, 10);
      var popupHeight = this.dateTimeWrapper.getBoundingClientRect().height;
      return popupHeight > height ? height : popupHeight;
    };
    DateTimePicker2.prototype.changeEvent = function(e) {
      if ((this.value && this.value.valueOf()) !== (this.previousDateTime && +this.previousDateTime.valueOf())) {
        _super.prototype.changeEvent.call(this, e);
        this.valueWithMinutes = this.value;
        this.setInputValue("date");
        this.previousDateTime = this.value && /* @__PURE__ */ new Date(+this.value);
      }
    };
    DateTimePicker2.prototype.updateValue = function(e) {
      this.setInputValue("time");
      if (+this.previousDateTime !== +this.value) {
        this.changedArgs = {
          value: this.value,
          event: e || null,
          isInteracted: !isNullOrUndefined(e),
          element: this.element
        };
        this.addTimeSelection();
        this.trigger("change", this.changedArgs);
        this.previousDateTime = this.previousDate = this.value;
      }
    };
    DateTimePicker2.prototype.setTimeScrollPosition = function() {
      var popupElement = this.selectedElement;
      if (!isNullOrUndefined(popupElement)) {
        this.findScrollTop(popupElement);
      } else if (this.dateTimeWrapper && this.checkDateValue(this.scrollTo)) {
        this.setScrollTo();
      }
    };
    DateTimePicker2.prototype.findScrollTop = function(element2) {
      var listHeight = this.getPopupHeight();
      var nextElement = element2.nextElementSibling;
      var height = nextElement ? nextElement.offsetTop : element2.offsetTop;
      var lineHeight = element2.getBoundingClientRect().height;
      if (height + element2.offsetTop > listHeight) {
        this.dateTimeWrapper.scrollTop = nextElement ? height - (listHeight / HALFPOSITION2 + lineHeight / HALFPOSITION2) : height;
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setScrollTo = function() {
      var element2;
      var items = this.dateTimeWrapper.querySelectorAll("." + LISTCLASS3);
      if (items.length >= 0) {
        this.scrollInvoked = true;
        var initialTime = this.timeCollections[0];
        var scrollTime = this.getDateObject(this.checkDateValue(this.scrollTo)).getTime();
        element2 = items[Math.round((scrollTime - initialTime) / (this.step * 6e4))];
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
      if (!isNullOrUndefined(element2)) {
        this.findScrollTop(element2);
      } else {
        this.dateTimeWrapper.scrollTop = 0;
      }
    };
    DateTimePicker2.prototype.setInputValue = function(type) {
      if (type === "date") {
        this.inputElement.value = this.previousElementValue = this.getFormattedValue(this.getFullDateTime());
        this.setProperties({ value: this.getFullDateTime() }, true);
      } else {
        var tempVal = this.getFormattedValue(new Date(this.timeCollections[this.activeIndex]));
        Input.setValue(tempVal, this.inputElement, this.floatLabelType, this.showClearButton);
        this.previousElementValue = this.inputElement.value;
        this.setProperties({ value: new Date(this.timeCollections[this.activeIndex]) }, true);
        if (this.enableMask) {
          this.createMask();
        }
      }
      this.updateIconState();
    };
    DateTimePicker2.prototype.getFullDateTime = function() {
      var value = null;
      if (this.isDateObject(this.valueWithMinutes)) {
        value = this.combineDateTime(this.valueWithMinutes);
      } else {
        value = this.previousDate;
      }
      return this.validateMinMaxRange(value);
    };
    DateTimePicker2.prototype.createMask = function() {
      this.notify("createMask", {
        module: "MaskedDateTime"
      });
    };
    DateTimePicker2.prototype.combineDateTime = function(value) {
      if (this.isDateObject(value)) {
        var day = this.previousDate.getDate();
        var month2 = this.previousDate.getMonth();
        var year = this.previousDate.getFullYear();
        var hour = value.getHours();
        var minutes = value.getMinutes();
        var seconds = value.getSeconds();
        return new Date(year, month2, day, hour, minutes, seconds);
      } else {
        return this.previousDate;
      }
    };
    DateTimePicker2.prototype.onMouseClick = function(event) {
      var target = event.target;
      var li = this.selectedElement = closest(target, "." + LISTCLASS3);
      if (li && li.classList.contains(LISTCLASS3)) {
        this.timeValue = li.getAttribute("data-value");
        this.hide(event);
      }
      this.setSelection(li, event);
    };
    DateTimePicker2.prototype.setSelection = function(li, event) {
      if (this.isValidLI(li) && !li.classList.contains(ACTIVE4)) {
        this.selectedElement = li;
        var index = Array.prototype.slice.call(this.liCollections).indexOf(li);
        this.activeIndex = index;
        this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
        addClass([this.selectedElement], ACTIVE4);
        this.selectedElement.setAttribute("aria-selected", "true");
        this.updateValue(event);
      }
    };
    DateTimePicker2.prototype.setTimeActiveClass = function() {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      if (!isNullOrUndefined(collections)) {
        var items = collections.querySelectorAll("." + LISTCLASS3);
        if (items.length) {
          for (var i = 0; i < items.length; i++) {
            if (this.timeCollections[i] === +this.valueWithMinutes) {
              items[i].setAttribute("aria-selected", "true");
              this.selectedElement = items[i];
              this.activeIndex = i;
              this.setTimeActiveDescendant();
              break;
            }
          }
        }
      }
    };
    DateTimePicker2.prototype.setTimeActiveDescendant = function() {
      if (!isNullOrUndefined(this.selectedElement)) {
        attributes(this.inputElement, { "aria-activedescendant": this.selectedElement.getAttribute("id") });
      } else {
        attributes(this.inputElement, { "aria-activedescendant": "null" });
      }
    };
    DateTimePicker2.prototype.addTimeSelection = function() {
      this.selectedElement = null;
      this.removeTimeSelection();
      this.setTimeActiveClass();
      if (!isNullOrUndefined(this.selectedElement)) {
        addClass([this.selectedElement], ACTIVE4);
        this.selectedElement.setAttribute("aria-selected", "true");
      }
    };
    DateTimePicker2.prototype.removeTimeSelection = function() {
      this.removeTimeHover(HOVER3);
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        var items = this.dateTimeWrapper.querySelectorAll("." + ACTIVE4);
        if (items.length) {
          removeClass(items, ACTIVE4);
          items[0].removeAttribute("aria-selected");
        }
      }
    };
    DateTimePicker2.prototype.removeTimeHover = function(className) {
      var hoveredItem = this.getTimeHoverItem(className);
      if (hoveredItem && hoveredItem.length) {
        removeClass(hoveredItem, className);
      }
    };
    DateTimePicker2.prototype.getTimeHoverItem = function(className) {
      var collections = isNullOrUndefined(this.dateTimeWrapper) ? this.listWrapper : this.dateTimeWrapper;
      var hoveredItem;
      if (!isNullOrUndefined(collections)) {
        hoveredItem = collections.querySelectorAll("." + className);
      }
      return hoveredItem;
    };
    DateTimePicker2.prototype.isValidLI = function(li) {
      return li && li.classList.contains(LISTCLASS3) && !li.classList.contains(DISABLED9);
    };
    DateTimePicker2.prototype.calculateStartEnd = function(value, range, method) {
      var day = value.getDate();
      var month2 = value.getMonth();
      var year = value.getFullYear();
      var hours = value.getHours();
      var minutes = value.getMinutes();
      var seconds = value.getSeconds();
      var milliseconds = value.getMilliseconds();
      if (range) {
        if (method === "starttime") {
          return new Date(year, month2, day, 0, 0, 0);
        } else {
          return new Date(year, month2, day, 23, 59, 59);
        }
      } else {
        return new Date(year, month2, day, hours, minutes, seconds, milliseconds);
      }
    };
    DateTimePicker2.prototype.startTime = function(date) {
      var tempStartValue;
      var start;
      var tempMin = this.min;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      if (+value.getDate() === +tempMin.getDate() && +value.getMonth() === +tempMin.getMonth() && +value.getFullYear() === +tempMin.getFullYear() || +new Date(value.getFullYear(), value.getMonth(), value.getDate()) <= +new Date(tempMin.getFullYear(), tempMin.getMonth(), tempMin.getDate())) {
        start = false;
        tempStartValue = this.min;
      } else if (+value < +this.max && +value > +this.min) {
        start = true;
        tempStartValue = value;
      } else if (+value >= +this.max) {
        start = true;
        tempStartValue = this.max;
      }
      return this.calculateStartEnd(tempStartValue, start, "starttime");
    };
    DateTimePicker2.prototype.endTime = function(date) {
      var tempEndValue;
      var end;
      var tempMax = this.max;
      var value = date === null ? /* @__PURE__ */ new Date() : date;
      if (+value.getDate() === +tempMax.getDate() && +value.getMonth() === +tempMax.getMonth() && +value.getFullYear() === +tempMax.getFullYear() || +new Date(value.getUTCFullYear(), value.getMonth(), value.getDate()) >= +new Date(tempMax.getFullYear(), tempMax.getMonth(), tempMax.getDate())) {
        end = false;
        tempEndValue = this.max;
      } else if (+value < +this.max && +value > +this.min) {
        end = true;
        tempEndValue = value;
      } else if (+value <= +this.min) {
        end = true;
        tempEndValue = this.min;
      }
      return this.calculateStartEnd(tempEndValue, end, "endtime");
    };
    DateTimePicker2.prototype.hide = function(e) {
      var _this = this;
      if (this.popupObj || this.dateTimeWrapper) {
        this.preventArgs = {
          cancel: false,
          popup: this.popupObj || this.popupObject,
          event: e || null
        };
        var eventArgs = this.preventArgs;
        if (isNullOrUndefined(this.popupObj)) {
          this.trigger("close", eventArgs, function(eventArgs2) {
            _this.dateTimeCloseEventCallback(e, eventArgs2);
          });
        } else {
          this.dateTimeCloseEventCallback(e, eventArgs);
        }
      } else {
        if (Browser.isDevice && this.allowEdit && !this.readonly) {
          this.inputElement.removeAttribute("readonly");
        }
        this.setAllowEdit();
      }
    };
    DateTimePicker2.prototype.dateTimeCloseEventCallback = function(e, eventArgs) {
      this.preventArgs = eventArgs;
      if (!this.preventArgs.cancel) {
        if (this.isDatePopupOpen()) {
          _super.prototype.hide.call(this, e);
        } else if (this.isTimePopupOpen()) {
          this.closePopup(e);
          removeClass([document.body], OVERFLOW4);
          if (Browser.isDevice && this.timeModal) {
            this.timeModal.style.display = "none";
            this.timeModal.outerHTML = "";
            this.timeModal = null;
          }
          this.setTimeActiveDescendant();
        }
      }
      if (Browser.isDevice && this.allowEdit && !this.readonly) {
        this.inputElement.removeAttribute("readonly");
      }
      this.setAllowEdit();
    };
    DateTimePicker2.prototype.closePopup = function(e) {
      if (this.isTimePopupOpen() && this.popupObject) {
        var animModel = {
          name: "FadeOut",
          duration: ANIMATIONDURATION2,
          delay: 0
        };
        this.popupObject.hide(new Animation(animModel));
        this.inputWrapper.container.classList.remove(ICONANIMATION2);
        attributes(this.inputElement, { "aria-expanded": "false" });
        EventHandler.remove(document, "mousedown touchstart", this.documentClickHandler);
      }
    };
    DateTimePicker2.prototype.preRender = function() {
      this.checkFormat();
      this.dateTimeFormat = this.cldrDateTimeFormat();
      _super.prototype.preRender.call(this);
      removeClass([this.inputElementCopy], [ROOT9]);
    };
    DateTimePicker2.prototype.getProperty = function(date, val) {
      if (val === "min") {
        this.setProperties({ min: this.validateValue(date.min) }, true);
      } else {
        this.setProperties({ max: this.validateValue(date.max) }, true);
      }
    };
    DateTimePicker2.prototype.checkAttributes = function(isDynamic) {
      var attributes2 = isDynamic ? isNullOrUndefined(this.htmlAttributes) ? [] : Object.keys(this.htmlAttributes) : ["style", "name", "step", "disabled", "readonly", "value", "min", "max", "placeholder", "type"];
      var value;
      for (var _i = 0, attributes_1 = attributes2; _i < attributes_1.length; _i++) {
        var prop = attributes_1[_i];
        if (!isNullOrUndefined(this.inputElement.getAttribute(prop))) {
          switch (prop) {
            case "name":
              this.inputElement.setAttribute("name", this.inputElement.getAttribute(prop));
              break;
            case "step":
              this.step = parseInt(this.inputElement.getAttribute(prop), 10);
              break;
            case "readonly":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["readonly"] === void 0 || isDynamic) {
                var readonly = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "" || this.inputElement.getAttribute(prop) === "true" ? true : false;
                this.setProperties({ readonly }, !isDynamic);
              }
              break;
            case "placeholder":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["placeholder"] === void 0 || isDynamic) {
                this.setProperties({ placeholder: this.inputElement.getAttribute(prop) }, !isDynamic);
              }
              break;
            case "min":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["min"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({ min: value }, !isDynamic);
                }
              }
              break;
            case "disabled":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["enabled"] === void 0 || isDynamic) {
                var enabled = this.inputElement.getAttribute(prop) === "disabled" || this.inputElement.getAttribute(prop) === "true" || this.inputElement.getAttribute(prop) === "" ? false : true;
                this.setProperties({ enabled }, !isDynamic);
              }
              break;
            case "value":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["value"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({ value }, !isDynamic);
                }
              }
              break;
            case "max":
              if (isNullOrUndefined(this.dateTimeOptions) || this.dateTimeOptions["max"] === void 0 || isDynamic) {
                value = new Date(this.inputElement.getAttribute(prop));
                if (!this.isNullOrEmpty(value) && !isNaN(+value)) {
                  this.setProperties({ max: value }, !isDynamic);
                }
              }
              break;
          }
        }
      }
    };
    DateTimePicker2.prototype.requiredModules = function() {
      var modules = [];
      if (this) {
        modules.push({ args: [this], member: "islamic" });
      }
      if (this.enableMask) {
        modules.push(this.maskedDateModule());
      }
      return modules;
    };
    DateTimePicker2.prototype.maskedDateModule = function() {
      var modules = { args: [this], member: "MaskedDateTime" };
      return modules;
    };
    DateTimePicker2.prototype.getTimeActiveElement = function() {
      if (!isNullOrUndefined(this.dateTimeWrapper)) {
        return this.dateTimeWrapper.querySelectorAll("." + ACTIVE4);
      } else {
        return null;
      }
    };
    DateTimePicker2.prototype.createDateObj = function(val) {
      return val instanceof Date ? val : null;
    };
    DateTimePicker2.prototype.getDateObject = function(text) {
      if (!this.isNullOrEmpty(text)) {
        var dateValue = this.createDateObj(text);
        var value = this.valueWithMinutes;
        var status_1 = !isNullOrUndefined(value);
        if (this.checkDateValue(dateValue)) {
          var date = status_1 ? value.getDate() : DAY2;
          var month2 = status_1 ? value.getMonth() : MONTH4;
          var year = status_1 ? value.getFullYear() : YEAR4;
          var hour = status_1 ? value.getHours() : HOUR;
          var minute = status_1 ? value.getMinutes() : MINUTE;
          var second = status_1 ? value.getSeconds() : SECOND;
          var millisecond = status_1 ? value.getMilliseconds() : MILLISECOND;
          if (!this.scrollInvoked) {
            return new Date(year, month2, date, hour, minute, second, millisecond);
          } else {
            this.scrollInvoked = false;
            return new Date(year, month2, date, dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds(), dateValue.getMilliseconds());
          }
        }
      }
      return null;
    };
    DateTimePicker2.prototype.findNextTimeElement = function(event) {
      var textVal = this.inputElement.value;
      var value = isNullOrUndefined(this.valueWithMinutes) ? this.createDateObj(textVal) : this.getDateObject(this.valueWithMinutes);
      var dateTimeVal = null;
      var listCount = this.liCollections.length;
      if (!isNullOrUndefined(this.activeIndex) || !isNullOrUndefined(this.checkDateValue(value))) {
        if (event.action === "home") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[0]));
          this.activeIndex = 0;
        } else if (event.action === "end") {
          dateTimeVal = +this.createDateObj(new Date(this.timeCollections[this.timeCollections.length - 1]));
          this.activeIndex = this.timeCollections.length - 1;
        } else {
          if (event.action === "down") {
            for (var i = 0; i < listCount; i++) {
              if (+value < this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          } else {
            for (var i = listCount - 1; i >= 0; i--) {
              if (+value > this.timeCollections[i]) {
                dateTimeVal = +this.createDateObj(new Date(this.timeCollections[i]));
                this.activeIndex = i;
                break;
              }
            }
          }
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(isNullOrUndefined(dateTimeVal) ? null : new Date(dateTimeVal));
      }
    };
    DateTimePicker2.prototype.setTimeValue = function(date, value) {
      var dateString;
      var time;
      var val = this.validateMinMaxRange(value);
      var newval = this.createDateObj(val);
      if (this.getFormattedValue(newval) !== (!isNullOrUndefined(this.value) ? this.getFormattedValue(this.value) : null)) {
        this.valueWithMinutes = isNullOrUndefined(newval) ? null : newval;
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      } else {
        if (this.strictMode) {
          date = newval;
        }
        this.valueWithMinutes = this.checkDateValue(date);
        time = /* @__PURE__ */ new Date(+this.valueWithMinutes);
      }
      if (this.calendarMode === "Gregorian") {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd"
        });
      } else {
        dateString = this.globalize.formatDate(time, {
          format: !isNullOrUndefined(this.formatString) ? this.formatString : this.cldrDateTimeFormat(),
          type: "dateTime",
          skeleton: "yMd",
          calendar: "islamic"
        });
      }
      if (!this.strictMode && isNullOrUndefined(time)) {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      } else {
        Input.setValue(dateString, this.inputElement, this.floatLabelType, this.showClearButton);
      }
      return time;
    };
    DateTimePicker2.prototype.timeElementValue = function(value) {
      if (!isNullOrUndefined(this.checkDateValue(value)) && !this.isNullOrEmpty(value)) {
        var date = value instanceof Date ? value : this.getDateObject(value);
        return this.setTimeValue(date, value);
      }
      return null;
    };
    DateTimePicker2.prototype.timeKeyHandler = function(event) {
      if (isNullOrUndefined(this.step) || this.step <= 0) {
        return;
      }
      var listCount = this.timeCollections.length;
      if (isNullOrUndefined(this.getTimeActiveElement()) || this.getTimeActiveElement().length === 0) {
        if (this.liCollections.length > 0) {
          if (isNullOrUndefined(this.value) && isNullOrUndefined(this.activeIndex)) {
            this.activeIndex = 0;
            this.selectedElement = this.liCollections[0];
            this.timeElementValue(new Date(this.timeCollections[0]));
          } else {
            this.findNextTimeElement(event);
          }
        }
      } else {
        var nextItemValue = void 0;
        if (event.keyCode >= 37 && event.keyCode <= 40) {
          var index = event.keyCode === 40 || event.keyCode === 39 ? ++this.activeIndex : --this.activeIndex;
          this.activeIndex = index = this.activeIndex === listCount ? 0 : this.activeIndex;
          this.activeIndex = index = this.activeIndex < 0 ? listCount - 1 : this.activeIndex;
          nextItemValue = isNullOrUndefined(this.timeCollections[index]) ? this.timeCollections[0] : this.timeCollections[index];
        } else if (event.action === "home") {
          this.activeIndex = 0;
          nextItemValue = this.timeCollections[0];
        } else if (event.action === "end") {
          this.activeIndex = listCount - 1;
          nextItemValue = this.timeCollections[listCount - 1];
        }
        this.selectedElement = this.liCollections[this.activeIndex];
        this.timeElementValue(new Date(nextItemValue));
      }
      this.isNavigate = true;
      this.setTimeHover(this.selectedElement, NAVIGATION2);
      this.setTimeActiveDescendant();
      if (this.isTimePopupOpen() && this.selectedElement !== null && (!event || event.type !== "click")) {
        this.setTimeScrollPosition();
      }
    };
    DateTimePicker2.prototype.timeKeyActionHandle = function(event) {
      if (this.enabled) {
        if (event.action !== "right" && event.action !== "left" && event.action !== "tab") {
          event.preventDefault();
        }
        switch (event.action) {
          case "up":
          case "down":
          case "home":
          case "end":
            this.timeKeyHandler(event);
            break;
          case "enter":
            if (this.isNavigate) {
              this.selectedElement = this.liCollections[this.activeIndex];
              this.valueWithMinutes = new Date(this.timeCollections[this.activeIndex]);
              this.setInputValue("time");
              if (+this.previousDateTime !== +this.value) {
                this.changedArgs.value = this.value;
                this.addTimeSelection();
                this.previousDateTime = this.value;
              }
            } else {
              this.updateValue(event);
            }
            this.hide(event);
            addClass([this.inputWrapper.container], INPUTFOCUS3);
            this.isNavigate = false;
            event.stopPropagation();
            break;
          case "escape":
            this.hide(event);
            break;
          default:
            this.isNavigate = false;
            break;
        }
      }
    };
    DateTimePicker2.prototype.inputKeyAction = function(event) {
      switch (event.action) {
        case "altDownArrow":
          this.strictModeUpdate();
          this.updateInput();
          this.toggle(event);
          break;
      }
    };
    DateTimePicker2.prototype.onPropertyChanged = function(newProp, oldProp) {
      for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {
        var prop = _a[_i];
        switch (prop) {
          case "value":
            this.isDynamicValueChanged = true;
            this.invalidValueString = null;
            this.checkInvalidValue(newProp.value);
            newProp.value = this.value;
            newProp.value = this.validateValue(newProp.value);
            Input.setValue(this.getFormattedValue(newProp.value), this.inputElement, this.floatLabelType, this.showClearButton);
            this.valueWithMinutes = newProp.value;
            this.setProperties({ value: newProp.value }, true);
            if (this.popupObj) {
              this.popupUpdate();
            }
            this.previousDateTime = new Date(this.inputElement.value);
            this.updateInput();
            this.changeTrigger(null);
            this.preventChange = this.isAngular && this.preventChange ? !this.preventChange : this.preventChange;
            if (this.enableMask && this.value) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
            }
            break;
          case "min":
          case "max":
            this.getProperty(newProp, prop);
            this.updateInput();
            break;
          case "enableRtl":
            Input.setEnableRtl(this.enableRtl, [this.inputWrapper.container]);
            break;
          case "cssClass":
            if (!isNullOrUndefined(oldProp.cssClass)) {
              oldProp.cssClass = oldProp.cssClass.replace(/\s+/g, " ").trim();
            }
            if (!isNullOrUndefined(newProp.cssClass)) {
              newProp.cssClass = newProp.cssClass.replace(/\s+/g, " ").trim();
            }
            Input.setCssClass(newProp.cssClass, [this.inputWrapper.container], oldProp.cssClass);
            if (this.dateTimeWrapper) {
              Input.setCssClass(newProp.cssClass, [this.dateTimeWrapper], oldProp.cssClass);
            }
            break;
          case "locale":
            this.globalize = new Internationalization(this.locale);
            this.l10n.setLocale(this.locale);
            this.setProperties({ placeholder: this.l10n.getConstant("placeholder") }, true);
            Input.setPlaceholder(this.l10n.getConstant("placeholder"), this.inputElement);
            this.dateTimeFormat = this.cldrDateTimeFormat();
            _super.prototype.updateInput.call(this);
            break;
          case "htmlAttributes":
            this.updateHtmlAttributeToElement();
            this.updateHtmlAttributeToWrapper();
            this.checkAttributes(true);
            break;
          case "format":
            this.setProperties({ format: newProp.format }, true);
            this.checkFormat();
            this.dateTimeFormat = this.formatString;
            this.setValue();
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              if (!this.value) {
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          case "placeholder":
            Input.setPlaceholder(newProp.placeholder, this.inputElement);
            this.inputElement.setAttribute("aria-placeholder", newProp.placeholder);
            break;
          case "enabled":
            Input.setEnabled(this.enabled, this.inputElement);
            if (!this.enabled) {
              this.inputElement.tabIndex = -1;
            }
            break;
          case "strictMode":
            this.invalidValueString = null;
            this.updateInput();
            break;
          case "width":
            this.setWidth(newProp.width);
            break;
          case "readonly":
            Input.setReadonly(this.readonly, this.inputElement);
            break;
          case "floatLabelType":
            this.floatLabelType = newProp.floatLabelType;
            Input.removeFloating(this.inputWrapper);
            Input.addFloating(this.inputElement, this.floatLabelType, this.placeholder);
            break;
          case "scrollTo":
            if (this.checkDateValue(new Date(this.checkValue(newProp.scrollTo)))) {
              if (this.dateTimeWrapper) {
                this.setScrollTo();
              }
              this.setProperties({ scrollTo: this.checkDateValue(new Date(this.checkValue(newProp.scrollTo))) }, true);
            } else {
              this.setProperties({ scrollTo: null }, true);
            }
            break;
          case "enableMask":
            if (this.enableMask) {
              this.notify("createMask", {
                module: "MaskedDateTime"
              });
              Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
            } else {
              if (this.inputElement.value === this.maskedDateValue) {
                this.maskedDateValue = "";
                Input.setValue(this.maskedDateValue, this.inputElement, this.floatLabelType, this.showClearButton);
              }
            }
            break;
          default:
            _super.prototype.onPropertyChanged.call(this, newProp, oldProp);
            break;
        }
        if (!this.isDynamicValueChanged) {
          this.hide(null);
        }
        this.isDynamicValueChanged = false;
      }
    };
    DateTimePicker2.prototype.getModuleName = function() {
      return "datetimepicker";
    };
    DateTimePicker2.prototype.restoreValue = function() {
      this.previousDateTime = this.previousDate;
      this.currentDate = this.value ? this.value : /* @__PURE__ */ new Date();
      this.valueWithMinutes = this.value;
      this.previousDate = this.value;
      this.previousElementValue = this.previousElementValue = isNullOrUndefined(this.inputValueCopy) ? "" : this.getFormattedValue(this.inputValueCopy);
    };
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "timeFormat", void 0);
    __decorate33([
      Property(30)
    ], DateTimePicker2.prototype, "step", void 0);
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "scrollTo", void 0);
    __decorate33([
      Property(1e3)
    ], DateTimePicker2.prototype, "zIndex", void 0);
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "value", void 0);
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "keyConfigs", void 0);
    __decorate33([
      Property({})
    ], DateTimePicker2.prototype, "htmlAttributes", void 0);
    __decorate33([
      Property(false)
    ], DateTimePicker2.prototype, "enablePersistence", void 0);
    __decorate33([
      Property(true)
    ], DateTimePicker2.prototype, "allowEdit", void 0);
    __decorate33([
      Property(false)
    ], DateTimePicker2.prototype, "isMultiSelection", void 0);
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "values", void 0);
    __decorate33([
      Property(true)
    ], DateTimePicker2.prototype, "showClearButton", void 0);
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "placeholder", void 0);
    __decorate33([
      Property(false)
    ], DateTimePicker2.prototype, "strictMode", void 0);
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "serverTimezoneOffset", void 0);
    __decorate33([
      Property(new Date(1900, 0, 1))
    ], DateTimePicker2.prototype, "min", void 0);
    __decorate33([
      Property(new Date(2099, 11, 31))
    ], DateTimePicker2.prototype, "max", void 0);
    __decorate33([
      Property(null)
    ], DateTimePicker2.prototype, "firstDayOfWeek", void 0);
    __decorate33([
      Property("Gregorian")
    ], DateTimePicker2.prototype, "calendarMode", void 0);
    __decorate33([
      Property("Month")
    ], DateTimePicker2.prototype, "start", void 0);
    __decorate33([
      Property("Month")
    ], DateTimePicker2.prototype, "depth", void 0);
    __decorate33([
      Property(false)
    ], DateTimePicker2.prototype, "weekNumber", void 0);
    __decorate33([
      Property(true)
    ], DateTimePicker2.prototype, "showTodayButton", void 0);
    __decorate33([
      Property("Short")
    ], DateTimePicker2.prototype, "dayHeaderFormat", void 0);
    __decorate33([
      Property(false)
    ], DateTimePicker2.prototype, "openOnFocus", void 0);
    __decorate33([
      Property(false)
    ], DateTimePicker2.prototype, "enableMask", void 0);
    __decorate33([
      Property({ day: "day", month: "month", year: "year", hour: "hour", minute: "minute", second: "second", dayOfTheWeek: "day of the week" })
    ], DateTimePicker2.prototype, "maskPlaceholder", void 0);
    __decorate33([
      Event2()
    ], DateTimePicker2.prototype, "open", void 0);
    __decorate33([
      Event2()
    ], DateTimePicker2.prototype, "close", void 0);
    __decorate33([
      Event2()
    ], DateTimePicker2.prototype, "cleared", void 0);
    __decorate33([
      Event2()
    ], DateTimePicker2.prototype, "blur", void 0);
    __decorate33([
      Event2()
    ], DateTimePicker2.prototype, "focus", void 0);
    __decorate33([
      Event2()
    ], DateTimePicker2.prototype, "created", void 0);
    __decorate33([
      Event2()
    ], DateTimePicker2.prototype, "destroyed", void 0);
    DateTimePicker2 = __decorate33([
      NotifyPropertyChanges
    ], DateTimePicker2);
    return DateTimePicker2;
  }(DatePicker)
);

// node_modules/@syncfusion/ej2-calendars/src/maskbase/masked-date-time.js
var ARROWLEFT = "ArrowLeft";
var ARROWRIGHT = "ArrowRight";
var ARROWUP = "ArrowUp";
var ARROWDOWN = "ArrowDown";
var TAB = "Tab";
var SHIFTTAB = "shiftTab";
var END = "End";
var HOME = "Home";
var MaskedDateTime = (
  /** @class */
  function() {
    function MaskedDateTime2(parent) {
      this.mask = "";
      this.defaultConstant = {
        day: "day",
        month: "month",
        year: "year",
        hour: "hour",
        minute: "minute",
        second: "second",
        dayOfTheWeek: "day of the week"
      };
      this.hiddenMask = "";
      this.validCharacters = "dMyhmHfasz";
      this.isDayPart = false;
      this.isMonthPart = false;
      this.isYearPart = false;
      this.isHourPart = false;
      this.isMinutePart = false;
      this.isSecondsPart = false;
      this.isMilliSecondsPart = false;
      this.monthCharacter = "";
      this.periodCharacter = "";
      this.isHiddenMask = false;
      this.isComplete = false;
      this.isNavigate = false;
      this.formatRegex = /EEEEE|EEEE|EEE|EE|E|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|HH|H|hh|h|mm|m|fff|ff|f|aa|a|ss|s|zzzz|zzz|zz|z|'[^']*'|'[^']*'/g;
      this.isDeletion = false;
      this.isShortYear = false;
      this.isDeleteKey = false;
      this.isDateZero = false;
      this.isMonthZero = false;
      this.isYearZero = false;
      this.dayTypeCount = 0;
      this.monthTypeCount = 0;
      this.hourTypeCount = 0;
      this.minuteTypeCount = 0;
      this.secondTypeCount = 0;
      this.parent = parent;
      this.dateformat = this.getCulturedFormat();
      this.maskDateValue = this.parent.value != null ? /* @__PURE__ */ new Date(+this.parent.value) : /* @__PURE__ */ new Date();
      this.maskDateValue.setMonth(0);
      this.maskDateValue.setHours(0);
      this.maskDateValue.setMinutes(0);
      this.maskDateValue.setSeconds(0);
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.removeEventListener();
      this.addEventListener();
    }
    MaskedDateTime2.prototype.getModuleName = function() {
      return "MaskedDateTime";
    };
    MaskedDateTime2.prototype.addEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.on("createMask", this.createMask, this);
      this.parent.on("setMaskSelection", this.validCharacterCheck, this);
      this.parent.on("inputHandler", this.maskInputHandler, this);
      this.parent.on("keyDownHandler", this.maskKeydownHandler, this);
      this.parent.on("clearHandler", this.clearHandler, this);
    };
    MaskedDateTime2.prototype.removeEventListener = function() {
      if (this.parent.isDestroyed) {
        return;
      }
      this.parent.off("createMask", this.createMask);
      this.parent.off("setMaskSelection", this.validCharacterCheck);
      this.parent.off("inputHandler", this.maskInputHandler);
      this.parent.off("keyDownHandler", this.maskKeydownHandler);
      this.parent.off("clearHandler", this.clearHandler);
    };
    MaskedDateTime2.prototype.createMask = function(dateformat) {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.dateformat = this.getCulturedFormat();
      if (this.parent.maskPlaceholder.day)
        this.defaultConstant["day"] = this.parent.maskPlaceholder.day;
      if (this.parent.maskPlaceholder.month)
        this.defaultConstant["month"] = this.parent.maskPlaceholder.month;
      if (this.parent.maskPlaceholder.year)
        this.defaultConstant["year"] = this.parent.maskPlaceholder.year;
      if (this.parent.maskPlaceholder.hour)
        this.defaultConstant["hour"] = this.parent.maskPlaceholder.hour;
      if (this.parent.maskPlaceholder.minute)
        this.defaultConstant["minute"] = this.parent.maskPlaceholder.minute;
      if (this.parent.maskPlaceholder.second)
        this.defaultConstant["second"] = this.parent.maskPlaceholder.second;
      if (this.parent.maskPlaceholder.dayOfTheWeek)
        this.defaultConstant["dayOfTheWeek"] = this.parent.maskPlaceholder.dayOfTheWeek.toString();
      this.getCUltureMaskFormat();
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.mask = this.previousValue = inputValue;
      this.parent.maskedDateValue = this.mask;
      if (this.parent.value) {
        this.setDynamicValue();
      }
    };
    MaskedDateTime2.prototype.getCUltureMaskFormat = function() {
      this.l10n = new L10n(this.parent.moduleName, this.defaultConstant, this.parent.locale);
      this.objectString = Object.keys(this.defaultConstant);
      for (var i = 0; i < this.objectString.length; i++) {
        this.defaultConstant[this.objectString[i].toString()] = this.l10n.getConstant(this.objectString[i].toString());
      }
    };
    MaskedDateTime2.prototype.validCharacterCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      for (var i = start, j = start - 1; i < this.hiddenMask.length || j >= 0; i++, j--) {
        if (i < this.hiddenMask.length && this.validCharacters.indexOf(this.hiddenMask[i]) !== -1) {
          this.setSelection(this.hiddenMask[i]);
          return;
        }
        if (j >= 0 && this.validCharacters.indexOf(this.hiddenMask[j]) !== -1) {
          this.setSelection(this.hiddenMask[j]);
          return;
        }
      }
    };
    MaskedDateTime2.prototype.setDynamicValue = function() {
      this.maskDateValue = this.parent.value;
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = true;
      this.updateValue();
    };
    MaskedDateTime2.prototype.setSelection = function(validChar) {
      var start = -1;
      var end = 0;
      for (var i = 0; i < this.hiddenMask.length; i++) {
        if (this.hiddenMask[i] === validChar) {
          end = i + 1;
          if (start === -1) {
            start = i;
          }
        }
      }
      if (start < 0) {
        start = 0;
      }
      this.parent.inputElement.setSelectionRange(start, end);
    };
    MaskedDateTime2.prototype.maskKeydownHandler = function(args) {
      if (args.e.key === "Delete") {
        this.isDeleteKey = true;
        return;
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWLEFT || args.e.key === ARROWRIGHT || args.e.key === SHIFTTAB || args.e.key === TAB || args.e.action === SHIFTTAB || args.e.key === END || args.e.key === HOME)) {
        var start = this.parent.inputElement.selectionStart;
        var end = this.parent.inputElement.selectionEnd;
        var length_1 = this.parent.inputElement.value.length;
        if (start == 0 && end == length_1 && (args.e.key === TAB || args.e.action === SHIFTTAB)) {
          var index = args.e.action === SHIFTTAB ? end : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = index;
        }
        if (args.e.key === END || args.e.key === HOME) {
          var range = args.e.key === END ? length_1 : 0;
          this.parent.inputElement.selectionStart = this.parent.inputElement.selectionEnd = range;
        }
        this.navigateSelection(args.e.key === ARROWLEFT || args.e.action === SHIFTTAB || args.e.key === END ? true : false);
      }
      if (!args.e.altKey && !args.e.ctrlKey && (args.e.key === ARROWUP || args.e.key === ARROWDOWN)) {
        var start = this.parent.inputElement.selectionStart;
        this.dateAlteration(args.e.key === ARROWDOWN ? true : false);
        var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = true;
        this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
        this.isHiddenMask = false;
        this.previousHiddenMask = this.hiddenMask;
        this.previousValue = inputValue;
        this.parent.inputElement.value = inputValue;
        this.parent.inputElement.selectionStart = start;
        this.validCharacterCheck();
      }
    };
    MaskedDateTime2.prototype.differenceCheck = function() {
      var start = this.parent.inputElement.selectionStart;
      var inputValue = this.parent.inputElement.value;
      var previousVal = this.previousValue.substring(0, start + this.previousValue.length - inputValue.length);
      var newVal = inputValue.substring(0, start);
      var newDateValue = /* @__PURE__ */ new Date(+this.maskDateValue);
      var maxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
      if (previousVal.indexOf(newVal) === 0 && (newVal.length === 0 || this.previousHiddenMask[newVal.length - 1] !== this.previousHiddenMask[newVal.length])) {
        for (var i = newVal.length; i < previousVal.length; i++) {
          if (this.previousHiddenMask[i] !== "" && this.validCharacters.indexOf(this.previousHiddenMask[i]) >= 0) {
            this.isDeletion = this.handleDeletion(this.previousHiddenMask[i], false);
          }
        }
        if (this.isDeletion) {
          return;
        }
      }
      switch (this.previousHiddenMask[start - 1]) {
        case "d":
          var date = (this.isDayPart && newDateValue.getDate().toString().length < 2 ? newDateValue.getDate() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.isDateZero = newVal[start - 1] == "0";
          if (isNaN(date)) {
            return;
          }
          for (var i = 0; date > maxDate; i++) {
            date = parseInt(date.toString().slice(1), 10);
          }
          if (date >= 1) {
            newDateValue.setDate(date);
            this.isNavigate = date.toString().length === 2;
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            if (newDateValue.getMonth() !== this.maskDateValue.getMonth()) {
              return;
            }
            this.isDayPart = true;
            this.dayTypeCount = this.dayTypeCount + 1;
          } else {
            this.isDayPart = false;
            this.dayTypeCount = this.isDateZero ? this.dayTypeCount + 1 : this.dayTypeCount;
          }
          break;
        case "M":
          var month2 = void 0;
          if (newDateValue.getMonth().toString().length < 2) {
            month2 = (this.isMonthPart ? (newDateValue.getMonth() + 1) * 10 : 0) + parseInt(newVal[start - 1], 10);
          } else {
            month2 = parseInt(newVal[start - 1], 10);
          }
          this.isMonthZero = newVal[start - 1] == "0";
          if (!isNaN(month2)) {
            while (month2 > 12) {
              month2 = parseInt(month2.toString().slice(1), 10);
            }
            if (month2 >= 1) {
              newDateValue.setMonth(month2 - 1);
              this.isNavigate = month2.toString().length === 2;
              if (newDateValue.getMonth() !== month2 - 1) {
                newDateValue.setDate(1);
                newDateValue.setMonth(month2 - 1);
              }
              if (this.isDayPart) {
                var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
                var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
                if (this.previousDate.getDate() == previousMaxDate && currentMaxDate <= previousMaxDate) {
                  newDateValue.setDate(currentMaxDate);
                }
              }
              this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
              this.isMonthPart = true;
              this.monthTypeCount = this.monthTypeCount + 1;
            } else {
              newDateValue.setMonth(0);
              this.isMonthPart = false;
              this.monthTypeCount = this.isMonthZero ? this.monthTypeCount + 1 : this.monthTypeCount;
            }
          } else {
            var monthString = this.getCulturedValue("months[stand-alone].wide");
            var monthValue = Object.keys(monthString);
            this.monthCharacter += newVal[start - 1].toLowerCase();
            while (this.monthCharacter.length > 0) {
              var i = 1;
              for (var _i = 0, monthValue_1 = monthValue; _i < monthValue_1.length; _i++) {
                var months = monthValue_1[_i];
                if (monthString[i].toLowerCase().indexOf(this.monthCharacter) === 0) {
                  newDateValue.setMonth(i - 1);
                  this.isMonthPart = true;
                  this.maskDateValue = newDateValue;
                  return;
                }
                i++;
              }
              this.monthCharacter = this.monthCharacter.substring(1, this.monthCharacter.length);
            }
          }
          break;
        case "y":
          var year = (this.isYearPart && (newDateValue.getFullYear().toString().length < 4 && !this.isShortYear) ? newDateValue.getFullYear() * 10 : 0) + parseInt(newVal[start - 1], 10);
          this.isShortYear = false;
          this.isYearZero = newVal[start - 1] == "0";
          if (isNaN(year)) {
            return;
          }
          while (year > 9999) {
            year = parseInt(year.toString().slice(1), 10);
          }
          if (year < 1) {
            this.isYearPart = false;
          } else {
            newDateValue.setFullYear(year);
            if (year.toString().length === 4) {
              this.isNavigate = true;
            }
            this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
            this.isYearPart = true;
          }
          break;
        case "h":
          this.hour = (this.isHourPart && (newDateValue.getHours() % 12 || 12).toString().length < 2 ? (newDateValue.getHours() % 12 || 12) * 10 : 0) + parseInt(newVal[start - 1], 10);
          if (isNaN(this.hour)) {
            return;
          }
          while (this.hour > 12) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(Math.floor(newDateValue.getHours() / 12) * 12 + this.hour % 12);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount + 1;
          break;
        case "H":
          this.hour = (this.isHourPart && newDateValue.getHours().toString().length < 2 ? newDateValue.getHours() * 10 : 0) + parseInt(newVal[start - 1], 10);
          if (isNaN(this.hour)) {
            return;
          }
          for (var i = 0; this.hour > 23; i++) {
            this.hour = parseInt(this.hour.toString().slice(1), 10);
          }
          newDateValue.setHours(this.hour);
          this.isNavigate = this.hour.toString().length === 2;
          this.isHourPart = true;
          this.hourTypeCount = this.hourTypeCount + 1;
          break;
        case "m":
          var minutes = (this.isMinutePart && newDateValue.getMinutes().toString().length < 2 ? newDateValue.getMinutes() * 10 : 0) + parseInt(newVal[start - 1], 10);
          if (isNaN(minutes)) {
            return;
          }
          for (var i = 0; minutes > 59; i++) {
            minutes = parseInt(minutes.toString().slice(1), 10);
          }
          newDateValue.setMinutes(minutes);
          this.isNavigate = minutes.toString().length === 2;
          this.isMinutePart = true;
          this.minuteTypeCount = this.minuteTypeCount + 1;
          break;
        case "s":
          var seconds = (this.isSecondsPart && newDateValue.getSeconds().toString().length < 2 ? newDateValue.getSeconds() * 10 : 0) + parseInt(newVal[start - 1], 10);
          if (isNaN(seconds)) {
            return;
          }
          for (var i = 0; seconds > 59; i++) {
            seconds = parseInt(seconds.toString().slice(1), 10);
          }
          newDateValue.setSeconds(seconds);
          this.isNavigate = seconds.toString().length === 2;
          this.isSecondsPart = true;
          this.secondTypeCount = this.secondTypeCount + 1;
          break;
        case "a":
          this.periodCharacter += newVal[start - 1].toLowerCase();
          var periodString = this.getCulturedValue("dayPeriods.format.wide");
          var periodkeys = Object.keys(periodString);
          for (var i = 0; this.periodCharacter.length > 0; i++) {
            if (periodString[periodkeys[0]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() >= 12 || periodString[periodkeys[1]].toLowerCase().indexOf(this.periodCharacter) === 0 && newDateValue.getHours() < 12) {
              newDateValue.setHours((newDateValue.getHours() + 12) % 24);
              this.maskDateValue = newDateValue;
            }
            this.periodCharacter = this.periodCharacter.substring(1, this.periodCharacter.length);
          }
          break;
        default:
          break;
      }
      this.maskDateValue = newDateValue;
    };
    MaskedDateTime2.prototype.formatCheck = function() {
      var proxy2 = this;
      function formatValueSpecifier(formattext) {
        var isSymbol;
        var result;
        var daysAbbreviated = proxy2.getCulturedValue("days[stand-alone].abbreviated");
        var dayKeyAbbreviated = Object.keys(daysAbbreviated);
        var daysWide = proxy2.getCulturedValue("days[stand-alone].wide");
        var dayKeyWide = Object.keys(daysWide);
        var daysNarrow = proxy2.getCulturedValue("days[stand-alone].narrow");
        var dayKeyNarrow = Object.keys(daysNarrow);
        var monthAbbreviated = proxy2.getCulturedValue("months[stand-alone].abbreviated");
        var monthWide = proxy2.getCulturedValue("months[stand-alone].wide");
        var periodString = proxy2.getCulturedValue("dayPeriods.format.wide");
        var periodkeys = Object.keys(periodString);
        var milliseconds;
        var dateOptions;
        switch (formattext) {
          case "ddd":
          case "dddd":
          case "d":
            result = proxy2.isDayPart ? proxy2.maskDateValue.getDate().toString() : proxy2.defaultConstant["day"].toString();
            result = proxy2.zeroCheck(proxy2.isDateZero, proxy2.isDayPart, result);
            break;
          case "dd":
            result = proxy2.isDayPart ? proxy2.roundOff(proxy2.maskDateValue.getDate(), 2) : proxy2.defaultConstant["day"].toString();
            result = proxy2.zeroCheck(proxy2.isDateZero, proxy2.isDayPart, result);
            if (proxy2.dayTypeCount == 2) {
              proxy2.isNavigate = true;
              proxy2.dayTypeCount = 0;
            }
            break;
          case "E":
          case "EE":
          case "EEE":
            result = proxy2.isDayPart && proxy2.isMonthPart && proxy2.isYearPart ? daysAbbreviated[dayKeyAbbreviated[proxy2.maskDateValue.getDay()]].toString() : proxy2.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEE":
            result = proxy2.isDayPart && proxy2.isMonthPart && proxy2.isYearPart ? daysWide[dayKeyWide[proxy2.maskDateValue.getDay()]].toString() : proxy2.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "EEEEE":
            result = proxy2.isDayPart && proxy2.isMonthPart && proxy2.isYearPart ? daysNarrow[dayKeyNarrow[proxy2.maskDateValue.getDay()]].toString() : proxy2.defaultConstant["dayOfTheWeek"].toString();
            break;
          case "M":
            result = proxy2.isMonthPart ? (proxy2.maskDateValue.getMonth() + 1).toString() : proxy2.defaultConstant["month"].toString();
            result = proxy2.zeroCheck(proxy2.isMonthZero, proxy2.isMonthPart, result);
            break;
          case "MM":
            result = proxy2.isMonthPart ? proxy2.roundOff(proxy2.maskDateValue.getMonth() + 1, 2) : proxy2.defaultConstant["month"].toString();
            result = proxy2.zeroCheck(proxy2.isMonthZero, proxy2.isMonthPart, result);
            if (proxy2.monthTypeCount == 2) {
              proxy2.isNavigate = true;
              proxy2.monthTypeCount = 0;
            }
            break;
          case "MMM":
            result = proxy2.isMonthPart ? monthAbbreviated[proxy2.maskDateValue.getMonth() + 1] : proxy2.defaultConstant["month"].toString();
            break;
          case "MMMM":
            result = proxy2.isMonthPart ? monthWide[proxy2.maskDateValue.getMonth() + 1] : proxy2.defaultConstant["month"].toString();
            break;
          case "yy":
            result = proxy2.isYearPart ? proxy2.roundOff(proxy2.maskDateValue.getFullYear() % 100, 2) : proxy2.defaultConstant["year"].toString();
            result = proxy2.zeroCheck(proxy2.isYearZero, proxy2.isYearPart, result);
            if (proxy2.isYearPart) {
              proxy2.isNavigate = proxy2.isShortYear = (proxy2.maskDateValue.getFullYear() % 100).toString().length === 2;
            }
            break;
          case "y":
          case "yyyy":
            result = proxy2.isYearPart ? proxy2.roundOff(proxy2.maskDateValue.getFullYear(), 4) : proxy2.defaultConstant["year"].toString();
            result = proxy2.zeroCheck(proxy2.isYearZero, proxy2.isYearPart, result);
            break;
          case "h":
            result = proxy2.isHourPart ? (proxy2.maskDateValue.getHours() % 12 || 12).toString() : proxy2.defaultConstant["hour"].toString();
            break;
          case "hh":
            result = proxy2.isHourPart ? proxy2.roundOff(proxy2.maskDateValue.getHours() % 12 || 12, 2) : proxy2.defaultConstant["hour"].toString();
            if (proxy2.hourTypeCount == 2) {
              proxy2.isNavigate = true;
              proxy2.hourTypeCount = 0;
            }
            break;
          case "H":
            result = proxy2.isHourPart ? proxy2.maskDateValue.getHours().toString() : proxy2.defaultConstant["hour"].toString();
            break;
          case "HH":
            result = proxy2.isHourPart ? proxy2.roundOff(proxy2.maskDateValue.getHours(), 2) : proxy2.defaultConstant["hour"].toString();
            if (proxy2.hourTypeCount == 2) {
              proxy2.isNavigate = true;
              proxy2.hourTypeCount = 0;
            }
            break;
          case "m":
            result = proxy2.isMinutePart ? proxy2.maskDateValue.getMinutes().toString() : proxy2.defaultConstant["minute"].toString();
            break;
          case "mm":
            result = proxy2.isMinutePart ? proxy2.roundOff(proxy2.maskDateValue.getMinutes(), 2) : proxy2.defaultConstant["minute"].toString();
            if (proxy2.minuteTypeCount == 2) {
              proxy2.isNavigate = true;
              proxy2.minuteTypeCount = 0;
            }
            break;
          case "s":
            result = proxy2.isSecondsPart ? proxy2.maskDateValue.getSeconds().toString() : proxy2.defaultConstant["second"].toString();
            break;
          case "ss":
            result = proxy2.isSecondsPart ? proxy2.roundOff(proxy2.maskDateValue.getSeconds(), 2) : proxy2.defaultConstant["second"].toString();
            if (proxy2.secondTypeCount == 2) {
              proxy2.isNavigate = true;
              proxy2.secondTypeCount = 0;
            }
            break;
          case "f":
            result = Math.floor(proxy2.maskDateValue.getMilliseconds() / 100).toString();
            break;
          case "ff":
            milliseconds = proxy2.maskDateValue.getMilliseconds();
            if (proxy2.maskDateValue.getMilliseconds() > 99) {
              milliseconds = Math.floor(proxy2.maskDateValue.getMilliseconds() / 10);
            }
            result = proxy2.roundOff(milliseconds, 2);
            break;
          case "fff":
            result = proxy2.roundOff(proxy2.maskDateValue.getMilliseconds(), 3);
            break;
          case "a":
          case "aa":
            result = proxy2.maskDateValue.getHours() < 12 ? periodString[periodkeys[0]] : periodString[periodkeys[1]];
            break;
          case "z":
          case "zz":
          case "zzz":
          case "zzzz":
            dateOptions = {
              format: formattext,
              type: "dateTime",
              skeleton: "yMd",
              calendar: proxy2.parent.calendarMode
            };
            result = proxy2.parent.globalize.formatDate(proxy2.maskDateValue, dateOptions);
            break;
        }
        result = result !== void 0 ? result : formattext.slice(1, formattext.length - 1);
        if (proxy2.isHiddenMask) {
          var hiddenChar = "";
          for (var i = 0; i < result.length; i++) {
            hiddenChar += formattext[0];
          }
          return hiddenChar;
        } else {
          return result;
        }
      }
      return formatValueSpecifier;
    };
    MaskedDateTime2.prototype.maskInputHandler = function() {
      var start = this.parent.inputElement.selectionStart;
      var selectionChar = this.previousHiddenMask[start - 1];
      var inputValue;
      this.differenceCheck();
      inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isDateZero = this.isMonthZero = this.isYearZero = false;
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.inputElement.value = inputValue;
      this.parent.inputElement.selectionStart = start;
      this.validCharacterCheck();
      if ((this.isNavigate || this.isDeletion) && !this.isDeleteKey) {
        var isbackward = this.isNavigate ? false : true;
        this.isNavigate = this.isDeletion = false;
        this.navigateSelection(isbackward);
      }
      this.isDeleteKey = false;
    };
    MaskedDateTime2.prototype.navigateSelection = function(isbackward) {
      var start = this.parent.inputElement.selectionStart;
      var end = this.parent.inputElement.selectionEnd;
      var formatIndex = isbackward ? start - 1 : end + 1;
      while (formatIndex < this.hiddenMask.length && formatIndex >= 0) {
        if (this.validCharacters.indexOf(this.hiddenMask[formatIndex]) >= 0) {
          this.setSelection(this.hiddenMask[formatIndex]);
          break;
        }
        formatIndex = formatIndex + (isbackward ? -1 : 1);
      }
    };
    MaskedDateTime2.prototype.roundOff = function(val, count) {
      var valueText = val.toString();
      var length = count - valueText.length;
      var result = "";
      for (var i = 0; i < length; i++) {
        result += "0";
      }
      return result + valueText;
    };
    MaskedDateTime2.prototype.zeroCheck = function(isZero, isDayPart, resultValue) {
      var result = resultValue;
      if (isZero && !isDayPart) {
        result = "0";
      }
      return result;
    };
    MaskedDateTime2.prototype.handleDeletion = function(format, isSegment) {
      switch (format) {
        case "d":
          this.isDayPart = isSegment;
          break;
        case "M":
          this.isMonthPart = isSegment;
          if (!isSegment) {
            this.maskDateValue.setMonth(0);
            this.monthCharacter = "";
          }
          break;
        case "y":
          this.isYearPart = isSegment;
          break;
        case "H":
        case "h":
          this.isHourPart = isSegment;
          if (!isSegment) {
            this.periodCharacter = "";
          }
          break;
        case "m":
          this.isMinutePart = isSegment;
          break;
        case "s":
          this.isSecondsPart = isSegment;
          break;
        default:
          return false;
      }
      return true;
    };
    MaskedDateTime2.prototype.dateAlteration = function(isDecrement) {
      var start = this.parent.inputElement.selectionStart;
      var formatText = "";
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        formatText = this.hiddenMask[start];
      } else {
        return;
      }
      var newDateValue = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      this.previousDate = new Date(this.maskDateValue.getFullYear(), this.maskDateValue.getMonth(), this.maskDateValue.getDate(), this.maskDateValue.getHours(), this.maskDateValue.getMinutes(), this.maskDateValue.getSeconds());
      var incrementValue = isDecrement ? -1 : 1;
      switch (formatText) {
        case "d":
          newDateValue.setDate(newDateValue.getDate() + incrementValue);
          break;
        case "M":
          var newMonth = newDateValue.getMonth() + incrementValue;
          newDateValue.setDate(1);
          newDateValue.setMonth(newMonth);
          if (this.isDayPart) {
            var previousMaxDate = new Date(this.previousDate.getFullYear(), this.previousDate.getMonth() + 1, 0).getDate();
            var currentMaxDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth() + 1, 0).getDate();
            if (this.previousDate.getDate() == previousMaxDate && currentMaxDate <= previousMaxDate) {
              newDateValue.setDate(currentMaxDate);
            } else {
              newDateValue.setDate(this.previousDate.getDate());
            }
          } else {
            newDateValue.setDate(this.previousDate.getDate());
          }
          this.previousDate = new Date(newDateValue.getFullYear(), newDateValue.getMonth(), newDateValue.getDate());
          break;
        case "y":
          newDateValue.setFullYear(newDateValue.getFullYear() + incrementValue);
          break;
        case "H":
        case "h":
          newDateValue.setHours(newDateValue.getHours() + incrementValue);
          break;
        case "m":
          newDateValue.setMinutes(newDateValue.getMinutes() + incrementValue);
          break;
        case "s":
          newDateValue.setSeconds(newDateValue.getSeconds() + incrementValue);
          break;
        case "a":
          newDateValue.setHours((newDateValue.getHours() + 12) % 24);
          break;
        default:
          break;
      }
      this.maskDateValue = newDateValue.getFullYear() > 0 ? newDateValue : this.maskDateValue;
      if (this.validCharacters.indexOf(this.hiddenMask[start]) !== -1) {
        this.handleDeletion(this.hiddenMask[start], true);
      }
    };
    MaskedDateTime2.prototype.getCulturedValue = function(format) {
      var locale = this.parent.locale;
      var result;
      if (locale === "en" || locale === "en-US") {
        result = getValue(format, getDefaultDateObject());
      } else {
        result = getValue("main." + locale + (".dates.calendars.gregorian." + format), cldrData);
      }
      return result;
    };
    MaskedDateTime2.prototype.getCulturedFormat = function() {
      var formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
      if (this.parent.moduleName == "datepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.format && this.parent.formatString) {
          formatString = this.parent.formatString;
        }
      }
      if (this.parent.moduleName == "datetimepicker") {
        formatString = this.getCulturedValue("dateTimeFormats[availableFormats].yMd").toString();
        if (this.parent.dateTimeFormat) {
          formatString = this.parent.dateTimeFormat;
        }
      }
      if (this.parent.moduleName == "timepicker") {
        formatString = this.parent.cldrTimeFormat();
      }
      return formatString;
    };
    MaskedDateTime2.prototype.clearHandler = function() {
      this.isDayPart = this.isMonthPart = this.isYearPart = this.isHourPart = this.isMinutePart = this.isSecondsPart = false;
      this.updateValue();
    };
    MaskedDateTime2.prototype.updateValue = function() {
      this.monthCharacter = this.periodCharacter = "";
      var inputValue = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = true;
      this.hiddenMask = this.dateformat.replace(this.formatRegex, this.formatCheck());
      this.isHiddenMask = false;
      this.previousHiddenMask = this.hiddenMask;
      this.previousValue = inputValue;
      this.parent.updateInputValue(inputValue);
    };
    MaskedDateTime2.prototype.destroy = function() {
      this.removeEventListener();
    };
    return MaskedDateTime2;
  }()
);

// node_modules/@syncfusion/ej2-react-base/src/component-base.js
var React = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());
var __extends36 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var defaulthtmlkeys = [
  "alt",
  "className",
  "disabled",
  "form",
  "id",
  "readOnly",
  "style",
  "tabIndex",
  "title",
  "type",
  "name",
  "onClick",
  "onFocus",
  "onBlur"
];
var delayUpdate = ["accordion", "tab", "splitter"];
var isColEName2 = new RegExp("]");
var ComponentBase = (
  /** @class */
  function(_super) {
    __extends36(ComponentBase2, _super);
    function ComponentBase2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.attrKeys = [];
      _this.cachedTimeOut = 0;
      _this.isAppendCalled = false;
      _this.initRenderCalled = false;
      _this.isReactForeceUpdate = false;
      _this.isReact = true;
      _this.isshouldComponentUpdateCalled = false;
      return _this;
    }
    ComponentBase2.prototype.componentDidMount = function() {
      this.refreshChild(true);
      this.canDelayUpdate = delayUpdate.indexOf(this.getModuleName()) !== -1;
      this.renderReactComponent();
      if (this.portals && this.portals.length) {
        this.renderReactTemplates();
      }
    };
    ComponentBase2.prototype.componentDidUpdate = function(prev) {
      if (!this.isshouldComponentUpdateCalled && this.initRenderCalled && !this.isReactForeceUpdate) {
        this.isshouldComponentUpdateCalled = true;
        if (prev !== this.props) {
          this.refreshProperties(this.props, true);
        }
      }
    };
    ComponentBase2.prototype.renderReactComponent = function() {
      var ele = this.reactElement;
      if (ele) {
        this.isAppendCalled = true;
        this.appendTo(ele);
      }
    };
    ComponentBase2.prototype.shouldComponentUpdate = function(nextProps) {
      this.isshouldComponentUpdateCalled = true;
      if (!this.initRenderCalled) {
        this.updateProperties(nextProps, true);
        return true;
      }
      if (!this.isAppendCalled) {
        clearTimeout(this.cachedTimeOut);
        this.isAppendCalled = true;
        this.appendTo(this.reactElement);
      }
      this.updateProperties(nextProps);
      return true;
    };
    ComponentBase2.prototype.updateProperties = function(nextProps, silent) {
      var _this = this;
      var dProps = extend({}, nextProps);
      var keys2 = Object.keys(nextProps);
      for (var _i = 0, keys_1 = keys2; _i < keys_1.length; _i++) {
        var propkey = keys_1[_i];
        var isClassName = propkey === "className";
        if (propkey === "children") {
          continue;
        }
        if (!isClassName && !isNullOrUndefined(this.htmlattributes[propkey]) && this.htmlattributes[propkey] !== dProps[propkey]) {
          this.htmlattributes[propkey] = dProps[propkey];
        }
        if (this.compareValues(this.props[propkey], nextProps[propkey])) {
          delete dProps[propkey];
        } else if (this.attrKeys.indexOf(propkey) !== -1) {
          if (isClassName) {
            this.clsName = true;
            var propsClsName = this.props[propkey].split(" ");
            for (var i = 0; i < propsClsName.length; i++) {
              this.element.classList.remove(propsClsName[i]);
            }
            var dpropsClsName = dProps[propkey].split(" ");
            for (var j = 0; j < dpropsClsName.length; j++) {
              this.element.classList.add(dpropsClsName[j]);
            }
          } else if (propkey !== "disabled") {
            delete dProps[propkey];
          }
        } else if (propkey === "value" && nextProps[propkey] === this[propkey]) {
          delete dProps[propkey];
        } else if ((propkey === "valueTemplate" || propkey === "itemTemplate") && nextProps[propkey].toString() === this[propkey].toString()) {
          delete dProps[propkey];
        }
      }
      if (dProps["children"]) {
        delete dProps["children"];
      }
      if (this.initRenderCalled && (this.canDelayUpdate || this.props.delayUpdate)) {
        setTimeout(function() {
          _this.refreshProperties(dProps, nextProps, silent);
        });
      } else {
        this.refreshProperties(dProps, nextProps, silent);
      }
    };
    ComponentBase2.prototype.refreshProperties = function(dProps, nextProps, silent) {
      if (Object.keys(dProps).length) {
        if (!silent) {
          this.processComplexTemplate(dProps, this);
        }
        this.setProperties(dProps, silent);
      }
      this.refreshChild(silent, nextProps);
    };
    ComponentBase2.prototype.processComplexTemplate = function(curObject, context) {
      var compTemplate = context.complexTemplate;
      if (compTemplate) {
        for (var prop in compTemplate) {
          var PropVal = compTemplate[prop];
          if (curObject[prop]) {
            setValue(PropVal, getValue(prop, curObject), curObject);
          }
        }
      }
    };
    ComponentBase2.prototype.getDefaultAttributes = function() {
      var _this = this;
      this.isReact = true;
      var propKeys = Object.keys(this.props);
      var stringValue = ["autocomplete", "dropdownlist", "combobox"];
      if (!this.htmlattributes) {
        this.htmlattributes = {};
      }
      this.attrKeys = defaulthtmlkeys.concat(this.controlAttributes || []);
      for (var _i = 0, propKeys_1 = propKeys; _i < propKeys_1.length; _i++) {
        var prop = propKeys_1[_i];
        if (prop.indexOf("data-") !== -1 || prop.indexOf("aria-") !== -1 || this.attrKeys.indexOf(prop) !== -1) {
          if (this.htmlattributes[prop] !== this.props[prop]) {
            this.htmlattributes[prop] = this.props[prop];
          }
        }
      }
      if (!this.htmlattributes.ref) {
        this.htmlattributes.ref = function(ele) {
          _this.reactElement = ele;
        };
        var keycompoentns = [
          "autocomplete",
          "combobox",
          "dropdownlist",
          "dropdowntree",
          "multiselect",
          "listbox",
          "colorpicker",
          "numerictextbox",
          "textbox",
          "uploader",
          "maskedtextbox",
          "slider",
          "datepicker",
          "datetimepicker",
          "daterangepicker",
          "timepicker",
          "checkbox",
          "switch",
          "radio"
        ];
        if (keycompoentns.indexOf(this.getModuleName()) !== -1) {
          this.htmlattributes.key = "" + ComponentBase2.reactUid;
          ComponentBase2.reactUid++;
        }
      }
      if (this.clsName) {
        var clsList = this.element.classList;
        var className = this.htmlattributes["className"];
        for (var i = 0; i < clsList.length; i++) {
          if (className.indexOf(clsList[i]) == -1) {
            this.htmlattributes["className"] = this.htmlattributes["className"] + " " + clsList[i];
          }
        }
        this.clsName = false;
      }
      return this.htmlattributes;
    };
    ComponentBase2.prototype.trigger = function(eventName, eventProp, successHandler) {
      var _this = this;
      if (this.isDestroyed !== true && this.modelObserver) {
        if (isColEName2.test(eventName)) {
          var handler = getValue(eventName, this);
          if (handler) {
            handler.call(this, eventProp);
            if (successHandler) {
              successHandler.call(this, eventProp);
            }
          } else if (successHandler) {
            successHandler.call(this, eventProp);
          }
        }
        if (eventName === "change" || eventName === "input") {
          if (this.props.onChange && eventProp.event) {
            this.props.onChange.call(void 0, {
              syntheticEvent: eventProp.event,
              nativeEvent: { text: eventProp.value },
              value: eventProp.value,
              target: this
            });
          }
        }
        var prevDetection = this.isProtectedOnChange;
        this.isProtectedOnChange = false;
        if (eventName === "created") {
          setTimeout(function() {
            if (!_this.isDestroyed) {
              _this.modelObserver.notify(eventName, eventProp, successHandler);
            }
          });
        } else {
          this.modelObserver.notify(eventName, eventProp, successHandler);
        }
        this.isProtectedOnChange = prevDetection;
      }
    };
    ComponentBase2.prototype.compareValues = function(value1, value2) {
      var typeVal = typeof value1;
      var typeVal2 = typeof value2;
      if (typeVal === typeVal2) {
        if (value1 === value2) {
          return true;
        }
        if ((!isNullOrUndefined(value1) && value1.constructor) !== (!isNullOrUndefined(value2) && value2.constructor)) {
          return false;
        }
        if (value1 instanceof Date || value1 instanceof RegExp || value1 instanceof String || value1 instanceof Number) {
          return value1.toString() === value2.toString();
        }
        if (isObject(value1) || Array.isArray(value1)) {
          var tempVal = value1;
          var tempVal2 = value2;
          if (isObject(tempVal)) {
            tempVal = [value1];
            tempVal2 = [value2];
          }
          return this.compareObjects(tempVal, tempVal2).status;
        }
      }
      return false;
    };
    ComponentBase2.prototype.compareObjects = function(oldProps, newProps, propName) {
      var status = true;
      var lenSimilarity = oldProps.length === newProps.length;
      var diffArray = [];
      if (lenSimilarity) {
        for (var i = 0, len = newProps.length; i < len; i++) {
          var curObj = {};
          var oldProp = oldProps[i];
          var newProp = newProps[i];
          var keys2 = Object.keys(newProp);
          if (keys2.length !== 0) {
            for (var _i = 0, keys_2 = keys2; _i < keys_2.length; _i++) {
              var key = keys_2[_i];
              var oldValue = oldProp[key];
              var newValue = newProp[key];
              if (key === "items") {
                for (var _j = 0; _j < newValue.length; _j++) {
                  if (this.getModuleName() === "richtexteditor" && typeof newValue[_j] === "object") {
                    return { status: true };
                  }
                }
              }
              if (this.getModuleName() === "grid" && key === "field") {
                curObj[key] = newValue;
              }
              if (!oldProp.hasOwnProperty(key) || !this.compareValues(oldValue, newValue)) {
                if (!propName) {
                  return { status: false };
                }
                status = false;
                curObj[key] = newValue;
              }
            }
          } else {
            if (!propName) {
              return { status: false };
            }
            status = false;
          }
          if (Object.keys(curObj).length) {
            diffArray.push({ index: i, value: curObj, key: propName });
          }
        }
      } else {
        status = false;
      }
      return { status, changedProperties: diffArray };
    };
    ComponentBase2.prototype.refreshChild = function(silent, props) {
      if (this.checkInjectedModules) {
        var prevModule = this.getInjectedModules() || [];
        var curModule = this.getInjectedServices() || [];
        for (var _i = 0, curModule_1 = curModule; _i < curModule_1.length; _i++) {
          var mod = curModule_1[_i];
          if (prevModule.indexOf(mod) === -1) {
            prevModule.push(mod);
          }
        }
        this.injectedModules = prevModule;
      }
      if (this.directivekeys) {
        var changedProps = [];
        var directiveValue = this.validateChildren({}, this.directivekeys, props || this.props);
        if (directiveValue && Object.keys(directiveValue).length) {
          if (!silent && this.skipRefresh) {
            for (var _a = 0, _b = this.skipRefresh; _a < _b.length; _a++) {
              var fields = _b[_a];
              delete directiveValue[fields];
            }
          }
          if (this.prevProperties) {
            var dKeys = Object.keys(this.prevProperties);
            for (var i = 0; i < dKeys.length; i++) {
              var key = dKeys[i];
              if (!directiveValue.hasOwnProperty(key)) {
                continue;
              }
              var compareOutput = this.compareObjects(this.prevProperties[key], directiveValue[key], key);
              if (compareOutput.status) {
                delete directiveValue[key];
              } else {
                if (compareOutput.changedProperties.length) {
                  changedProps = changedProps.concat(compareOutput.changedProperties);
                }
                var obj = {};
                obj[key] = directiveValue[key];
                this.prevProperties = extend(this.prevProperties, obj);
              }
            }
          } else {
            this.prevProperties = extend({}, directiveValue, {}, true);
          }
          if (changedProps.length) {
            if (this.getModuleName() === "grid" && key === "columns") {
              for (var _c1 = 0, allColumns = this.columns; _c1 < allColumns.length; _c1++) {
                var compareField1 = getValue("field", allColumns[_c1]);
                var compareField2 = getValue(_c1 + ".value.field", changedProps);
                if (compareField1 === compareField2) {
                  var propInstance = getValue(changedProps[_c1].key + "." + changedProps[_c1].index, this);
                  if (propInstance && propInstance.setProperties) {
                    propInstance.setProperties(changedProps[_c1].value);
                  } else {
                    extend(propInstance, changedProps[_c1].value);
                  }
                }
              }
            } else {
              for (var _c = 0, changedProps_1 = changedProps; _c < changedProps_1.length; _c++) {
                var changes = changedProps_1[_c];
                var propInstance_1 = getValue(changes.key + "." + changes.index, this);
                if (propInstance_1 && propInstance_1.setProperties) {
                  propInstance_1.setProperties(changes.value);
                } else {
                  extend(propInstance_1, changes.value);
                }
              }
            }
          } else {
            this.setProperties(directiveValue, silent);
          }
        }
      }
    };
    ComponentBase2.prototype.componentWillUnmount = function() {
      clearTimeout(this.cachedTimeOut);
      var modulesName = ["dropdowntree", "checkbox"];
      if (this.initRenderCalled && this.isAppendCalled && this.element && !modulesName.indexOf(this.getModuleName()) ? document.body.contains(this.element) : !this.isDestroyed) {
        this.destroy();
      }
    };
    ComponentBase2.prototype.appendReactElement = function(element2, container) {
      ReactDOM.render(ReactDOM.createPortal(element2, container), container);
    };
    ;
    ComponentBase2.prototype.renderReactTemplates = function(callback) {
      this.isReactForeceUpdate = true;
      if (callback) {
        this.forceUpdate(callback);
      } else {
        this.forceUpdate();
      }
      this.isReactForeceUpdate = false;
    };
    ;
    ComponentBase2.prototype.clearTemplate = function(templateNames, index, callback) {
      var _this = this;
      var tempPortal = [];
      if (templateNames && templateNames.length) {
        Array.prototype.forEach.call(templateNames, function(propName) {
          var indexCount = 0;
          var propIndexCount = 0;
          _this.portals.forEach(function(portal) {
            if (portal.propName === propName) {
              tempPortal.push(propIndexCount);
              propIndexCount++;
            }
          });
          if (index && _this.portals[tempPortal[index[indexCount]]].propName == propName) {
            _this.portals.splice(index, 1);
            indexCount++;
          } else {
            for (var i = 0; i < _this.portals.length; i++) {
              if (_this.portals[i].propName == propName) {
                _this.portals.splice(i, 1);
                i--;
              }
            }
          }
        });
      } else {
        this.portals = [];
      }
      this.renderReactTemplates(callback);
    };
    ;
    ComponentBase2.prototype.validateChildren = function(childCache, mapper3, props) {
      var flag = false;
      var childs = React.Children.toArray(props.children);
      for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
        var child = childs_1[_i];
        var ifield = this.getChildType(child);
        var key = mapper3[ifield];
        if (ifield && mapper3) {
          var childProps = this.getChildProps(React.Children.toArray(child.props.children), key);
          if (childProps.length) {
            flag = true;
            childCache[child.type.propertyName || ifield] = childProps;
          }
        }
      }
      if (flag) {
        return childCache;
      }
      return null;
    };
    ComponentBase2.prototype.getChildType = function(child) {
      if (child.type && child.type.isDirective) {
        return child.type.moduleName || "";
      }
      return "";
    };
    ComponentBase2.prototype.getChildProps = function(subChild, matcher) {
      var ret = [];
      for (var _i = 0, subChild_1 = subChild; _i < subChild_1.length; _i++) {
        var child = subChild_1[_i];
        var accessProp = false;
        var key = void 0;
        if (typeof matcher === "string") {
          accessProp = true;
          key = matcher;
        } else {
          key = Object.keys(matcher)[0];
        }
        var prop = child.props;
        var field = this.getChildType(child);
        if (field === key) {
          if (accessProp || !prop.children) {
            var cacheVal = extend({}, prop, {}, true);
            this.processComplexTemplate(cacheVal, child.type);
            ret.push(cacheVal);
          } else {
            var cachedValue = this.validateChildren(extend({}, prop), matcher[key], prop) || prop;
            if (cachedValue["children"]) {
              delete cachedValue["children"];
            }
            this.processComplexTemplate(cachedValue, child.type);
            ret.push(cachedValue);
          }
        }
      }
      return ret;
    };
    ComponentBase2.prototype.getInjectedServices = function() {
      var childs = React.Children.toArray(this.props.children);
      for (var _i = 0, childs_2 = childs; _i < childs_2.length; _i++) {
        var child = childs_2[_i];
        if (child.type.isService) {
          return child.props.services;
        }
      }
      return [];
    };
    ComponentBase2.reactUid = 1;
    return ComponentBase2;
  }(React.Component)
);

// node_modules/@syncfusion/ej2-react-base/src/util.js
function applyMixins(derivedClass, baseClass) {
  baseClass.forEach(function(baseClass2) {
    Object.getOwnPropertyNames(baseClass2.prototype).forEach(function(name) {
      if (name !== "isMounted" && name !== "replaceState") {
        derivedClass.prototype[name] = baseClass2.prototype[name];
      }
    });
  });
}

// node_modules/@syncfusion/ej2-react-base/src/complex-base.js
var React2 = __toESM(require_react());
var __extends37 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var ComplexBase = (
  /** @class */
  function(_super) {
    __extends37(ComplexBase2, _super);
    function ComplexBase2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ComplexBase2.prototype.render = function() {
      return null;
    };
    ComplexBase2.isDirective = true;
    return ComplexBase2;
  }(React2.PureComponent)
);

// node_modules/@syncfusion/ej2-react-base/src/services.js
var React3 = __toESM(require_react());
var __extends38 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var Inject = (
  /** @class */
  function(_super) {
    __extends38(Inject2, _super);
    function Inject2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Inject2.prototype.render = function() {
      return null;
    };
    Inject2.isService = true;
    return Inject2;
  }(React3.PureComponent)
);

// node_modules/@syncfusion/ej2-react-base/src/template.js
var ReactDOM2 = __toESM(require_react_dom());
var React4 = __toESM(require_react());
var stringCompiler = getTemplateEngine();
function compile3(templateElement, helper) {
  if (typeof templateElement === "string") {
    return stringCompiler(templateElement, helper);
  } else {
    return function(data, component, prop, element2) {
      var actTemplate = templateElement;
      var actData = data;
      if (typeof actTemplate === "object") {
        actTemplate = templateElement.template;
        actData = extend({}, data, templateElement.data || {});
      }
      var cEle;
      if (element2) {
        cEle = element2;
      } else {
        cEle = document.createElement("div");
      }
      if (component && component.isLegacyTemplate) {
        ReactDOM2.render(actTemplate(actData), cEle);
        if (!element2) {
          detach(cEle);
        }
      } else {
        var rele = React4.createElement(actTemplate, actData);
        var portal = ReactDOM2.createPortal(rele, cEle);
        portal.propName = prop;
        if (!component.portals) {
          component.portals = [portal];
        } else {
          component.portals.push(portal);
        }
      }
      if (!element2) {
        return [cEle];
      }
    };
  }
}
setTemplateEngine({ compile: compile3 });

// node_modules/@syncfusion/ej2-react-calendars/src/calendar/calendar.component.js
var __extends39 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var CalendarComponent = (
  /** @class */
  function(_super) {
    __extends39(CalendarComponent2, _super);
    function CalendarComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.initRenderCalled = false;
      _this.checkInjectedModules = true;
      _this.immediateRender = true;
      _this.portals = [];
      return _this;
    }
    CalendarComponent2.prototype.render = function() {
      if ((this.element && !this.initRenderCalled || this.refreshing) && !this.isReactForeceUpdate) {
        _super.prototype.render.call(this);
        this.initRenderCalled = true;
      } else {
        return React5.createElement("div", this.getDefaultAttributes(), [].concat(this.props.children, this.portals));
      }
    };
    return CalendarComponent2;
  }(Calendar)
);
applyMixins(CalendarComponent, [ComponentBase, React5.Component]);

// node_modules/@syncfusion/ej2-react-calendars/src/datepicker/datepicker.component.js
var React6 = __toESM(require_react());
var __extends40 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DatePickerComponent = (
  /** @class */
  function(_super) {
    __extends40(DatePickerComponent2, _super);
    function DatePickerComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.initRenderCalled = false;
      _this.checkInjectedModules = true;
      _this.immediateRender = true;
      _this.portals = [];
      return _this;
    }
    DatePickerComponent2.prototype.render = function() {
      if ((this.element && !this.initRenderCalled || this.refreshing) && !this.isReactForeceUpdate) {
        _super.prototype.render.call(this);
        this.initRenderCalled = true;
      } else {
        return React6.createElement(React6.Fragment, null, [].concat(React6.createElement("input", this.getDefaultAttributes()), this.portals));
      }
    };
    return DatePickerComponent2;
  }(DatePicker)
);
applyMixins(DatePickerComponent, [ComponentBase, React6.Component]);

// node_modules/@syncfusion/ej2-react-calendars/src/timepicker/timepicker.component.js
var React7 = __toESM(require_react());
var __extends41 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var TimePickerComponent = (
  /** @class */
  function(_super) {
    __extends41(TimePickerComponent2, _super);
    function TimePickerComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.initRenderCalled = false;
      _this.checkInjectedModules = true;
      _this.immediateRender = true;
      _this.portals = [];
      return _this;
    }
    TimePickerComponent2.prototype.render = function() {
      if ((this.element && !this.initRenderCalled || this.refreshing) && !this.isReactForeceUpdate) {
        _super.prototype.render.call(this);
        this.initRenderCalled = true;
      } else {
        return React7.createElement(React7.Fragment, null, [].concat(React7.createElement("input", this.getDefaultAttributes()), this.portals));
      }
    };
    return TimePickerComponent2;
  }(TimePicker)
);
applyMixins(TimePickerComponent, [ComponentBase, React7.Component]);

// node_modules/@syncfusion/ej2-react-calendars/src/daterangepicker/presets-directive.js
var __extends42 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var PresetDirective = (
  /** @class */
  function(_super) {
    __extends42(PresetDirective2, _super);
    function PresetDirective2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PresetDirective2.moduleName = "preset";
    return PresetDirective2;
  }(ComplexBase)
);
var PresetsDirective = (
  /** @class */
  function(_super) {
    __extends42(PresetsDirective2, _super);
    function PresetsDirective2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    PresetsDirective2.propertyName = "presets";
    PresetsDirective2.moduleName = "presets";
    return PresetsDirective2;
  }(ComplexBase)
);

// node_modules/@syncfusion/ej2-react-calendars/src/daterangepicker/daterangepicker.component.js
var React8 = __toESM(require_react());
var __extends43 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DateRangePickerComponent = (
  /** @class */
  function(_super) {
    __extends43(DateRangePickerComponent2, _super);
    function DateRangePickerComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.initRenderCalled = false;
      _this.checkInjectedModules = false;
      _this.directivekeys = { "presets": "preset" };
      _this.immediateRender = false;
      _this.portals = [];
      return _this;
    }
    DateRangePickerComponent2.prototype.render = function() {
      if ((this.element && !this.initRenderCalled || this.refreshing) && !this.isReactForeceUpdate) {
        _super.prototype.render.call(this);
        this.initRenderCalled = true;
      } else {
        return React8.createElement(React8.Fragment, null, [].concat(React8.createElement("input", this.getDefaultAttributes()), this.portals));
      }
    };
    return DateRangePickerComponent2;
  }(DateRangePicker)
);
applyMixins(DateRangePickerComponent, [ComponentBase, React8.Component]);

// node_modules/@syncfusion/ej2-react-calendars/src/datetimepicker/datetimepicker.component.js
var React9 = __toESM(require_react());
var __extends44 = /* @__PURE__ */ function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var DateTimePickerComponent = (
  /** @class */
  function(_super) {
    __extends44(DateTimePickerComponent2, _super);
    function DateTimePickerComponent2(props) {
      var _this = _super.call(this, props) || this;
      _this.initRenderCalled = false;
      _this.checkInjectedModules = true;
      _this.immediateRender = true;
      _this.portals = [];
      return _this;
    }
    DateTimePickerComponent2.prototype.render = function() {
      if ((this.element && !this.initRenderCalled || this.refreshing) && !this.isReactForeceUpdate) {
        _super.prototype.render.call(this);
        this.initRenderCalled = true;
      } else {
        return React9.createElement(React9.Fragment, null, [].concat(React9.createElement("input", this.getDefaultAttributes()), this.portals));
      }
    };
    return DateTimePickerComponent2;
  }(DateTimePicker)
);
applyMixins(DateTimePickerComponent, [ComponentBase, React9.Component]);
export {
  Calendar,
  CalendarBase,
  CalendarComponent,
  DatePicker,
  DatePickerComponent,
  DateRangePicker,
  DateRangePickerComponent,
  DateTimePicker,
  DateTimePickerComponent,
  Inject,
  Islamic,
  MaskedDateTime,
  PresetDirective,
  Presets,
  PresetsDirective,
  TimeMaskPlaceholder,
  TimePicker,
  TimePickerBase,
  TimePickerComponent
};
//# sourceMappingURL=@syncfusion_ej2-react-calendars.js.map
